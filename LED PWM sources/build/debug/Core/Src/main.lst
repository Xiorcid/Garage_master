ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB221:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** TIM_HandleTypeDef htim17;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart2;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  48:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_tx;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/main.c **** void SystemClock_Config(void);
  56:Core/Src/main.c **** static void MX_GPIO_Init(void);
  57:Core/Src/main.c **** static void MX_DMA_Init(void);
  58:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  59:Core/Src/main.c **** static void MX_TIM17_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** uint8_t rx_buff[10];
  67:Core/Src/main.c **** /* USER CODE END 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /**
  70:Core/Src/main.c ****   * @brief  The application entry point.
  71:Core/Src/main.c ****   * @retval int
  72:Core/Src/main.c ****   */
  73:Core/Src/main.c **** int main(void)
  74:Core/Src/main.c **** {
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE END 1 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:Core/Src/main.c ****   HAL_Init();
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END Init */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* Configure the system clock */
  90:Core/Src/main.c ****   SystemClock_Config();
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 3


  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END SysInit */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Initialize all configured peripherals */
  97:Core/Src/main.c ****   MX_GPIO_Init();
  98:Core/Src/main.c ****   MX_DMA_Init();
  99:Core/Src/main.c ****   MX_USART2_UART_Init();
 100:Core/Src/main.c ****   MX_TIM17_Init();
 101:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 102:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart2, rx_buff, 10);
 103:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 104:Core/Src/main.c ****   TIM17->CCR1 = 128;
 105:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 106:Core/Src/main.c ****   /* USER CODE END 2 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* Infinite loop */
 109:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 110:Core/Src/main.c ****   while (1)
 111:Core/Src/main.c ****   {
 112:Core/Src/main.c ****     /* USER CODE END WHILE */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 115:Core/Src/main.c ****   }
 116:Core/Src/main.c ****   /* USER CODE END 3 */
 117:Core/Src/main.c **** }
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /**
 120:Core/Src/main.c ****   * @brief System Clock Configuration
 121:Core/Src/main.c ****   * @retval None
 122:Core/Src/main.c ****   */
 123:Core/Src/main.c **** void SystemClock_Config(void)
 124:Core/Src/main.c **** {
 125:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 126:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 129:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 130:Core/Src/main.c ****   */
 131:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 133:Core/Src/main.c ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 134:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 135:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 136:Core/Src/main.c ****   {
 137:Core/Src/main.c ****     Error_Handler();
 138:Core/Src/main.c ****   }
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 143:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 144:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 145:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 146:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 147:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 150:Core/Src/main.c ****   {
 151:Core/Src/main.c ****     Error_Handler();
 152:Core/Src/main.c ****   }
 153:Core/Src/main.c **** }
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /**
 156:Core/Src/main.c ****   * @brief TIM17 Initialization Function
 157:Core/Src/main.c ****   * @param None
 158:Core/Src/main.c ****   * @retval None
 159:Core/Src/main.c ****   */
 160:Core/Src/main.c **** static void MX_TIM17_Init(void)
 161:Core/Src/main.c **** {
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /* USER CODE BEGIN TIM17_Init 0 */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /* USER CODE END TIM17_Init 0 */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 168:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN TIM17_Init 1 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* USER CODE END TIM17_Init 1 */
 173:Core/Src/main.c ****   htim17.Instance = TIM17;
 174:Core/Src/main.c ****   htim17.Init.Prescaler = 95;
 175:Core/Src/main.c ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 176:Core/Src/main.c ****   htim17.Init.Period = 254;
 177:Core/Src/main.c ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 178:Core/Src/main.c ****   htim17.Init.RepetitionCounter = 0;
 179:Core/Src/main.c ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 180:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 181:Core/Src/main.c ****   {
 182:Core/Src/main.c ****     Error_Handler();
 183:Core/Src/main.c ****   }
 184:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     Error_Handler();
 187:Core/Src/main.c ****   }
 188:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 189:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 190:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 191:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 192:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 193:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 194:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 195:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 196:Core/Src/main.c ****   {
 197:Core/Src/main.c ****     Error_Handler();
 198:Core/Src/main.c ****   }
 199:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 200:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 201:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 202:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 203:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 204:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 5


 205:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 206:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 207:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 208:Core/Src/main.c ****   {
 209:Core/Src/main.c ****     Error_Handler();
 210:Core/Src/main.c ****   }
 211:Core/Src/main.c ****   /* USER CODE BEGIN TIM17_Init 2 */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE END TIM17_Init 2 */
 214:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim17);
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** }
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** /**
 219:Core/Src/main.c ****   * @brief USART2 Initialization Function
 220:Core/Src/main.c ****   * @param None
 221:Core/Src/main.c ****   * @retval None
 222:Core/Src/main.c ****   */
 223:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 224:Core/Src/main.c **** {
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 233:Core/Src/main.c ****   huart2.Instance = USART2;
 234:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 235:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 236:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 237:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 238:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 239:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 240:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 241:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 242:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 243:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 244:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 245:Core/Src/main.c ****   {
 246:Core/Src/main.c ****     Error_Handler();
 247:Core/Src/main.c ****   }
 248:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** }
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** /**
 255:Core/Src/main.c ****   * Enable DMA controller clock
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c **** static void MX_DMA_Init(void)
 258:Core/Src/main.c **** {
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   /* DMA controller clock enable */
 261:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 6


 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* DMA interrupt init */
 264:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 265:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 266:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 267:Core/Src/main.c ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 268:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 269:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 270:Core/Src/main.c **** 
 271:Core/Src/main.c **** }
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** /**
 274:Core/Src/main.c ****   * @brief GPIO Initialization Function
 275:Core/Src/main.c ****   * @param None
 276:Core/Src/main.c ****   * @retval None
 277:Core/Src/main.c ****   */
 278:Core/Src/main.c **** static void MX_GPIO_Init(void)
 279:Core/Src/main.c **** {
  26              		.loc 1 279 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              		.cfi_def_cfa_offset 40
 280:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  37              		.loc 1 280 3 view .LVU1
  38              		.loc 1 280 20 is_stmt 0 view .LVU2
  39 0004 1422     		movs	r2, #20
  40 0006 0021     		movs	r1, #0
  41 0008 01A8     		add	r0, sp, #4
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
 281:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 282:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 285:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  44              		.loc 1 285 3 is_stmt 1 view .LVU3
  45              	.LBB4:
  46              		.loc 1 285 3 view .LVU4
  47              		.loc 1 285 3 view .LVU5
  48 000e 0E4B     		ldr	r3, .L2
  49 0010 5A6B     		ldr	r2, [r3, #52]
  50 0012 0124     		movs	r4, #1
  51 0014 2243     		orrs	r2, r4
  52 0016 5A63     		str	r2, [r3, #52]
  53              		.loc 1 285 3 view .LVU6
  54 0018 5B6B     		ldr	r3, [r3, #52]
  55 001a 2340     		ands	r3, r4
  56 001c 0093     		str	r3, [sp]
  57              		.loc 1 285 3 view .LVU7
  58 001e 009B     		ldr	r3, [sp]
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 7


  59              	.LBE4:
  60              		.loc 1 285 3 view .LVU8
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 288:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  61              		.loc 1 288 3 view .LVU9
  62 0020 A025     		movs	r5, #160
  63 0022 ED05     		lsls	r5, r5, #23
  64 0024 0022     		movs	r2, #0
  65 0026 1021     		movs	r1, #16
  66 0028 2800     		movs	r0, r5
  67 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
  68              	.LVL1:
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /*Configure GPIO pin : LED_Pin */
 291:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin;
  69              		.loc 1 291 3 view .LVU10
  70              		.loc 1 291 23 is_stmt 0 view .LVU11
  71 002e 1023     		movs	r3, #16
  72 0030 0193     		str	r3, [sp, #4]
 292:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  73              		.loc 1 292 3 is_stmt 1 view .LVU12
  74              		.loc 1 292 24 is_stmt 0 view .LVU13
  75 0032 0294     		str	r4, [sp, #8]
 293:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  76              		.loc 1 293 3 is_stmt 1 view .LVU14
  77              		.loc 1 293 24 is_stmt 0 view .LVU15
  78 0034 0023     		movs	r3, #0
  79 0036 0393     		str	r3, [sp, #12]
 294:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 294 3 is_stmt 1 view .LVU16
  81              		.loc 1 294 25 is_stmt 0 view .LVU17
  82 0038 0493     		str	r3, [sp, #16]
 295:Core/Src/main.c ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
  83              		.loc 1 295 3 is_stmt 1 view .LVU18
  84 003a 01A9     		add	r1, sp, #4
  85 003c 2800     		movs	r0, r5
  86 003e FFF7FEFF 		bl	HAL_GPIO_Init
  87              	.LVL2:
 296:Core/Src/main.c **** 
 297:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 298:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 299:Core/Src/main.c **** }
  88              		.loc 1 299 1 is_stmt 0 view .LVU19
  89 0042 07B0     		add	sp, sp, #28
  90              		@ sp needed
  91 0044 30BD     		pop	{r4, r5, pc}
  92              	.L3:
  93 0046 C046     		.align	2
  94              	.L2:
  95 0048 00100240 		.word	1073876992
  96              		.cfi_endproc
  97              	.LFE221:
  99              		.section	.text.MX_DMA_Init,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.code	16
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 8


 103              		.thumb_func
 105              	MX_DMA_Init:
 106              	.LFB220:
 258:Core/Src/main.c **** 
 107              		.loc 1 258 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111 0000 00B5     		push	{lr}
 112              		.cfi_def_cfa_offset 4
 113              		.cfi_offset 14, -4
 114 0002 83B0     		sub	sp, sp, #12
 115              		.cfi_def_cfa_offset 16
 261:Core/Src/main.c **** 
 116              		.loc 1 261 3 view .LVU21
 117              	.LBB5:
 261:Core/Src/main.c **** 
 118              		.loc 1 261 3 view .LVU22
 261:Core/Src/main.c **** 
 119              		.loc 1 261 3 view .LVU23
 120 0004 0D4A     		ldr	r2, .L5
 121 0006 916B     		ldr	r1, [r2, #56]
 122 0008 0123     		movs	r3, #1
 123 000a 1943     		orrs	r1, r3
 124 000c 9163     		str	r1, [r2, #56]
 261:Core/Src/main.c **** 
 125              		.loc 1 261 3 view .LVU24
 126 000e 926B     		ldr	r2, [r2, #56]
 127 0010 1340     		ands	r3, r2
 128 0012 0193     		str	r3, [sp, #4]
 261:Core/Src/main.c **** 
 129              		.loc 1 261 3 view .LVU25
 130 0014 019B     		ldr	r3, [sp, #4]
 131              	.LBE5:
 261:Core/Src/main.c **** 
 132              		.loc 1 261 3 view .LVU26
 265:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 133              		.loc 1 265 3 view .LVU27
 134 0016 0022     		movs	r2, #0
 135 0018 0021     		movs	r1, #0
 136 001a 0920     		movs	r0, #9
 137 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 138              	.LVL3:
 266:Core/Src/main.c ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 139              		.loc 1 266 3 view .LVU28
 140 0020 0920     		movs	r0, #9
 141 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 142              	.LVL4:
 268:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 143              		.loc 1 268 3 view .LVU29
 144 0026 0022     		movs	r2, #0
 145 0028 0021     		movs	r1, #0
 146 002a 0A20     		movs	r0, #10
 147 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 148              	.LVL5:
 269:Core/Src/main.c **** 
 149              		.loc 1 269 3 view .LVU30
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 9


 150 0030 0A20     		movs	r0, #10
 151 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 152              	.LVL6:
 271:Core/Src/main.c **** 
 153              		.loc 1 271 1 is_stmt 0 view .LVU31
 154 0036 03B0     		add	sp, sp, #12
 155              		@ sp needed
 156 0038 00BD     		pop	{pc}
 157              	.L6:
 158 003a C046     		.align	2
 159              	.L5:
 160 003c 00100240 		.word	1073876992
 161              		.cfi_endproc
 162              	.LFE220:
 164              		.global	__aeabi_uidiv
 165              		.global	__aeabi_idiv
 166              		.section	.rodata.HAL_UART_RxCpltCallback.str1.4,"aMS",%progbits,1
 167              		.align	2
 168              	.LC5:
 169 0000 4F4B3230 		.ascii	"OK20X400Y%\000"
 169      58343030 
 169      592500
 170 000b 00       		.align	2
 171              	.LC1:
 172 000c 4C533058 		.ascii	"LS0X100Y%\000"
 172      31303059 
 172      2500
 173 0016 0000     		.align	2
 174              	.LC3:
 175 0018 23232323 		.ascii	"##########\000"
 175      23232323 
 175      232300
 176              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 177              		.align	1
 178              		.global	HAL_UART_RxCpltCallback
 179              		.syntax unified
 180              		.code	16
 181              		.thumb_func
 183              	HAL_UART_RxCpltCallback:
 184              	.LVL7:
 185              	.LFB222:
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 302:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 186              		.loc 1 302 56 is_stmt 1 view -0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 32
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		.loc 1 302 56 is_stmt 0 view .LVU33
 191 0000 10B5     		push	{r4, lr}
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 4, -8
 194              		.cfi_offset 14, -4
 195 0002 88B0     		sub	sp, sp, #32
 196              		.cfi_def_cfa_offset 40
 303:Core/Src/main.c **** 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 197              		.loc 1 303 2 is_stmt 1 view .LVU34
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 10


 198 0004 A020     		movs	r0, #160
 199              	.LVL8:
 200              		.loc 1 303 2 is_stmt 0 view .LVU35
 201 0006 1021     		movs	r1, #16
 202 0008 C005     		lsls	r0, r0, #23
 203 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 204              	.LVL9:
 304:Core/Src/main.c ****   uint8_t rx_buff[10];
 205              		.loc 1 304 3 is_stmt 1 view .LVU36
 305:Core/Src/main.c **** 	HAL_UART_Receive_DMA(&huart2, rx_buff, 10);
 206              		.loc 1 305 2 view .LVU37
 207 000e 05AC     		add	r4, sp, #20
 208 0010 2848     		ldr	r0, .L13
 209 0012 0A22     		movs	r2, #10
 210 0014 2100     		movs	r1, r4
 211 0016 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 212              	.LVL10:
 306:Core/Src/main.c **** 	if (rx_buff[0] == 84){
 213              		.loc 1 306 2 view .LVU38
 214              		.loc 1 306 13 is_stmt 0 view .LVU39
 215 001a 2378     		ldrb	r3, [r4]
 216              		.loc 1 306 5 view .LVU40
 217 001c 542B     		cmp	r3, #84
 218 001e 20D0     		beq	.L11
 307:Core/Src/main.c ****     // LS0X100Y%
 308:Core/Src/main.c **** 		uint8_t tx_buff[10] = {76, 83, 48, 88, 49, 48, 48, 89, 37, 0};
 309:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 310:Core/Src/main.c **** 	}else if (rx_buff[0] == 71){
 219              		.loc 1 310 8 is_stmt 1 view .LVU41
 220              		.loc 1 310 11 is_stmt 0 view .LVU42
 221 0020 472B     		cmp	r3, #71
 222 0022 2AD0     		beq	.L12
 223              	.LBB6:
 311:Core/Src/main.c **** 	  char buf[10] = {35,35,35,35,35,35,35,35,35,35};
 312:Core/Src/main.c **** 	  uint16_t proc_val = (int)((TIM17->CCR1 - 1000) * (100 - 0) / (2500 - 1000) + 0);
 313:Core/Src/main.c **** 	  itoa(proc_val, buf, 10);
 314:Core/Src/main.c **** 	  HAL_UART_Transmit_DMA(&huart2, buf, 10);
 315:Core/Src/main.c ****   }else{
 316:Core/Src/main.c ****     uint8_t pwm[3];
 224              		.loc 1 316 5 is_stmt 1 view .LVU43
 317:Core/Src/main.c **** 	  memcpy(pwm, rx_buff, 3);
 225              		.loc 1 317 4 view .LVU44
 226 0024 05AB     		add	r3, sp, #20
 227 0026 1A88     		ldrh	r2, [r3]
 228 0028 6946     		mov	r1, sp
 229 002a 8A80     		strh	r2, [r1, #4]
 230 002c 9B78     		ldrb	r3, [r3, #2]
 231 002e 8B71     		strb	r3, [r1, #6]
 318:Core/Src/main.c **** 	  uint16_t val = (atoi(pwm) - 0) * (255 - 0) / (100 - 0) + 0;
 232              		.loc 1 318 4 view .LVU45
 233              		.loc 1 318 30 is_stmt 0 view .LVU46
 234 0030 01A8     		add	r0, sp, #4
 235 0032 FFF7FEFF 		bl	atoi
 236              	.LVL11:
 237              		.loc 1 318 35 discriminator 1 view .LVU47
 238 0036 0302     		lsls	r3, r0, #8
 239 0038 181A     		subs	r0, r3, r0
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 11


 240              		.loc 1 318 59 discriminator 1 view .LVU48
 241 003a 6421     		movs	r1, #100
 242 003c FFF7FEFF 		bl	__aeabi_idiv
 243              	.LVL12:
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** 	  TIM17->CCR1 = val;
 244              		.loc 1 320 4 is_stmt 1 view .LVU49
 245              		.loc 1 320 16 is_stmt 0 view .LVU50
 246 0040 0004     		lsls	r0, r0, #16
 247              	.LVL13:
 248              		.loc 1 320 16 view .LVU51
 249 0042 000C     		lsrs	r0, r0, #16
 250 0044 1C4B     		ldr	r3, .L13+4
 251 0046 5863     		str	r0, [r3, #52]
 321:Core/Src/main.c **** 	  uint8_t buff[10] = {79, 75, 50, 48, 88, 52, 48, 48, 89, 37};
 252              		.loc 1 321 4 is_stmt 1 view .LVU52
 253              		.loc 1 321 12 is_stmt 0 view .LVU53
 254 0048 02A9     		add	r1, sp, #8
 255 004a 1C4B     		ldr	r3, .L13+8
 256 004c 0A00     		movs	r2, r1
 257 004e 11CB     		ldmia	r3!, {r0, r4}
 258 0050 11C2     		stmia	r2!, {r0, r4}
 259 0052 1B88     		ldrh	r3, [r3]
 260 0054 1380     		strh	r3, [r2]
 322:Core/Src/main.c **** 	  HAL_UART_Transmit_DMA(&huart2, &buff, 10);
 261              		.loc 1 322 4 is_stmt 1 view .LVU54
 262 0056 1748     		ldr	r0, .L13
 263 0058 0A22     		movs	r2, #10
 264 005a FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 265              	.LVL14:
 266              	.L7:
 267              		.loc 1 322 4 is_stmt 0 view .LVU55
 268              	.LBE6:
 323:Core/Src/main.c **** 	}
 324:Core/Src/main.c **** }
 269              		.loc 1 324 1 view .LVU56
 270 005e 08B0     		add	sp, sp, #32
 271              		@ sp needed
 272 0060 10BD     		pop	{r4, pc}
 273              	.L11:
 274              	.LBB7:
 308:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 275              		.loc 1 308 3 is_stmt 1 view .LVU57
 308:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 276              		.loc 1 308 11 is_stmt 0 view .LVU58
 277 0062 02A9     		add	r1, sp, #8
 278 0064 164B     		ldr	r3, .L13+12
 279 0066 0A00     		movs	r2, r1
 280 0068 11CB     		ldmia	r3!, {r0, r4}
 281 006a 11C2     		stmia	r2!, {r0, r4}
 282 006c 1B88     		ldrh	r3, [r3]
 283 006e 1380     		strh	r3, [r2]
 309:Core/Src/main.c **** 	}else if (rx_buff[0] == 71){
 284              		.loc 1 309 3 is_stmt 1 view .LVU59
 285 0070 1048     		ldr	r0, .L13
 286 0072 0A22     		movs	r2, #10
 287 0074 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 12


 288              	.LVL15:
 289              	.LBE7:
 290 0078 F1E7     		b	.L7
 291              	.L12:
 292              	.LBB8:
 311:Core/Src/main.c **** 	  uint16_t proc_val = (int)((TIM17->CCR1 - 1000) * (100 - 0) / (2500 - 1000) + 0);
 293              		.loc 1 311 4 view .LVU60
 311:Core/Src/main.c **** 	  uint16_t proc_val = (int)((TIM17->CCR1 - 1000) * (100 - 0) / (2500 - 1000) + 0);
 294              		.loc 1 311 9 is_stmt 0 view .LVU61
 295 007a 02AC     		add	r4, sp, #8
 296 007c 114B     		ldr	r3, .L13+16
 297 007e 2200     		movs	r2, r4
 298 0080 03CB     		ldmia	r3!, {r0, r1}
 299 0082 03C2     		stmia	r2!, {r0, r1}
 300 0084 1B88     		ldrh	r3, [r3]
 301 0086 1380     		strh	r3, [r2]
 312:Core/Src/main.c **** 	  itoa(proc_val, buf, 10);
 302              		.loc 1 312 4 is_stmt 1 view .LVU62
 312:Core/Src/main.c **** 	  itoa(proc_val, buf, 10);
 303              		.loc 1 312 36 is_stmt 0 view .LVU63
 304 0088 0B4B     		ldr	r3, .L13+4
 305 008a 5B6B     		ldr	r3, [r3, #52]
 312:Core/Src/main.c **** 	  itoa(proc_val, buf, 10);
 306              		.loc 1 312 51 view .LVU64
 307 008c 6420     		movs	r0, #100
 308 008e 5843     		muls	r0, r3
 309 0090 0D4B     		ldr	r3, .L13+20
 310 0092 9C46     		mov	ip, r3
 311 0094 6044     		add	r0, r0, ip
 312:Core/Src/main.c **** 	  itoa(proc_val, buf, 10);
 312              		.loc 1 312 79 view .LVU65
 313 0096 0D49     		ldr	r1, .L13+24
 314 0098 FFF7FEFF 		bl	__aeabi_uidiv
 315              	.LVL16:
 313:Core/Src/main.c **** 	  HAL_UART_Transmit_DMA(&huart2, buf, 10);
 316              		.loc 1 313 4 is_stmt 1 view .LVU66
 317 009c 0004     		lsls	r0, r0, #16
 318              	.LVL17:
 313:Core/Src/main.c **** 	  HAL_UART_Transmit_DMA(&huart2, buf, 10);
 319              		.loc 1 313 4 is_stmt 0 view .LVU67
 320 009e 000C     		lsrs	r0, r0, #16
 321 00a0 0A22     		movs	r2, #10
 322 00a2 2100     		movs	r1, r4
 323 00a4 FFF7FEFF 		bl	itoa
 324              	.LVL18:
 314:Core/Src/main.c ****   }else{
 325              		.loc 1 314 4 is_stmt 1 view .LVU68
 326 00a8 0248     		ldr	r0, .L13
 327 00aa 0A22     		movs	r2, #10
 328 00ac 2100     		movs	r1, r4
 329 00ae FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 330              	.LVL19:
 331              	.LBE8:
 332 00b2 D4E7     		b	.L7
 333              	.L14:
 334              		.align	2
 335              	.L13:
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 13


 336 00b4 00000000 		.word	huart2
 337 00b8 00480140 		.word	1073825792
 338 00bc 00000000 		.word	.LC5
 339 00c0 0C000000 		.word	.LC1
 340 00c4 18000000 		.word	.LC3
 341 00c8 6079FEFF 		.word	-100000
 342 00cc DC050000 		.word	1500
 343              		.cfi_endproc
 344              	.LFE222:
 346              		.section	.text.Error_Handler,"ax",%progbits
 347              		.align	1
 348              		.global	Error_Handler
 349              		.syntax unified
 350              		.code	16
 351              		.thumb_func
 353              	Error_Handler:
 354              	.LFB223:
 325:Core/Src/main.c **** /* USER CODE END 4 */
 326:Core/Src/main.c **** 
 327:Core/Src/main.c **** /**
 328:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 329:Core/Src/main.c ****   * @retval None
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c **** void Error_Handler(void)
 332:Core/Src/main.c **** {
 355              		.loc 1 332 1 view -0
 356              		.cfi_startproc
 357              		@ Volatile: function does not return.
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 333:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 334:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 335:Core/Src/main.c ****   __disable_irq();
 361              		.loc 1 335 3 view .LVU70
 362              	.LBB9:
 363              	.LBI9:
 364              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 14


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 15


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 16


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 17


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 18


 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 19


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 20


 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 21


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 22


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 23


 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 24


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 25


 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 26


 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 27


 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 28


 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 29


 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 30


 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 365              		.loc 2 960 27 view .LVU71
 366              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 367              		.loc 2 962 3 view .LVU72
 368              		.syntax divided
 369              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 370 0000 72B6     		cpsid i
 371              	@ 0 "" 2
 372              		.thumb
 373              		.syntax unified
 374              	.L16:
 375              	.LBE10:
 376              	.LBE9:
 336:Core/Src/main.c ****   while (1)
 377              		.loc 1 336 3 view .LVU73
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****   }
 378              		.loc 1 338 3 view .LVU74
 336:Core/Src/main.c ****   while (1)
 379              		.loc 1 336 9 view .LVU75
 380 0002 FEE7     		b	.L16
 381              		.cfi_endproc
 382              	.LFE223:
 384              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 385              		.align	1
 386              		.syntax unified
 387              		.code	16
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 31


 388              		.thumb_func
 390              	MX_USART2_UART_Init:
 391              	.LFB219:
 224:Core/Src/main.c **** 
 392              		.loc 1 224 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396 0000 10B5     		push	{r4, lr}
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 4, -8
 399              		.cfi_offset 14, -4
 233:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 400              		.loc 1 233 3 view .LVU77
 233:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 401              		.loc 1 233 19 is_stmt 0 view .LVU78
 402 0002 0C48     		ldr	r0, .L20
 403 0004 0C4B     		ldr	r3, .L20+4
 404 0006 0360     		str	r3, [r0]
 234:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 405              		.loc 1 234 3 is_stmt 1 view .LVU79
 234:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 406              		.loc 1 234 24 is_stmt 0 view .LVU80
 407 0008 E123     		movs	r3, #225
 408 000a 5B02     		lsls	r3, r3, #9
 409 000c 4360     		str	r3, [r0, #4]
 235:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 410              		.loc 1 235 3 is_stmt 1 view .LVU81
 235:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 411              		.loc 1 235 26 is_stmt 0 view .LVU82
 412 000e 0023     		movs	r3, #0
 413 0010 8360     		str	r3, [r0, #8]
 236:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 414              		.loc 1 236 3 is_stmt 1 view .LVU83
 236:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 415              		.loc 1 236 24 is_stmt 0 view .LVU84
 416 0012 C360     		str	r3, [r0, #12]
 237:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 417              		.loc 1 237 3 is_stmt 1 view .LVU85
 237:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 418              		.loc 1 237 22 is_stmt 0 view .LVU86
 419 0014 0361     		str	r3, [r0, #16]
 238:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 420              		.loc 1 238 3 is_stmt 1 view .LVU87
 238:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 421              		.loc 1 238 20 is_stmt 0 view .LVU88
 422 0016 0C22     		movs	r2, #12
 423 0018 4261     		str	r2, [r0, #20]
 239:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 424              		.loc 1 239 3 is_stmt 1 view .LVU89
 239:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 425              		.loc 1 239 25 is_stmt 0 view .LVU90
 426 001a 8361     		str	r3, [r0, #24]
 240:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 427              		.loc 1 240 3 is_stmt 1 view .LVU91
 240:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 428              		.loc 1 240 28 is_stmt 0 view .LVU92
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 32


 429 001c C361     		str	r3, [r0, #28]
 241:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 430              		.loc 1 241 3 is_stmt 1 view .LVU93
 241:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 431              		.loc 1 241 30 is_stmt 0 view .LVU94
 432 001e 0362     		str	r3, [r0, #32]
 242:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 433              		.loc 1 242 3 is_stmt 1 view .LVU95
 242:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 434              		.loc 1 242 30 is_stmt 0 view .LVU96
 435 0020 4362     		str	r3, [r0, #36]
 243:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 436              		.loc 1 243 3 is_stmt 1 view .LVU97
 243:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 437              		.loc 1 243 38 is_stmt 0 view .LVU98
 438 0022 8362     		str	r3, [r0, #40]
 244:Core/Src/main.c ****   {
 439              		.loc 1 244 3 is_stmt 1 view .LVU99
 244:Core/Src/main.c ****   {
 440              		.loc 1 244 7 is_stmt 0 view .LVU100
 441 0024 FFF7FEFF 		bl	HAL_UART_Init
 442              	.LVL20:
 244:Core/Src/main.c ****   {
 443              		.loc 1 244 6 discriminator 1 view .LVU101
 444 0028 0028     		cmp	r0, #0
 445 002a 00D1     		bne	.L19
 252:Core/Src/main.c **** 
 446              		.loc 1 252 1 view .LVU102
 447              		@ sp needed
 448 002c 10BD     		pop	{r4, pc}
 449              	.L19:
 246:Core/Src/main.c ****   }
 450              		.loc 1 246 5 is_stmt 1 view .LVU103
 451 002e FFF7FEFF 		bl	Error_Handler
 452              	.LVL21:
 453              	.L21:
 454 0032 C046     		.align	2
 455              	.L20:
 456 0034 00000000 		.word	huart2
 457 0038 00440040 		.word	1073759232
 458              		.cfi_endproc
 459              	.LFE219:
 461              		.section	.text.MX_TIM17_Init,"ax",%progbits
 462              		.align	1
 463              		.syntax unified
 464              		.code	16
 465              		.thumb_func
 467              	MX_TIM17_Init:
 468              	.LFB218:
 161:Core/Src/main.c **** 
 469              		.loc 1 161 1 view -0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 80
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473 0000 00B5     		push	{lr}
 474              		.cfi_def_cfa_offset 4
 475              		.cfi_offset 14, -4
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 33


 476 0002 95B0     		sub	sp, sp, #84
 477              		.cfi_def_cfa_offset 88
 167:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 478              		.loc 1 167 3 view .LVU105
 167:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 479              		.loc 1 167 22 is_stmt 0 view .LVU106
 480 0004 1C22     		movs	r2, #28
 481 0006 0021     		movs	r1, #0
 482 0008 0DA8     		add	r0, sp, #52
 483 000a FFF7FEFF 		bl	memset
 484              	.LVL22:
 168:Core/Src/main.c **** 
 485              		.loc 1 168 3 is_stmt 1 view .LVU107
 168:Core/Src/main.c **** 
 486              		.loc 1 168 34 is_stmt 0 view .LVU108
 487 000e 3422     		movs	r2, #52
 488 0010 0021     		movs	r1, #0
 489 0012 6846     		mov	r0, sp
 490 0014 FFF7FEFF 		bl	memset
 491              	.LVL23:
 173:Core/Src/main.c ****   htim17.Init.Prescaler = 95;
 492              		.loc 1 173 3 is_stmt 1 view .LVU109
 173:Core/Src/main.c ****   htim17.Init.Prescaler = 95;
 493              		.loc 1 173 19 is_stmt 0 view .LVU110
 494 0018 2148     		ldr	r0, .L31
 495 001a 224B     		ldr	r3, .L31+4
 496 001c 0360     		str	r3, [r0]
 174:Core/Src/main.c ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 497              		.loc 1 174 3 is_stmt 1 view .LVU111
 174:Core/Src/main.c ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 498              		.loc 1 174 25 is_stmt 0 view .LVU112
 499 001e 5F23     		movs	r3, #95
 500 0020 4360     		str	r3, [r0, #4]
 175:Core/Src/main.c ****   htim17.Init.Period = 254;
 501              		.loc 1 175 3 is_stmt 1 view .LVU113
 175:Core/Src/main.c ****   htim17.Init.Period = 254;
 502              		.loc 1 175 27 is_stmt 0 view .LVU114
 503 0022 0023     		movs	r3, #0
 504 0024 8360     		str	r3, [r0, #8]
 176:Core/Src/main.c ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 505              		.loc 1 176 3 is_stmt 1 view .LVU115
 176:Core/Src/main.c ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 506              		.loc 1 176 22 is_stmt 0 view .LVU116
 507 0026 FE22     		movs	r2, #254
 508 0028 C260     		str	r2, [r0, #12]
 177:Core/Src/main.c ****   htim17.Init.RepetitionCounter = 0;
 509              		.loc 1 177 3 is_stmt 1 view .LVU117
 177:Core/Src/main.c ****   htim17.Init.RepetitionCounter = 0;
 510              		.loc 1 177 29 is_stmt 0 view .LVU118
 511 002a 0361     		str	r3, [r0, #16]
 178:Core/Src/main.c ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 512              		.loc 1 178 3 is_stmt 1 view .LVU119
 178:Core/Src/main.c ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 513              		.loc 1 178 33 is_stmt 0 view .LVU120
 514 002c 4361     		str	r3, [r0, #20]
 179:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 515              		.loc 1 179 3 is_stmt 1 view .LVU121
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 34


 179:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 516              		.loc 1 179 33 is_stmt 0 view .LVU122
 517 002e 8361     		str	r3, [r0, #24]
 180:Core/Src/main.c ****   {
 518              		.loc 1 180 3 is_stmt 1 view .LVU123
 180:Core/Src/main.c ****   {
 519              		.loc 1 180 7 is_stmt 0 view .LVU124
 520 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 521              	.LVL24:
 180:Core/Src/main.c ****   {
 522              		.loc 1 180 6 discriminator 1 view .LVU125
 523 0034 0028     		cmp	r0, #0
 524 0036 2BD1     		bne	.L27
 184:Core/Src/main.c ****   {
 525              		.loc 1 184 3 is_stmt 1 view .LVU126
 184:Core/Src/main.c ****   {
 526              		.loc 1 184 7 is_stmt 0 view .LVU127
 527 0038 1948     		ldr	r0, .L31
 528 003a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 529              	.LVL25:
 184:Core/Src/main.c ****   {
 530              		.loc 1 184 6 discriminator 1 view .LVU128
 531 003e 0028     		cmp	r0, #0
 532 0040 28D1     		bne	.L28
 188:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 533              		.loc 1 188 3 is_stmt 1 view .LVU129
 188:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 534              		.loc 1 188 20 is_stmt 0 view .LVU130
 535 0042 6023     		movs	r3, #96
 536 0044 0D93     		str	r3, [sp, #52]
 189:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 537              		.loc 1 189 3 is_stmt 1 view .LVU131
 189:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 538              		.loc 1 189 19 is_stmt 0 view .LVU132
 539 0046 0023     		movs	r3, #0
 540 0048 0E93     		str	r3, [sp, #56]
 190:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 541              		.loc 1 190 3 is_stmt 1 view .LVU133
 190:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 542              		.loc 1 190 24 is_stmt 0 view .LVU134
 543 004a 0222     		movs	r2, #2
 544 004c 0F92     		str	r2, [sp, #60]
 191:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 545              		.loc 1 191 3 is_stmt 1 view .LVU135
 191:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 546              		.loc 1 191 25 is_stmt 0 view .LVU136
 547 004e 1093     		str	r3, [sp, #64]
 192:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 548              		.loc 1 192 3 is_stmt 1 view .LVU137
 192:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 549              		.loc 1 192 24 is_stmt 0 view .LVU138
 550 0050 1193     		str	r3, [sp, #68]
 193:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 551              		.loc 1 193 3 is_stmt 1 view .LVU139
 193:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 552              		.loc 1 193 25 is_stmt 0 view .LVU140
 553 0052 1293     		str	r3, [sp, #72]
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 35


 194:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 554              		.loc 1 194 3 is_stmt 1 view .LVU141
 194:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 555              		.loc 1 194 26 is_stmt 0 view .LVU142
 556 0054 1393     		str	r3, [sp, #76]
 195:Core/Src/main.c ****   {
 557              		.loc 1 195 3 is_stmt 1 view .LVU143
 195:Core/Src/main.c ****   {
 558              		.loc 1 195 7 is_stmt 0 view .LVU144
 559 0056 1248     		ldr	r0, .L31
 560 0058 0022     		movs	r2, #0
 561 005a 0DA9     		add	r1, sp, #52
 562 005c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 563              	.LVL26:
 195:Core/Src/main.c ****   {
 564              		.loc 1 195 6 discriminator 1 view .LVU145
 565 0060 0028     		cmp	r0, #0
 566 0062 19D1     		bne	.L29
 199:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 567              		.loc 1 199 3 is_stmt 1 view .LVU146
 199:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 568              		.loc 1 199 40 is_stmt 0 view .LVU147
 569 0064 0023     		movs	r3, #0
 570 0066 0093     		str	r3, [sp]
 200:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 571              		.loc 1 200 3 is_stmt 1 view .LVU148
 200:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 572              		.loc 1 200 41 is_stmt 0 view .LVU149
 573 0068 0193     		str	r3, [sp, #4]
 201:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 574              		.loc 1 201 3 is_stmt 1 view .LVU150
 201:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 575              		.loc 1 201 34 is_stmt 0 view .LVU151
 576 006a 0293     		str	r3, [sp, #8]
 202:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 577              		.loc 1 202 3 is_stmt 1 view .LVU152
 202:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 578              		.loc 1 202 33 is_stmt 0 view .LVU153
 579 006c 0393     		str	r3, [sp, #12]
 203:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 580              		.loc 1 203 3 is_stmt 1 view .LVU154
 203:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 581              		.loc 1 203 35 is_stmt 0 view .LVU155
 582 006e 0493     		str	r3, [sp, #16]
 204:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 583              		.loc 1 204 3 is_stmt 1 view .LVU156
 204:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 584              		.loc 1 204 38 is_stmt 0 view .LVU157
 585 0070 8022     		movs	r2, #128
 586 0072 9201     		lsls	r2, r2, #6
 587 0074 0592     		str	r2, [sp, #20]
 205:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 588              		.loc 1 205 3 is_stmt 1 view .LVU158
 205:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 589              		.loc 1 205 36 is_stmt 0 view .LVU159
 590 0076 0693     		str	r3, [sp, #24]
 206:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 36


 591              		.loc 1 206 3 is_stmt 1 view .LVU160
 206:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 592              		.loc 1 206 40 is_stmt 0 view .LVU161
 593 0078 0C93     		str	r3, [sp, #48]
 207:Core/Src/main.c ****   {
 594              		.loc 1 207 3 is_stmt 1 view .LVU162
 207:Core/Src/main.c ****   {
 595              		.loc 1 207 7 is_stmt 0 view .LVU163
 596 007a 0948     		ldr	r0, .L31
 597 007c 6946     		mov	r1, sp
 598 007e FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 599              	.LVL27:
 207:Core/Src/main.c ****   {
 600              		.loc 1 207 6 discriminator 1 view .LVU164
 601 0082 0028     		cmp	r0, #0
 602 0084 0AD1     		bne	.L30
 214:Core/Src/main.c **** 
 603              		.loc 1 214 3 is_stmt 1 view .LVU165
 604 0086 0648     		ldr	r0, .L31
 605 0088 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 606              	.LVL28:
 216:Core/Src/main.c **** 
 607              		.loc 1 216 1 is_stmt 0 view .LVU166
 608 008c 15B0     		add	sp, sp, #84
 609              		@ sp needed
 610 008e 00BD     		pop	{pc}
 611              	.L27:
 182:Core/Src/main.c ****   }
 612              		.loc 1 182 5 is_stmt 1 view .LVU167
 613 0090 FFF7FEFF 		bl	Error_Handler
 614              	.LVL29:
 615              	.L28:
 186:Core/Src/main.c ****   }
 616              		.loc 1 186 5 view .LVU168
 617 0094 FFF7FEFF 		bl	Error_Handler
 618              	.LVL30:
 619              	.L29:
 197:Core/Src/main.c ****   }
 620              		.loc 1 197 5 view .LVU169
 621 0098 FFF7FEFF 		bl	Error_Handler
 622              	.LVL31:
 623              	.L30:
 209:Core/Src/main.c ****   }
 624              		.loc 1 209 5 view .LVU170
 625 009c FFF7FEFF 		bl	Error_Handler
 626              	.LVL32:
 627              	.L32:
 628              		.align	2
 629              	.L31:
 630 00a0 00000000 		.word	htim17
 631 00a4 00480140 		.word	1073825792
 632              		.cfi_endproc
 633              	.LFE218:
 635              		.section	.text.SystemClock_Config,"ax",%progbits
 636              		.align	1
 637              		.global	SystemClock_Config
 638              		.syntax unified
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 37


 639              		.code	16
 640              		.thumb_func
 642              	SystemClock_Config:
 643              	.LFB217:
 124:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 644              		.loc 1 124 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 48
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648 0000 00B5     		push	{lr}
 649              		.cfi_def_cfa_offset 4
 650              		.cfi_offset 14, -4
 651 0002 8DB0     		sub	sp, sp, #52
 652              		.cfi_def_cfa_offset 56
 125:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 653              		.loc 1 125 3 view .LVU172
 125:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 654              		.loc 1 125 22 is_stmt 0 view .LVU173
 655 0004 1C22     		movs	r2, #28
 656 0006 0021     		movs	r1, #0
 657 0008 05A8     		add	r0, sp, #20
 658 000a FFF7FEFF 		bl	memset
 659              	.LVL33:
 126:Core/Src/main.c **** 
 660              		.loc 1 126 3 is_stmt 1 view .LVU174
 126:Core/Src/main.c **** 
 661              		.loc 1 126 22 is_stmt 0 view .LVU175
 662 000e 1422     		movs	r2, #20
 663 0010 0021     		movs	r1, #0
 664 0012 6846     		mov	r0, sp
 665 0014 FFF7FEFF 		bl	memset
 666              	.LVL34:
 131:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 667              		.loc 1 131 3 is_stmt 1 view .LVU176
 131:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 668              		.loc 1 131 36 is_stmt 0 view .LVU177
 669 0018 0223     		movs	r3, #2
 670 001a 0593     		str	r3, [sp, #20]
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 671              		.loc 1 132 3 is_stmt 1 view .LVU178
 132:Core/Src/main.c ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 672              		.loc 1 132 30 is_stmt 0 view .LVU179
 673 001c FE33     		adds	r3, r3, #254
 674 001e 0893     		str	r3, [sp, #32]
 133:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 675              		.loc 1 133 3 is_stmt 1 view .LVU180
 134:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 676              		.loc 1 134 3 view .LVU181
 134:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 677              		.loc 1 134 41 is_stmt 0 view .LVU182
 678 0020 C03B     		subs	r3, r3, #192
 679 0022 0A93     		str	r3, [sp, #40]
 135:Core/Src/main.c ****   {
 680              		.loc 1 135 3 is_stmt 1 view .LVU183
 135:Core/Src/main.c ****   {
 681              		.loc 1 135 7 is_stmt 0 view .LVU184
 682 0024 05A8     		add	r0, sp, #20
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 38


 683 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 684              	.LVL35:
 135:Core/Src/main.c ****   {
 685              		.loc 1 135 6 discriminator 1 view .LVU185
 686 002a 0028     		cmp	r0, #0
 687 002c 0ED1     		bne	.L36
 142:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 688              		.loc 1 142 3 is_stmt 1 view .LVU186
 142:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 689              		.loc 1 142 31 is_stmt 0 view .LVU187
 690 002e 0723     		movs	r3, #7
 691 0030 0093     		str	r3, [sp]
 144:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 692              		.loc 1 144 3 is_stmt 1 view .LVU188
 144:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 693              		.loc 1 144 34 is_stmt 0 view .LVU189
 694 0032 0023     		movs	r3, #0
 695 0034 0193     		str	r3, [sp, #4]
 145:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 696              		.loc 1 145 3 is_stmt 1 view .LVU190
 145:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 697              		.loc 1 145 35 is_stmt 0 view .LVU191
 698 0036 0293     		str	r3, [sp, #8]
 146:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 699              		.loc 1 146 3 is_stmt 1 view .LVU192
 146:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 700              		.loc 1 146 35 is_stmt 0 view .LVU193
 701 0038 0393     		str	r3, [sp, #12]
 147:Core/Src/main.c **** 
 702              		.loc 1 147 3 is_stmt 1 view .LVU194
 147:Core/Src/main.c **** 
 703              		.loc 1 147 36 is_stmt 0 view .LVU195
 704 003a 0493     		str	r3, [sp, #16]
 149:Core/Src/main.c ****   {
 705              		.loc 1 149 3 is_stmt 1 view .LVU196
 149:Core/Src/main.c ****   {
 706              		.loc 1 149 7 is_stmt 0 view .LVU197
 707 003c 0121     		movs	r1, #1
 708 003e 6846     		mov	r0, sp
 709 0040 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 710              	.LVL36:
 149:Core/Src/main.c ****   {
 711              		.loc 1 149 6 discriminator 1 view .LVU198
 712 0044 0028     		cmp	r0, #0
 713 0046 03D1     		bne	.L37
 153:Core/Src/main.c **** 
 714              		.loc 1 153 1 view .LVU199
 715 0048 0DB0     		add	sp, sp, #52
 716              		@ sp needed
 717 004a 00BD     		pop	{pc}
 718              	.L36:
 137:Core/Src/main.c ****   }
 719              		.loc 1 137 5 is_stmt 1 view .LVU200
 720 004c FFF7FEFF 		bl	Error_Handler
 721              	.LVL37:
 722              	.L37:
 151:Core/Src/main.c ****   }
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 39


 723              		.loc 1 151 5 view .LVU201
 724 0050 FFF7FEFF 		bl	Error_Handler
 725              	.LVL38:
 726              		.cfi_endproc
 727              	.LFE217:
 729              		.section	.text.main,"ax",%progbits
 730              		.align	1
 731              		.global	main
 732              		.syntax unified
 733              		.code	16
 734              		.thumb_func
 736              	main:
 737              	.LFB216:
  74:Core/Src/main.c **** 
 738              		.loc 1 74 1 view -0
 739              		.cfi_startproc
 740              		@ Volatile: function does not return.
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743 0000 10B5     		push	{r4, lr}
 744              		.cfi_def_cfa_offset 8
 745              		.cfi_offset 4, -8
 746              		.cfi_offset 14, -4
  83:Core/Src/main.c **** 
 747              		.loc 1 83 3 view .LVU203
 748 0002 FFF7FEFF 		bl	HAL_Init
 749              	.LVL39:
  90:Core/Src/main.c **** 
 750              		.loc 1 90 3 view .LVU204
 751 0006 FFF7FEFF 		bl	SystemClock_Config
 752              	.LVL40:
  97:Core/Src/main.c ****   MX_DMA_Init();
 753              		.loc 1 97 3 view .LVU205
 754 000a FFF7FEFF 		bl	MX_GPIO_Init
 755              	.LVL41:
  98:Core/Src/main.c ****   MX_USART2_UART_Init();
 756              		.loc 1 98 3 view .LVU206
 757 000e FFF7FEFF 		bl	MX_DMA_Init
 758              	.LVL42:
  99:Core/Src/main.c ****   MX_TIM17_Init();
 759              		.loc 1 99 3 view .LVU207
 760 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 761              	.LVL43:
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 762              		.loc 1 100 3 view .LVU208
 763 0016 FFF7FEFF 		bl	MX_TIM17_Init
 764              	.LVL44:
 102:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 765              		.loc 1 102 3 view .LVU209
 766 001a 0949     		ldr	r1, .L40
 767 001c 0948     		ldr	r0, .L40+4
 768 001e 0A22     		movs	r2, #10
 769 0020 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 770              	.LVL45:
 103:Core/Src/main.c ****   TIM17->CCR1 = 128;
 771              		.loc 1 103 3 view .LVU210
 772 0024 A020     		movs	r0, #160
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 40


 773 0026 0122     		movs	r2, #1
 774 0028 1021     		movs	r1, #16
 775 002a C005     		lsls	r0, r0, #23
 776 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 777              	.LVL46:
 104:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 778              		.loc 1 104 3 view .LVU211
 104:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 779              		.loc 1 104 15 is_stmt 0 view .LVU212
 780 0030 054B     		ldr	r3, .L40+8
 781 0032 8022     		movs	r2, #128
 782 0034 5A63     		str	r2, [r3, #52]
 105:Core/Src/main.c ****   /* USER CODE END 2 */
 783              		.loc 1 105 3 is_stmt 1 view .LVU213
 784 0036 0548     		ldr	r0, .L40+12
 785 0038 0021     		movs	r1, #0
 786 003a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 787              	.LVL47:
 788              	.L39:
 110:Core/Src/main.c ****   {
 789              		.loc 1 110 3 view .LVU214
 115:Core/Src/main.c ****   /* USER CODE END 3 */
 790              		.loc 1 115 3 view .LVU215
 110:Core/Src/main.c ****   {
 791              		.loc 1 110 9 view .LVU216
 792 003e FEE7     		b	.L39
 793              	.L41:
 794              		.align	2
 795              	.L40:
 796 0040 00000000 		.word	rx_buff
 797 0044 00000000 		.word	huart2
 798 0048 00480140 		.word	1073825792
 799 004c 00000000 		.word	htim17
 800              		.cfi_endproc
 801              	.LFE216:
 803              		.global	rx_buff
 804              		.section	.bss.rx_buff,"aw",%nobits
 805              		.align	2
 808              	rx_buff:
 809 0000 00000000 		.space	10
 809      00000000 
 809      0000
 810              		.global	hdma_usart2_tx
 811              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 812              		.align	2
 815              	hdma_usart2_tx:
 816 0000 00000000 		.space	92
 816      00000000 
 816      00000000 
 816      00000000 
 816      00000000 
 817              		.global	hdma_usart2_rx
 818              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 819              		.align	2
 822              	hdma_usart2_rx:
 823 0000 00000000 		.space	92
 823      00000000 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 41


 823      00000000 
 823      00000000 
 823      00000000 
 824              		.global	huart2
 825              		.section	.bss.huart2,"aw",%nobits
 826              		.align	2
 829              	huart2:
 830 0000 00000000 		.space	148
 830      00000000 
 830      00000000 
 830      00000000 
 830      00000000 
 831              		.global	htim17
 832              		.section	.bss.htim17,"aw",%nobits
 833              		.align	2
 836              	htim17:
 837 0000 00000000 		.space	76
 837      00000000 
 837      00000000 
 837      00000000 
 837      00000000 
 838              		.text
 839              	.Letext0:
 840              		.file 3 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c031xx.h"
 841              		.file 4 "C:/Users/kroko/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 842              		.file 5 "C:/Users/kroko/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 843              		.file 6 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_def.h"
 844              		.file 7 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_rcc.h"
 845              		.file 8 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_gpio.h"
 846              		.file 9 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_dma.h"
 847              		.file 10 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_tim.h"
 848              		.file 11 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_uart.h"
 849              		.file 12 "Core/Inc/main.h"
 850              		.file 13 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_tim_ex.h"
 851              		.file 14 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_cortex.h"
 852              		.file 15 "<built-in>"
 853              		.file 16 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal.h"
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:19     .text.MX_GPIO_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:95     .text.MX_GPIO_Init:00000048 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:100    .text.MX_DMA_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:105    .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:160    .text.MX_DMA_Init:0000003c $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:167    .rodata.HAL_UART_RxCpltCallback.str1.4:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:177    .text.HAL_UART_RxCpltCallback:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:183    .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:336    .text.HAL_UART_RxCpltCallback:000000b4 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:829    .bss.huart2:00000000 huart2
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:347    .text.Error_Handler:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:353    .text.Error_Handler:00000000 Error_Handler
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:385    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:390    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:456    .text.MX_USART2_UART_Init:00000034 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:462    .text.MX_TIM17_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:467    .text.MX_TIM17_Init:00000000 MX_TIM17_Init
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:630    .text.MX_TIM17_Init:000000a0 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:836    .bss.htim17:00000000 htim17
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:636    .text.SystemClock_Config:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:642    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:730    .text.main:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:736    .text.main:00000000 main
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:796    .text.main:00000040 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:808    .bss.rx_buff:00000000 rx_buff
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:805    .bss.rx_buff:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:815    .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:812    .bss.hdma_usart2_tx:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:822    .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:819    .bss.hdma_usart2_rx:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:826    .bss.huart2:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s:833    .bss.htim17:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_uidiv
__aeabi_idiv
HAL_GPIO_TogglePin
HAL_UART_Receive_DMA
atoi
HAL_UART_Transmit_DMA
itoa
HAL_UART_Init
HAL_TIM_Base_Init
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccyCX7E8.s 			page 43


HAL_Init
HAL_TIM_PWM_Start
