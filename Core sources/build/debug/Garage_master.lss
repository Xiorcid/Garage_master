
build/debug/Garage_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011498  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011e88  08011678  08011678  00012678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023500  08023500  00024500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023508  08023508  00024508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802350c  0802350c  0002450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000000  08023510  00025000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d058  20000318  08023828  00025318  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2001d370  08023828  00025370  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00025318  2**0
                  CONTENTS, READONLY
 10 .comment      00000039  00000000  00000000  00025348  2**0
                  CONTENTS, READONLY
 11 .debug_info   000297ee  00000000  00000000  00025381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000051b6  00000000  00000000  0004eb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00013ebc  00000000  00000000  00053d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00067be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000147e  00000000  00000000  00069558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000204ff  00000000  00000000  0006a9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00006f38  00000000  00000000  0008aed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000049dc  00000000  00000000  00091e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000018f  00000000  00000000  000967ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b80c 	b.w	8000cc8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f010 fb74 	bl	80113a4 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <__do_global_dtors_aux>:
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4c05      	ldr	r4, [pc, #20]	@ (8000ce4 <__do_global_dtors_aux+0x18>)
 8000cd0:	7823      	ldrb	r3, [r4, #0]
 8000cd2:	b933      	cbnz	r3, 8000ce2 <__do_global_dtors_aux+0x16>
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <__do_global_dtors_aux+0x1c>)
 8000cd6:	b113      	cbz	r3, 8000cde <__do_global_dtors_aux+0x12>
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <__do_global_dtors_aux+0x20>)
 8000cda:	f3af 8000 	nop.w
 8000cde:	2301      	movs	r3, #1
 8000ce0:	7023      	strb	r3, [r4, #0]
 8000ce2:	bd10      	pop	{r4, pc}
 8000ce4:	20000318 	.word	0x20000318
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	08011660 	.word	0x08011660

08000cf0 <frame_dummy>:
 8000cf0:	b508      	push	{r3, lr}
 8000cf2:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <frame_dummy+0x10>)
 8000cf4:	b11b      	cbz	r3, 8000cfe <frame_dummy+0xe>
 8000cf6:	4903      	ldr	r1, [pc, #12]	@ (8000d04 <frame_dummy+0x14>)
 8000cf8:	4803      	ldr	r0, [pc, #12]	@ (8000d08 <frame_dummy+0x18>)
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	bd08      	pop	{r3, pc}
 8000d00:	00000000 	.word	0x00000000
 8000d04:	2000031c 	.word	0x2000031c
 8000d08:	08011660 	.word	0x08011660

08000d0c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8000d0c:	287f      	cmp	r0, #127	@ 0x7f
 8000d0e:	d917      	bls.n	8000d40 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8000d10:	b131      	cbz	r1, 8000d20 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8000d12:	28ff      	cmp	r0, #255	@ 0xff
 8000d14:	d813      	bhi.n	8000d3e <ff_convert+0x32>
 8000d16:	3880      	subs	r0, #128	@ 0x80
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <ff_convert+0x38>)
 8000d1a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000d1e:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d24:	d807      	bhi.n	8000d36 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8000d26:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <ff_convert+0x38>)
 8000d28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d2c:	4282      	cmp	r2, r0
 8000d2e:	d002      	beq.n	8000d36 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8000d30:	3301      	adds	r3, #1
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	e7f5      	b.n	8000d22 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8000d36:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8000d3a:	b2c0      	uxtb	r0, r0
 8000d3c:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8000d3e:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0801193c 	.word	0x0801193c

08000d48 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8000d48:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8000d4c:	d207      	bcs.n	8000d5e <ff_wtoupper+0x16>
 8000d4e:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8000d50:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d041      	beq.n	8000dda <ff_wtoupper+0x92>
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d33f      	bcc.n	8000dda <ff_wtoupper+0x92>
{
 8000d5a:	b510      	push	{r4, lr}
 8000d5c:	e006      	b.n	8000d6c <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <ff_wtoupper+0x98>)
 8000d60:	e7f6      	b.n	8000d50 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8000d62:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 8000d64:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8000d66:	b1da      	cbz	r2, 8000da0 <ff_wtoupper+0x58>
 8000d68:	4290      	cmp	r0, r2
 8000d6a:	d319      	bcc.n	8000da0 <ff_wtoupper+0x58>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8000d6c:	f103 0e04 	add.w	lr, r3, #4
 8000d70:	885b      	ldrh	r3, [r3, #2]
 8000d72:	0a19      	lsrs	r1, r3, #8
 8000d74:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8000d76:	eb03 0c02 	add.w	ip, r3, r2
 8000d7a:	4560      	cmp	r0, ip
 8000d7c:	db04      	blt.n	8000d88 <ff_wtoupper+0x40>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8000d7e:	2900      	cmp	r1, #0
 8000d80:	d1ef      	bne.n	8000d62 <ff_wtoupper+0x1a>
 8000d82:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8000d86:	e7ed      	b.n	8000d64 <ff_wtoupper+0x1c>
			switch (cmd) {
 8000d88:	2908      	cmp	r1, #8
 8000d8a:	d809      	bhi.n	8000da0 <ff_wtoupper+0x58>
 8000d8c:	e8df f001 	tbb	[pc, r1]
 8000d90:	120f0905 	.word	0x120f0905
 8000d94:	1e1b1815 	.word	0x1e1b1815
 8000d98:	21          	.byte	0x21
 8000d99:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	f83e 0014 	ldrh.w	r0, [lr, r4, lsl #1]
	}

	return chr;
}
 8000da0:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8000da2:	1a83      	subs	r3, r0, r2
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	1ac0      	subs	r0, r0, r3
 8000daa:	b280      	uxth	r0, r0
 8000dac:	e7f8      	b.n	8000da0 <ff_wtoupper+0x58>
			case 2: chr -= 16; break;				/* Shift -16 */
 8000dae:	3810      	subs	r0, #16
 8000db0:	b280      	uxth	r0, r0
 8000db2:	e7f5      	b.n	8000da0 <ff_wtoupper+0x58>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8000db4:	3820      	subs	r0, #32
 8000db6:	b280      	uxth	r0, r0
 8000db8:	e7f2      	b.n	8000da0 <ff_wtoupper+0x58>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8000dba:	3830      	subs	r0, #48	@ 0x30
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	e7ef      	b.n	8000da0 <ff_wtoupper+0x58>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8000dc0:	381a      	subs	r0, #26
 8000dc2:	b280      	uxth	r0, r0
 8000dc4:	e7ec      	b.n	8000da0 <ff_wtoupper+0x58>
			case 6:	chr += 8; break;				/* Shift +8 */
 8000dc6:	3008      	adds	r0, #8
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	e7e9      	b.n	8000da0 <ff_wtoupper+0x58>
			case 7: chr -= 80; break;				/* Shift -80 */
 8000dcc:	3850      	subs	r0, #80	@ 0x50
 8000dce:	b280      	uxth	r0, r0
 8000dd0:	e7e6      	b.n	8000da0 <ff_wtoupper+0x58>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8000dd2:	f5a0 50e3 	sub.w	r0, r0, #7264	@ 0x1c60
 8000dd6:	b280      	uxth	r0, r0
 8000dd8:	e7e2      	b.n	8000da0 <ff_wtoupper+0x58>
}
 8000dda:	4770      	bx	lr
 8000ddc:	08011748 	.word	0x08011748
 8000de0:	0801168c 	.word	0x0801168c

08000de4 <CST816S_Init>:
// CST816S.c
#include "cst816s.h"

// Initialize the CST816S touch IC
bool CST816S_Init(I2C_HandleTypeDef* hi2c) {
 8000de4:	b530      	push	{r4, r5, lr}
 8000de6:	b085      	sub	sp, #20
 8000de8:	4604      	mov	r4, r0
    // Reset the CST816S using GPIO
    HAL_GPIO_WritePin(CST816S_RST_PORT, CST816S_RST_PIN, GPIO_PIN_RESET);
 8000dea:	4d19      	ldr	r5, [pc, #100]	@ (8000e50 <CST816S_Init+0x6c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df2:	4628      	mov	r0, r5
 8000df4:	f005 fdd8 	bl	80069a8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000df8:	200a      	movs	r0, #10
 8000dfa:	f005 f9d1 	bl	80061a0 <HAL_Delay>
    HAL_GPIO_WritePin(CST816S_RST_PORT, CST816S_RST_PIN, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e04:	4628      	mov	r0, r5
 8000e06:	f005 fdcf 	bl	80069a8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000e0a:	2032      	movs	r0, #50	@ 0x32
 8000e0c:	f005 f9c8 	bl	80061a0 <HAL_Delay>

    // Test communication with the CST816S by reading a register
    uint8_t reg = CST816S_REG_GESTURE_ID;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f88d 300f 	strb.w	r3, [sp, #15]
    if (HAL_I2C_Master_Transmit(hi2c, CST816S_I2C_ADDR << 1, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000e16:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	f10d 020f 	add.w	r2, sp, #15
 8000e20:	212a      	movs	r1, #42	@ 0x2a
 8000e22:	4620      	mov	r0, r4
 8000e24:	f006 faec 	bl	8007400 <HAL_I2C_Master_Transmit>
 8000e28:	b110      	cbz	r0, 8000e30 <CST816S_Init+0x4c>
        return false; // Communication failed
 8000e2a:	2000      	movs	r0, #0
    if (HAL_I2C_Master_Receive(hi2c, CST816S_I2C_ADDR << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
        return false; // Communication failed
    }

    return true;
}
 8000e2c:	b005      	add	sp, #20
 8000e2e:	bd30      	pop	{r4, r5, pc}
    if (HAL_I2C_Master_Receive(hi2c, CST816S_I2C_ADDR << 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2301      	movs	r3, #1
 8000e38:	f10d 020e 	add.w	r2, sp, #14
 8000e3c:	212a      	movs	r1, #42	@ 0x2a
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f006 fb9a 	bl	8007578 <HAL_I2C_Master_Receive>
 8000e44:	b908      	cbnz	r0, 8000e4a <CST816S_Init+0x66>
    return true;
 8000e46:	2001      	movs	r0, #1
 8000e48:	e7f0      	b.n	8000e2c <CST816S_Init+0x48>
        return false; // Communication failed
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	e7ee      	b.n	8000e2c <CST816S_Init+0x48>
 8000e4e:	bf00      	nop
 8000e50:	40020400 	.word	0x40020400

08000e54 <CST816S_ReadTouchData>:

// Read touch data from the CST816S
bool CST816S_ReadTouchData(I2C_HandleTypeDef* hi2c, CST816S_TouchData* touch_data) {
    if (touch_data == NULL) {
 8000e54:	b309      	cbz	r1, 8000e9a <CST816S_ReadTouchData+0x46>
bool CST816S_ReadTouchData(I2C_HandleTypeDef* hi2c, CST816S_TouchData* touch_data) {
 8000e56:	b510      	push	{r4, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	460c      	mov	r4, r1
    // if (HAL_I2C_Master_Transmit(hi2c, CST816S_I2C_ADDR << 1, &reg, 1, 100) != HAL_OK) {
    //     return false; // Communication failed
    // }

    uint8_t buffer[6];
    if (HAL_I2C_Master_Receive(hi2c, CST816S_I2C_ADDR << 1, buffer, 6, 100) != HAL_OK) {
 8000e5c:	2364      	movs	r3, #100	@ 0x64
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2306      	movs	r3, #6
 8000e62:	aa02      	add	r2, sp, #8
 8000e64:	212a      	movs	r1, #42	@ 0x2a
 8000e66:	f006 fb87 	bl	8007578 <HAL_I2C_Master_Receive>
 8000e6a:	b9c0      	cbnz	r0, 8000e9e <CST816S_ReadTouchData+0x4a>
        return false; // Communication failed
    }

    touch_data->gesture_id = buffer[0];
 8000e6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000e70:	7023      	strb	r3, [r4, #0]
    touch_data->finger_num = buffer[1];
 8000e72:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000e76:	7063      	strb	r3, [r4, #1]
    touch_data->x_coord = (buffer[2] | (buffer[3] << 8));
 8000e78:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000e7c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000e80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e84:	8063      	strh	r3, [r4, #2]
    touch_data->y_coord = (buffer[4] | (buffer[5] << 8));
 8000e86:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8000e8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8000e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e92:	80a3      	strh	r3, [r4, #4]

    return true;
 8000e94:	2001      	movs	r0, #1
 8000e96:	b004      	add	sp, #16
 8000e98:	bd10      	pop	{r4, pc}
        return false; // Invalid pointer
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	4770      	bx	lr
        return false; // Communication failed
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	e7f9      	b.n	8000e96 <CST816S_ReadTouchData+0x42>
	...

08000ea4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8000ea4:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <disk_status+0x14>)
 8000ea8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000eac:	6852      	ldr	r2, [r2, #4]
 8000eae:	6852      	ldr	r2, [r2, #4]
 8000eb0:	4403      	add	r3, r0
 8000eb2:	7a18      	ldrb	r0, [r3, #8]
 8000eb4:	4790      	blx	r2
  return stat;
}
 8000eb6:	bd08      	pop	{r3, pc}
 8000eb8:	20000568 	.word	0x20000568

08000ebc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <disk_initialize+0x28>)
 8000ebe:	5c1b      	ldrb	r3, [r3, r0]
 8000ec0:	b973      	cbnz	r3, 8000ee0 <disk_initialize+0x24>
{
 8000ec2:	b510      	push	{r4, lr}
 8000ec4:	4604      	mov	r4, r0
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <disk_initialize+0x28>)
 8000ec8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000ecc:	6852      	ldr	r2, [r2, #4]
 8000ece:	6812      	ldr	r2, [r2, #0]
 8000ed0:	4403      	add	r3, r0
 8000ed2:	7a18      	ldrb	r0, [r3, #8]
 8000ed4:	4790      	blx	r2
    if(stat == RES_OK)
 8000ed6:	b910      	cbnz	r0, 8000ede <disk_initialize+0x22>
    {
      disk.is_initialized[pdrv] = 1;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	@ (8000ee4 <disk_initialize+0x28>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	551a      	strb	r2, [r3, r4]
    }
  }
  return stat;
}
 8000ede:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 8000ee0:	2000      	movs	r0, #0
}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000568 	.word	0x20000568

08000ee8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000ee8:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000eea:	4c04      	ldr	r4, [pc, #16]	@ (8000efc <disk_read+0x14>)
 8000eec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000ef0:	686d      	ldr	r5, [r5, #4]
 8000ef2:	68ad      	ldr	r5, [r5, #8]
 8000ef4:	4404      	add	r4, r0
 8000ef6:	7a20      	ldrb	r0, [r4, #8]
 8000ef8:	47a8      	blx	r5
  return res;
}
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	20000568 	.word	0x20000568

08000f00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000f00:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000f02:	4c04      	ldr	r4, [pc, #16]	@ (8000f14 <disk_write+0x14>)
 8000f04:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000f08:	686d      	ldr	r5, [r5, #4]
 8000f0a:	68ed      	ldr	r5, [r5, #12]
 8000f0c:	4404      	add	r4, r0
 8000f0e:	7a20      	ldrb	r0, [r4, #8]
 8000f10:	47a8      	blx	r5
  return res;
}
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	20000568 	.word	0x20000568

08000f18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000f18:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000f1a:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <disk_ioctl+0x14>)
 8000f1c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8000f20:	6864      	ldr	r4, [r4, #4]
 8000f22:	6924      	ldr	r4, [r4, #16]
 8000f24:	4403      	add	r3, r0
 8000f26:	7a18      	ldrb	r0, [r3, #8]
 8000f28:	47a0      	blx	r4
  return res;
}
 8000f2a:	bd10      	pop	{r4, pc}
 8000f2c:	20000568 	.word	0x20000568

08000f30 <dispcolor_Update>:
#endif

	dispcolor_ClearScreen();
}

void dispcolor_Update() {
 8000f30:	b508      	push	{r3, lr}
#if (DISPCOLOR_type == DISPTYPE_gc9a01a)
	GC9A01A_Update();
 8000f32:	f002 fd69 	bl	8003a08 <GC9A01A_Update>
#endif
}
 8000f36:	bd08      	pop	{r3, pc}

08000f38 <dispcolor_DrawPixel>:
#if (DISPCOLOR_type == DISPTYPE_gc9a01a)
	GC9A01A_SetBL(Value);
#endif
}

void dispcolor_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8000f38:	b508      	push	{r3, lr}
#if (DISPCOLOR_type == DISPTYPE_gc9a01a)
	GC9A01A_DrawPixel(x, y, color);
 8000f3a:	f002 fcfb 	bl	8003934 <GC9A01A_DrawPixel>
#endif
}
 8000f3e:	bd08      	pop	{r3, pc}

08000f40 <DrawLine_Slow>:
void dispcolor_ClearScreen(void) {
	dispcolor_FillScreen(BLACK);
}

static void DrawLine_Slow(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f44:	b085      	sub	sp, #20
 8000f46:	4605      	mov	r5, r0
 8000f48:	460e      	mov	r6, r1
 8000f4a:	4617      	mov	r7, r2
 8000f4c:	469b      	mov	fp, r3
 8000f4e:	f8bd 8038 	ldrh.w	r8, [sp, #56]	@ 0x38
	const int16_t deltaX = abs(x2 - x1);
 8000f52:	1a12      	subs	r2, r2, r0
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	bfb8      	it	lt
 8000f58:	4252      	neglt	r2, r2
 8000f5a:	fa0f f982 	sxth.w	r9, r2
	const int16_t deltaY = abs(y2 - y1);
 8000f5e:	1a5b      	subs	r3, r3, r1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	bfb8      	it	lt
 8000f64:	425b      	neglt	r3, r3
 8000f66:	fa0f fa83 	sxth.w	sl, r3
	const int16_t signX = x1 < x2 ? 1 : -1;
 8000f6a:	4287      	cmp	r7, r0
 8000f6c:	dd11      	ble.n	8000f92 <DrawLine_Slow+0x52>
 8000f6e:	2101      	movs	r1, #1
 8000f70:	9102      	str	r1, [sp, #8]
	const int16_t signY = y1 < y2 ? 1 : -1;
 8000f72:	45b3      	cmp	fp, r6
 8000f74:	dd11      	ble.n	8000f9a <DrawLine_Slow+0x5a>
 8000f76:	2101      	movs	r1, #1
 8000f78:	9103      	str	r1, [sp, #12]

	int16_t error = deltaX - deltaY;
 8000f7a:	b292      	uxth	r2, r2
 8000f7c:	9200      	str	r2, [sp, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	1ad4      	subs	r4, r2, r3
 8000f84:	b224      	sxth	r4, r4

	dispcolor_DrawPixel(x2, y2, color);
 8000f86:	4642      	mov	r2, r8
 8000f88:	4659      	mov	r1, fp
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	f7ff ffd4 	bl	8000f38 <dispcolor_DrawPixel>

	while (x1 != x2 || y1 != y2) {
 8000f90:	e021      	b.n	8000fd6 <DrawLine_Slow+0x96>
	const int16_t signX = x1 < x2 ? 1 : -1;
 8000f92:	f04f 31ff 	mov.w	r1, #4294967295
 8000f96:	9102      	str	r1, [sp, #8]
 8000f98:	e7eb      	b.n	8000f72 <DrawLine_Slow+0x32>
	const int16_t signY = y1 < y2 ? 1 : -1;
 8000f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9e:	9103      	str	r1, [sp, #12]
 8000fa0:	e7eb      	b.n	8000f7a <DrawLine_Slow+0x3a>
		dispcolor_DrawPixel(x1, y1, color);
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f7ff ffc6 	bl	8000f38 <dispcolor_DrawPixel>
		const int16_t error2 = error * 2;
 8000fac:	b2a2      	uxth	r2, r4
 8000fae:	0053      	lsls	r3, r2, #1
 8000fb0:	b21b      	sxth	r3, r3

		if (error2 > -deltaY) {
 8000fb2:	f1ca 0100 	rsb	r1, sl, #0
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	dd05      	ble.n	8000fc6 <DrawLine_Slow+0x86>
			error -= deltaY;
 8000fba:	9901      	ldr	r1, [sp, #4]
 8000fbc:	1a52      	subs	r2, r2, r1
 8000fbe:	b214      	sxth	r4, r2
			x1 += signX;
 8000fc0:	9a02      	ldr	r2, [sp, #8]
 8000fc2:	4415      	add	r5, r2
 8000fc4:	b22d      	sxth	r5, r5
		}
		if (error2 < deltaX) {
 8000fc6:	4599      	cmp	r9, r3
 8000fc8:	dd05      	ble.n	8000fd6 <DrawLine_Slow+0x96>
			error += deltaX;
 8000fca:	9b00      	ldr	r3, [sp, #0]
 8000fcc:	441c      	add	r4, r3
 8000fce:	b224      	sxth	r4, r4
			y1 += signY;
 8000fd0:	9b03      	ldr	r3, [sp, #12]
 8000fd2:	441e      	add	r6, r3
 8000fd4:	b236      	sxth	r6, r6
	while (x1 != x2 || y1 != y2) {
 8000fd6:	42bd      	cmp	r5, r7
 8000fd8:	d1e3      	bne.n	8000fa2 <DrawLine_Slow+0x62>
 8000fda:	455e      	cmp	r6, fp
 8000fdc:	d1e1      	bne.n	8000fa2 <DrawLine_Slow+0x62>
		}
	}
}
 8000fde:	b005      	add	sp, #20
 8000fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000fe4 <dispcolor_DrawChar_General>:
	}
}

static uint8_t dispcolor_DrawChar_General(int16_t X, int16_t Y, uint8_t FontID,
		char Char, uint16_t TextColor, uint16_t BgColor,
		uint8_t TransparentBg) {
 8000fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	4680      	mov	r8, r0
 8000fec:	4689      	mov	r9, r1
 8000fee:	4614      	mov	r4, r2
 8000ff0:	9203      	str	r2, [sp, #12]
 8000ff2:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8000ff6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8000ffa:	9101      	str	r1, [sp, #4]
 8000ffc:	f89d 7040 	ldrb.w	r7, [sp, #64]	@ 0x40

	uint8_t *pCharTable = font_GetFontStruct(FontID, Char);
 8001000:	4619      	mov	r1, r3
 8001002:	4610      	mov	r0, r2
 8001004:	f002 fb22 	bl	800364c <font_GetFontStruct>
 8001008:	4606      	mov	r6, r0
	uint8_t CharWidth = font_GetCharWidth(pCharTable);
 800100a:	f002 fb29 	bl	8003660 <font_GetCharWidth>
 800100e:	4605      	mov	r5, r0
	uint8_t CharHeight = font_GetCharHeight(pCharTable);
 8001010:	4630      	mov	r0, r6
 8001012:	f002 fb27 	bl	8003664 <font_GetCharHeight>
 8001016:	9002      	str	r0, [sp, #8]
	pCharTable += 2;
 8001018:	3602      	adds	r6, #2

	if (FontID == FONTID_6X8M) {
 800101a:	b364      	cbz	r4, 8001076 <dispcolor_DrawChar_General+0x92>
				else if (!TransparentBg)
					dispcolor_DrawPixel(X + col, Y + row, BgColor);
			}
		}
	} else {
		for (uint8_t row = 0; row < CharHeight; row++) {
 800101c:	f04f 0b00 	mov.w	fp, #0
 8001020:	e071      	b.n	8001106 <dispcolor_DrawChar_General+0x122>
					dispcolor_DrawPixel(X + col, Y + row, TextColor);
 8001022:	eb04 0008 	add.w	r0, r4, r8
 8001026:	eb0b 0109 	add.w	r1, fp, r9
 800102a:	4652      	mov	r2, sl
 800102c:	b209      	sxth	r1, r1
 800102e:	b200      	sxth	r0, r0
 8001030:	f7ff ff82 	bl	8000f38 <dispcolor_DrawPixel>
			for (uint8_t col = 0; col < CharWidth; col++) {
 8001034:	3401      	adds	r4, #1
 8001036:	b2e4      	uxtb	r4, r4
 8001038:	42ac      	cmp	r4, r5
 800103a:	d213      	bcs.n	8001064 <dispcolor_DrawChar_General+0x80>
				if (pCharTable[row] & (1 << (7 - col)))
 800103c:	f816 300b 	ldrb.w	r3, [r6, fp]
 8001040:	f1c4 0207 	rsb	r2, r4, #7
 8001044:	4113      	asrs	r3, r2
 8001046:	f013 0f01 	tst.w	r3, #1
 800104a:	d1ea      	bne.n	8001022 <dispcolor_DrawChar_General+0x3e>
				else if (!TransparentBg)
 800104c:	2f00      	cmp	r7, #0
 800104e:	d1f1      	bne.n	8001034 <dispcolor_DrawChar_General+0x50>
					dispcolor_DrawPixel(X + col, Y + row, BgColor);
 8001050:	eb04 0008 	add.w	r0, r4, r8
 8001054:	eb0b 0109 	add.w	r1, fp, r9
 8001058:	9a01      	ldr	r2, [sp, #4]
 800105a:	b209      	sxth	r1, r1
 800105c:	b200      	sxth	r0, r0
 800105e:	f7ff ff6b 	bl	8000f38 <dispcolor_DrawPixel>
 8001062:	e7e7      	b.n	8001034 <dispcolor_DrawChar_General+0x50>
		for (uint8_t row = 0; row < CharHeight; row++) {
 8001064:	f10b 0b01 	add.w	fp, fp, #1
 8001068:	fa5f fb8b 	uxtb.w	fp, fp
 800106c:	9b02      	ldr	r3, [sp, #8]
 800106e:	459b      	cmp	fp, r3
 8001070:	d24e      	bcs.n	8001110 <dispcolor_DrawChar_General+0x12c>
			for (uint8_t col = 0; col < CharWidth; col++) {
 8001072:	9c03      	ldr	r4, [sp, #12]
 8001074:	e7e0      	b.n	8001038 <dispcolor_DrawChar_General+0x54>
		for (uint8_t row = 0; row < CharHeight; row++) {
 8001076:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800107a:	e7f7      	b.n	800106c <dispcolor_DrawChar_General+0x88>
			for (uint8_t col = 0; col < CharWidth; col++) {
				if (col < 8) {
					if (pCharTable[row * 2] & (1 << (7 - col)))
 800107c:	f816 301b 	ldrb.w	r3, [r6, fp, lsl #1]
 8001080:	f1c4 0207 	rsb	r2, r4, #7
 8001084:	4113      	asrs	r3, r2
 8001086:	f013 0f01 	tst.w	r3, #1
 800108a:	d10a      	bne.n	80010a2 <dispcolor_DrawChar_General+0xbe>
						dispcolor_DrawPixel(X + col, Y + row, TextColor);
					else if (!TransparentBg)
 800108c:	b9e7      	cbnz	r7, 80010c8 <dispcolor_DrawChar_General+0xe4>
						dispcolor_DrawPixel(X + col, Y + row, BgColor);
 800108e:	eb04 0008 	add.w	r0, r4, r8
 8001092:	eb0b 0109 	add.w	r1, fp, r9
 8001096:	9a01      	ldr	r2, [sp, #4]
 8001098:	b209      	sxth	r1, r1
 800109a:	b200      	sxth	r0, r0
 800109c:	f7ff ff4c 	bl	8000f38 <dispcolor_DrawPixel>
 80010a0:	e012      	b.n	80010c8 <dispcolor_DrawChar_General+0xe4>
						dispcolor_DrawPixel(X + col, Y + row, TextColor);
 80010a2:	eb04 0008 	add.w	r0, r4, r8
 80010a6:	eb0b 0109 	add.w	r1, fp, r9
 80010aa:	4652      	mov	r2, sl
 80010ac:	b209      	sxth	r1, r1
 80010ae:	b200      	sxth	r0, r0
 80010b0:	f7ff ff42 	bl	8000f38 <dispcolor_DrawPixel>
 80010b4:	e008      	b.n	80010c8 <dispcolor_DrawChar_General+0xe4>
				} else {
					if (pCharTable[(row * 2) + 1] & (1 << (15 - col)))
						dispcolor_DrawPixel(X + col, Y + row, TextColor);
 80010b6:	eb04 0008 	add.w	r0, r4, r8
 80010ba:	eb0b 0109 	add.w	r1, fp, r9
 80010be:	4652      	mov	r2, sl
 80010c0:	b209      	sxth	r1, r1
 80010c2:	b200      	sxth	r0, r0
 80010c4:	f7ff ff38 	bl	8000f38 <dispcolor_DrawPixel>
			for (uint8_t col = 0; col < CharWidth; col++) {
 80010c8:	3401      	adds	r4, #1
 80010ca:	b2e4      	uxtb	r4, r4
 80010cc:	42ac      	cmp	r4, r5
 80010ce:	d216      	bcs.n	80010fe <dispcolor_DrawChar_General+0x11a>
				if (col < 8) {
 80010d0:	2c07      	cmp	r4, #7
 80010d2:	d9d3      	bls.n	800107c <dispcolor_DrawChar_General+0x98>
					if (pCharTable[(row * 2) + 1] & (1 << (15 - col)))
 80010d4:	eb06 034b 	add.w	r3, r6, fp, lsl #1
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	f1c4 020f 	rsb	r2, r4, #15
 80010de:	4113      	asrs	r3, r2
 80010e0:	f013 0f01 	tst.w	r3, #1
 80010e4:	d1e7      	bne.n	80010b6 <dispcolor_DrawChar_General+0xd2>
					else if (!TransparentBg)
 80010e6:	2f00      	cmp	r7, #0
 80010e8:	d1ee      	bne.n	80010c8 <dispcolor_DrawChar_General+0xe4>
						dispcolor_DrawPixel(X + col, Y + row, BgColor);
 80010ea:	eb04 0008 	add.w	r0, r4, r8
 80010ee:	eb0b 0109 	add.w	r1, fp, r9
 80010f2:	9a01      	ldr	r2, [sp, #4]
 80010f4:	b209      	sxth	r1, r1
 80010f6:	b200      	sxth	r0, r0
 80010f8:	f7ff ff1e 	bl	8000f38 <dispcolor_DrawPixel>
 80010fc:	e7e4      	b.n	80010c8 <dispcolor_DrawChar_General+0xe4>
		for (uint8_t row = 0; row < CharHeight; row++) {
 80010fe:	f10b 0b01 	add.w	fp, fp, #1
 8001102:	fa5f fb8b 	uxtb.w	fp, fp
 8001106:	9b02      	ldr	r3, [sp, #8]
 8001108:	459b      	cmp	fp, r3
 800110a:	d201      	bcs.n	8001110 <dispcolor_DrawChar_General+0x12c>
			for (uint8_t col = 0; col < CharWidth; col++) {
 800110c:	2400      	movs	r4, #0
 800110e:	e7dd      	b.n	80010cc <dispcolor_DrawChar_General+0xe8>
			}
		}
	}

	return CharWidth;
}
 8001110:	4628      	mov	r0, r5
 8001112:	b005      	add	sp, #20
 8001114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001118 <dispcolor_FillRect>:
		uint16_t color) {
 8001118:	b510      	push	{r4, lr}
 800111a:	b082      	sub	sp, #8
	GC9A01A_FillRect(x, y, w, h, color);
 800111c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8001120:	9400      	str	r4, [sp, #0]
 8001122:	f002 fc27 	bl	8003974 <GC9A01A_FillRect>
}
 8001126:	b002      	add	sp, #8
 8001128:	bd10      	pop	{r4, pc}
	...

0800112c <dispcolor_FillScreen>:
void dispcolor_FillScreen(uint16_t color) {
 800112c:	b500      	push	{lr}
 800112e:	b083      	sub	sp, #12
	dispcolor_FillRect(0, 0, _Width, _Height, color);
 8001130:	9000      	str	r0, [sp, #0]
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <dispcolor_FillScreen+0x20>)
 8001134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001138:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <dispcolor_FillScreen+0x24>)
 800113a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800113e:	2100      	movs	r1, #0
 8001140:	4608      	mov	r0, r1
 8001142:	f7ff ffe9 	bl	8001118 <dispcolor_FillRect>
}
 8001146:	b003      	add	sp, #12
 8001148:	f85d fb04 	ldr.w	pc, [sp], #4
 800114c:	20000334 	.word	0x20000334
 8001150:	20000336 	.word	0x20000336

08001154 <dispcolor_ClearScreen>:
void dispcolor_ClearScreen(void) {
 8001154:	b508      	push	{r3, lr}
	dispcolor_FillScreen(BLACK);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffe8 	bl	800112c <dispcolor_FillScreen>
}
 800115c:	bd08      	pop	{r3, pc}
	...

08001160 <dispcolor_Init>:
void dispcolor_Init(uint8_t Width, uint8_t Height) {
 8001160:	b508      	push	{r3, lr}
	GC9A01A_Init(Width, Height);
 8001162:	f002 fc77 	bl	8003a54 <GC9A01A_Init>
	_Width = GC9A01A_GetWidth();
 8001166:	f002 fc71 	bl	8003a4c <GC9A01A_GetWidth>
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <dispcolor_Init+0x1c>)
 800116c:	8018      	strh	r0, [r3, #0]
	_Height = GC9A01A_GetHeight();
 800116e:	f002 fc6f 	bl	8003a50 <GC9A01A_GetHeight>
 8001172:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <dispcolor_Init+0x20>)
 8001174:	8018      	strh	r0, [r3, #0]
	dispcolor_ClearScreen();
 8001176:	f7ff ffed 	bl	8001154 <dispcolor_ClearScreen>
}
 800117a:	bd08      	pop	{r3, pc}
 800117c:	20000336 	.word	0x20000336
 8001180:	20000334 	.word	0x20000334

08001184 <dispcolor_DrawLine>:
		uint16_t color) {
 8001184:	b510      	push	{r4, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	469e      	mov	lr, r3
 800118a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (x1 == x2) {
 800118e:	4290      	cmp	r0, r2
 8001190:	d007      	beq.n	80011a2 <dispcolor_DrawLine+0x1e>
 8001192:	4694      	mov	ip, r2
	if (y1 == y2) {
 8001194:	4299      	cmp	r1, r3
 8001196:	d019      	beq.n	80011cc <dispcolor_DrawLine+0x48>
	DrawLine_Slow(x1, y1, x2, y2, color);
 8001198:	9400      	str	r4, [sp, #0]
 800119a:	f7ff fed1 	bl	8000f40 <DrawLine_Slow>
}
 800119e:	b002      	add	sp, #8
 80011a0:	bd10      	pop	{r4, pc}
		if (y1 > y2)
 80011a2:	4299      	cmp	r1, r3
 80011a4:	dd09      	ble.n	80011ba <dispcolor_DrawLine+0x36>
			dispcolor_FillRect(x1, y2, 1, y1 - y2 + 1, color);
 80011a6:	1acb      	subs	r3, r1, r3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	9400      	str	r4, [sp, #0]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	2201      	movs	r2, #1
 80011b2:	4671      	mov	r1, lr
 80011b4:	f7ff ffb0 	bl	8001118 <dispcolor_FillRect>
 80011b8:	e7f1      	b.n	800119e <dispcolor_DrawLine+0x1a>
			dispcolor_FillRect(x1, y1, 1, y2 - y1 + 1, color);
 80011ba:	1a5b      	subs	r3, r3, r1
 80011bc:	b29b      	uxth	r3, r3
 80011be:	3301      	adds	r3, #1
 80011c0:	9400      	str	r4, [sp, #0]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	2201      	movs	r2, #1
 80011c6:	f7ff ffa7 	bl	8001118 <dispcolor_FillRect>
		return;
 80011ca:	e7e8      	b.n	800119e <dispcolor_DrawLine+0x1a>
		if (x1 > x2)
 80011cc:	4290      	cmp	r0, r2
 80011ce:	dd09      	ble.n	80011e4 <dispcolor_DrawLine+0x60>
			dispcolor_FillRect(x2, y1, x1 - x2 + 1, 1, color);
 80011d0:	1a82      	subs	r2, r0, r2
 80011d2:	b292      	uxth	r2, r2
 80011d4:	3201      	adds	r2, #1
 80011d6:	9400      	str	r4, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	b212      	sxth	r2, r2
 80011dc:	4660      	mov	r0, ip
 80011de:	f7ff ff9b 	bl	8001118 <dispcolor_FillRect>
 80011e2:	e7dc      	b.n	800119e <dispcolor_DrawLine+0x1a>
			dispcolor_FillRect(x1, y1, x2 - x1 + 1, 1, color);
 80011e4:	1a12      	subs	r2, r2, r0
 80011e6:	b292      	uxth	r2, r2
 80011e8:	3201      	adds	r2, #1
 80011ea:	9400      	str	r4, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	b212      	sxth	r2, r2
 80011f0:	f7ff ff92 	bl	8001118 <dispcolor_FillRect>
		return;
 80011f4:	e7d3      	b.n	800119e <dispcolor_DrawLine+0x1a>

080011f6 <dispcolor_FillCircle>:
		uint16_t color) {
 80011f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	9002      	str	r0, [sp, #8]
 80011fe:	9103      	str	r1, [sp, #12]
 8001200:	469b      	mov	fp, r3
	int y = radius;
 8001202:	4617      	mov	r7, r2
	int delta = 1 - 2 * radius;
 8001204:	0052      	lsls	r2, r2, #1
 8001206:	f1c2 0601 	rsb	r6, r2, #1
	int x = 0;
 800120a:	f04f 0a00 	mov.w	sl, #0
	while (y >= 0) {
 800120e:	e00f      	b.n	8001230 <dispcolor_FillCircle+0x3a>
		if (delta < 0 && error <= 0) {
 8001210:	2b01      	cmp	r3, #1
 8001212:	dc34      	bgt.n	800127e <dispcolor_FillCircle+0x88>
			++x;
 8001214:	f10a 0a01 	add.w	sl, sl, #1
			delta += 2 * x + 1;
 8001218:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800121c:	3301      	adds	r3, #1
 800121e:	441e      	add	r6, r3
			continue;
 8001220:	e006      	b.n	8001230 <dispcolor_FillCircle+0x3a>
		++x;
 8001222:	f10a 0a01 	add.w	sl, sl, #1
		delta += 2 * (x - y);
 8001226:	ebaa 0307 	sub.w	r3, sl, r7
 800122a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
		--y;
 800122e:	3f01      	subs	r7, #1
	while (y >= 0) {
 8001230:	2f00      	cmp	r7, #0
 8001232:	db31      	blt.n	8001298 <dispcolor_FillCircle+0xa2>
		dispcolor_DrawLine(x0 + x, y0 - y, x0 + x, y0 + y, color);
 8001234:	fa1f f98a 	uxth.w	r9, sl
 8001238:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800123c:	eb09 0005 	add.w	r0, r9, r5
 8001240:	b200      	sxth	r0, r0
 8001242:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8001246:	b2bb      	uxth	r3, r7
 8001248:	eba4 0803 	sub.w	r8, r4, r3
 800124c:	fa0f f888 	sxth.w	r8, r8
 8001250:	441c      	add	r4, r3
 8001252:	b224      	sxth	r4, r4
 8001254:	f8cd b000 	str.w	fp, [sp]
 8001258:	4623      	mov	r3, r4
 800125a:	4602      	mov	r2, r0
 800125c:	4641      	mov	r1, r8
 800125e:	f7ff ff91 	bl	8001184 <dispcolor_DrawLine>
		dispcolor_DrawLine(x0 - x, y0 - y, x0 - x, y0 + y, color);
 8001262:	eba5 0009 	sub.w	r0, r5, r9
 8001266:	b200      	sxth	r0, r0
 8001268:	f8cd b000 	str.w	fp, [sp]
 800126c:	4623      	mov	r3, r4
 800126e:	4602      	mov	r2, r0
 8001270:	4641      	mov	r1, r8
 8001272:	f7ff ff87 	bl	8001184 <dispcolor_DrawLine>
		error = 2 * (delta + y) - 1;
 8001276:	19bb      	adds	r3, r7, r6
 8001278:	005b      	lsls	r3, r3, #1
		if (delta < 0 && error <= 0) {
 800127a:	2e00      	cmp	r6, #0
 800127c:	dbc8      	blt.n	8001210 <dispcolor_FillCircle+0x1a>
		error = 2 * (delta - x) - 1;
 800127e:	eba6 030a 	sub.w	r3, r6, sl
 8001282:	005b      	lsls	r3, r3, #1
		if (delta > 0 && error > 0) {
 8001284:	2e00      	cmp	r6, #0
 8001286:	ddcc      	ble.n	8001222 <dispcolor_FillCircle+0x2c>
 8001288:	2b01      	cmp	r3, #1
 800128a:	ddca      	ble.n	8001222 <dispcolor_FillCircle+0x2c>
			--y;
 800128c:	3f01      	subs	r7, #1
			delta += 1 - 2 * y;
 800128e:	007b      	lsls	r3, r7, #1
 8001290:	f1c3 0301 	rsb	r3, r3, #1
 8001294:	441e      	add	r6, r3
			continue;
 8001296:	e7cb      	b.n	8001230 <dispcolor_FillCircle+0x3a>
}
 8001298:	b005      	add	sp, #20
 800129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800129e <dispcolor_DrawChar>:

uint8_t dispcolor_DrawChar(int16_t X, int16_t Y, uint8_t FontID, char Char,
		uint16_t TextColor) {
 800129e:	b510      	push	{r4, lr}
 80012a0:	b084      	sub	sp, #16
	return dispcolor_DrawChar_General(X, Y, FontID, Char, TextColor, 0, 1);
 80012a2:	2401      	movs	r4, #1
 80012a4:	9402      	str	r4, [sp, #8]
 80012a6:	2400      	movs	r4, #0
 80012a8:	9401      	str	r4, [sp, #4]
 80012aa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80012ae:	9400      	str	r4, [sp, #0]
 80012b0:	f7ff fe98 	bl	8000fe4 <dispcolor_DrawChar_General>
}
 80012b4:	b004      	add	sp, #16
 80012b6:	bd10      	pop	{r4, pc}

080012b8 <dispcolor_DrawChar_Bg>:

uint8_t dispcolor_DrawChar_Bg(int16_t X, int16_t Y, uint8_t FontID,
		char Char, uint16_t TextColor, uint16_t BgColor) {
 80012b8:	b510      	push	{r4, lr}
 80012ba:	b084      	sub	sp, #16
	return dispcolor_DrawChar_General(X, Y, FontID, Char, TextColor, BgColor, 0);
 80012bc:	2400      	movs	r4, #0
 80012be:	9402      	str	r4, [sp, #8]
 80012c0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80012c4:	9401      	str	r4, [sp, #4]
 80012c6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80012ca:	9400      	str	r4, [sp, #0]
 80012cc:	f7ff fe8a 	bl	8000fe4 <dispcolor_DrawChar_General>
}
 80012d0:	b004      	add	sp, #16
 80012d2:	bd10      	pop	{r4, pc}

080012d4 <dispcolor_DrawString_General>:

static int16_t dispcolor_DrawString_General(int16_t X, int16_t Y,
		uint8_t FontID, char *Str, uint16_t TextColor, uint16_t BgColor,
		uint8_t TransparentBg) {
 80012d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d8:	b085      	sub	sp, #20
 80012da:	9003      	str	r0, [sp, #12]
 80012dc:	460e      	mov	r6, r1
 80012de:	4690      	mov	r8, r2
 80012e0:	461c      	mov	r4, r3
 80012e2:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 80012e6:	f8bd b03c 	ldrh.w	fp, [sp, #60]	@ 0x3c
 80012ea:	f89d 9040 	ldrb.w	r9, [sp, #64]	@ 0x40
	uint8_t done = 0;
	int16_t Xstart = X;
	uint8_t StrHeight = 8;

	while (!done) {
 80012ee:	4605      	mov	r5, r0
	uint8_t StrHeight = 8;
 80012f0:	2008      	movs	r0, #8
	uint8_t done = 0;
 80012f2:	2700      	movs	r7, #0
	while (!done) {
 80012f4:	e010      	b.n	8001318 <dispcolor_DrawString_General+0x44>
		switch (*Str) {
		case '\0':
			done = 1;
			break;
		case '\n':
			Y += StrHeight;
 80012f6:	4406      	add	r6, r0
 80012f8:	b236      	sxth	r6, r6
			break;
 80012fa:	e00c      	b.n	8001316 <dispcolor_DrawString_General+0x42>
			break;
		default:
			if (TransparentBg)
				X += dispcolor_DrawChar(X, Y, FontID, *Str, TextColor);
			else
				X += dispcolor_DrawChar_Bg(X, Y, FontID, *Str, TextColor,
 80012fc:	f8cd b004 	str.w	fp, [sp, #4]
 8001300:	f8cd a000 	str.w	sl, [sp]
 8001304:	4642      	mov	r2, r8
 8001306:	4631      	mov	r1, r6
 8001308:	4628      	mov	r0, r5
 800130a:	f7ff ffd5 	bl	80012b8 <dispcolor_DrawChar_Bg>
 800130e:	4428      	add	r0, r5
 8001310:	b205      	sxth	r5, r0
 8001312:	e014      	b.n	800133e <dispcolor_DrawString_General+0x6a>
			X = Xstart;
 8001314:	9d03      	ldr	r5, [sp, #12]
						BgColor);

			StrHeight = font_GetCharHeight(font_GetFontStruct(FontID, *Str));
			break;
		}
		Str++;
 8001316:	3401      	adds	r4, #1
	while (!done) {
 8001318:	b9d7      	cbnz	r7, 8001350 <dispcolor_DrawString_General+0x7c>
		switch (*Str) {
 800131a:	7823      	ldrb	r3, [r4, #0]
 800131c:	2b0a      	cmp	r3, #10
 800131e:	d0ea      	beq.n	80012f6 <dispcolor_DrawString_General+0x22>
 8001320:	2b0d      	cmp	r3, #13
 8001322:	d0f7      	beq.n	8001314 <dispcolor_DrawString_General+0x40>
 8001324:	b193      	cbz	r3, 800134c <dispcolor_DrawString_General+0x78>
			if (TransparentBg)
 8001326:	f1b9 0f00 	cmp.w	r9, #0
 800132a:	d0e7      	beq.n	80012fc <dispcolor_DrawString_General+0x28>
				X += dispcolor_DrawChar(X, Y, FontID, *Str, TextColor);
 800132c:	f8cd a000 	str.w	sl, [sp]
 8001330:	4642      	mov	r2, r8
 8001332:	4631      	mov	r1, r6
 8001334:	4628      	mov	r0, r5
 8001336:	f7ff ffb2 	bl	800129e <dispcolor_DrawChar>
 800133a:	4428      	add	r0, r5
 800133c:	b205      	sxth	r5, r0
			StrHeight = font_GetCharHeight(font_GetFontStruct(FontID, *Str));
 800133e:	7821      	ldrb	r1, [r4, #0]
 8001340:	4640      	mov	r0, r8
 8001342:	f002 f983 	bl	800364c <font_GetFontStruct>
 8001346:	f002 f98d 	bl	8003664 <font_GetCharHeight>
			break;
 800134a:	e7e4      	b.n	8001316 <dispcolor_DrawString_General+0x42>
		switch (*Str) {
 800134c:	2701      	movs	r7, #1
 800134e:	e7e2      	b.n	8001316 <dispcolor_DrawString_General+0x42>
	}
	return X;
}
 8001350:	4628      	mov	r0, r5
 8001352:	b005      	add	sp, #20
 8001354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001358 <dispcolor_DrawString>:

int16_t dispcolor_DrawString(int16_t X, int16_t Y, uint8_t FontID, char *Str,
		uint16_t TextColor) {
 8001358:	b510      	push	{r4, lr}
 800135a:	b084      	sub	sp, #16
	return dispcolor_DrawString_General(X, Y, FontID, Str, TextColor, 0, 1);
 800135c:	2401      	movs	r4, #1
 800135e:	9402      	str	r4, [sp, #8]
 8001360:	2400      	movs	r4, #0
 8001362:	9401      	str	r4, [sp, #4]
 8001364:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8001368:	9400      	str	r4, [sp, #0]
 800136a:	f7ff ffb3 	bl	80012d4 <dispcolor_DrawString_General>
}
 800136e:	b004      	add	sp, #16
 8001370:	bd10      	pop	{r4, pc}
	...

08001374 <f10x16f_GetCharTable>:

//==============================================================================
uint8_t *f10x16f_GetCharTable(char Char)
{
	uint8_t charIdx = *((uint8_t *) &Char);
	return (uint8_t *)(&f10x16f_table[charIdx][0]);
 8001374:	eb00 1000 	add.w	r0, r0, r0, lsl #4
}
 8001378:	4b01      	ldr	r3, [pc, #4]	@ (8001380 <f10x16f_GetCharTable+0xc>)
 800137a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800137e:	4770      	bx	lr
 8001380:	08011a3c 	.word	0x08011a3c

08001384 <f24f_GetCharTable>:

//==============================================================================
uint8_t *f24f_GetCharTable(char Char)
{
	// ������ �����
	if ((Char >= 0x30) && (Char <= 0x39))
 8001384:	2839      	cmp	r0, #57	@ 0x39
 8001386:	d816      	bhi.n	80013b6 <f24f_GetCharTable+0x32>
 8001388:	2820      	cmp	r0, #32
 800138a:	d322      	bcc.n	80013d2 <f24f_GetCharTable+0x4e>
 800138c:	f1a0 0320 	sub.w	r3, r0, #32
 8001390:	2b19      	cmp	r3, #25
 8001392:	d80e      	bhi.n	80013b2 <f24f_GetCharTable+0x2e>
 8001394:	e8df f003 	tbb	[pc, r3]
 8001398:	0d0d0d1f 	.word	0x0d0d0d1f
 800139c:	0d0d1b0d 	.word	0x0d0d1b0d
 80013a0:	0d0d0d0d 	.word	0x0d0d0d0d
 80013a4:	0d190d0d 	.word	0x0d190d0d
 80013a8:	13131313 	.word	0x13131313
 80013ac:	13131313 	.word	0x13131313
 80013b0:	1313      	.short	0x1313
	if (Char == 0x2E)
		return (uint8_t *) f24f_table3;
	if (Char == 0xB0)
		return (uint8_t *) f24f_table4;
  if (Char == 0x25)
	  return (uint8_t *) f24f_table5;
 80013b2:	2000      	movs	r0, #0
 80013b4:	4770      	bx	lr
 80013b6:	28b0      	cmp	r0, #176	@ 0xb0
 80013b8:	d10f      	bne.n	80013da <f24f_GetCharTable+0x56>
		return (uint8_t *) f24f_table4;
 80013ba:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <f24f_GetCharTable+0x5c>)
 80013bc:	4770      	bx	lr
	    return (uint8_t *)(&f24f_table[Char - 0x30][0]);
 80013be:	3830      	subs	r0, #48	@ 0x30
 80013c0:	2232      	movs	r2, #50	@ 0x32
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <f24f_GetCharTable+0x60>)
 80013c4:	fb02 3000 	mla	r0, r2, r0, r3
 80013c8:	4770      	bx	lr
		return (uint8_t *) f24f_table3;
 80013ca:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <f24f_GetCharTable+0x64>)
 80013cc:	4770      	bx	lr
	  return (uint8_t *) f24f_table5;
 80013ce:	4807      	ldr	r0, [pc, #28]	@ (80013ec <f24f_GetCharTable+0x68>)
 80013d0:	4770      	bx	lr
 80013d2:	2000      	movs	r0, #0
 80013d4:	4770      	bx	lr
		return (uint8_t *) f24f_table2;
 80013d6:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <f24f_GetCharTable+0x6c>)
 80013d8:	4770      	bx	lr
	  return (uint8_t *) f24f_table5;
 80013da:	2000      	movs	r0, #0

	return 0;
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	08013c80 	.word	0x08013c80
 80013e4:	08013d1c 	.word	0x08013d1c
 80013e8:	08013cb4 	.word	0x08013cb4
 80013ec:	08013c3c 	.word	0x08013c3c
 80013f0:	08013ce8 	.word	0x08013ce8

080013f4 <f32f_GetCharTable>:
//==============================================================================

uint8_t *f32f_GetCharTable(char Char)
{
  // ������ �����
  if ((Char >= 0x30) && (Char <= 0x39))
 80013f4:	283a      	cmp	r0, #58	@ 0x3a
 80013f6:	d817      	bhi.n	8001428 <f32f_GetCharTable+0x34>
 80013f8:	2820      	cmp	r0, #32
 80013fa:	d328      	bcc.n	800144e <f32f_GetCharTable+0x5a>
 80013fc:	f1a0 0320 	sub.w	r3, r0, #32
 8001400:	2b1a      	cmp	r3, #26
 8001402:	d80f      	bhi.n	8001424 <f32f_GetCharTable+0x30>
 8001404:	e8df f003 	tbb	[pc, r3]
 8001408:	0e0e0e25 	.word	0x0e0e0e25
 800140c:	0e0e1d0e 	.word	0x0e0e1d0e
 8001410:	0e0e0e0e 	.word	0x0e0e0e0e
 8001414:	0e1b1f0e 	.word	0x0e1b1f0e
 8001418:	14141414 	.word	0x14141414
 800141c:	14141414 	.word	0x14141414
 8001420:	1414      	.short	0x1414
 8001422:	21          	.byte	0x21
 8001423:	00          	.byte	0x00
  if (Char == 0x25)
	  return (uint8_t *) f32f_table5;
  if (Char == 0x2D)
	  return (uint8_t *) f32f_table6;
  if (Char == 0x3A)
	  return (uint8_t *) f32f_table7;
 8001424:	2000      	movs	r0, #0
 8001426:	4770      	bx	lr
 8001428:	28b0      	cmp	r0, #176	@ 0xb0
 800142a:	d114      	bne.n	8001456 <f32f_GetCharTable+0x62>
	  return (uint8_t *) f32f_table4;
 800142c:	480b      	ldr	r0, [pc, #44]	@ (800145c <f32f_GetCharTable+0x68>)
 800142e:	4770      	bx	lr
    return (uint8_t *)(&f32f_table[Char - 0x30][0]);
 8001430:	3830      	subs	r0, #48	@ 0x30
 8001432:	eb00 1040 	add.w	r0, r0, r0, lsl #5
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <f32f_GetCharTable+0x6c>)
 8001438:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800143c:	4770      	bx	lr
	  return (uint8_t *) f32f_table3;
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <f32f_GetCharTable+0x70>)
 8001440:	4770      	bx	lr
	  return (uint8_t *) f32f_table5;
 8001442:	4809      	ldr	r0, [pc, #36]	@ (8001468 <f32f_GetCharTable+0x74>)
 8001444:	4770      	bx	lr
	  return (uint8_t *) f32f_table6;
 8001446:	4809      	ldr	r0, [pc, #36]	@ (800146c <f32f_GetCharTable+0x78>)
 8001448:	4770      	bx	lr
	  return (uint8_t *) f32f_table7;
 800144a:	4809      	ldr	r0, [pc, #36]	@ (8001470 <f32f_GetCharTable+0x7c>)
 800144c:	4770      	bx	lr
 800144e:	2000      	movs	r0, #0
 8001450:	4770      	bx	lr
	  return (uint8_t *) f32f_table2;
 8001452:	4808      	ldr	r0, [pc, #32]	@ (8001474 <f32f_GetCharTable+0x80>)
 8001454:	4770      	bx	lr
	  return (uint8_t *) f32f_table7;
 8001456:	2000      	movs	r0, #0
  return 0;
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	08013fdc 	.word	0x08013fdc
 8001460:	080140a8 	.word	0x080140a8
 8001464:	08014020 	.word	0x08014020
 8001468:	08013f98 	.word	0x08013f98
 800146c:	08013f54 	.word	0x08013f54
 8001470:	08013f10 	.word	0x08013f10
 8001474:	08014064 	.word	0x08014064

08001478 <f6x8m_GetCharTable>:

//==============================================================================
uint8_t *f6x8m_GetCharTable(char Char)
{
	uint8_t charIdx = *((uint8_t *) &Char);
	return (uint8_t *)(&f6x8m_table[charIdx][0]);
 8001478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 800147c:	4b01      	ldr	r3, [pc, #4]	@ (8001484 <f6x8m_GetCharTable+0xc>)
 800147e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001482:	4770      	bx	lr
 8001484:	0801433c 	.word	0x0801433c

08001488 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
extern RTC_HandleTypeDef hrtc;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001488:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800148a:	4903      	ldr	r1, [pc, #12]	@ (8001498 <MX_FATFS_Init+0x10>)
 800148c:	4803      	ldr	r0, [pc, #12]	@ (800149c <MX_FATFS_Init+0x14>)
 800148e:	f002 f8d7 	bl	8003640 <FATFS_LinkDriver>
 8001492:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <MX_FATFS_Init+0x18>)
 8001494:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001496:	bd08      	pop	{r3, pc}
 8001498:	20000338 	.word	0x20000338
 800149c:	2000013c 	.word	0x2000013c
 80014a0:	2000033c 	.word	0x2000033c

080014a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80014a4:	b510      	push	{r4, lr}
 80014a6:	b086      	sub	sp, #24
  // GET RTC DATETIME
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;
  
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80014a8:	4c12      	ldr	r4, [pc, #72]	@ (80014f4 <get_fattime+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	4669      	mov	r1, sp
 80014ae:	4620      	mov	r0, r4
 80014b0:	f008 fafd 	bl	8009aae <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80014b4:	2200      	movs	r2, #0
 80014b6:	a905      	add	r1, sp, #20
 80014b8:	4620      	mov	r0, r4
 80014ba:	f008 fb1e 	bl	8009afa <HAL_RTC_GetDate>
  
  return (DWORD)(gDate.Year-108)<<25|
 80014be:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80014c2:	3a6c      	subs	r2, #108	@ 0x6c
         (DWORD)(gDate.Month)<<21|
 80014c4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80014c8:	055b      	lsls	r3, r3, #21
  return (DWORD)(gDate.Year-108)<<25|
 80014ca:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
         (DWORD)(gDate.Date)<<16|
 80014ce:	f89d 2016 	ldrb.w	r2, [sp, #22]
         (DWORD)(gDate.Month)<<21|
 80014d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
         (DWORD)(gTime.Hours)<<11|
 80014d6:	f89d 2000 	ldrb.w	r2, [sp]
         (DWORD)(gDate.Date)<<16|
 80014da:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
         (DWORD)(gTime.Minutes)<<5|
 80014de:	f89d 2001 	ldrb.w	r2, [sp, #1]
         (DWORD)(gTime.Hours)<<11|
 80014e2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
         (DWORD)(gTime.Seconds)>>1;
 80014e6:	f89d 0002 	ldrb.w	r0, [sp, #2]
  /* USER CODE END get_fattime */
}
 80014ea:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
 80014ee:	b006      	add	sp, #24
 80014f0:	bd10      	pop	{r4, pc}
 80014f2:	bf00      	nop
 80014f4:	2001d0dc 	.word	0x2001d0dc

080014f8 <SD_PowerOff>:
}

/* 전원 끄기 */
static void SD_PowerOff(void)
{
  PowerFlag = 0;
 80014f8:	4b01      	ldr	r3, [pc, #4]	@ (8001500 <SD_PowerOff+0x8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	4770      	bx	lr
 8001500:	2000033d 	.word	0x2000033d

08001504 <SD_CheckPower>:
/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
  /*  0=off, 1=on */
  return PowerFlag;
}
 8001504:	4b01      	ldr	r3, [pc, #4]	@ (800150c <SD_CheckPower+0x8>)
 8001506:	7818      	ldrb	r0, [r3, #0]
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000033d 	.word	0x2000033d

08001510 <SPI_TxByte>:
{
 8001510:	b500      	push	{lr}
 8001512:	b083      	sub	sp, #12
 8001514:	f88d 0007 	strb.w	r0, [sp, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8001518:	4807      	ldr	r0, [pc, #28]	@ (8001538 <SPI_TxByte+0x28>)
 800151a:	f008 fee7 	bl	800a2ec <HAL_SPI_GetState>
 800151e:	2801      	cmp	r0, #1
 8001520:	d1fa      	bne.n	8001518 <SPI_TxByte+0x8>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001526:	2201      	movs	r2, #1
 8001528:	f10d 0107 	add.w	r1, sp, #7
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <SPI_TxByte+0x28>)
 800152e:	f008 fc10 	bl	8009d52 <HAL_SPI_Transmit>
}
 8001532:	b003      	add	sp, #12
 8001534:	f85d fb04 	ldr.w	pc, [sp], #4
 8001538:	2001d02c 	.word	0x2001d02c

0800153c <SELECT>:
{
 800153c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2102      	movs	r1, #2
 8001542:	4802      	ldr	r0, [pc, #8]	@ (800154c <SELECT+0x10>)
 8001544:	f005 fa30 	bl	80069a8 <HAL_GPIO_WritePin>
}
 8001548:	bd08      	pop	{r3, pc}
 800154a:	bf00      	nop
 800154c:	40020800 	.word	0x40020800

08001550 <DESELECT>:
{
 8001550:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2102      	movs	r1, #2
 8001556:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DESELECT+0x10>)
 8001558:	f005 fa26 	bl	80069a8 <HAL_GPIO_WritePin>
}
 800155c:	bd08      	pop	{r3, pc}
 800155e:	bf00      	nop
 8001560:	40020800 	.word	0x40020800

08001564 <SPI_RxByte>:
{
 8001564:	b500      	push	{lr}
 8001566:	b085      	sub	sp, #20
  dummy = 0xFF;
 8001568:	23ff      	movs	r3, #255	@ 0xff
 800156a:	f88d 300f 	strb.w	r3, [sp, #15]
  data = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f88d 300e 	strb.w	r3, [sp, #14]
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001574:	480a      	ldr	r0, [pc, #40]	@ (80015a0 <SPI_RxByte+0x3c>)
 8001576:	f008 feb9 	bl	800a2ec <HAL_SPI_GetState>
 800157a:	2801      	cmp	r0, #1
 800157c:	d1fa      	bne.n	8001574 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	f10d 020e 	add.w	r2, sp, #14
 800158a:	f10d 010f 	add.w	r1, sp, #15
 800158e:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <SPI_RxByte+0x3c>)
 8001590:	f008 fcc1 	bl	8009f16 <HAL_SPI_TransmitReceive>
}
 8001594:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001598:	b005      	add	sp, #20
 800159a:	f85d fb04 	ldr.w	pc, [sp], #4
 800159e:	bf00      	nop
 80015a0:	2001d02c 	.word	0x2001d02c

080015a4 <SD_PowerOn>:
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	b082      	sub	sp, #8
  DESELECT();
 80015a8:	f7ff ffd2 	bl	8001550 <DESELECT>
  for(int i = 0; i < 10; i++)
 80015ac:	2400      	movs	r4, #0
 80015ae:	e003      	b.n	80015b8 <SD_PowerOn+0x14>
    SPI_TxByte(0xFF);
 80015b0:	20ff      	movs	r0, #255	@ 0xff
 80015b2:	f7ff ffad 	bl	8001510 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80015b6:	3401      	adds	r4, #1
 80015b8:	2c09      	cmp	r4, #9
 80015ba:	ddf9      	ble.n	80015b0 <SD_PowerOn+0xc>
  SELECT();
 80015bc:	f7ff ffbe 	bl	800153c <SELECT>
  cmd_arg[0] = (CMD0 | 0x40);
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	f88d 3000 	strb.w	r3, [sp]
  cmd_arg[1] = 0;
 80015c6:	2400      	movs	r4, #0
 80015c8:	f88d 4001 	strb.w	r4, [sp, #1]
  cmd_arg[2] = 0;
 80015cc:	f88d 4002 	strb.w	r4, [sp, #2]
  cmd_arg[3] = 0;
 80015d0:	f88d 4003 	strb.w	r4, [sp, #3]
  cmd_arg[4] = 0;
 80015d4:	f88d 4004 	strb.w	r4, [sp, #4]
  cmd_arg[5] = 0x95;
 80015d8:	2395      	movs	r3, #149	@ 0x95
 80015da:	f88d 3005 	strb.w	r3, [sp, #5]
  for (int i = 0; i < 6; i++)
 80015de:	e007      	b.n	80015f0 <SD_PowerOn+0x4c>
    SPI_TxByte(cmd_arg[i]);
 80015e0:	f104 0308 	add.w	r3, r4, #8
 80015e4:	446b      	add	r3, sp
 80015e6:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 80015ea:	f7ff ff91 	bl	8001510 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80015ee:	3401      	adds	r4, #1
 80015f0:	2c05      	cmp	r4, #5
 80015f2:	ddf5      	ble.n	80015e0 <SD_PowerOn+0x3c>
  uint32_t Count = 0x1FFF;
 80015f4:	f641 74ff 	movw	r4, #8191	@ 0x1fff
  while ((SPI_RxByte() != 0x01) && Count)
 80015f8:	f7ff ffb4 	bl	8001564 <SPI_RxByte>
 80015fc:	2801      	cmp	r0, #1
 80015fe:	d002      	beq.n	8001606 <SD_PowerOn+0x62>
 8001600:	b10c      	cbz	r4, 8001606 <SD_PowerOn+0x62>
    Count--;
 8001602:	3c01      	subs	r4, #1
 8001604:	e7f8      	b.n	80015f8 <SD_PowerOn+0x54>
  DESELECT();
 8001606:	f7ff ffa3 	bl	8001550 <DESELECT>
  SPI_TxByte(0XFF);
 800160a:	20ff      	movs	r0, #255	@ 0xff
 800160c:	f7ff ff80 	bl	8001510 <SPI_TxByte>
  PowerFlag = 1;
 8001610:	4b02      	ldr	r3, [pc, #8]	@ (800161c <SD_PowerOn+0x78>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
}
 8001616:	b002      	add	sp, #8
 8001618:	bd10      	pop	{r4, pc}
 800161a:	bf00      	nop
 800161c:	2000033d 	.word	0x2000033d

08001620 <SD_ReadyWait>:
{
 8001620:	b508      	push	{r3, lr}
  Timer2 = 50;
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <SD_ReadyWait+0x20>)
 8001624:	2232      	movs	r2, #50	@ 0x32
 8001626:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001628:	f7ff ff9c 	bl	8001564 <SPI_RxByte>
    res = SPI_RxByte();
 800162c:	f7ff ff9a 	bl	8001564 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 8001630:	28ff      	cmp	r0, #255	@ 0xff
 8001632:	d003      	beq.n	800163c <SD_ReadyWait+0x1c>
 8001634:	4b02      	ldr	r3, [pc, #8]	@ (8001640 <SD_ReadyWait+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f7      	bne.n	800162c <SD_ReadyWait+0xc>
}
 800163c:	bd08      	pop	{r3, pc}
 800163e:	bf00      	nop
 8001640:	2001d21c 	.word	0x2001d21c

08001644 <SD_SendCmd>:
}
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	4605      	mov	r5, r0
 8001648:	460c      	mov	r4, r1
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800164a:	f7ff ffe9 	bl	8001620 <SD_ReadyWait>
 800164e:	28ff      	cmp	r0, #255	@ 0xff
 8001650:	d001      	beq.n	8001656 <SD_SendCmd+0x12>
    return 0xFF;
 8001652:	20ff      	movs	r0, #255	@ 0xff
  {
    res = SPI_RxByte();
  } while ((res & 0x80) && --n);

  return res;
}
 8001654:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(cmd); 			/* Command */
 8001656:	4628      	mov	r0, r5
 8001658:	f7ff ff5a 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800165c:	0e20      	lsrs	r0, r4, #24
 800165e:	f7ff ff57 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001662:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001666:	f7ff ff53 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800166a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800166e:	f7ff ff4f 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001672:	b2e0      	uxtb	r0, r4
 8001674:	f7ff ff4c 	bl	8001510 <SPI_TxByte>
  if (cmd == CMD0)
 8001678:	2d40      	cmp	r5, #64	@ 0x40
 800167a:	d011      	beq.n	80016a0 <SD_SendCmd+0x5c>
  if (cmd == CMD8)
 800167c:	2d48      	cmp	r5, #72	@ 0x48
 800167e:	d011      	beq.n	80016a4 <SD_SendCmd+0x60>
 8001680:	2000      	movs	r0, #0
  SPI_TxByte(crc);
 8001682:	f7ff ff45 	bl	8001510 <SPI_TxByte>
  if (cmd == CMD12)
 8001686:	2d4c      	cmp	r5, #76	@ 0x4c
 8001688:	d00e      	beq.n	80016a8 <SD_SendCmd+0x64>
    crc = 0x95; /* CRC for CMD0(0) */
 800168a:	240a      	movs	r4, #10
    res = SPI_RxByte();
 800168c:	f7ff ff6a 	bl	8001564 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 8001690:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8001694:	d0de      	beq.n	8001654 <SD_SendCmd+0x10>
 8001696:	1e63      	subs	r3, r4, #1
 8001698:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 800169c:	d1f6      	bne.n	800168c <SD_SendCmd+0x48>
 800169e:	e7d9      	b.n	8001654 <SD_SendCmd+0x10>
    crc = 0x95; /* CRC for CMD0(0) */
 80016a0:	2095      	movs	r0, #149	@ 0x95
 80016a2:	e7ee      	b.n	8001682 <SD_SendCmd+0x3e>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80016a4:	2087      	movs	r0, #135	@ 0x87
 80016a6:	e7ec      	b.n	8001682 <SD_SendCmd+0x3e>
    SPI_RxByte();
 80016a8:	f7ff ff5c 	bl	8001564 <SPI_RxByte>
 80016ac:	e7ed      	b.n	800168a <SD_SendCmd+0x46>

080016ae <SPI_RxBytePtr>:
{
 80016ae:	b510      	push	{r4, lr}
 80016b0:	4604      	mov	r4, r0
  *buff = SPI_RxByte();
 80016b2:	f7ff ff57 	bl	8001564 <SPI_RxByte>
 80016b6:	7020      	strb	r0, [r4, #0]
}
 80016b8:	bd10      	pop	{r4, pc}
	...

080016bc <SD_RxDataBlock>:
{
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	4604      	mov	r4, r0
 80016c0:	460e      	mov	r6, r1
  Timer1 = 10;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <SD_RxDataBlock+0x44>)
 80016c4:	220a      	movs	r2, #10
 80016c6:	701a      	strb	r2, [r3, #0]
    token = SPI_RxByte();
 80016c8:	f7ff ff4c 	bl	8001564 <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 80016cc:	28ff      	cmp	r0, #255	@ 0xff
 80016ce:	d103      	bne.n	80016d8 <SD_RxDataBlock+0x1c>
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <SD_RxDataBlock+0x44>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f7      	bne.n	80016c8 <SD_RxDataBlock+0xc>
  if(token != 0xFE)
 80016d8:	28fe      	cmp	r0, #254	@ 0xfe
 80016da:	d10f      	bne.n	80016fc <SD_RxDataBlock+0x40>
    SPI_RxBytePtr(buff++);
 80016dc:	1c65      	adds	r5, r4, #1
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff ffe5 	bl	80016ae <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80016e4:	4628      	mov	r0, r5
 80016e6:	3402      	adds	r4, #2
 80016e8:	f7ff ffe1 	bl	80016ae <SPI_RxBytePtr>
  } while(btr -= 2);
 80016ec:	3e02      	subs	r6, #2
 80016ee:	d1f5      	bne.n	80016dc <SD_RxDataBlock+0x20>
  SPI_RxByte(); /* CRC 무시 */
 80016f0:	f7ff ff38 	bl	8001564 <SPI_RxByte>
  SPI_RxByte();
 80016f4:	f7ff ff36 	bl	8001564 <SPI_RxByte>
  return TRUE;
 80016f8:	2001      	movs	r0, #1
}
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 80016fc:	2000      	movs	r0, #0
 80016fe:	e7fc      	b.n	80016fa <SD_RxDataBlock+0x3e>
 8001700:	2001d21d 	.word	0x2001d21d

08001704 <SD_TxDataBlock>:
{
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	4605      	mov	r5, r0
 8001708:	460c      	mov	r4, r1
  if (SD_ReadyWait() != 0xFF)
 800170a:	f7ff ff89 	bl	8001620 <SD_ReadyWait>
 800170e:	28ff      	cmp	r0, #255	@ 0xff
 8001710:	d001      	beq.n	8001716 <SD_TxDataBlock+0x12>
    return FALSE;
 8001712:	2000      	movs	r0, #0
}
 8001714:	bd70      	pop	{r4, r5, r6, pc}
 8001716:	2600      	movs	r6, #0
  SPI_TxByte(token);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fef9 	bl	8001510 <SPI_TxByte>
  if (token != 0xFD)
 800171e:	2cfd      	cmp	r4, #253	@ 0xfd
 8001720:	d01f      	beq.n	8001762 <SD_TxDataBlock+0x5e>
    wc = 0;
 8001722:	4634      	mov	r4, r6
      SPI_TxByte(*buff++);
 8001724:	7828      	ldrb	r0, [r5, #0]
 8001726:	f7ff fef3 	bl	8001510 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800172a:	7868      	ldrb	r0, [r5, #1]
 800172c:	3502      	adds	r5, #2
 800172e:	f7ff feef 	bl	8001510 <SPI_TxByte>
    } while (--wc);
 8001732:	1e63      	subs	r3, r4, #1
 8001734:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8001738:	d1f4      	bne.n	8001724 <SD_TxDataBlock+0x20>
    SPI_RxByte();       /* CRC 무시 */
 800173a:	f7ff ff13 	bl	8001564 <SPI_RxByte>
    SPI_RxByte();
 800173e:	f7ff ff11 	bl	8001564 <SPI_RxByte>
    while (i <= 64)
 8001742:	2c40      	cmp	r4, #64	@ 0x40
 8001744:	d809      	bhi.n	800175a <SD_TxDataBlock+0x56>
      resp = SPI_RxByte();
 8001746:	f7ff ff0d 	bl	8001564 <SPI_RxByte>
 800174a:	4606      	mov	r6, r0
      if ((resp & 0x1F) == 0x05)
 800174c:	f000 031f 	and.w	r3, r0, #31
 8001750:	2b05      	cmp	r3, #5
 8001752:	d002      	beq.n	800175a <SD_TxDataBlock+0x56>
      i++;
 8001754:	1c63      	adds	r3, r4, #1
 8001756:	b2dc      	uxtb	r4, r3
 8001758:	e7f3      	b.n	8001742 <SD_TxDataBlock+0x3e>
    while (SPI_RxByte() == 0);
 800175a:	f7ff ff03 	bl	8001564 <SPI_RxByte>
 800175e:	2800      	cmp	r0, #0
 8001760:	d0fb      	beq.n	800175a <SD_TxDataBlock+0x56>
  if ((resp & 0x1F) == 0x05)
 8001762:	f006 061f 	and.w	r6, r6, #31
 8001766:	2e05      	cmp	r6, #5
 8001768:	d001      	beq.n	800176e <SD_TxDataBlock+0x6a>
    return FALSE;
 800176a:	2000      	movs	r0, #0
 800176c:	e7d2      	b.n	8001714 <SD_TxDataBlock+0x10>
    return TRUE;
 800176e:	2001      	movs	r0, #1
 8001770:	e7d0      	b.n	8001714 <SD_TxDataBlock+0x10>
	...

08001774 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv)
{
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001774:	2800      	cmp	r0, #0
 8001776:	f040 80b6 	bne.w	80018e6 <SD_disk_initialize+0x172>
{
 800177a:	b530      	push	{r4, r5, lr}
 800177c:	b083      	sub	sp, #12
    return STA_NOINIT;

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800177e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <SD_disk_initialize+0x178>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f013 0402 	ands.w	r4, r3, #2
 8001786:	d004      	beq.n	8001792 <SD_disk_initialize+0x1e>
    return Stat;
 8001788:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <SD_disk_initialize+0x178>)
 800178a:	7818      	ldrb	r0, [r3, #0]
 800178c:	b2c0      	uxtb	r0, r0
    /* Initialization failed */
    SD_PowerOff();
  }

  return Stat;
}
 800178e:	b003      	add	sp, #12
 8001790:	bd30      	pop	{r4, r5, pc}
  SD_PowerOn();
 8001792:	f7ff ff07 	bl	80015a4 <SD_PowerOn>
  SELECT();
 8001796:	f7ff fed1 	bl	800153c <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1)
 800179a:	2100      	movs	r1, #0
 800179c:	2040      	movs	r0, #64	@ 0x40
 800179e:	f7ff ff51 	bl	8001644 <SD_SendCmd>
 80017a2:	4605      	mov	r5, r0
 80017a4:	2801      	cmp	r0, #1
 80017a6:	d011      	beq.n	80017cc <SD_disk_initialize+0x58>
  CardType = type;
 80017a8:	4b51      	ldr	r3, [pc, #324]	@ (80018f0 <SD_disk_initialize+0x17c>)
 80017aa:	701c      	strb	r4, [r3, #0]
  DESELECT();
 80017ac:	f7ff fed0 	bl	8001550 <DESELECT>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80017b0:	f7ff fed8 	bl	8001564 <SPI_RxByte>
  if (type)
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	f000 8093 	beq.w	80018e0 <SD_disk_initialize+0x16c>
    Stat &= ~STA_NOINIT;
 80017ba:	4a4c      	ldr	r2, [pc, #304]	@ (80018ec <SD_disk_initialize+0x178>)
 80017bc:	7813      	ldrb	r3, [r2, #0]
 80017be:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80017c2:	7013      	strb	r3, [r2, #0]
  return Stat;
 80017c4:	4b49      	ldr	r3, [pc, #292]	@ (80018ec <SD_disk_initialize+0x178>)
 80017c6:	7818      	ldrb	r0, [r3, #0]
 80017c8:	b2c0      	uxtb	r0, r0
 80017ca:	e7e0      	b.n	800178e <SD_disk_initialize+0x1a>
    Timer1 = 100;
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <SD_disk_initialize+0x180>)
 80017ce:	2264      	movs	r2, #100	@ 0x64
 80017d0:	701a      	strb	r2, [r3, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80017d2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80017d6:	2048      	movs	r0, #72	@ 0x48
 80017d8:	f7ff ff34 	bl	8001644 <SD_SendCmd>
 80017dc:	2801      	cmp	r0, #1
 80017de:	d146      	bne.n	800186e <SD_disk_initialize+0xfa>
      for (n = 0; n < 4; n++)
 80017e0:	4625      	mov	r5, r4
 80017e2:	e008      	b.n	80017f6 <SD_disk_initialize+0x82>
        ocr[n] = SPI_RxByte();
 80017e4:	f7ff febe 	bl	8001564 <SPI_RxByte>
 80017e8:	f105 0308 	add.w	r3, r5, #8
 80017ec:	446b      	add	r3, sp
 80017ee:	f803 0c04 	strb.w	r0, [r3, #-4]
      for (n = 0; n < 4; n++)
 80017f2:	3501      	adds	r5, #1
 80017f4:	b2ed      	uxtb	r5, r5
 80017f6:	2d03      	cmp	r5, #3
 80017f8:	d9f4      	bls.n	80017e4 <SD_disk_initialize+0x70>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80017fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d1d2      	bne.n	80017a8 <SD_disk_initialize+0x34>
 8001802:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001806:	2baa      	cmp	r3, #170	@ 0xaa
 8001808:	d1ce      	bne.n	80017a8 <SD_disk_initialize+0x34>
 800180a:	e002      	b.n	8001812 <SD_disk_initialize+0x9e>
        } while (Timer1);
 800180c:	4b39      	ldr	r3, [pc, #228]	@ (80018f4 <SD_disk_initialize+0x180>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b163      	cbz	r3, 800182c <SD_disk_initialize+0xb8>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001812:	2100      	movs	r1, #0
 8001814:	2077      	movs	r0, #119	@ 0x77
 8001816:	f7ff ff15 	bl	8001644 <SD_SendCmd>
 800181a:	2801      	cmp	r0, #1
 800181c:	d8f6      	bhi.n	800180c <SD_disk_initialize+0x98>
 800181e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001822:	2069      	movs	r0, #105	@ 0x69
 8001824:	f7ff ff0e 	bl	8001644 <SD_SendCmd>
 8001828:	2800      	cmp	r0, #0
 800182a:	d1ef      	bne.n	800180c <SD_disk_initialize+0x98>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800182c:	4b31      	ldr	r3, [pc, #196]	@ (80018f4 <SD_disk_initialize+0x180>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001834:	b90b      	cbnz	r3, 800183a <SD_disk_initialize+0xc6>
  type = 0;
 8001836:	4614      	mov	r4, r2
 8001838:	e7b6      	b.n	80017a8 <SD_disk_initialize+0x34>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800183a:	2100      	movs	r1, #0
 800183c:	207a      	movs	r0, #122	@ 0x7a
 800183e:	f7ff ff01 	bl	8001644 <SD_SendCmd>
 8001842:	4605      	mov	r5, r0
 8001844:	2800      	cmp	r0, #0
 8001846:	d1af      	bne.n	80017a8 <SD_disk_initialize+0x34>
          for (n = 0; n < 4; n++)
 8001848:	2d03      	cmp	r5, #3
 800184a:	d809      	bhi.n	8001860 <SD_disk_initialize+0xec>
            ocr[n] = SPI_RxByte();
 800184c:	f7ff fe8a 	bl	8001564 <SPI_RxByte>
 8001850:	f105 0308 	add.w	r3, r5, #8
 8001854:	446b      	add	r3, sp
 8001856:	f803 0c04 	strb.w	r0, [r3, #-4]
          for (n = 0; n < 4; n++)
 800185a:	3501      	adds	r5, #1
 800185c:	b2ed      	uxtb	r5, r5
 800185e:	e7f3      	b.n	8001848 <SD_disk_initialize+0xd4>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001860:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001864:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001868:	d038      	beq.n	80018dc <SD_disk_initialize+0x168>
 800186a:	2406      	movs	r4, #6
 800186c:	e79c      	b.n	80017a8 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800186e:	2100      	movs	r1, #0
 8001870:	2077      	movs	r0, #119	@ 0x77
 8001872:	f7ff fee7 	bl	8001644 <SD_SendCmd>
 8001876:	2801      	cmp	r0, #1
 8001878:	d810      	bhi.n	800189c <SD_disk_initialize+0x128>
 800187a:	2100      	movs	r1, #0
 800187c:	2069      	movs	r0, #105	@ 0x69
 800187e:	f7ff fee1 	bl	8001644 <SD_SendCmd>
 8001882:	2801      	cmp	r0, #1
 8001884:	d80a      	bhi.n	800189c <SD_disk_initialize+0x128>
 8001886:	2502      	movs	r5, #2
 8001888:	e008      	b.n	800189c <SD_disk_initialize+0x128>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800188a:	2100      	movs	r1, #0
 800188c:	2077      	movs	r0, #119	@ 0x77
 800188e:	f7ff fed9 	bl	8001644 <SD_SendCmd>
 8001892:	2801      	cmp	r0, #1
 8001894:	d911      	bls.n	80018ba <SD_disk_initialize+0x146>
      } while (Timer1);
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <SD_disk_initialize+0x180>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b13b      	cbz	r3, 80018ac <SD_disk_initialize+0x138>
        if (type == 2)
 800189c:	2d02      	cmp	r5, #2
 800189e:	d0f4      	beq.n	800188a <SD_disk_initialize+0x116>
          if (SD_SendCmd(CMD1, 0) == 0)
 80018a0:	2100      	movs	r1, #0
 80018a2:	2041      	movs	r0, #65	@ 0x41
 80018a4:	f7ff fece 	bl	8001644 <SD_SendCmd>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d1f4      	bne.n	8001896 <SD_disk_initialize+0x122>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <SD_disk_initialize+0x180>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80018b4:	b943      	cbnz	r3, 80018c8 <SD_disk_initialize+0x154>
        type = 0;
 80018b6:	4614      	mov	r4, r2
 80018b8:	e776      	b.n	80017a8 <SD_disk_initialize+0x34>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80018ba:	2100      	movs	r1, #0
 80018bc:	2069      	movs	r0, #105	@ 0x69
 80018be:	f7ff fec1 	bl	8001644 <SD_SendCmd>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d1e7      	bne.n	8001896 <SD_disk_initialize+0x122>
 80018c6:	e7f1      	b.n	80018ac <SD_disk_initialize+0x138>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80018c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018cc:	2050      	movs	r0, #80	@ 0x50
 80018ce:	f7ff feb9 	bl	8001644 <SD_SendCmd>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	f47f af68 	bne.w	80017a8 <SD_disk_initialize+0x34>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80018d8:	462c      	mov	r4, r5
 80018da:	e765      	b.n	80017a8 <SD_disk_initialize+0x34>
          type = (ocr[0] & 0x40) ? 6 : 2;
 80018dc:	2402      	movs	r4, #2
 80018de:	e763      	b.n	80017a8 <SD_disk_initialize+0x34>
    SD_PowerOff();
 80018e0:	f7ff fe0a 	bl	80014f8 <SD_PowerOff>
 80018e4:	e76e      	b.n	80017c4 <SD_disk_initialize+0x50>
    return STA_NOINIT;
 80018e6:	2001      	movs	r0, #1
}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000000 	.word	0x20000000
 80018f0:	2000033e 	.word	0x2000033e
 80018f4:	2001d21d 	.word	0x2001d21d

080018f8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
  if (drv)
 80018f8:	b918      	cbnz	r0, 8001902 <SD_disk_status+0xa>
    return STA_NOINIT;

  return Stat;
 80018fa:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <SD_disk_status+0x10>)
 80018fc:	7818      	ldrb	r0, [r3, #0]
 80018fe:	b2c0      	uxtb	r0, r0
 8001900:	4770      	bx	lr
    return STA_NOINIT;
 8001902:	2001      	movs	r0, #1
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 800190c:	2800      	cmp	r0, #0
 800190e:	d13e      	bne.n	800198e <SD_disk_read+0x82>
{
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	460d      	mov	r5, r1
 8001914:	4616      	mov	r6, r2
 8001916:	461c      	mov	r4, r3
  if (pdrv || !count)
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03a      	beq.n	8001992 <SD_disk_read+0x86>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 800191c:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <SD_disk_read+0x90>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	f013 0f01 	tst.w	r3, #1
 8001924:	d137      	bne.n	8001996 <SD_disk_read+0x8a>
    return RES_NOTRDY;

  if (!(CardType & 4))
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <SD_disk_read+0x94>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f013 0f04 	tst.w	r3, #4
 800192e:	d100      	bne.n	8001932 <SD_disk_read+0x26>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001930:	0256      	lsls	r6, r2, #9

  SELECT();
 8001932:	f7ff fe03 	bl	800153c <SELECT>

  if (count == 1)
 8001936:	2c01      	cmp	r4, #1
 8001938:	d01a      	beq.n	8001970 <SD_disk_read+0x64>
      count = 0;
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800193a:	4631      	mov	r1, r6
 800193c:	2052      	movs	r0, #82	@ 0x52
 800193e:	f7ff fe81 	bl	8001644 <SD_SendCmd>
 8001942:	b968      	cbnz	r0, 8001960 <SD_disk_read+0x54>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001944:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001948:	4628      	mov	r0, r5
 800194a:	f7ff feb7 	bl	80016bc <SD_RxDataBlock>
 800194e:	b118      	cbz	r0, 8001958 <SD_disk_read+0x4c>
          break;

        buff += 512;
 8001950:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      } while (--count);
 8001954:	3c01      	subs	r4, #1
 8001956:	d1f5      	bne.n	8001944 <SD_disk_read+0x38>

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001958:	2100      	movs	r1, #0
 800195a:	204c      	movs	r0, #76	@ 0x4c
 800195c:	f7ff fe72 	bl	8001644 <SD_SendCmd>
    }
  }

  DESELECT();
 8001960:	f7ff fdf6 	bl	8001550 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001964:	f7ff fdfe 	bl	8001564 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001968:	1e20      	subs	r0, r4, #0
 800196a:	bf18      	it	ne
 800196c:	2001      	movne	r0, #1
}
 800196e:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001970:	4631      	mov	r1, r6
 8001972:	2051      	movs	r0, #81	@ 0x51
 8001974:	f7ff fe66 	bl	8001644 <SD_SendCmd>
 8001978:	2800      	cmp	r0, #0
 800197a:	d1f1      	bne.n	8001960 <SD_disk_read+0x54>
 800197c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001980:	4628      	mov	r0, r5
 8001982:	f7ff fe9b 	bl	80016bc <SD_RxDataBlock>
 8001986:	2800      	cmp	r0, #0
 8001988:	d0ea      	beq.n	8001960 <SD_disk_read+0x54>
      count = 0;
 800198a:	2400      	movs	r4, #0
 800198c:	e7e8      	b.n	8001960 <SD_disk_read+0x54>
    return RES_PARERR;
 800198e:	2004      	movs	r0, #4
}
 8001990:	4770      	bx	lr
    return RES_PARERR;
 8001992:	2004      	movs	r0, #4
 8001994:	e7eb      	b.n	800196e <SD_disk_read+0x62>
    return RES_NOTRDY;
 8001996:	2003      	movs	r0, #3
 8001998:	e7e9      	b.n	800196e <SD_disk_read+0x62>
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000
 80019a0:	2000033e 	.word	0x2000033e

080019a4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
  if (pdrv || !count)
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d152      	bne.n	8001a4e <SD_disk_write+0xaa>
{
 80019a8:	b570      	push	{r4, r5, r6, lr}
 80019aa:	460d      	mov	r5, r1
 80019ac:	4616      	mov	r6, r2
 80019ae:	461c      	mov	r4, r3
  if (pdrv || !count)
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d04e      	beq.n	8001a52 <SD_disk_write+0xae>
    return RES_PARERR;

  if (Stat & STA_NOINIT)
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <SD_disk_write+0xbc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	f013 0f01 	tst.w	r3, #1
 80019bc:	d14b      	bne.n	8001a56 <SD_disk_write+0xb2>
    return RES_NOTRDY;

  if (Stat & STA_PROTECT)
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <SD_disk_write+0xbc>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f013 0f04 	tst.w	r3, #4
 80019c6:	d148      	bne.n	8001a5a <SD_disk_write+0xb6>
    return RES_WRPRT;

  if (!(CardType & 4))
 80019c8:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <SD_disk_write+0xc0>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	f013 0f04 	tst.w	r3, #4
 80019d0:	d100      	bne.n	80019d4 <SD_disk_write+0x30>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80019d2:	0256      	lsls	r6, r2, #9

  SELECT();
 80019d4:	f7ff fdb2 	bl	800153c <SELECT>

  if (count == 1)
 80019d8:	2c01      	cmp	r4, #1
 80019da:	d01f      	beq.n	8001a1c <SD_disk_write+0x78>
      count = 0;
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80019dc:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <SD_disk_write+0xc0>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	f013 0f02 	tst.w	r3, #2
 80019e4:	d128      	bne.n	8001a38 <SD_disk_write+0x94>
    {
      SD_SendCmd(CMD55, 0);
      SD_SendCmd(CMD23, count); /* ACMD23 */
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80019e6:	4631      	mov	r1, r6
 80019e8:	2059      	movs	r0, #89	@ 0x59
 80019ea:	f7ff fe2b 	bl	8001644 <SD_SendCmd>
 80019ee:	b968      	cbnz	r0, 8001a0c <SD_disk_write+0x68>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80019f0:	21fc      	movs	r1, #252	@ 0xfc
 80019f2:	4628      	mov	r0, r5
 80019f4:	f7ff fe86 	bl	8001704 <SD_TxDataBlock>
 80019f8:	b118      	cbz	r0, 8001a02 <SD_disk_write+0x5e>
          break;

        buff += 512;
 80019fa:	f505 7500 	add.w	r5, r5, #512	@ 0x200
      } while (--count);
 80019fe:	3c01      	subs	r4, #1
 8001a00:	d1f6      	bne.n	80019f0 <SD_disk_write+0x4c>

      if(!SD_TxDataBlock(0, 0xFD))
 8001a02:	21fd      	movs	r1, #253	@ 0xfd
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fe7d 	bl	8001704 <SD_TxDataBlock>
 8001a0a:	b1f0      	cbz	r0, 8001a4a <SD_disk_write+0xa6>
        count = 1;
      }
    }
  }

  DESELECT();
 8001a0c:	f7ff fda0 	bl	8001550 <DESELECT>
  SPI_RxByte();
 8001a10:	f7ff fda8 	bl	8001564 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001a14:	1e20      	subs	r0, r4, #0
 8001a16:	bf18      	it	ne
 8001a18:	2001      	movne	r0, #1
}
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001a1c:	4631      	mov	r1, r6
 8001a1e:	2058      	movs	r0, #88	@ 0x58
 8001a20:	f7ff fe10 	bl	8001644 <SD_SendCmd>
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d1f1      	bne.n	8001a0c <SD_disk_write+0x68>
 8001a28:	21fe      	movs	r1, #254	@ 0xfe
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7ff fe6a 	bl	8001704 <SD_TxDataBlock>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d0eb      	beq.n	8001a0c <SD_disk_write+0x68>
      count = 0;
 8001a34:	2400      	movs	r4, #0
 8001a36:	e7e9      	b.n	8001a0c <SD_disk_write+0x68>
      SD_SendCmd(CMD55, 0);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2077      	movs	r0, #119	@ 0x77
 8001a3c:	f7ff fe02 	bl	8001644 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001a40:	4621      	mov	r1, r4
 8001a42:	2057      	movs	r0, #87	@ 0x57
 8001a44:	f7ff fdfe 	bl	8001644 <SD_SendCmd>
 8001a48:	e7cd      	b.n	80019e6 <SD_disk_write+0x42>
        count = 1;
 8001a4a:	2401      	movs	r4, #1
 8001a4c:	e7de      	b.n	8001a0c <SD_disk_write+0x68>
    return RES_PARERR;
 8001a4e:	2004      	movs	r0, #4
}
 8001a50:	4770      	bx	lr
    return RES_PARERR;
 8001a52:	2004      	movs	r0, #4
 8001a54:	e7e1      	b.n	8001a1a <SD_disk_write+0x76>
    return RES_NOTRDY;
 8001a56:	2003      	movs	r0, #3
 8001a58:	e7df      	b.n	8001a1a <SD_disk_write+0x76>
    return RES_WRPRT;
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	e7dd      	b.n	8001a1a <SD_disk_write+0x76>
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000
 8001a64:	2000033e 	.word	0x2000033e

08001a68 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001a68:	b570      	push	{r4, r5, r6, lr}
 8001a6a:	b084      	sub	sp, #16
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;

  if (drv)
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	f040 80b7 	bne.w	8001be0 <SD_disk_ioctl+0x178>
 8001a72:	460d      	mov	r5, r1
 8001a74:	4616      	mov	r6, r2
 8001a76:	4604      	mov	r4, r0
    return RES_PARERR;

  res = RES_ERROR;

  if (ctrl == CTRL_POWER)
 8001a78:	2905      	cmp	r1, #5
 8001a7a:	d013      	beq.n	8001aa4 <SD_disk_ioctl+0x3c>
      res = RES_PARERR;
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001a7c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bec <SD_disk_ioctl+0x184>)
 8001a7e:	781c      	ldrb	r4, [r3, #0]
 8001a80:	f014 0401 	ands.w	r4, r4, #1
 8001a84:	f040 80b0 	bne.w	8001be8 <SD_disk_ioctl+0x180>
      return RES_NOTRDY;

    SELECT();
 8001a88:	f7ff fd58 	bl	800153c <SELECT>

    switch (ctrl)
 8001a8c:	2d0d      	cmp	r5, #13
 8001a8e:	f200 809b 	bhi.w	8001bc8 <SD_disk_ioctl+0x160>
 8001a92:	e8df f005 	tbb	[pc, r5]
 8001a96:	2063      	.short	0x2063
 8001a98:	9999995f 	.word	0x9999995f
 8001a9c:	99999999 	.word	0x99999999
 8001aa0:	87786999 	.word	0x87786999
    switch (*ptr)
 8001aa4:	7815      	ldrb	r5, [r2, #0]
 8001aa6:	2d01      	cmp	r5, #1
 8001aa8:	d00e      	beq.n	8001ac8 <SD_disk_ioctl+0x60>
 8001aaa:	2d02      	cmp	r5, #2
 8001aac:	d00f      	beq.n	8001ace <SD_disk_ioctl+0x66>
 8001aae:	2d00      	cmp	r5, #0
 8001ab0:	f040 8098 	bne.w	8001be4 <SD_disk_ioctl+0x17c>
      if (SD_CheckPower())
 8001ab4:	f7ff fd26 	bl	8001504 <SD_CheckPower>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	2800      	cmp	r0, #0
 8001abc:	f000 8089 	beq.w	8001bd2 <SD_disk_ioctl+0x16a>
        SD_PowerOff();          /* Power Off */
 8001ac0:	f7ff fd1a 	bl	80014f8 <SD_PowerOff>
      res = RES_OK;
 8001ac4:	462c      	mov	r4, r5
 8001ac6:	e084      	b.n	8001bd2 <SD_disk_ioctl+0x16a>
      SD_PowerOn();             /* Power On */
 8001ac8:	f7ff fd6c 	bl	80015a4 <SD_PowerOn>
      break;
 8001acc:	e081      	b.n	8001bd2 <SD_disk_ioctl+0x16a>
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001ace:	f7ff fd19 	bl	8001504 <SD_CheckPower>
 8001ad2:	7070      	strb	r0, [r6, #1]
      break;
 8001ad4:	e07d      	b.n	8001bd2 <SD_disk_ioctl+0x16a>
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2049      	movs	r0, #73	@ 0x49
 8001ada:	f7ff fdb3 	bl	8001644 <SD_SendCmd>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	b108      	cbz	r0, 8001ae6 <SD_disk_ioctl+0x7e>
  res = RES_ERROR;
 8001ae2:	462c      	mov	r4, r5
 8001ae4:	e071      	b.n	8001bca <SD_disk_ioctl+0x162>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	4668      	mov	r0, sp
 8001aea:	f7ff fde7 	bl	80016bc <SD_RxDataBlock>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d072      	beq.n	8001bd8 <SD_disk_ioctl+0x170>
      {
        if ((csd[0] >> 6) == 1)
 8001af2:	f89d 3000 	ldrb.w	r3, [sp]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d01f      	beq.n	8001b3c <SD_disk_ioctl+0xd4>
          *(DWORD*) buff = (DWORD) csize << 10;
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001afc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001b00:	f002 020f 	and.w	r2, r2, #15
 8001b04:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001b08:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8001b0c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	f003 0306 	and.w	r3, r3, #6
 8001b16:	441a      	add	r2, r3
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001b18:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001b1c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001b26:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8001b2a:	0289      	lsls	r1, r1, #10
 8001b2c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8001b30:	440b      	add	r3, r1
 8001b32:	3301      	adds	r3, #1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001b34:	3a07      	subs	r2, #7
 8001b36:	4093      	lsls	r3, r2
 8001b38:	6033      	str	r3, [r6, #0]
 8001b3a:	e046      	b.n	8001bca <SD_disk_ioctl+0x162>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001b3c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001b40:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001b44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
          *(DWORD*) buff = (DWORD) csize << 10;
 8001b4e:	029b      	lsls	r3, r3, #10
 8001b50:	6033      	str	r3, [r6, #0]
 8001b52:	e03a      	b.n	8001bca <SD_disk_ioctl+0x162>
      }
      break;

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001b54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b58:	8033      	strh	r3, [r6, #0]
      res = RES_OK;
      break;
 8001b5a:	e036      	b.n	8001bca <SD_disk_ioctl+0x162>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001b5c:	f7ff fd60 	bl	8001620 <SD_ReadyWait>
 8001b60:	28ff      	cmp	r0, #255	@ 0xff
 8001b62:	d03b      	beq.n	8001bdc <SD_disk_ioctl+0x174>
  res = RES_ERROR;
 8001b64:	2401      	movs	r4, #1
 8001b66:	e030      	b.n	8001bca <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2049      	movs	r0, #73	@ 0x49
 8001b6c:	f7ff fd6a 	bl	8001644 <SD_SendCmd>
 8001b70:	4604      	mov	r4, r0
 8001b72:	b108      	cbz	r0, 8001b78 <SD_disk_ioctl+0x110>
  res = RES_ERROR;
 8001b74:	2401      	movs	r4, #1
 8001b76:	e028      	b.n	8001bca <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b78:	2110      	movs	r1, #16
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7ff fd9e 	bl	80016bc <SD_RxDataBlock>
 8001b80:	bb18      	cbnz	r0, 8001bca <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 8001b82:	2401      	movs	r4, #1
 8001b84:	e021      	b.n	8001bca <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b86:	2100      	movs	r1, #0
 8001b88:	204a      	movs	r0, #74	@ 0x4a
 8001b8a:	f7ff fd5b 	bl	8001644 <SD_SendCmd>
 8001b8e:	4604      	mov	r4, r0
 8001b90:	b108      	cbz	r0, 8001b96 <SD_disk_ioctl+0x12e>
  res = RES_ERROR;
 8001b92:	2401      	movs	r4, #1
 8001b94:	e019      	b.n	8001bca <SD_disk_ioctl+0x162>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001b96:	2110      	movs	r1, #16
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f7ff fd8f 	bl	80016bc <SD_RxDataBlock>
 8001b9e:	b9a0      	cbnz	r0, 8001bca <SD_disk_ioctl+0x162>
  res = RES_ERROR;
 8001ba0:	2401      	movs	r4, #1
 8001ba2:	e012      	b.n	8001bca <SD_disk_ioctl+0x162>
        res = RES_OK;
      break;

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	207a      	movs	r0, #122	@ 0x7a
 8001ba8:	f7ff fd4c 	bl	8001644 <SD_SendCmd>
 8001bac:	4604      	mov	r4, r0
 8001bae:	b138      	cbz	r0, 8001bc0 <SD_disk_ioctl+0x158>

        res = RES_OK;
      }

    default:
      res = RES_PARERR;
 8001bb0:	2404      	movs	r4, #4
 8001bb2:	e00a      	b.n	8001bca <SD_disk_ioctl+0x162>
          *ptr++ = SPI_RxByte();
 8001bb4:	f7ff fcd6 	bl	8001564 <SPI_RxByte>
 8001bb8:	f806 0b01 	strb.w	r0, [r6], #1
        for (n = 0; n < 4; n++)
 8001bbc:	3401      	adds	r4, #1
 8001bbe:	b2e4      	uxtb	r4, r4
 8001bc0:	2c03      	cmp	r4, #3
 8001bc2:	d9f7      	bls.n	8001bb4 <SD_disk_ioctl+0x14c>
      res = RES_PARERR;
 8001bc4:	2404      	movs	r4, #4
 8001bc6:	e000      	b.n	8001bca <SD_disk_ioctl+0x162>
    switch (ctrl)
 8001bc8:	2404      	movs	r4, #4
    }

    DESELECT();
 8001bca:	f7ff fcc1 	bl	8001550 <DESELECT>
    SPI_RxByte();
 8001bce:	f7ff fcc9 	bl	8001564 <SPI_RxByte>
  }

  return res;
}
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
  res = RES_ERROR;
 8001bd8:	462c      	mov	r4, r5
 8001bda:	e7f6      	b.n	8001bca <SD_disk_ioctl+0x162>
        res = RES_OK;
 8001bdc:	462c      	mov	r4, r5
 8001bde:	e7f4      	b.n	8001bca <SD_disk_ioctl+0x162>
    return RES_PARERR;
 8001be0:	2404      	movs	r4, #4
 8001be2:	e7f6      	b.n	8001bd2 <SD_disk_ioctl+0x16a>
    switch (*ptr)
 8001be4:	2404      	movs	r4, #4
 8001be6:	e7f4      	b.n	8001bd2 <SD_disk_ioctl+0x16a>
      return RES_NOTRDY;
 8001be8:	2403      	movs	r4, #3
 8001bea:	e7f2      	b.n	8001bd2 <SD_disk_ioctl+0x16a>
 8001bec:	20000000 	.word	0x20000000

08001bf0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8001bf0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8001bf2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8001bf4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001bf8:	4770      	bx	lr

08001bfa <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8001bfa:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 8001bfc:	7882      	ldrb	r2, [r0, #2]
 8001bfe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 8001c02:	7843      	ldrb	r3, [r0, #1]
 8001c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8001c08:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8001c0a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001c0e:	4770      	bx	lr

08001c10 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8001c10:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 8001c12:	0a09      	lsrs	r1, r1, #8
 8001c14:	7041      	strb	r1, [r0, #1]
}
 8001c16:	4770      	bx	lr

08001c18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8001c18:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c1a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8001c1e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c20:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8001c24:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8001c26:	0e09      	lsrs	r1, r1, #24
 8001c28:	70c1      	strb	r1, [r0, #3]
}
 8001c2a:	4770      	bx	lr

08001c2c <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8001c2c:	4694      	mov	ip, r2
 8001c2e:	b132      	cbz	r2, 8001c3e <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8001c30:	780a      	ldrb	r2, [r1, #0]
 8001c32:	3101      	adds	r1, #1
 8001c34:	7002      	strb	r2, [r0, #0]
 8001c36:	3001      	adds	r0, #1
		} while (--cnt);
 8001c38:	f1bc 0c01 	subs.w	ip, ip, #1
 8001c3c:	d1f8      	bne.n	8001c30 <mem_cpy+0x4>
	}
}
 8001c3e:	4770      	bx	lr

08001c40 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8001c40:	7001      	strb	r1, [r0, #0]
 8001c42:	3001      	adds	r0, #1
	} while (--cnt);
 8001c44:	3a01      	subs	r2, #1
 8001c46:	d1fb      	bne.n	8001c40 <mem_set>
}
 8001c48:	4770      	bx	lr

08001c4a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8001c4a:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8001c4c:	f89c 0000 	ldrb.w	r0, [ip]
 8001c50:	f10c 0c01 	add.w	ip, ip, #1
 8001c54:	780b      	ldrb	r3, [r1, #0]
 8001c56:	3101      	adds	r1, #1
 8001c58:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	d001      	beq.n	8001c62 <mem_cmp+0x18>
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	d0f4      	beq.n	8001c4c <mem_cmp+0x2>

	return r;
}
 8001c62:	4770      	bx	lr

08001c64 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8001c64:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8001c66:	e000      	b.n	8001c6a <chk_chr+0x6>
 8001c68:	3301      	adds	r3, #1
 8001c6a:	7818      	ldrb	r0, [r3, #0]
 8001c6c:	b108      	cbz	r0, 8001c72 <chk_chr+0xe>
 8001c6e:	4288      	cmp	r0, r1
 8001c70:	d1fa      	bne.n	8001c68 <chk_chr+0x4>
	return *str;
}
 8001c72:	4770      	bx	lr

08001c74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001c74:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001c76:	2500      	movs	r5, #0
 8001c78:	462b      	mov	r3, r5
 8001c7a:	e001      	b.n	8001c80 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8001c7c:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001c7e:	3301      	adds	r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d815      	bhi.n	8001cb0 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8001c84:	011a      	lsls	r2, r3, #4
 8001c86:	4c17      	ldr	r4, [pc, #92]	@ (8001ce4 <chk_lock+0x70>)
 8001c88:	58a2      	ldr	r2, [r4, r2]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d0f6      	beq.n	8001c7c <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001c8e:	6804      	ldr	r4, [r0, #0]
 8001c90:	42a2      	cmp	r2, r4
 8001c92:	d1f4      	bne.n	8001c7e <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8001c94:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <chk_lock+0x70>)
 8001c96:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001c9a:	6854      	ldr	r4, [r2, #4]
 8001c9c:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001c9e:	4294      	cmp	r4, r2
 8001ca0:	d1ed      	bne.n	8001c7e <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <chk_lock+0x70>)
 8001ca4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001ca8:	6894      	ldr	r4, [r2, #8]
 8001caa:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8001cac:	4294      	cmp	r4, r2
 8001cae:	d1e6      	bne.n	8001c7e <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d00a      	beq.n	8001cca <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001cb4:	b9a1      	cbnz	r1, 8001ce0 <chk_lock+0x6c>
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <chk_lock+0x70>)
 8001cb8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8001cbc:	899b      	ldrh	r3, [r3, #12]
 8001cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc2:	d00b      	beq.n	8001cdc <chk_lock+0x68>
 8001cc4:	2000      	movs	r0, #0
}
 8001cc6:	bc30      	pop	{r4, r5}
 8001cc8:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001cca:	b92d      	cbnz	r5, 8001cd8 <chk_lock+0x64>
 8001ccc:	2902      	cmp	r1, #2
 8001cce:	d001      	beq.n	8001cd4 <chk_lock+0x60>
 8001cd0:	2012      	movs	r0, #18
 8001cd2:	e7f8      	b.n	8001cc6 <chk_lock+0x52>
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e7f6      	b.n	8001cc6 <chk_lock+0x52>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e7f4      	b.n	8001cc6 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001cdc:	2010      	movs	r0, #16
 8001cde:	e7f2      	b.n	8001cc6 <chk_lock+0x52>
 8001ce0:	2010      	movs	r0, #16
 8001ce2:	e7f0      	b.n	8001cc6 <chk_lock+0x52>
 8001ce4:	20000540 	.word	0x20000540

08001ce8 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001ce8:	2000      	movs	r0, #0
 8001cea:	e000      	b.n	8001cee <enq_lock+0x6>
 8001cec:	3001      	adds	r0, #1
 8001cee:	2801      	cmp	r0, #1
 8001cf0:	d804      	bhi.n	8001cfc <enq_lock+0x14>
 8001cf2:	0103      	lsls	r3, r0, #4
 8001cf4:	4a03      	ldr	r2, [pc, #12]	@ (8001d04 <enq_lock+0x1c>)
 8001cf6:	58d3      	ldr	r3, [r2, r3]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f7      	bne.n	8001cec <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8001cfc:	3802      	subs	r0, #2
 8001cfe:	bf18      	it	ne
 8001d00:	2001      	movne	r0, #1
 8001d02:	4770      	bx	lr
 8001d04:	20000540 	.word	0x20000540

08001d08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001d08:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <inc_lock+0x8>
 8001d0e:	3301      	adds	r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d813      	bhi.n	8001d3c <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 8001d14:	011a      	lsls	r2, r3, #4
 8001d16:	4c23      	ldr	r4, [pc, #140]	@ (8001da4 <inc_lock+0x9c>)
 8001d18:	58a4      	ldr	r4, [r4, r2]
 8001d1a:	6802      	ldr	r2, [r0, #0]
 8001d1c:	4294      	cmp	r4, r2
 8001d1e:	d1f6      	bne.n	8001d0e <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 8001d20:	4a20      	ldr	r2, [pc, #128]	@ (8001da4 <inc_lock+0x9c>)
 8001d22:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001d26:	6854      	ldr	r4, [r2, #4]
 8001d28:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8001d2a:	4294      	cmp	r4, r2
 8001d2c:	d1ef      	bne.n	8001d0e <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <inc_lock+0x9c>)
 8001d30:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001d34:	6894      	ldr	r4, [r2, #8]
 8001d36:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8001d38:	4294      	cmp	r4, r2
 8001d3a:	d1e8      	bne.n	8001d0e <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d008      	beq.n	8001d52 <inc_lock+0x4a>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001d40:	b1f9      	cbz	r1, 8001d82 <inc_lock+0x7a>
 8001d42:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <inc_lock+0x9c>)
 8001d44:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001d48:	8992      	ldrh	r2, [r2, #12]
 8001d4a:	bb4a      	cbnz	r2, 8001da0 <inc_lock+0x98>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d50:	e01d      	b.n	8001d8e <inc_lock+0x86>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d805      	bhi.n	8001d64 <inc_lock+0x5c>
 8001d58:	011a      	lsls	r2, r3, #4
 8001d5a:	4c12      	ldr	r4, [pc, #72]	@ (8001da4 <inc_lock+0x9c>)
 8001d5c:	58a2      	ldr	r2, [r4, r2]
 8001d5e:	b10a      	cbz	r2, 8001d64 <inc_lock+0x5c>
 8001d60:	3301      	adds	r3, #1
 8001d62:	e7f7      	b.n	8001d54 <inc_lock+0x4c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d019      	beq.n	8001d9c <inc_lock+0x94>
		Files[i].fs = dp->obj.fs;
 8001d68:	4d0e      	ldr	r5, [pc, #56]	@ (8001da4 <inc_lock+0x9c>)
 8001d6a:	011c      	lsls	r4, r3, #4
 8001d6c:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8001d70:	6806      	ldr	r6, [r0, #0]
 8001d72:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8001d74:	6884      	ldr	r4, [r0, #8]
 8001d76:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8001d78:	6940      	ldr	r0, [r0, #20]
 8001d7a:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	8190      	strh	r0, [r2, #12]
 8001d80:	e7de      	b.n	8001d40 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001d82:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <inc_lock+0x9c>)
 8001d84:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001d88:	8992      	ldrh	r2, [r2, #12]
 8001d8a:	3201      	adds	r2, #1
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	4905      	ldr	r1, [pc, #20]	@ (8001da4 <inc_lock+0x9c>)
 8001d90:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8001d94:	818a      	strh	r2, [r1, #12]

	return i + 1;
 8001d96:	1c58      	adds	r0, r3, #1
}
 8001d98:	bc70      	pop	{r4, r5, r6}
 8001d9a:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e7fb      	b.n	8001d98 <inc_lock+0x90>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001da0:	2000      	movs	r0, #0
 8001da2:	e7f9      	b.n	8001d98 <inc_lock+0x90>
 8001da4:	20000540 	.word	0x20000540

08001da8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001da8:	3801      	subs	r0, #1
 8001daa:	2801      	cmp	r0, #1
 8001dac:	d815      	bhi.n	8001dda <dec_lock+0x32>
		n = Files[i].ctr;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <dec_lock+0x3c>)
 8001db0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001db4:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8001db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dba:	d003      	beq.n	8001dc4 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8001dbc:	b143      	cbz	r3, 8001dd0 <dec_lock+0x28>
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	e000      	b.n	8001dc6 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8001dc4:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8001dc6:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <dec_lock+0x3c>)
 8001dc8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8001dcc:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001dce:	b933      	cbnz	r3, 8001dde <dec_lock+0x36>
 8001dd0:	0103      	lsls	r3, r0, #4
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	4a03      	ldr	r2, [pc, #12]	@ (8001de4 <dec_lock+0x3c>)
 8001dd6:	50d0      	str	r0, [r2, r3]
 8001dd8:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001dda:	2002      	movs	r0, #2
 8001ddc:	4770      	bx	lr
		res = FR_OK;
 8001dde:	2000      	movs	r0, #0
	}
	return res;
}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000540 	.word	0x20000540

08001de8 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	e003      	b.n	8001df4 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8001dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001df0:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 8001df2:	3301      	adds	r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d811      	bhi.n	8001e1c <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001df8:	011a      	lsls	r2, r3, #4
 8001dfa:	4909      	ldr	r1, [pc, #36]	@ (8001e20 <clear_lock+0x38>)
 8001dfc:	588a      	ldr	r2, [r1, r2]
 8001dfe:	4282      	cmp	r2, r0
 8001e00:	d1f7      	bne.n	8001df2 <clear_lock+0xa>
{
 8001e02:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001e04:	011a      	lsls	r2, r3, #4
 8001e06:	2400      	movs	r4, #0
 8001e08:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d8ed      	bhi.n	8001dec <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001e10:	011a      	lsls	r2, r3, #4
 8001e12:	4903      	ldr	r1, [pc, #12]	@ (8001e20 <clear_lock+0x38>)
 8001e14:	588a      	ldr	r2, [r1, r2]
 8001e16:	4282      	cmp	r2, r0
 8001e18:	d1f7      	bne.n	8001e0a <clear_lock+0x22>
 8001e1a:	e7f3      	b.n	8001e04 <clear_lock+0x1c>
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000540 	.word	0x20000540

08001e24 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8001e24:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001e26:	69c3      	ldr	r3, [r0, #28]
 8001e28:	3b02      	subs	r3, #2
 8001e2a:	428b      	cmp	r3, r1
 8001e2c:	d904      	bls.n	8001e38 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8001e2e:	8943      	ldrh	r3, [r0, #10]
 8001e30:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8001e32:	fb01 0003 	mla	r0, r1, r3, r0
 8001e36:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001e38:	2000      	movs	r0, #0
}
 8001e3a:	4770      	bx	lr

08001e3c <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8001e3c:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001e3e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e40:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8001e42:	8990      	ldrh	r0, [r2, #12]
 8001e44:	fbb1 f1f0 	udiv	r1, r1, r0
 8001e48:	8952      	ldrh	r2, [r2, #10]
 8001e4a:	fbb1 f1f2 	udiv	r1, r1, r2
 8001e4e:	e001      	b.n	8001e54 <clmt_clust+0x18>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8001e50:	1a09      	subs	r1, r1, r0
 8001e52:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001e54:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001e56:	b118      	cbz	r0, 8001e60 <clmt_clust+0x24>
		if (cl < ncl) break;	/* In this fragment? */
 8001e58:	4281      	cmp	r1, r0
 8001e5a:	d2f9      	bcs.n	8001e50 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8001e5c:	6858      	ldr	r0, [r3, #4]
 8001e5e:	4408      	add	r0, r1
}
 8001e60:	4770      	bx	lr

08001e62 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8001e62:	b570      	push	{r4, r5, r6, lr}
 8001e64:	4606      	mov	r6, r0
 8001e66:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8001e68:	f101 001a 	add.w	r0, r1, #26
 8001e6c:	f7ff fec0 	bl	8001bf0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8001e70:	7833      	ldrb	r3, [r6, #0]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d000      	beq.n	8001e78 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8001e7a:	f105 0014 	add.w	r0, r5, #20
 8001e7e:	f7ff feb7 	bl	8001bf0 <ld_word>
 8001e82:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8001e86:	e7f6      	b.n	8001e76 <ld_clust+0x14>

08001e88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	4606      	mov	r6, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8001e90:	b291      	uxth	r1, r2
 8001e92:	f104 001a 	add.w	r0, r4, #26
 8001e96:	f7ff febb 	bl	8001c10 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8001e9a:	7833      	ldrb	r3, [r6, #0]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d000      	beq.n	8001ea2 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8001ea2:	0c29      	lsrs	r1, r5, #16
 8001ea4:	f104 0014 	add.w	r0, r4, #20
 8001ea8:	f7ff feb2 	bl	8001c10 <st_word>
}
 8001eac:	e7f8      	b.n	8001ea0 <st_clust+0x18>
	...

08001eb0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8001eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	460f      	mov	r7, r1
 8001eb8:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8001eba:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8001ec0:	2400      	movs	r4, #0
 8001ec2:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	f107 001a 	add.w	r0, r7, #26
 8001eca:	f7ff fea1 	bl	8001c10 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8001ece:	f109 36ff 	add.w	r6, r9, #4294967295
 8001ed2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001ed6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8001eda:	4625      	mov	r5, r4
 8001edc:	e002      	b.n	8001ee4 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8001ede:	3401      	adds	r4, #1
 8001ee0:	2c0c      	cmp	r4, #12
 8001ee2:	d811      	bhi.n	8001f08 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8001ee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ee8:	429d      	cmp	r5, r3
 8001eea:	d002      	beq.n	8001ef2 <put_lfn+0x42>
 8001eec:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8001ef0:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <put_lfn+0x74>)
 8001ef4:	5d18      	ldrb	r0, [r3, r4]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4438      	add	r0, r7
 8001efa:	f7ff fe89 	bl	8001c10 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d1ed      	bne.n	8001ede <put_lfn+0x2e>
 8001f02:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8001f06:	e7ea      	b.n	8001ede <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8001f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f0c:	429d      	cmp	r5, r3
 8001f0e:	d002      	beq.n	8001f16 <put_lfn+0x66>
 8001f10:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8001f14:	b90b      	cbnz	r3, 8001f1a <put_lfn+0x6a>
 8001f16:	f049 0940 	orr.w	r9, r9, #64	@ 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8001f1a:	f887 9000 	strb.w	r9, [r7]
}
 8001f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f22:	bf00      	nop
 8001f24:	08014efc 	.word	0x08014efc

08001f28 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	4616      	mov	r6, r2
 8001f30:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8001f32:	220b      	movs	r2, #11
 8001f34:	f7ff fe7a 	bl	8001c2c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8001f38:	2c05      	cmp	r4, #5
 8001f3a:	d811      	bhi.n	8001f60 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	e01f      	b.n	8001f80 <gen_numname+0x58>
 8001f40:	3101      	adds	r1, #1
 8001f42:	290f      	cmp	r1, #15
 8001f44:	d80c      	bhi.n	8001f60 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 8001f46:	f003 0c01 	and.w	ip, r3, #1
 8001f4a:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 8001f4e:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8001f50:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 8001f54:	d0f4      	beq.n	8001f40 <gen_numname+0x18>
 8001f56:	f484 3488 	eor.w	r4, r4, #69632	@ 0x11000
 8001f5a:	f084 0421 	eor.w	r4, r4, #33	@ 0x21
 8001f5e:	e7ef      	b.n	8001f40 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 8001f60:	8833      	ldrh	r3, [r6, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0ea      	beq.n	8001f3c <gen_numname+0x14>
			wc = *lfn++;
 8001f66:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8001f68:	2100      	movs	r1, #0
 8001f6a:	e7ea      	b.n	8001f42 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8001f6c:	1e5a      	subs	r2, r3, #1
 8001f6e:	3308      	adds	r3, #8
 8001f70:	446b      	add	r3, sp
 8001f72:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 8001f76:	0921      	lsrs	r1, r4, #4
	} while (seq);
 8001f78:	2c0f      	cmp	r4, #15
 8001f7a:	d90a      	bls.n	8001f92 <gen_numname+0x6a>
		ns[i--] = c;
 8001f7c:	4613      	mov	r3, r2
		seq /= 16;
 8001f7e:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 8001f80:	f004 020f 	and.w	r2, r4, #15
 8001f84:	f102 0130 	add.w	r1, r2, #48	@ 0x30
		if (c > '9') c += 7;
 8001f88:	2939      	cmp	r1, #57	@ 0x39
 8001f8a:	d9ef      	bls.n	8001f6c <gen_numname+0x44>
 8001f8c:	f102 0137 	add.w	r1, r2, #55	@ 0x37
 8001f90:	e7ec      	b.n	8001f6c <gen_numname+0x44>
	ns[i] = '~';
 8001f92:	217e      	movs	r1, #126	@ 0x7e
 8001f94:	f102 0308 	add.w	r3, r2, #8
 8001f98:	446b      	add	r3, sp
 8001f9a:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <gen_numname+0x7c>
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d209      	bcs.n	8001fbc <gen_numname+0x94>
 8001fa8:	5ce9      	ldrb	r1, [r5, r3]
 8001faa:	2920      	cmp	r1, #32
 8001fac:	d1f9      	bne.n	8001fa2 <gen_numname+0x7a>
 8001fae:	e005      	b.n	8001fbc <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8001fb0:	2020      	movs	r0, #32
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 8001fb6:	2907      	cmp	r1, #7
 8001fb8:	d809      	bhi.n	8001fce <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8001fba:	460b      	mov	r3, r1
 8001fbc:	2a07      	cmp	r2, #7
 8001fbe:	d8f7      	bhi.n	8001fb0 <gen_numname+0x88>
 8001fc0:	f102 0108 	add.w	r1, r2, #8
 8001fc4:	4469      	add	r1, sp
 8001fc6:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8001fca:	3201      	adds	r2, #1
 8001fcc:	e7f1      	b.n	8001fb2 <gen_numname+0x8a>
}
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}

08001fd2 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8001fd2:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8001fd4:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 8001fd8:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8001fda:	01c3      	lsls	r3, r0, #7
 8001fdc:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8001fe0:	780a      	ldrb	r2, [r1, #0]
 8001fe2:	3101      	adds	r1, #1
 8001fe4:	fa52 f383 	uxtab	r3, r2, r3
 8001fe8:	b2d8      	uxtb	r0, r3
	} while (--n);
 8001fea:	f1bc 0c01 	subs.w	ip, ip, #1
 8001fee:	d1f4      	bne.n	8001fda <sum_sfn+0x8>
	return sum;
}
 8001ff0:	4770      	bx	lr

08001ff2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8001ff2:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001ff4:	6800      	ldr	r0, [r0, #0]
 8001ff6:	b138      	cbz	r0, 8002008 <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	7813      	ldrb	r3, [r2, #0]
 8001ffc:	2b1f      	cmp	r3, #31
 8001ffe:	d906      	bls.n	800200e <get_ldnumber+0x1c>
 8002000:	2b3a      	cmp	r3, #58	@ 0x3a
 8002002:	d004      	beq.n	800200e <get_ldnumber+0x1c>
 8002004:	3201      	adds	r2, #1
 8002006:	e7f8      	b.n	8001ffa <get_ldnumber+0x8>
	int vol = -1;
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800200e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002010:	d001      	beq.n	8002016 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002012:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8002014:	4770      	bx	lr
{
 8002016:	b410      	push	{r4}
			i = *tp++ - '0';
 8002018:	4603      	mov	r3, r0
 800201a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800201e:	3830      	subs	r0, #48	@ 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002020:	2809      	cmp	r0, #9
 8002022:	d808      	bhi.n	8002036 <get_ldnumber+0x44>
 8002024:	429a      	cmp	r2, r3
 8002026:	d002      	beq.n	800202e <get_ldnumber+0x3c>
	int vol = -1;
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	e005      	b.n	800203a <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800202e:	b938      	cbnz	r0, 8002040 <get_ldnumber+0x4e>
					*path = ++tt;
 8002030:	3201      	adds	r2, #1
 8002032:	600a      	str	r2, [r1, #0]
 8002034:	e001      	b.n	800203a <get_ldnumber+0x48>
	int vol = -1;
 8002036:	f04f 30ff 	mov.w	r0, #4294967295
}
 800203a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800203e:	4770      	bx	lr
	int vol = -1;
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8002044:	e7f9      	b.n	800203a <get_ldnumber+0x48>

08002046 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8002046:	b538      	push	{r3, r4, r5, lr}
 8002048:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800204a:	4604      	mov	r4, r0
 800204c:	b198      	cbz	r0, 8002076 <validate+0x30>
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	b19b      	cbz	r3, 800207a <validate+0x34>
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	b1a2      	cbz	r2, 8002080 <validate+0x3a>
 8002056:	8881      	ldrh	r1, [r0, #4]
 8002058:	88da      	ldrh	r2, [r3, #6]
 800205a:	4291      	cmp	r1, r2
 800205c:	d003      	beq.n	8002066 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800205e:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002060:	2400      	movs	r4, #0
 8002062:	602c      	str	r4, [r5, #0]
	return res;
}
 8002064:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002066:	7858      	ldrb	r0, [r3, #1]
 8002068:	f7fe ff1c 	bl	8000ea4 <disk_status>
 800206c:	f010 0001 	ands.w	r0, r0, #1
 8002070:	d109      	bne.n	8002086 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002072:	6824      	ldr	r4, [r4, #0]
 8002074:	e7f5      	b.n	8002062 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002076:	2009      	movs	r0, #9
 8002078:	e7f3      	b.n	8002062 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800207a:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800207c:	2009      	movs	r0, #9
 800207e:	e7f0      	b.n	8002062 <validate+0x1c>
 8002080:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002082:	2400      	movs	r4, #0
 8002084:	e7ed      	b.n	8002062 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002086:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002088:	2400      	movs	r4, #0
 800208a:	e7ea      	b.n	8002062 <validate+0x1c>

0800208c <sync_window>:
{
 800208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002090:	78c5      	ldrb	r5, [r0, #3]
 8002092:	b915      	cbnz	r5, 800209a <sync_window+0xe>
}
 8002094:	4628      	mov	r0, r5
 8002096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800209a:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800209c:	6b47      	ldr	r7, [r0, #52]	@ 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800209e:	f100 0838 	add.w	r8, r0, #56	@ 0x38
 80020a2:	2301      	movs	r3, #1
 80020a4:	463a      	mov	r2, r7
 80020a6:	4641      	mov	r1, r8
 80020a8:	7840      	ldrb	r0, [r0, #1]
 80020aa:	f7fe ff29 	bl	8000f00 <disk_write>
 80020ae:	4605      	mov	r5, r0
 80020b0:	b9a0      	cbnz	r0, 80020dc <sync_window+0x50>
			fs->wflag = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80020b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80020b8:	1afb      	subs	r3, r7, r3
 80020ba:	6a22      	ldr	r2, [r4, #32]
 80020bc:	4293      	cmp	r3, r2
 80020be:	d2e9      	bcs.n	8002094 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80020c0:	78a6      	ldrb	r6, [r4, #2]
 80020c2:	e008      	b.n	80020d6 <sync_window+0x4a>
					wsect += fs->fsize;
 80020c4:	6a23      	ldr	r3, [r4, #32]
 80020c6:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80020c8:	2301      	movs	r3, #1
 80020ca:	463a      	mov	r2, r7
 80020cc:	4641      	mov	r1, r8
 80020ce:	7860      	ldrb	r0, [r4, #1]
 80020d0:	f7fe ff16 	bl	8000f00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80020d4:	3e01      	subs	r6, #1
 80020d6:	2e01      	cmp	r6, #1
 80020d8:	d8f4      	bhi.n	80020c4 <sync_window+0x38>
 80020da:	e7db      	b.n	8002094 <sync_window+0x8>
			res = FR_DISK_ERR;
 80020dc:	2501      	movs	r5, #1
 80020de:	e7d9      	b.n	8002094 <sync_window+0x8>

080020e0 <move_window>:
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80020e2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d102      	bne.n	80020ee <move_window+0xe>
	FRESULT res = FR_OK;
 80020e8:	2600      	movs	r6, #0
}
 80020ea:	4630      	mov	r0, r6
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
 80020ee:	4604      	mov	r4, r0
 80020f0:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 80020f2:	f7ff ffcb 	bl	800208c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80020f6:	4606      	mov	r6, r0
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d1f6      	bne.n	80020ea <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80020fc:	2301      	movs	r3, #1
 80020fe:	462a      	mov	r2, r5
 8002100:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8002104:	7860      	ldrb	r0, [r4, #1]
 8002106:	f7fe feef 	bl	8000ee8 <disk_read>
 800210a:	b110      	cbz	r0, 8002112 <move_window+0x32>
				res = FR_DISK_ERR;
 800210c:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800210e:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8002112:	6365      	str	r5, [r4, #52]	@ 0x34
 8002114:	e7e9      	b.n	80020ea <move_window+0xa>
	...

08002118 <check_fs>:
{
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800211c:	2300      	movs	r3, #0
 800211e:	70c3      	strb	r3, [r0, #3]
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
 8002124:	6343      	str	r3, [r0, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002126:	f7ff ffdb 	bl	80020e0 <move_window>
 800212a:	bb30      	cbnz	r0, 800217a <check_fs+0x62>
 800212c:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800212e:	f204 2036 	addw	r0, r4, #566	@ 0x236
 8002132:	f7ff fd5d 	bl	8001bf0 <ld_word>
 8002136:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800213a:	4298      	cmp	r0, r3
 800213c:	d11f      	bne.n	800217e <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800213e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8002142:	2be9      	cmp	r3, #233	@ 0xe9
 8002144:	d007      	beq.n	8002156 <check_fs+0x3e>
 8002146:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002148:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 800214c:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <check_fs+0x6c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d001      	beq.n	8002156 <check_fs+0x3e>
	return 2;
 8002152:	2502      	movs	r5, #2
 8002154:	e014      	b.n	8002180 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002156:	f104 006e 	add.w	r0, r4, #110	@ 0x6e
 800215a:	f7ff fd4e 	bl	8001bfa <ld_dword>
 800215e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <check_fs+0x70>)
 8002164:	4298      	cmp	r0, r3
 8002166:	d00b      	beq.n	8002180 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002168:	f104 008a 	add.w	r0, r4, #138	@ 0x8a
 800216c:	f7ff fd45 	bl	8001bfa <ld_dword>
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <check_fs+0x74>)
 8002172:	4298      	cmp	r0, r3
 8002174:	d004      	beq.n	8002180 <check_fs+0x68>
	return 2;
 8002176:	2502      	movs	r5, #2
 8002178:	e002      	b.n	8002180 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800217a:	2504      	movs	r5, #4
 800217c:	e000      	b.n	8002180 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800217e:	2503      	movs	r5, #3
}
 8002180:	4628      	mov	r0, r5
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	009000eb 	.word	0x009000eb
 8002188:	00544146 	.word	0x00544146
 800218c:	33544146 	.word	0x33544146

08002190 <find_volume>:
{
 8002190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002194:	b087      	sub	sp, #28
 8002196:	460d      	mov	r5, r1
 8002198:	4616      	mov	r6, r2
	*rfs = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800219e:	f7ff ff28 	bl	8001ff2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80021a2:	1e07      	subs	r7, r0, #0
 80021a4:	f2c0 8169 	blt.w	800247a <find_volume+0x2ea>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80021a8:	4bbe      	ldr	r3, [pc, #760]	@ (80024a4 <find_volume+0x314>)
 80021aa:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	f000 8168 	beq.w	8002484 <find_volume+0x2f4>
	*rfs = fs;							/* Return pointer to the file system object */
 80021b4:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80021b6:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80021ba:	7823      	ldrb	r3, [r4, #0]
 80021bc:	b173      	cbz	r3, 80021dc <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80021be:	7860      	ldrb	r0, [r4, #1]
 80021c0:	f7fe fe70 	bl	8000ea4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80021c4:	f010 0501 	ands.w	r5, r0, #1
 80021c8:	d108      	bne.n	80021dc <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80021ca:	2e00      	cmp	r6, #0
 80021cc:	f000 8156 	beq.w	800247c <find_volume+0x2ec>
 80021d0:	f010 0f04 	tst.w	r0, #4
 80021d4:	f000 8152 	beq.w	800247c <find_volume+0x2ec>
				return FR_WRITE_PROTECTED;
 80021d8:	250a      	movs	r5, #10
 80021da:	e14f      	b.n	800247c <find_volume+0x2ec>
	fs->fs_type = 0;					/* Clear the file system object */
 80021dc:	2300      	movs	r3, #0
 80021de:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80021e0:	b2f8      	uxtb	r0, r7
 80021e2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80021e4:	f7fe fe6a 	bl	8000ebc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80021e8:	f010 0f01 	tst.w	r0, #1
 80021ec:	f040 814c 	bne.w	8002488 <find_volume+0x2f8>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80021f0:	b11e      	cbz	r6, 80021fa <find_volume+0x6a>
 80021f2:	f010 0f04 	tst.w	r0, #4
 80021f6:	f040 8149 	bne.w	800248c <find_volume+0x2fc>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80021fa:	f104 020c 	add.w	r2, r4, #12
 80021fe:	2102      	movs	r1, #2
 8002200:	7860      	ldrb	r0, [r4, #1]
 8002202:	f7fe fe89 	bl	8000f18 <disk_ioctl>
 8002206:	4605      	mov	r5, r0
 8002208:	2800      	cmp	r0, #0
 800220a:	f040 8141 	bne.w	8002490 <find_volume+0x300>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800220e:	89a2      	ldrh	r2, [r4, #12]
 8002210:	f5a2 7300 	sub.w	r3, r2, #512	@ 0x200
 8002214:	b29b      	uxth	r3, r3
 8002216:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 800221a:	f200 813b 	bhi.w	8002494 <find_volume+0x304>
 800221e:	1e53      	subs	r3, r2, #1
 8002220:	421a      	tst	r2, r3
 8002222:	d001      	beq.n	8002228 <find_volume+0x98>
 8002224:	2501      	movs	r5, #1
 8002226:	e129      	b.n	800247c <find_volume+0x2ec>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002228:	2100      	movs	r1, #0
 800222a:	4620      	mov	r0, r4
 800222c:	f7ff ff74 	bl	8002118 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002230:	2802      	cmp	r0, #2
 8002232:	f000 8088 	beq.w	8002346 <find_volume+0x1b6>
	bsect = 0;
 8002236:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002238:	2804      	cmp	r0, #4
 800223a:	f000 812d 	beq.w	8002498 <find_volume+0x308>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800223e:	2801      	cmp	r0, #1
 8002240:	f200 812c 	bhi.w	800249c <find_volume+0x30c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002244:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 8002248:	f7ff fcd2 	bl	8001bf0 <ld_word>
 800224c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8002250:	4540      	cmp	r0, r8
 8002252:	f040 8125 	bne.w	80024a0 <find_volume+0x310>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002256:	f104 004e 	add.w	r0, r4, #78	@ 0x4e
 800225a:	f7ff fcc9 	bl	8001bf0 <ld_word>
 800225e:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002260:	b920      	cbnz	r0, 800226c <find_volume+0xdc>
 8002262:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8002266:	f7ff fcc8 	bl	8001bfa <ld_dword>
 800226a:	4607      	mov	r7, r0
		fs->fsize = fasize;
 800226c:	6227      	str	r7, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800226e:	f894 2048 	ldrb.w	r2, [r4, #72]	@ 0x48
 8002272:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002274:	1e53      	subs	r3, r2, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	f200 811d 	bhi.w	80024b8 <find_volume+0x328>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800227e:	fb07 f302 	mul.w	r3, r7, r2
 8002282:	9300      	str	r3, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002284:	f894 9045 	ldrb.w	r9, [r4, #69]	@ 0x45
 8002288:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800228c:	f1b9 0f00 	cmp.w	r9, #0
 8002290:	f000 8114 	beq.w	80024bc <find_volume+0x32c>
 8002294:	f109 33ff 	add.w	r3, r9, #4294967295
 8002298:	ea19 0f03 	tst.w	r9, r3
 800229c:	f040 8110 	bne.w	80024c0 <find_volume+0x330>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80022a0:	f104 0049 	add.w	r0, r4, #73	@ 0x49
 80022a4:	f7ff fca4 	bl	8001bf0 <ld_word>
 80022a8:	4682      	mov	sl, r0
 80022aa:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80022ac:	ea4f 1b58 	mov.w	fp, r8, lsr #5
 80022b0:	fbb0 f3fb 	udiv	r3, r0, fp
 80022b4:	fb0b 0313 	mls	r3, fp, r3, r0
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 8102 	bne.w	80024c4 <find_volume+0x334>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80022c0:	f104 004b 	add.w	r0, r4, #75	@ 0x4b
 80022c4:	f7ff fc94 	bl	8001bf0 <ld_word>
 80022c8:	9001      	str	r0, [sp, #4]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80022ca:	b920      	cbnz	r0, 80022d6 <find_volume+0x146>
 80022cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80022d0:	f7ff fc93 	bl	8001bfa <ld_dword>
 80022d4:	9001      	str	r0, [sp, #4]
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80022d6:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 80022da:	f7ff fc89 	bl	8001bf0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80022de:	4601      	mov	r1, r0
 80022e0:	2800      	cmp	r0, #0
 80022e2:	f000 80f1 	beq.w	80024c8 <find_volume+0x338>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80022e6:	9b00      	ldr	r3, [sp, #0]
 80022e8:	18c3      	adds	r3, r0, r3
 80022ea:	fbba fbfb 	udiv	fp, sl, fp
 80022ee:	445b      	add	r3, fp
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80022f0:	9a01      	ldr	r2, [sp, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	f0c0 80ea 	bcc.w	80024cc <find_volume+0x33c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80022f8:	1ad2      	subs	r2, r2, r3
 80022fa:	fbb2 f0f9 	udiv	r0, r2, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80022fe:	454a      	cmp	r2, r9
 8002300:	f0c0 80e6 	bcc.w	80024d0 <find_volume+0x340>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002304:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8002308:	4290      	cmp	r0, r2
 800230a:	d834      	bhi.n	8002376 <find_volume+0x1e6>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800230c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8002310:	4290      	cmp	r0, r2
 8002312:	d96c      	bls.n	80023ee <find_volume+0x25e>
 8002314:	f04f 0b02 	mov.w	fp, #2
 8002318:	e02f      	b.n	800237a <find_volume+0x1ea>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800231a:	2000      	movs	r0, #0
 800231c:	ab06      	add	r3, sp, #24
 800231e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002322:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002326:	3601      	adds	r6, #1
 8002328:	2e03      	cmp	r6, #3
 800232a:	d80e      	bhi.n	800234a <find_volume+0x1ba>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800232c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002330:	0133      	lsls	r3, r6, #4
 8002332:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8002336:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002338:	7903      	ldrb	r3, [r0, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ed      	beq.n	800231a <find_volume+0x18a>
 800233e:	3008      	adds	r0, #8
 8002340:	f7ff fc5b 	bl	8001bfa <ld_dword>
 8002344:	e7ea      	b.n	800231c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002346:	2600      	movs	r6, #0
 8002348:	e7ee      	b.n	8002328 <find_volume+0x198>
 800234a:	2700      	movs	r7, #0
 800234c:	e00a      	b.n	8002364 <find_volume+0x1d4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800234e:	4631      	mov	r1, r6
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff fee1 	bl	8002118 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002356:	2801      	cmp	r0, #1
 8002358:	f67f af6e 	bls.w	8002238 <find_volume+0xa8>
 800235c:	3701      	adds	r7, #1
 800235e:	2f03      	cmp	r7, #3
 8002360:	f63f af6a 	bhi.w	8002238 <find_volume+0xa8>
			bsect = br[i];
 8002364:	ab06      	add	r3, sp, #24
 8002366:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800236a:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800236e:	2e00      	cmp	r6, #0
 8002370:	d1ed      	bne.n	800234e <find_volume+0x1be>
 8002372:	2003      	movs	r0, #3
 8002374:	e7f2      	b.n	800235c <find_volume+0x1cc>
		fmt = FS_FAT32;
 8002376:	f04f 0b03 	mov.w	fp, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800237a:	f100 0902 	add.w	r9, r0, #2
 800237e:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8002382:	6266      	str	r6, [r4, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002384:	198a      	adds	r2, r1, r6
 8002386:	62a2      	str	r2, [r4, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8002388:	4433      	add	r3, r6
 800238a:	6323      	str	r3, [r4, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800238c:	f1bb 0f03 	cmp.w	fp, #3
 8002390:	d030      	beq.n	80023f4 <find_volume+0x264>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8002392:	f1ba 0f00 	cmp.w	sl, #0
 8002396:	f000 80a1 	beq.w	80024dc <find_volume+0x34c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800239a:	9b00      	ldr	r3, [sp, #0]
 800239c:	441a      	add	r2, r3
 800239e:	62e2      	str	r2, [r4, #44]	@ 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80023a0:	f1bb 0f02 	cmp.w	fp, #2
 80023a4:	d037      	beq.n	8002416 <find_volume+0x286>
 80023a6:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 80023aa:	f009 0301 	and.w	r3, r9, #1
 80023ae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80023b2:	4443      	add	r3, r8
 80023b4:	3b01      	subs	r3, #1
 80023b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80023ba:	42bb      	cmp	r3, r7
 80023bc:	f200 8090 	bhi.w	80024e0 <find_volume+0x350>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	61a3      	str	r3, [r4, #24]
 80023c6:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80023cc:	f1bb 0f03 	cmp.w	fp, #3
 80023d0:	d024      	beq.n	800241c <find_volume+0x28c>
	fs->fs_type = fmt;		/* FAT sub-type */
 80023d2:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 80023d6:	4a34      	ldr	r2, [pc, #208]	@ (80024a8 <find_volume+0x318>)
 80023d8:	8813      	ldrh	r3, [r2, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	8013      	strh	r3, [r2, #0]
 80023e0:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80023e2:	4b32      	ldr	r3, [pc, #200]	@ (80024ac <find_volume+0x31c>)
 80023e4:	6123      	str	r3, [r4, #16]
	clear_lock(fs);
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7ff fcfe 	bl	8001de8 <clear_lock>
	return FR_OK;
 80023ec:	e046      	b.n	800247c <find_volume+0x2ec>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80023ee:	f04f 0b01 	mov.w	fp, #1
 80023f2:	e7c2      	b.n	800237a <find_volume+0x1ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80023f4:	f104 0062 	add.w	r0, r4, #98	@ 0x62
 80023f8:	f7ff fbfa 	bl	8001bf0 <ld_word>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d169      	bne.n	80024d4 <find_volume+0x344>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002400:	f1ba 0f00 	cmp.w	sl, #0
 8002404:	d168      	bne.n	80024d8 <find_volume+0x348>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002406:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800240a:	f7ff fbf6 	bl	8001bfa <ld_dword>
 800240e:	62e0      	str	r0, [r4, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002410:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8002414:	e7cd      	b.n	80023b2 <find_volume+0x222>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002416:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800241a:	e7ca      	b.n	80023b2 <find_volume+0x222>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800241c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002420:	f7ff fbe6 	bl	8001bf0 <ld_word>
 8002424:	2801      	cmp	r0, #1
 8002426:	d1d4      	bne.n	80023d2 <find_volume+0x242>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002428:	1c71      	adds	r1, r6, #1
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff fe58 	bl	80020e0 <move_window>
 8002430:	2800      	cmp	r0, #0
 8002432:	d1ce      	bne.n	80023d2 <find_volume+0x242>
			fs->fsi_flag = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002438:	f204 2036 	addw	r0, r4, #566	@ 0x236
 800243c:	f7ff fbd8 	bl	8001bf0 <ld_word>
 8002440:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8002444:	4298      	cmp	r0, r3
 8002446:	d1c4      	bne.n	80023d2 <find_volume+0x242>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002448:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800244c:	f7ff fbd5 	bl	8001bfa <ld_dword>
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <find_volume+0x320>)
 8002452:	4298      	cmp	r0, r3
 8002454:	d1bd      	bne.n	80023d2 <find_volume+0x242>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002456:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 800245a:	f7ff fbce 	bl	8001bfa <ld_dword>
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <find_volume+0x324>)
 8002460:	4298      	cmp	r0, r3
 8002462:	d1b6      	bne.n	80023d2 <find_volume+0x242>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8002464:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8002468:	f7ff fbc7 	bl	8001bfa <ld_dword>
 800246c:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800246e:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8002472:	f7ff fbc2 	bl	8001bfa <ld_dword>
 8002476:	6160      	str	r0, [r4, #20]
 8002478:	e7ab      	b.n	80023d2 <find_volume+0x242>
	if (vol < 0) return FR_INVALID_DRIVE;
 800247a:	250b      	movs	r5, #11
}
 800247c:	4628      	mov	r0, r5
 800247e:	b007      	add	sp, #28
 8002480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002484:	250c      	movs	r5, #12
 8002486:	e7f9      	b.n	800247c <find_volume+0x2ec>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002488:	2503      	movs	r5, #3
 800248a:	e7f7      	b.n	800247c <find_volume+0x2ec>
		return FR_WRITE_PROTECTED;
 800248c:	250a      	movs	r5, #10
 800248e:	e7f5      	b.n	800247c <find_volume+0x2ec>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8002490:	2501      	movs	r5, #1
 8002492:	e7f3      	b.n	800247c <find_volume+0x2ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8002494:	2501      	movs	r5, #1
 8002496:	e7f1      	b.n	800247c <find_volume+0x2ec>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002498:	2501      	movs	r5, #1
 800249a:	e7ef      	b.n	800247c <find_volume+0x2ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800249c:	250d      	movs	r5, #13
 800249e:	e7ed      	b.n	800247c <find_volume+0x2ec>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80024a0:	250d      	movs	r5, #13
 80024a2:	e7eb      	b.n	800247c <find_volume+0x2ec>
 80024a4:	20000564 	.word	0x20000564
 80024a8:	20000560 	.word	0x20000560
 80024ac:	20000340 	.word	0x20000340
 80024b0:	41615252 	.word	0x41615252
 80024b4:	61417272 	.word	0x61417272
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80024b8:	250d      	movs	r5, #13
 80024ba:	e7df      	b.n	800247c <find_volume+0x2ec>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80024bc:	250d      	movs	r5, #13
 80024be:	e7dd      	b.n	800247c <find_volume+0x2ec>
 80024c0:	250d      	movs	r5, #13
 80024c2:	e7db      	b.n	800247c <find_volume+0x2ec>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80024c4:	250d      	movs	r5, #13
 80024c6:	e7d9      	b.n	800247c <find_volume+0x2ec>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80024c8:	250d      	movs	r5, #13
 80024ca:	e7d7      	b.n	800247c <find_volume+0x2ec>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80024cc:	250d      	movs	r5, #13
 80024ce:	e7d5      	b.n	800247c <find_volume+0x2ec>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80024d0:	250d      	movs	r5, #13
 80024d2:	e7d3      	b.n	800247c <find_volume+0x2ec>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80024d4:	250d      	movs	r5, #13
 80024d6:	e7d1      	b.n	800247c <find_volume+0x2ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80024d8:	250d      	movs	r5, #13
 80024da:	e7cf      	b.n	800247c <find_volume+0x2ec>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80024dc:	250d      	movs	r5, #13
 80024de:	e7cd      	b.n	800247c <find_volume+0x2ec>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80024e0:	250d      	movs	r5, #13
 80024e2:	e7cb      	b.n	800247c <find_volume+0x2ec>

080024e4 <put_fat>:
{
 80024e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80024e8:	2901      	cmp	r1, #1
 80024ea:	f240 808e 	bls.w	800260a <put_fat+0x126>
 80024ee:	4604      	mov	r4, r0
 80024f0:	460d      	mov	r5, r1
 80024f2:	4617      	mov	r7, r2
 80024f4:	69c3      	ldr	r3, [r0, #28]
 80024f6:	428b      	cmp	r3, r1
 80024f8:	f240 808b 	bls.w	8002612 <put_fat+0x12e>
		switch (fs->fs_type) {
 80024fc:	7803      	ldrb	r3, [r0, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d049      	beq.n	8002596 <put_fat+0xb2>
 8002502:	2b03      	cmp	r3, #3
 8002504:	d060      	beq.n	80025c8 <put_fat+0xe4>
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 8085 	bne.w	8002616 <put_fat+0x132>
			bc = (UINT)clst; bc += bc / 2;
 800250c:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002510:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002512:	8983      	ldrh	r3, [r0, #12]
 8002514:	fbb8 f3f3 	udiv	r3, r8, r3
 8002518:	4419      	add	r1, r3
 800251a:	f7ff fde1 	bl	80020e0 <move_window>
			if (res != FR_OK) break;
 800251e:	4606      	mov	r6, r0
 8002520:	2800      	cmp	r0, #0
 8002522:	d173      	bne.n	800260c <put_fat+0x128>
			p = fs->win + bc++ % SS(fs);
 8002524:	f104 0a38 	add.w	sl, r4, #56	@ 0x38
 8002528:	f108 0901 	add.w	r9, r8, #1
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	fbb8 f2f3 	udiv	r2, r8, r3
 8002532:	fb03 8812 	mls	r8, r3, r2, r8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002536:	f015 0501 	ands.w	r5, r5, #1
 800253a:	d022      	beq.n	8002582 <put_fat+0x9e>
 800253c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002552:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	fbb9 f3f3 	udiv	r3, r9, r3
 800255a:	4419      	add	r1, r3
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fdbf 	bl	80020e0 <move_window>
			if (res != FR_OK) break;
 8002562:	4606      	mov	r6, r0
 8002564:	2800      	cmp	r0, #0
 8002566:	d151      	bne.n	800260c <put_fat+0x128>
			p = fs->win + bc % SS(fs);
 8002568:	89a3      	ldrh	r3, [r4, #12]
 800256a:	fbb9 f2f3 	udiv	r2, r9, r3
 800256e:	fb03 9912 	mls	r9, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002572:	b145      	cbz	r5, 8002586 <put_fat+0xa2>
 8002574:	f3c7 1307 	ubfx	r3, r7, #4, #8
 8002578:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 800257c:	2301      	movs	r3, #1
 800257e:	70e3      	strb	r3, [r4, #3]
			break;
 8002580:	e044      	b.n	800260c <put_fat+0x128>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002582:	b2fb      	uxtb	r3, r7
 8002584:	e7e1      	b.n	800254a <put_fat+0x66>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002586:	f81a 3009 	ldrb.w	r3, [sl, r9]
 800258a:	f3c7 2203 	ubfx	r2, r7, #8, #4
 800258e:	f023 030f 	bic.w	r3, r3, #15
 8002592:	4313      	orrs	r3, r2
 8002594:	e7f0      	b.n	8002578 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002596:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002598:	8983      	ldrh	r3, [r0, #12]
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	fbb5 f3f3 	udiv	r3, r5, r3
 80025a0:	4419      	add	r1, r3
 80025a2:	f7ff fd9d 	bl	80020e0 <move_window>
			if (res != FR_OK) break;
 80025a6:	4606      	mov	r6, r0
 80025a8:	bb80      	cbnz	r0, 800260c <put_fat+0x128>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80025aa:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80025ae:	006d      	lsls	r5, r5, #1
 80025b0:	89a3      	ldrh	r3, [r4, #12]
 80025b2:	fbb5 f2f3 	udiv	r2, r5, r3
 80025b6:	fb03 5512 	mls	r5, r3, r2, r5
 80025ba:	b2b9      	uxth	r1, r7
 80025bc:	4428      	add	r0, r5
 80025be:	f7ff fb27 	bl	8001c10 <st_word>
			fs->wflag = 1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	70e3      	strb	r3, [r4, #3]
			break;
 80025c6:	e021      	b.n	800260c <put_fat+0x128>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80025c8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80025ca:	8983      	ldrh	r3, [r0, #12]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	fbb5 f3f3 	udiv	r3, r5, r3
 80025d2:	4419      	add	r1, r3
 80025d4:	f7ff fd84 	bl	80020e0 <move_window>
			if (res != FR_OK) break;
 80025d8:	4606      	mov	r6, r0
 80025da:	b9b8      	cbnz	r0, 800260c <put_fat+0x128>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80025dc:	f027 4770 	bic.w	r7, r7, #4026531840	@ 0xf0000000
 80025e0:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80025e4:	00ad      	lsls	r5, r5, #2
 80025e6:	89a2      	ldrh	r2, [r4, #12]
 80025e8:	fbb5 f1f2 	udiv	r1, r5, r2
 80025ec:	fb02 5511 	mls	r5, r2, r1, r5
 80025f0:	441d      	add	r5, r3
 80025f2:	4628      	mov	r0, r5
 80025f4:	f7ff fb01 	bl	8001bfa <ld_dword>
 80025f8:	f000 4170 	and.w	r1, r0, #4026531840	@ 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80025fc:	4339      	orrs	r1, r7
 80025fe:	4628      	mov	r0, r5
 8002600:	f7ff fb0a 	bl	8001c18 <st_dword>
			fs->wflag = 1;
 8002604:	2301      	movs	r3, #1
 8002606:	70e3      	strb	r3, [r4, #3]
			break;
 8002608:	e000      	b.n	800260c <put_fat+0x128>
	FRESULT res = FR_INT_ERR;
 800260a:	2602      	movs	r6, #2
}
 800260c:	4630      	mov	r0, r6
 800260e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
 8002612:	2602      	movs	r6, #2
 8002614:	e7fa      	b.n	800260c <put_fat+0x128>
		switch (fs->fs_type) {
 8002616:	2602      	movs	r6, #2
 8002618:	e7f8      	b.n	800260c <put_fat+0x128>

0800261a <get_fat>:
{
 800261a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800261c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800261e:	2901      	cmp	r1, #1
 8002620:	d96a      	bls.n	80026f8 <get_fat+0xde>
 8002622:	460c      	mov	r4, r1
 8002624:	69eb      	ldr	r3, [r5, #28]
 8002626:	428b      	cmp	r3, r1
 8002628:	d968      	bls.n	80026fc <get_fat+0xe2>
		switch (fs->fs_type) {
 800262a:	782b      	ldrb	r3, [r5, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d035      	beq.n	800269c <get_fat+0x82>
 8002630:	2b03      	cmp	r3, #3
 8002632:	d049      	beq.n	80026c8 <get_fat+0xae>
 8002634:	2b01      	cmp	r3, #1
 8002636:	d163      	bne.n	8002700 <get_fat+0xe6>
			bc = (UINT)clst; bc += bc / 2;
 8002638:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800263c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800263e:	89ab      	ldrh	r3, [r5, #12]
 8002640:	fbb6 f3f3 	udiv	r3, r6, r3
 8002644:	4419      	add	r1, r3
 8002646:	4628      	mov	r0, r5
 8002648:	f7ff fd4a 	bl	80020e0 <move_window>
 800264c:	b110      	cbz	r0, 8002654 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800264e:	f04f 30ff 	mov.w	r0, #4294967295
 8002652:	e052      	b.n	80026fa <get_fat+0xe0>
			wc = fs->win[bc++ % SS(fs)];
 8002654:	1c77      	adds	r7, r6, #1
 8002656:	89ab      	ldrh	r3, [r5, #12]
 8002658:	fbb6 f2f3 	udiv	r2, r6, r3
 800265c:	fb03 6612 	mls	r6, r3, r2, r6
 8002660:	442e      	add	r6, r5
 8002662:	f896 6038 	ldrb.w	r6, [r6, #56]	@ 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002666:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002668:	fbb7 f3f3 	udiv	r3, r7, r3
 800266c:	4419      	add	r1, r3
 800266e:	4628      	mov	r0, r5
 8002670:	f7ff fd36 	bl	80020e0 <move_window>
 8002674:	2800      	cmp	r0, #0
 8002676:	d145      	bne.n	8002704 <get_fat+0xea>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002678:	89ab      	ldrh	r3, [r5, #12]
 800267a:	fbb7 f2f3 	udiv	r2, r7, r3
 800267e:	fb03 7712 	mls	r7, r3, r2, r7
 8002682:	442f      	add	r7, r5
 8002684:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002688:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800268c:	f014 0f01 	tst.w	r4, #1
 8002690:	d001      	beq.n	8002696 <get_fat+0x7c>
 8002692:	0900      	lsrs	r0, r0, #4
 8002694:	e031      	b.n	80026fa <get_fat+0xe0>
 8002696:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800269a:	e02e      	b.n	80026fa <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800269c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800269e:	89ab      	ldrh	r3, [r5, #12]
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80026a6:	4419      	add	r1, r3
 80026a8:	4628      	mov	r0, r5
 80026aa:	f7ff fd19 	bl	80020e0 <move_window>
 80026ae:	bb60      	cbnz	r0, 800270a <get_fat+0xf0>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80026b0:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80026b4:	0064      	lsls	r4, r4, #1
 80026b6:	89ab      	ldrh	r3, [r5, #12]
 80026b8:	fbb4 f2f3 	udiv	r2, r4, r3
 80026bc:	fb03 4412 	mls	r4, r3, r2, r4
 80026c0:	4420      	add	r0, r4
 80026c2:	f7ff fa95 	bl	8001bf0 <ld_word>
			break;
 80026c6:	e018      	b.n	80026fa <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80026c8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80026ca:	89ab      	ldrh	r3, [r5, #12]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80026d2:	4419      	add	r1, r3
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7ff fd03 	bl	80020e0 <move_window>
 80026da:	b9c8      	cbnz	r0, 8002710 <get_fat+0xf6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80026dc:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80026e0:	00a4      	lsls	r4, r4, #2
 80026e2:	89ab      	ldrh	r3, [r5, #12]
 80026e4:	fbb4 f2f3 	udiv	r2, r4, r3
 80026e8:	fb03 4412 	mls	r4, r3, r2, r4
 80026ec:	4420      	add	r0, r4
 80026ee:	f7ff fa84 	bl	8001bfa <ld_dword>
 80026f2:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 80026f6:	e000      	b.n	80026fa <get_fat+0xe0>
		val = 1;	/* Internal error */
 80026f8:	2001      	movs	r0, #1
}
 80026fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80026fc:	2001      	movs	r0, #1
 80026fe:	e7fc      	b.n	80026fa <get_fat+0xe0>
		switch (fs->fs_type) {
 8002700:	2001      	movs	r0, #1
 8002702:	e7fa      	b.n	80026fa <get_fat+0xe0>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	e7f7      	b.n	80026fa <get_fat+0xe0>
 800270a:	f04f 30ff 	mov.w	r0, #4294967295
 800270e:	e7f4      	b.n	80026fa <get_fat+0xe0>
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8002714:	e7f1      	b.n	80026fa <get_fat+0xe0>

08002716 <dir_sdi>:
{
 8002716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800271a:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800271e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8002722:	d249      	bcs.n	80027b8 <dir_sdi+0xa2>
 8002724:	4607      	mov	r7, r0
 8002726:	460e      	mov	r6, r1
 8002728:	f011 0f1f 	tst.w	r1, #31
 800272c:	d147      	bne.n	80027be <dir_sdi+0xa8>
	dp->dptr = ofs;				/* Set current offset */
 800272e:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002730:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002732:	bb1c      	cbnz	r4, 800277c <dir_sdi+0x66>
 8002734:	f898 3000 	ldrb.w	r3, [r8]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <dir_sdi+0x2a>
		clst = fs->dirbase;
 800273c:	f8d8 402c 	ldr.w	r4, [r8, #44]	@ 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002740:	b9e4      	cbnz	r4, 800277c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002742:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8002746:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 800274a:	d93a      	bls.n	80027c2 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800274c:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8002750:	61fb      	str	r3, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 8002752:	61bc      	str	r4, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	b3e3      	cbz	r3, 80027d2 <dir_sdi+0xbc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002758:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800275c:	fbb6 f2f2 	udiv	r2, r6, r2
 8002760:	4413      	add	r3, r2
 8002762:	61fb      	str	r3, [r7, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002764:	f108 0338 	add.w	r3, r8, #56	@ 0x38
 8002768:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800276c:	fbb6 f1f2 	udiv	r1, r6, r2
 8002770:	fb02 6111 	mls	r1, r2, r1, r6
 8002774:	440b      	add	r3, r1
 8002776:	623b      	str	r3, [r7, #32]
	return FR_OK;
 8002778:	2000      	movs	r0, #0
 800277a:	e01e      	b.n	80027ba <dir_sdi+0xa4>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800277c:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8002780:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002784:	fb03 f505 	mul.w	r5, r3, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 8002788:	42ae      	cmp	r6, r5
 800278a:	d30f      	bcc.n	80027ac <dir_sdi+0x96>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800278c:	4621      	mov	r1, r4
 800278e:	4638      	mov	r0, r7
 8002790:	f7ff ff43 	bl	800261a <get_fat>
 8002794:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002796:	f1b0 3fff 	cmp.w	r0, #4294967295
 800279a:	d014      	beq.n	80027c6 <dir_sdi+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800279c:	2801      	cmp	r0, #1
 800279e:	d914      	bls.n	80027ca <dir_sdi+0xb4>
 80027a0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80027a4:	4283      	cmp	r3, r0
 80027a6:	d912      	bls.n	80027ce <dir_sdi+0xb8>
			ofs -= csz;
 80027a8:	1b76      	subs	r6, r6, r5
 80027aa:	e7ed      	b.n	8002788 <dir_sdi+0x72>
		dp->sect = clust2sect(fs, clst);
 80027ac:	4621      	mov	r1, r4
 80027ae:	4640      	mov	r0, r8
 80027b0:	f7ff fb38 	bl	8001e24 <clust2sect>
 80027b4:	61f8      	str	r0, [r7, #28]
 80027b6:	e7cc      	b.n	8002752 <dir_sdi+0x3c>
		return FR_INT_ERR;
 80027b8:	2002      	movs	r0, #2
}
 80027ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 80027be:	2002      	movs	r0, #2
 80027c0:	e7fb      	b.n	80027ba <dir_sdi+0xa4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80027c2:	2002      	movs	r0, #2
 80027c4:	e7f9      	b.n	80027ba <dir_sdi+0xa4>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80027c6:	2001      	movs	r0, #1
 80027c8:	e7f7      	b.n	80027ba <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80027ca:	2002      	movs	r0, #2
 80027cc:	e7f5      	b.n	80027ba <dir_sdi+0xa4>
 80027ce:	2002      	movs	r0, #2
 80027d0:	e7f3      	b.n	80027ba <dir_sdi+0xa4>
	if (!dp->sect) return FR_INT_ERR;
 80027d2:	2002      	movs	r0, #2
 80027d4:	e7f1      	b.n	80027ba <dir_sdi+0xa4>

080027d6 <create_chain>:
{
 80027d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027da:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 80027dc:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80027de:	460f      	mov	r7, r1
 80027e0:	b951      	cbnz	r1, 80027f8 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80027e2:	f8d6 8014 	ldr.w	r8, [r6, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80027e6:	f1b8 0f00 	cmp.w	r8, #0
 80027ea:	d012      	beq.n	8002812 <create_chain+0x3c>
 80027ec:	69f3      	ldr	r3, [r6, #28]
 80027ee:	4543      	cmp	r3, r8
 80027f0:	d811      	bhi.n	8002816 <create_chain+0x40>
 80027f2:	f04f 0801 	mov.w	r8, #1
 80027f6:	e00e      	b.n	8002816 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80027f8:	f7ff ff0f 	bl	800261a <get_fat>
 80027fc:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80027fe:	2801      	cmp	r0, #1
 8002800:	d947      	bls.n	8002892 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002802:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002806:	d049      	beq.n	800289c <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002808:	69f2      	ldr	r2, [r6, #28]
 800280a:	4282      	cmp	r2, r0
 800280c:	d846      	bhi.n	800289c <create_chain+0xc6>
		scl = clst;
 800280e:	46b8      	mov	r8, r7
 8002810:	e001      	b.n	8002816 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002812:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8002816:	4644      	mov	r4, r8
 8002818:	e00c      	b.n	8002834 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800281a:	4621      	mov	r1, r4
 800281c:	4628      	mov	r0, r5
 800281e:	f7ff fefc 	bl	800261a <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8002822:	4603      	mov	r3, r0
 8002824:	b178      	cbz	r0, 8002846 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002826:	2801      	cmp	r0, #1
 8002828:	d038      	beq.n	800289c <create_chain+0xc6>
 800282a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800282e:	d035      	beq.n	800289c <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8002830:	4544      	cmp	r4, r8
 8002832:	d032      	beq.n	800289a <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8002834:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002836:	69f3      	ldr	r3, [r6, #28]
 8002838:	42a3      	cmp	r3, r4
 800283a:	d8ee      	bhi.n	800281a <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 800283c:	f1b8 0f01 	cmp.w	r8, #1
 8002840:	d929      	bls.n	8002896 <create_chain+0xc0>
				ncl = 2;
 8002842:	2402      	movs	r4, #2
 8002844:	e7e9      	b.n	800281a <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	4621      	mov	r1, r4
 800284c:	4630      	mov	r0, r6
 800284e:	f7ff fe49 	bl	80024e4 <put_fat>
		if (res == FR_OK && clst != 0) {
 8002852:	4603      	mov	r3, r0
 8002854:	b9b0      	cbnz	r0, 8002884 <create_chain+0xae>
 8002856:	b977      	cbnz	r7, 8002876 <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002858:	b9a3      	cbnz	r3, 8002884 <create_chain+0xae>
		fs->last_clst = ncl;
 800285a:	6174      	str	r4, [r6, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800285c:	69b2      	ldr	r2, [r6, #24]
 800285e:	69f3      	ldr	r3, [r6, #28]
 8002860:	3b02      	subs	r3, #2
 8002862:	429a      	cmp	r2, r3
 8002864:	d801      	bhi.n	800286a <create_chain+0x94>
 8002866:	3a01      	subs	r2, #1
 8002868:	61b2      	str	r2, [r6, #24]
		fs->fsi_flag |= 1;
 800286a:	7933      	ldrb	r3, [r6, #4]
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	7133      	strb	r3, [r6, #4]
 8002872:	4623      	mov	r3, r4
 8002874:	e012      	b.n	800289c <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8002876:	4622      	mov	r2, r4
 8002878:	4639      	mov	r1, r7
 800287a:	4630      	mov	r0, r6
 800287c:	f7ff fe32 	bl	80024e4 <put_fat>
 8002880:	4603      	mov	r3, r0
 8002882:	e7e9      	b.n	8002858 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <create_chain+0xb6>
 8002888:	2301      	movs	r3, #1
 800288a:	e007      	b.n	800289c <create_chain+0xc6>
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
 8002890:	e004      	b.n	800289c <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002892:	2301      	movs	r3, #1
 8002894:	e002      	b.n	800289c <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028a2 <remove_chain>:
{
 80028a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a4:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 80028a6:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80028a8:	2901      	cmp	r1, #1
 80028aa:	d92e      	bls.n	800290a <remove_chain+0x68>
 80028ac:	4606      	mov	r6, r0
 80028ae:	4611      	mov	r1, r2
 80028b0:	69eb      	ldr	r3, [r5, #28]
 80028b2:	42a3      	cmp	r3, r4
 80028b4:	d92b      	bls.n	800290e <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80028b6:	b14a      	cbz	r2, 80028cc <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	4628      	mov	r0, r5
 80028be:	f7ff fe11 	bl	80024e4 <put_fat>
		if (res != FR_OK) return res;
 80028c2:	4607      	mov	r7, r0
 80028c4:	b110      	cbz	r0, 80028cc <remove_chain+0x2a>
 80028c6:	e023      	b.n	8002910 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80028c8:	42a2      	cmp	r2, r4
 80028ca:	d921      	bls.n	8002910 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80028cc:	4627      	mov	r7, r4
 80028ce:	4621      	mov	r1, r4
 80028d0:	4630      	mov	r0, r6
 80028d2:	f7ff fea2 	bl	800261a <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80028d6:	4604      	mov	r4, r0
 80028d8:	b1e0      	cbz	r0, 8002914 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80028da:	2801      	cmp	r0, #1
 80028dc:	d01c      	beq.n	8002918 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80028de:	f1b0 3fff 	cmp.w	r0, #4294967295
 80028e2:	d01b      	beq.n	800291c <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80028e4:	2200      	movs	r2, #0
 80028e6:	4639      	mov	r1, r7
 80028e8:	4628      	mov	r0, r5
 80028ea:	f7ff fdfb 	bl	80024e4 <put_fat>
			if (res != FR_OK) return res;
 80028ee:	4607      	mov	r7, r0
 80028f0:	b970      	cbnz	r0, 8002910 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80028f2:	69ab      	ldr	r3, [r5, #24]
 80028f4:	69ea      	ldr	r2, [r5, #28]
 80028f6:	1e91      	subs	r1, r2, #2
 80028f8:	428b      	cmp	r3, r1
 80028fa:	d2e5      	bcs.n	80028c8 <remove_chain+0x26>
			fs->free_clst++;
 80028fc:	3301      	adds	r3, #1
 80028fe:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 8002900:	792b      	ldrb	r3, [r5, #4]
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	712b      	strb	r3, [r5, #4]
 8002908:	e7de      	b.n	80028c8 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800290a:	2702      	movs	r7, #2
 800290c:	e000      	b.n	8002910 <remove_chain+0x6e>
 800290e:	2702      	movs	r7, #2
}
 8002910:	4638      	mov	r0, r7
 8002912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8002914:	2700      	movs	r7, #0
 8002916:	e7fb      	b.n	8002910 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002918:	2702      	movs	r7, #2
 800291a:	e7f9      	b.n	8002910 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800291c:	2701      	movs	r7, #1
 800291e:	e7f7      	b.n	8002910 <remove_chain+0x6e>

08002920 <dir_next>:
{
 8002920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8002924:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002926:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002928:	69c3      	ldr	r3, [r0, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d074      	beq.n	8002a18 <dir_next+0xf8>
 800292e:	4605      	mov	r5, r0
 8002930:	460f      	mov	r7, r1
 8002932:	3420      	adds	r4, #32
 8002934:	f5b4 1f00 	cmp.w	r4, #2097152	@ 0x200000
 8002938:	d270      	bcs.n	8002a1c <dir_next+0xfc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800293a:	89b1      	ldrh	r1, [r6, #12]
 800293c:	fbb4 f2f1 	udiv	r2, r4, r1
 8002940:	fb01 4212 	mls	r2, r1, r2, r4
 8002944:	b93a      	cbnz	r2, 8002956 <dir_next+0x36>
		dp->sect++;				/* Next sector */
 8002946:	3301      	adds	r3, #1
 8002948:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800294a:	6981      	ldr	r1, [r0, #24]
 800294c:	b9a1      	cbnz	r1, 8002978 <dir_next+0x58>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800294e:	8933      	ldrh	r3, [r6, #8]
 8002950:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8002954:	d90c      	bls.n	8002970 <dir_next+0x50>
	dp->dptr = ofs;						/* Current entry */
 8002956:	616c      	str	r4, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002958:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 800295c:	89b2      	ldrh	r2, [r6, #12]
 800295e:	fbb4 f1f2 	udiv	r1, r4, r2
 8002962:	fb02 4411 	mls	r4, r2, r1, r4
 8002966:	4423      	add	r3, r4
 8002968:	622b      	str	r3, [r5, #32]
	return FR_OK;
 800296a:	2000      	movs	r0, #0
}
 800296c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8002970:	2300      	movs	r3, #0
 8002972:	61c3      	str	r3, [r0, #28]
 8002974:	2004      	movs	r0, #4
 8002976:	e7f9      	b.n	800296c <dir_next+0x4c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8002978:	89b2      	ldrh	r2, [r6, #12]
 800297a:	fbb4 f2f2 	udiv	r2, r4, r2
 800297e:	8973      	ldrh	r3, [r6, #10]
 8002980:	3b01      	subs	r3, #1
 8002982:	ea12 0803 	ands.w	r8, r2, r3
 8002986:	d1e6      	bne.n	8002956 <dir_next+0x36>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002988:	f7ff fe47 	bl	800261a <get_fat>
 800298c:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800298e:	2801      	cmp	r0, #1
 8002990:	d946      	bls.n	8002a20 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002992:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002996:	d045      	beq.n	8002a24 <dir_next+0x104>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8002998:	69f3      	ldr	r3, [r6, #28]
 800299a:	4283      	cmp	r3, r0
 800299c:	d834      	bhi.n	8002a08 <dir_next+0xe8>
					if (!stretch) {								/* If no stretch, report EOT */
 800299e:	b18f      	cbz	r7, 80029c4 <dir_next+0xa4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80029a0:	69a9      	ldr	r1, [r5, #24]
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7ff ff17 	bl	80027d6 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80029a8:	4681      	mov	r9, r0
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d03c      	beq.n	8002a28 <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80029ae:	2801      	cmp	r0, #1
 80029b0:	d03c      	beq.n	8002a2c <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80029b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029b6:	d03b      	beq.n	8002a30 <dir_next+0x110>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80029b8:	4630      	mov	r0, r6
 80029ba:	f7ff fb67 	bl	800208c <sync_window>
 80029be:	b128      	cbz	r0, 80029cc <dir_next+0xac>
 80029c0:	2001      	movs	r0, #1
 80029c2:	e7d3      	b.n	800296c <dir_next+0x4c>
						dp->sect = 0; return FR_NO_FILE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61eb      	str	r3, [r5, #28]
 80029c8:	2004      	movs	r0, #4
 80029ca:	e7cf      	b.n	800296c <dir_next+0x4c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80029cc:	89b2      	ldrh	r2, [r6, #12]
 80029ce:	2100      	movs	r1, #0
 80029d0:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 80029d4:	f7ff f934 	bl	8001c40 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80029d8:	4649      	mov	r1, r9
 80029da:	4630      	mov	r0, r6
 80029dc:	f7ff fa22 	bl	8001e24 <clust2sect>
 80029e0:	6370      	str	r0, [r6, #52]	@ 0x34
 80029e2:	8973      	ldrh	r3, [r6, #10]
 80029e4:	4598      	cmp	r8, r3
 80029e6:	d20b      	bcs.n	8002a00 <dir_next+0xe0>
						fs->wflag = 1;
 80029e8:	2301      	movs	r3, #1
 80029ea:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80029ec:	4630      	mov	r0, r6
 80029ee:	f7ff fb4d 	bl	800208c <sync_window>
 80029f2:	b9f8      	cbnz	r0, 8002a34 <dir_next+0x114>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80029f4:	f108 0801 	add.w	r8, r8, #1
 80029f8:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80029fa:	3301      	adds	r3, #1
 80029fc:	6373      	str	r3, [r6, #52]	@ 0x34
 80029fe:	e7f0      	b.n	80029e2 <dir_next+0xc2>
					fs->winsect -= n;							/* Restore window offset */
 8002a00:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8002a02:	eba3 0308 	sub.w	r3, r3, r8
 8002a06:	6373      	str	r3, [r6, #52]	@ 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8002a08:	f8c5 9018 	str.w	r9, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	4630      	mov	r0, r6
 8002a10:	f7ff fa08 	bl	8001e24 <clust2sect>
 8002a14:	61e8      	str	r0, [r5, #28]
 8002a16:	e79e      	b.n	8002956 <dir_next+0x36>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8002a18:	2004      	movs	r0, #4
 8002a1a:	e7a7      	b.n	800296c <dir_next+0x4c>
 8002a1c:	2004      	movs	r0, #4
 8002a1e:	e7a5      	b.n	800296c <dir_next+0x4c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002a20:	2002      	movs	r0, #2
 8002a22:	e7a3      	b.n	800296c <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8002a24:	2001      	movs	r0, #1
 8002a26:	e7a1      	b.n	800296c <dir_next+0x4c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002a28:	2007      	movs	r0, #7
 8002a2a:	e79f      	b.n	800296c <dir_next+0x4c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	e79d      	b.n	800296c <dir_next+0x4c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002a30:	2001      	movs	r0, #1
 8002a32:	e79b      	b.n	800296c <dir_next+0x4c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8002a34:	2001      	movs	r0, #1
 8002a36:	e799      	b.n	800296c <dir_next+0x4c>

08002a38 <dir_alloc>:
{
 8002a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8002a3e:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8002a40:	2100      	movs	r1, #0
 8002a42:	f7ff fe68 	bl	8002716 <dir_sdi>
	if (res == FR_OK) {
 8002a46:	4602      	mov	r2, r0
 8002a48:	b9c0      	cbnz	r0, 8002a7c <dir_alloc+0x44>
		n = 0;
 8002a4a:	2500      	movs	r5, #0
 8002a4c:	e008      	b.n	8002a60 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002a4e:	3501      	adds	r5, #1
 8002a50:	42b5      	cmp	r5, r6
 8002a52:	d013      	beq.n	8002a7c <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8002a54:	2101      	movs	r1, #1
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff ff62 	bl	8002920 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	b968      	cbnz	r0, 8002a7c <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8002a60:	69e1      	ldr	r1, [r4, #28]
 8002a62:	4638      	mov	r0, r7
 8002a64:	f7ff fb3c 	bl	80020e0 <move_window>
			if (res != FR_OK) break;
 8002a68:	4602      	mov	r2, r0
 8002a6a:	b938      	cbnz	r0, 8002a7c <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002a6c:	6a23      	ldr	r3, [r4, #32]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2be5      	cmp	r3, #229	@ 0xe5
 8002a72:	d0ec      	beq.n	8002a4e <dir_alloc+0x16>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ea      	beq.n	8002a4e <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8002a78:	2500      	movs	r5, #0
 8002a7a:	e7eb      	b.n	8002a54 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002a7c:	2a04      	cmp	r2, #4
 8002a7e:	d001      	beq.n	8002a84 <dir_alloc+0x4c>
}
 8002a80:	4610      	mov	r0, r2
 8002a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002a84:	2207      	movs	r2, #7
 8002a86:	e7fb      	b.n	8002a80 <dir_alloc+0x48>

08002a88 <sync_fs>:
{
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8002a8c:	f7ff fafe 	bl	800208c <sync_window>
	if (res == FR_OK) {
 8002a90:	4605      	mov	r5, r0
 8002a92:	b948      	cbnz	r0, 8002aa8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002a94:	7823      	ldrb	r3, [r4, #0]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d008      	beq.n	8002aac <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	7860      	ldrb	r0, [r4, #1]
 8002aa0:	f7fe fa3a 	bl	8000f18 <disk_ioctl>
 8002aa4:	b100      	cbz	r0, 8002aa8 <sync_fs+0x20>
 8002aa6:	2501      	movs	r5, #1
}
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002aac:	7923      	ldrb	r3, [r4, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d1f3      	bne.n	8002a9a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8002ab2:	f104 0638 	add.w	r6, r4, #56	@ 0x38
 8002ab6:	89a2      	ldrh	r2, [r4, #12]
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4630      	mov	r0, r6
 8002abc:	f7ff f8c0 	bl	8001c40 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002ac0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8002ac4:	f204 2036 	addw	r0, r4, #566	@ 0x236
 8002ac8:	f7ff f8a2 	bl	8001c10 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002acc:	490e      	ldr	r1, [pc, #56]	@ (8002b08 <sync_fs+0x80>)
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f7ff f8a2 	bl	8001c18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002ad4:	490d      	ldr	r1, [pc, #52]	@ (8002b0c <sync_fs+0x84>)
 8002ad6:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8002ada:	f7ff f89d 	bl	8001c18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002ade:	69a1      	ldr	r1, [r4, #24]
 8002ae0:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8002ae4:	f7ff f898 	bl	8001c18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002ae8:	6961      	ldr	r1, [r4, #20]
 8002aea:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8002aee:	f7ff f893 	bl	8001c18 <st_dword>
			fs->winsect = fs->volbase + 1;
 8002af2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002af4:	3201      	adds	r2, #1
 8002af6:	6362      	str	r2, [r4, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002af8:	2301      	movs	r3, #1
 8002afa:	4631      	mov	r1, r6
 8002afc:	7860      	ldrb	r0, [r4, #1]
 8002afe:	f7fe f9ff 	bl	8000f00 <disk_write>
			fs->fsi_flag = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	7123      	strb	r3, [r4, #4]
 8002b06:	e7c8      	b.n	8002a9a <sync_fs+0x12>
 8002b08:	41615252 	.word	0x41615252
 8002b0c:	61417272 	.word	0x61417272

08002b10 <create_name>:
{
 8002b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b14:	b083      	sub	sp, #12
 8002b16:	4607      	mov	r7, r0
 8002b18:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8002b1a:	f8d1 9000 	ldr.w	r9, [r1]
 8002b1e:	6803      	ldr	r3, [r0, #0]
 8002b20:	691d      	ldr	r5, [r3, #16]
 8002b22:	2400      	movs	r4, #0
 8002b24:	4623      	mov	r3, r4
 8002b26:	e012      	b.n	8002b4e <create_name+0x3e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8002b28:	3601      	adds	r6, #1
 8002b2a:	f819 3006 	ldrb.w	r3, [r9, r6]
 8002b2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8002b30:	d0fa      	beq.n	8002b28 <create_name+0x18>
 8002b32:	2b5c      	cmp	r3, #92	@ 0x5c
 8002b34:	d0f8      	beq.n	8002b28 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 8002b36:	444e      	add	r6, r9
 8002b38:	f8ca 6000 	str.w	r6, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b3c:	281f      	cmp	r0, #31
 8002b3e:	d823      	bhi.n	8002b88 <create_name+0x78>
 8002b40:	f04f 0804 	mov.w	r8, #4
 8002b44:	e024      	b.n	8002b90 <create_name+0x80>
		lfn[di++] = w;					/* Store the Unicode character */
 8002b46:	f825 8014 	strh.w	r8, [r5, r4, lsl #1]
 8002b4a:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8002b4c:	4633      	mov	r3, r6
 8002b4e:	1c5e      	adds	r6, r3, #1
 8002b50:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 8002b54:	281f      	cmp	r0, #31
 8002b56:	d9ee      	bls.n	8002b36 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8002b58:	282f      	cmp	r0, #47	@ 0x2f
 8002b5a:	d0e6      	beq.n	8002b2a <create_name+0x1a>
 8002b5c:	285c      	cmp	r0, #92	@ 0x5c
 8002b5e:	d0e4      	beq.n	8002b2a <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8002b60:	2cfe      	cmp	r4, #254	@ 0xfe
 8002b62:	f200 80df 	bhi.w	8002d24 <create_name+0x214>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8002b66:	2101      	movs	r1, #1
 8002b68:	f7fe f8d0 	bl	8000d0c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8002b6c:	4680      	mov	r8, r0
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	f000 80da 	beq.w	8002d28 <create_name+0x218>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8002b74:	287f      	cmp	r0, #127	@ 0x7f
 8002b76:	d8e6      	bhi.n	8002b46 <create_name+0x36>
 8002b78:	4601      	mov	r1, r0
 8002b7a:	486d      	ldr	r0, [pc, #436]	@ (8002d30 <create_name+0x220>)
 8002b7c:	f7ff f872 	bl	8001c64 <chk_chr>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d0e0      	beq.n	8002b46 <create_name+0x36>
 8002b84:	2006      	movs	r0, #6
 8002b86:	e085      	b.n	8002c94 <create_name+0x184>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8002b88:	f04f 0800 	mov.w	r8, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8002b8c:	e000      	b.n	8002b90 <create_name+0x80>
		di--;
 8002b8e:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8002b90:	b144      	cbz	r4, 8002ba4 <create_name+0x94>
		w = lfn[di - 1];
 8002b92:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d0f6      	beq.n	8002b8e <create_name+0x7e>
 8002ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ba2:	d0f4      	beq.n	8002b8e <create_name+0x7e>
	lfn[di] = 0;						/* LFN is created */
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8002baa:	2c00      	cmp	r4, #0
 8002bac:	f000 80be 	beq.w	8002d2c <create_name+0x21c>
	mem_set(dp->fn, ' ', 11);
 8002bb0:	220b      	movs	r2, #11
 8002bb2:	2120      	movs	r1, #32
 8002bb4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002bb8:	f7ff f842 	bl	8001c40 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <create_name+0xb2>
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8002bc6:	2a20      	cmp	r2, #32
 8002bc8:	d0fa      	beq.n	8002bc0 <create_name+0xb0>
 8002bca:	2a2e      	cmp	r2, #46	@ 0x2e
 8002bcc:	d0f8      	beq.n	8002bc0 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 8002bce:	b11b      	cbz	r3, 8002bd8 <create_name+0xc8>
 8002bd0:	f048 0803 	orr.w	r8, r8, #3
 8002bd4:	e000      	b.n	8002bd8 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8002bd6:	3c01      	subs	r4, #1
 8002bd8:	b16c      	cbz	r4, 8002bf6 <create_name+0xe6>
 8002bda:	f104 4200 	add.w	r2, r4, #2147483648	@ 0x80000000
 8002bde:	3a01      	subs	r2, #1
 8002be0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8002be4:	2a2e      	cmp	r2, #46	@ 0x2e
 8002be6:	d1f6      	bne.n	8002bd6 <create_name+0xc6>
 8002be8:	f04f 0b08 	mov.w	fp, #8
 8002bec:	f04f 0a00 	mov.w	sl, #0
 8002bf0:	f8cd a004 	str.w	sl, [sp, #4]
 8002bf4:	e00a      	b.n	8002c0c <create_name+0xfc>
 8002bf6:	46a2      	mov	sl, r4
 8002bf8:	f04f 0b08 	mov.w	fp, #8
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	e004      	b.n	8002c0c <create_name+0xfc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8002c02:	454c      	cmp	r4, r9
 8002c04:	d00b      	beq.n	8002c1e <create_name+0x10e>
			cf |= NS_LOSS | NS_LFN; continue;
 8002c06:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	f103 0901 	add.w	r9, r3, #1
 8002c10:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8002c14:	b1fe      	cbz	r6, 8002c56 <create_name+0x146>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8002c16:	2e20      	cmp	r6, #32
 8002c18:	d0f5      	beq.n	8002c06 <create_name+0xf6>
 8002c1a:	2e2e      	cmp	r6, #46	@ 0x2e
 8002c1c:	d0f1      	beq.n	8002c02 <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8002c1e:	45da      	cmp	sl, fp
 8002c20:	d210      	bcs.n	8002c44 <create_name+0x134>
 8002c22:	454c      	cmp	r4, r9
 8002c24:	d00e      	beq.n	8002c44 <create_name+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 8002c26:	2e7f      	cmp	r6, #127	@ 0x7f
 8002c28:	d844      	bhi.n	8002cb4 <create_name+0x1a4>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8002c2a:	2e00      	cmp	r6, #0
 8002c2c:	d14f      	bne.n	8002cce <create_name+0x1be>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8002c2e:	f048 0803 	orr.w	r8, r8, #3
 8002c32:	265f      	movs	r6, #95	@ 0x5f
		dp->fn[i++] = (BYTE)w;
 8002c34:	eb07 030a 	add.w	r3, r7, sl
 8002c38:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8002c3c:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 8002c3e:	f10a 0a01 	add.w	sl, sl, #1
 8002c42:	e7e3      	b.n	8002c0c <create_name+0xfc>
			if (ni == 11) {				/* Long extension */
 8002c44:	f1bb 0f0b 	cmp.w	fp, #11
 8002c48:	d027      	beq.n	8002c9a <create_name+0x18a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8002c4a:	454c      	cmp	r4, r9
 8002c4c:	d001      	beq.n	8002c52 <create_name+0x142>
 8002c4e:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8002c52:	454c      	cmp	r4, r9
 8002c54:	d224      	bcs.n	8002ca0 <create_name+0x190>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002c56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c5a:	2be5      	cmp	r3, #229	@ 0xe5
 8002c5c:	d053      	beq.n	8002d06 <create_name+0x1f6>
	if (ni == 8) b <<= 2;
 8002c5e:	f1bb 0f08 	cmp.w	fp, #8
 8002c62:	d054      	beq.n	8002d0e <create_name+0x1fe>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8002c64:	9b01      	ldr	r3, [sp, #4]
 8002c66:	f003 020c 	and.w	r2, r3, #12
 8002c6a:	2a0c      	cmp	r2, #12
 8002c6c:	d003      	beq.n	8002c76 <create_name+0x166>
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d101      	bne.n	8002c7a <create_name+0x16a>
 8002c76:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8002c7a:	f018 0f02 	tst.w	r8, #2
 8002c7e:	d106      	bne.n	8002c8e <create_name+0x17e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8002c80:	9b01      	ldr	r3, [sp, #4]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d046      	beq.n	8002d18 <create_name+0x208>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8002c8a:	2a04      	cmp	r2, #4
 8002c8c:	d047      	beq.n	8002d1e <create_name+0x20e>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8002c8e:	f887 802f 	strb.w	r8, [r7, #47]	@ 0x2f
	return FR_OK;
 8002c92:	2000      	movs	r0, #0
}
 8002c94:	b003      	add	sp, #12
 8002c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8002c9a:	f048 0803 	orr.w	r8, r8, #3
 8002c9e:	e7da      	b.n	8002c56 <create_name+0x146>
			b <<= 2; continue;
 8002ca0:	9b01      	ldr	r3, [sp, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8002ca8:	4623      	mov	r3, r4
 8002caa:	f04f 0b0b 	mov.w	fp, #11
 8002cae:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8002cb2:	e7ab      	b.n	8002c0c <create_name+0xfc>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f7fe f828 	bl	8000d0c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	b118      	cbz	r0, 8002cc8 <create_name+0x1b8>
 8002cc0:	f1a0 0680 	sub.w	r6, r0, #128	@ 0x80
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <create_name+0x224>)
 8002cc6:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8002cc8:	f048 0802 	orr.w	r8, r8, #2
 8002ccc:	e7ad      	b.n	8002c2a <create_name+0x11a>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8002cce:	4631      	mov	r1, r6
 8002cd0:	4819      	ldr	r0, [pc, #100]	@ (8002d38 <create_name+0x228>)
 8002cd2:	f7fe ffc7 	bl	8001c64 <chk_chr>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d1a9      	bne.n	8002c2e <create_name+0x11e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8002cda:	f1a6 0341 	sub.w	r3, r6, #65	@ 0x41
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b19      	cmp	r3, #25
 8002ce2:	d804      	bhi.n	8002cee <create_name+0x1de>
					b |= 2;
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	e7a2      	b.n	8002c34 <create_name+0x124>
					if (IsLower(w)) {	/* ASCII small capital */
 8002cee:	f1a6 0361 	sub.w	r3, r6, #97	@ 0x61
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b19      	cmp	r3, #25
 8002cf6:	d89d      	bhi.n	8002c34 <create_name+0x124>
						b |= 1; w -= 0x20;
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	3e20      	subs	r6, #32
 8002d02:	b2b6      	uxth	r6, r6
 8002d04:	e796      	b.n	8002c34 <create_name+0x124>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002d06:	2305      	movs	r3, #5
 8002d08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002d0c:	e7a7      	b.n	8002c5e <create_name+0x14e>
	if (ni == 8) b <<= 2;
 8002d0e:	9b01      	ldr	r3, [sp, #4]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	e7a5      	b.n	8002c64 <create_name+0x154>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8002d18:	f048 0810 	orr.w	r8, r8, #16
 8002d1c:	e7b5      	b.n	8002c8a <create_name+0x17a>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8002d1e:	f048 0808 	orr.w	r8, r8, #8
 8002d22:	e7b4      	b.n	8002c8e <create_name+0x17e>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8002d24:	2006      	movs	r0, #6
 8002d26:	e7b5      	b.n	8002c94 <create_name+0x184>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8002d28:	2006      	movs	r0, #6
 8002d2a:	e7b3      	b.n	8002c94 <create_name+0x184>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8002d2c:	2006      	movs	r0, #6
 8002d2e:	e7b1      	b.n	8002c94 <create_name+0x184>
 8002d30:	08014d3c 	.word	0x08014d3c
 8002d34:	08014f0c 	.word	0x08014f0c
 8002d38:	08014d48 	.word	0x08014d48

08002d3c <cmp_lfn>:
{
 8002d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d40:	4681      	mov	r9, r0
 8002d42:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8002d44:	f101 001a 	add.w	r0, r1, #26
 8002d48:	f7fe ff52 	bl	8001bf0 <ld_word>
 8002d4c:	bbc8      	cbnz	r0, 8002dc2 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8002d4e:	783e      	ldrb	r6, [r7, #0]
 8002d50:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8002d54:	3e01      	subs	r6, #1
 8002d56:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002d5a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002d5e:	f04f 0801 	mov.w	r8, #1
 8002d62:	2500      	movs	r5, #0
 8002d64:	e006      	b.n	8002d74 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 8002d66:	2000      	movs	r0, #0
 8002d68:	e02c      	b.n	8002dc4 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002d6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d6e:	4298      	cmp	r0, r3
 8002d70:	d12a      	bne.n	8002dc8 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002d72:	3501      	adds	r5, #1
 8002d74:	2d0c      	cmp	r5, #12
 8002d76:	d818      	bhi.n	8002daa <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002d78:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <cmp_lfn+0x9c>)
 8002d7a:	5d58      	ldrb	r0, [r3, r5]
 8002d7c:	4438      	add	r0, r7
 8002d7e:	f7fe ff37 	bl	8001bf0 <ld_word>
 8002d82:	4604      	mov	r4, r0
		if (wc) {
 8002d84:	f1b8 0f00 	cmp.w	r8, #0
 8002d88:	d0ef      	beq.n	8002d6a <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002d8a:	2efe      	cmp	r6, #254	@ 0xfe
 8002d8c:	d8eb      	bhi.n	8002d66 <cmp_lfn+0x2a>
 8002d8e:	f7fd ffdb 	bl	8000d48 <ff_wtoupper>
 8002d92:	4680      	mov	r8, r0
 8002d94:	f106 0a01 	add.w	sl, r6, #1
 8002d98:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 8002d9c:	f7fd ffd4 	bl	8000d48 <ff_wtoupper>
 8002da0:	4580      	cmp	r8, r0
 8002da2:	d1e0      	bne.n	8002d66 <cmp_lfn+0x2a>
			wc = uc;
 8002da4:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002da6:	4656      	mov	r6, sl
 8002da8:	e7e3      	b.n	8002d72 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8002daa:	783b      	ldrb	r3, [r7, #0]
 8002dac:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002db0:	d00c      	beq.n	8002dcc <cmp_lfn+0x90>
 8002db2:	f1b8 0f00 	cmp.w	r8, #0
 8002db6:	d00b      	beq.n	8002dd0 <cmp_lfn+0x94>
 8002db8:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 8002dbc:	b953      	cbnz	r3, 8002dd4 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	e000      	b.n	8002dc4 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8002dc2:	2000      	movs	r0, #0
}
 8002dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002dc8:	2000      	movs	r0, #0
 8002dca:	e7fb      	b.n	8002dc4 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 8002dcc:	2001      	movs	r0, #1
 8002dce:	e7f9      	b.n	8002dc4 <cmp_lfn+0x88>
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	e7f7      	b.n	8002dc4 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	e7f5      	b.n	8002dc4 <cmp_lfn+0x88>
 8002dd8:	08014efc 	.word	0x08014efc

08002ddc <dir_find>:
{
 8002ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002de0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8002de2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002de6:	2100      	movs	r1, #0
 8002de8:	f7ff fc95 	bl	8002716 <dir_sdi>
	if (res != FR_OK) return res;
 8002dec:	4606      	mov	r6, r0
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d164      	bne.n	8002ebc <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002df8:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8002dfc:	464f      	mov	r7, r9
 8002dfe:	e00a      	b.n	8002e16 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e06:	27ff      	movs	r7, #255	@ 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff fd88 	bl	8002920 <dir_next>
	} while (res == FR_OK);
 8002e10:	4606      	mov	r6, r0
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d152      	bne.n	8002ebc <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 8002e16:	69e1      	ldr	r1, [r4, #28]
 8002e18:	4640      	mov	r0, r8
 8002e1a:	f7ff f961 	bl	80020e0 <move_window>
		if (res != FR_OK) break;
 8002e1e:	4606      	mov	r6, r0
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d14b      	bne.n	8002ebc <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 8002e24:	6a25      	ldr	r5, [r4, #32]
 8002e26:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d046      	beq.n	8002eba <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8002e2c:	7aea      	ldrb	r2, [r5, #11]
 8002e2e:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
 8002e32:	71a1      	strb	r1, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8002e34:	2be5      	cmp	r3, #229	@ 0xe5
 8002e36:	d0e3      	beq.n	8002e00 <dir_find+0x24>
 8002e38:	f012 0f08 	tst.w	r2, #8
 8002e3c:	d014      	beq.n	8002e68 <dir_find+0x8c>
 8002e3e:	290f      	cmp	r1, #15
 8002e40:	d1de      	bne.n	8002e00 <dir_find+0x24>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8002e42:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8002e46:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002e4a:	d1dd      	bne.n	8002e08 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8002e4c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002e50:	d006      	beq.n	8002e60 <dir_find+0x84>
						sum = dp->dir[LDIR_Chksum];
 8002e52:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8002e56:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8002e5a:	6962      	ldr	r2, [r4, #20]
 8002e5c:	6322      	str	r2, [r4, #48]	@ 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8002e5e:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002e60:	42bb      	cmp	r3, r7
 8002e62:	d01a      	beq.n	8002e9a <dir_find+0xbe>
 8002e64:	27ff      	movs	r7, #255	@ 0xff
 8002e66:	e7cf      	b.n	8002e08 <dir_find+0x2c>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8002e68:	290f      	cmp	r1, #15
 8002e6a:	d0ea      	beq.n	8002e42 <dir_find+0x66>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8002e6c:	b927      	cbnz	r7, 8002e78 <dir_find+0x9c>
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f7ff f8af 	bl	8001fd2 <sum_sfn>
 8002e74:	4548      	cmp	r0, r9
 8002e76:	d021      	beq.n	8002ebc <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8002e78:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 8002e7c:	f013 0f01 	tst.w	r3, #1
 8002e80:	d106      	bne.n	8002e90 <dir_find+0xb4>
 8002e82:	220b      	movs	r2, #11
 8002e84:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f7fe fede 	bl	8001c4a <mem_cmp>
 8002e8e:	b1a8      	cbz	r0, 8002ebc <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	6323      	str	r3, [r4, #48]	@ 0x30
 8002e96:	27ff      	movs	r7, #255	@ 0xff
 8002e98:	e7b6      	b.n	8002e08 <dir_find+0x2c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8002e9a:	7b6b      	ldrb	r3, [r5, #13]
 8002e9c:	454b      	cmp	r3, r9
 8002e9e:	d001      	beq.n	8002ea4 <dir_find+0xc8>
 8002ea0:	27ff      	movs	r7, #255	@ 0xff
 8002ea2:	e7b1      	b.n	8002e08 <dir_find+0x2c>
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8002eaa:	f7ff ff47 	bl	8002d3c <cmp_lfn>
 8002eae:	b110      	cbz	r0, 8002eb6 <dir_find+0xda>
 8002eb0:	3f01      	subs	r7, #1
 8002eb2:	b2ff      	uxtb	r7, r7
 8002eb4:	e7a8      	b.n	8002e08 <dir_find+0x2c>
 8002eb6:	27ff      	movs	r7, #255	@ 0xff
 8002eb8:	e7a6      	b.n	8002e08 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002eba:	2604      	movs	r6, #4
}
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002ec2 <follow_path>:
{
 8002ec2:	b530      	push	{r4, r5, lr}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8002eca:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8002ecc:	e001      	b.n	8002ed2 <follow_path+0x10>
 8002ece:	3301      	adds	r3, #1
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	2a2f      	cmp	r2, #47	@ 0x2f
 8002ed8:	d0f9      	beq.n	8002ece <follow_path+0xc>
 8002eda:	2a5c      	cmp	r2, #92	@ 0x5c
 8002edc:	d0f7      	beq.n	8002ece <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b1f      	cmp	r3, #31
 8002ee6:	d921      	bls.n	8002f2c <follow_path+0x6a>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002ee8:	a901      	add	r1, sp, #4
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7ff fe10 	bl	8002b10 <create_name>
			if (res != FR_OK) break;
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	bb18      	cbnz	r0, 8002f3c <follow_path+0x7a>
			res = dir_find(dp);				/* Find an object with the segment name */
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff ff71 	bl	8002ddc <dir_find>
			ns = dp->fn[NSFLAG];
 8002efa:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8002efe:	4603      	mov	r3, r0
 8002f00:	b9f8      	cbnz	r0, 8002f42 <follow_path+0x80>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8002f02:	f012 0f04 	tst.w	r2, #4
 8002f06:	d119      	bne.n	8002f3c <follow_path+0x7a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8002f08:	79a3      	ldrb	r3, [r4, #6]
 8002f0a:	f013 0f10 	tst.w	r3, #16
 8002f0e:	d01f      	beq.n	8002f50 <follow_path+0x8e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8002f10:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8002f14:	6963      	ldr	r3, [r4, #20]
 8002f16:	89aa      	ldrh	r2, [r5, #12]
 8002f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f1c:	fb02 3310 	mls	r3, r2, r0, r3
 8002f20:	4419      	add	r1, r3
 8002f22:	4628      	mov	r0, r5
 8002f24:	f7fe ff9d 	bl	8001e62 <ld_clust>
 8002f28:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8002f2a:	e7dd      	b.n	8002ee8 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8002f2c:	2380      	movs	r3, #128	@ 0x80
 8002f2e:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8002f32:	4611      	mov	r1, r2
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff fbee 	bl	8002716 <dir_sdi>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	b003      	add	sp, #12
 8002f40:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8002f42:	2804      	cmp	r0, #4
 8002f44:	d1fa      	bne.n	8002f3c <follow_path+0x7a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8002f46:	f012 0f04 	tst.w	r2, #4
 8002f4a:	d1f7      	bne.n	8002f3c <follow_path+0x7a>
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	e7f5      	b.n	8002f3c <follow_path+0x7a>
				res = FR_NO_PATH; break;
 8002f50:	2305      	movs	r3, #5
 8002f52:	e7f3      	b.n	8002f3c <follow_path+0x7a>

08002f54 <dir_register>:
{
 8002f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f58:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8002f5a:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8002f5c:	f890 302f 	ldrb.w	r3, [r0, #47]	@ 0x2f
 8002f60:	f013 0fa0 	tst.w	r3, #160	@ 0xa0
 8002f64:	f040 808a 	bne.w	800307c <dir_register+0x128>
 8002f68:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8002f6a:	2400      	movs	r4, #0
 8002f6c:	e000      	b.n	8002f70 <dir_register+0x1c>
 8002f6e:	3401      	adds	r4, #1
 8002f70:	6933      	ldr	r3, [r6, #16]
 8002f72:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f9      	bne.n	8002f6e <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 8002f7a:	f107 0824 	add.w	r8, r7, #36	@ 0x24
 8002f7e:	220c      	movs	r2, #12
 8002f80:	4641      	mov	r1, r8
 8002f82:	a801      	add	r0, sp, #4
 8002f84:	f7fe fe52 	bl	8001c2c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8002f88:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002f8c:	f013 0f01 	tst.w	r3, #1
 8002f90:	d01c      	beq.n	8002fcc <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8002f92:	2340      	movs	r3, #64	@ 0x40
 8002f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8002f98:	2501      	movs	r5, #1
 8002f9a:	e000      	b.n	8002f9e <dir_register+0x4a>
 8002f9c:	3501      	adds	r5, #1
 8002f9e:	2d63      	cmp	r5, #99	@ 0x63
 8002fa0:	d80b      	bhi.n	8002fba <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	6932      	ldr	r2, [r6, #16]
 8002fa6:	a901      	add	r1, sp, #4
 8002fa8:	4640      	mov	r0, r8
 8002faa:	f7fe ffbd 	bl	8001f28 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8002fae:	4638      	mov	r0, r7
 8002fb0:	f7ff ff14 	bl	8002ddc <dir_find>
			if (res != FR_OK) break;
 8002fb4:	4681      	mov	r9, r0
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d0f0      	beq.n	8002f9c <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8002fba:	2d64      	cmp	r5, #100	@ 0x64
 8002fbc:	d064      	beq.n	8003088 <dir_register+0x134>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8002fbe:	f1b9 0f04 	cmp.w	r9, #4
 8002fc2:	d15d      	bne.n	8003080 <dir_register+0x12c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8002fc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002fc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8002fcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002fd0:	f013 0f02 	tst.w	r3, #2
 8002fd4:	d006      	beq.n	8002fe4 <dir_register+0x90>
 8002fd6:	340c      	adds	r4, #12
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <dir_register+0x13c>)
 8002fda:	fba3 3404 	umull	r3, r4, r3, r4
 8002fde:	08a4      	lsrs	r4, r4, #2
 8002fe0:	3401      	adds	r4, #1
 8002fe2:	e000      	b.n	8002fe6 <dir_register+0x92>
 8002fe4:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	4638      	mov	r0, r7
 8002fea:	f7ff fd25 	bl	8002a38 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8002fee:	4681      	mov	r9, r0
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d145      	bne.n	8003080 <dir_register+0x12c>
 8002ff4:	3c01      	subs	r4, #1
 8002ff6:	d11c      	bne.n	8003032 <dir_register+0xde>
	if (res == FR_OK) {
 8002ff8:	f1b9 0f00 	cmp.w	r9, #0
 8002ffc:	d140      	bne.n	8003080 <dir_register+0x12c>
		res = move_window(fs, dp->sect);
 8002ffe:	69f9      	ldr	r1, [r7, #28]
 8003000:	4630      	mov	r0, r6
 8003002:	f7ff f86d 	bl	80020e0 <move_window>
		if (res == FR_OK) {
 8003006:	4681      	mov	r9, r0
 8003008:	2800      	cmp	r0, #0
 800300a:	d139      	bne.n	8003080 <dir_register+0x12c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800300c:	2220      	movs	r2, #32
 800300e:	2100      	movs	r1, #0
 8003010:	6a38      	ldr	r0, [r7, #32]
 8003012:	f7fe fe15 	bl	8001c40 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003016:	220b      	movs	r2, #11
 8003018:	4641      	mov	r1, r8
 800301a:	6a38      	ldr	r0, [r7, #32]
 800301c:	f7fe fe06 	bl	8001c2c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	f003 0318 	and.w	r3, r3, #24
 800302a:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800302c:	2301      	movs	r3, #1
 800302e:	70f3      	strb	r3, [r6, #3]
 8003030:	e026      	b.n	8003080 <dir_register+0x12c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003032:	6979      	ldr	r1, [r7, #20]
 8003034:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8003038:	4638      	mov	r0, r7
 800303a:	f7ff fb6c 	bl	8002716 <dir_sdi>
		if (res == FR_OK) {
 800303e:	4681      	mov	r9, r0
 8003040:	b9f0      	cbnz	r0, 8003080 <dir_register+0x12c>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003042:	4640      	mov	r0, r8
 8003044:	f7fe ffc5 	bl	8001fd2 <sum_sfn>
 8003048:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	4630      	mov	r0, r6
 800304e:	f7ff f847 	bl	80020e0 <move_window>
				if (res != FR_OK) break;
 8003052:	4681      	mov	r9, r0
 8003054:	2800      	cmp	r0, #0
 8003056:	d1cf      	bne.n	8002ff8 <dir_register+0xa4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003058:	462b      	mov	r3, r5
 800305a:	b2e2      	uxtb	r2, r4
 800305c:	6a39      	ldr	r1, [r7, #32]
 800305e:	6930      	ldr	r0, [r6, #16]
 8003060:	f7fe ff26 	bl	8001eb0 <put_lfn>
				fs->wflag = 1;
 8003064:	2301      	movs	r3, #1
 8003066:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003068:	2100      	movs	r1, #0
 800306a:	4638      	mov	r0, r7
 800306c:	f7ff fc58 	bl	8002920 <dir_next>
			} while (res == FR_OK && --nent);
 8003070:	4681      	mov	r9, r0
 8003072:	2800      	cmp	r0, #0
 8003074:	d1c0      	bne.n	8002ff8 <dir_register+0xa4>
 8003076:	3c01      	subs	r4, #1
 8003078:	d1e7      	bne.n	800304a <dir_register+0xf6>
 800307a:	e7bd      	b.n	8002ff8 <dir_register+0xa4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800307c:	f04f 0906 	mov.w	r9, #6
}
 8003080:	4648      	mov	r0, r9
 8003082:	b005      	add	sp, #20
 8003084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003088:	f04f 0907 	mov.w	r9, #7
 800308c:	e7f8      	b.n	8003080 <dir_register+0x12c>
 800308e:	bf00      	nop
 8003090:	4ec4ec4f 	.word	0x4ec4ec4f

08003094 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	9001      	str	r0, [sp, #4]
 800309a:	9100      	str	r1, [sp, #0]
 800309c:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800309e:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80030a0:	a803      	add	r0, sp, #12
 80030a2:	f7fe ffa6 	bl	8001ff2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80030a6:	1e04      	subs	r4, r0, #0
 80030a8:	db1c      	blt.n	80030e4 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <f_mount+0x58>)
 80030ac:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 80030b0:	b125      	cbz	r5, 80030bc <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80030b2:	4628      	mov	r0, r5
 80030b4:	f7fe fe98 	bl	8001de8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80030b8:	2300      	movs	r3, #0
 80030ba:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 80030bc:	9b01      	ldr	r3, [sp, #4]
 80030be:	b10b      	cbz	r3, 80030c4 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80030c4:	9b01      	ldr	r3, [sp, #4]
 80030c6:	4a09      	ldr	r2, [pc, #36]	@ (80030ec <f_mount+0x58>)
 80030c8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80030cc:	b163      	cbz	r3, 80030e8 <f_mount+0x54>
 80030ce:	2e01      	cmp	r6, #1
 80030d0:	d002      	beq.n	80030d8 <f_mount+0x44>
 80030d2:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80030d4:	b004      	add	sp, #16
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80030d8:	2200      	movs	r2, #0
 80030da:	a901      	add	r1, sp, #4
 80030dc:	4668      	mov	r0, sp
 80030de:	f7ff f857 	bl	8002190 <find_volume>
	LEAVE_FF(fs, res);
 80030e2:	e7f7      	b.n	80030d4 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 80030e4:	200b      	movs	r0, #11
 80030e6:	e7f5      	b.n	80030d4 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80030e8:	2000      	movs	r0, #0
 80030ea:	e7f3      	b.n	80030d4 <f_mount+0x40>
 80030ec:	20000564 	.word	0x20000564

080030f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80030f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030f4:	b091      	sub	sp, #68	@ 0x44
 80030f6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80030f8:	2800      	cmp	r0, #0
 80030fa:	f000 810c 	beq.w	8003316 <f_open+0x226>
 80030fe:	4614      	mov	r4, r2
 8003100:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003102:	f002 073f 	and.w	r7, r2, #63	@ 0x3f
	res = find_volume(&path, &fs, mode);
 8003106:	463a      	mov	r2, r7
 8003108:	a902      	add	r1, sp, #8
 800310a:	a801      	add	r0, sp, #4
 800310c:	f7ff f840 	bl	8002190 <find_volume>
	if (res == FR_OK) {
 8003110:	4605      	mov	r5, r0
 8003112:	b128      	cbz	r0, 8003120 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003114:	2300      	movs	r3, #0
 8003116:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8003118:	4628      	mov	r0, r5
 800311a:	b011      	add	sp, #68	@ 0x44
 800311c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8003120:	9b02      	ldr	r3, [sp, #8]
 8003122:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003124:	9901      	ldr	r1, [sp, #4]
 8003126:	a803      	add	r0, sp, #12
 8003128:	f7ff fecb 	bl	8002ec2 <follow_path>
		if (res == FR_OK) {
 800312c:	4605      	mov	r5, r0
 800312e:	b960      	cbnz	r0, 800314a <f_open+0x5a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003130:	f99d 303b 	ldrsb.w	r3, [sp, #59]	@ 0x3b
 8003134:	2b00      	cmp	r3, #0
 8003136:	db52      	blt.n	80031de <f_open+0xee>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003138:	f014 0f3e 	tst.w	r4, #62	@ 0x3e
 800313c:	bf14      	ite	ne
 800313e:	2101      	movne	r1, #1
 8003140:	2100      	moveq	r1, #0
 8003142:	a803      	add	r0, sp, #12
 8003144:	f7fe fd96 	bl	8001c74 <chk_lock>
 8003148:	4605      	mov	r5, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800314a:	f014 0f1c 	tst.w	r4, #28
 800314e:	d05c      	beq.n	800320a <f_open+0x11a>
			if (res != FR_OK) {					/* No file, create new */
 8003150:	2d00      	cmp	r5, #0
 8003152:	d050      	beq.n	80031f6 <f_open+0x106>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003154:	2d04      	cmp	r5, #4
 8003156:	d044      	beq.n	80031e2 <f_open+0xf2>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003158:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800315c:	2d00      	cmp	r5, #0
 800315e:	d1d9      	bne.n	8003114 <f_open+0x24>
 8003160:	f017 0f08 	tst.w	r7, #8
 8003164:	d061      	beq.n	800322a <f_open+0x13a>
				dw = GET_FATTIME();
 8003166:	f7fe f99d 	bl	80014a4 <get_fattime>
 800316a:	4604      	mov	r4, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800316c:	4601      	mov	r1, r0
 800316e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003170:	300e      	adds	r0, #14
 8003172:	f7fe fd51 	bl	8001c18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003176:	4621      	mov	r1, r4
 8003178:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800317a:	3016      	adds	r0, #22
 800317c:	f7fe fd4c 	bl	8001c18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003180:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003182:	2220      	movs	r2, #32
 8003184:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003186:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800318a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800318e:	4649      	mov	r1, r9
 8003190:	4640      	mov	r0, r8
 8003192:	f7fe fe66 	bl	8001e62 <ld_clust>
 8003196:	4604      	mov	r4, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003198:	2200      	movs	r2, #0
 800319a:	4649      	mov	r1, r9
 800319c:	4640      	mov	r0, r8
 800319e:	f7fe fe73 	bl	8001e88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80031a2:	2100      	movs	r1, #0
 80031a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80031a6:	301c      	adds	r0, #28
 80031a8:	f7fe fd36 	bl	8001c18 <st_dword>
					fs->wflag = 1;
 80031ac:	9b02      	ldr	r3, [sp, #8]
 80031ae:	2201      	movs	r2, #1
 80031b0:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80031b2:	2c00      	cmp	r4, #0
 80031b4:	d039      	beq.n	800322a <f_open+0x13a>
						dw = fs->winsect;
 80031b6:	9b02      	ldr	r3, [sp, #8]
 80031b8:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
						res = remove_chain(&dj.obj, cl, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	4621      	mov	r1, r4
 80031c0:	a803      	add	r0, sp, #12
 80031c2:	f7ff fb6e 	bl	80028a2 <remove_chain>
						if (res == FR_OK) {
 80031c6:	4605      	mov	r5, r0
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d1a3      	bne.n	8003114 <f_open+0x24>
							res = move_window(fs, dw);
 80031cc:	4641      	mov	r1, r8
 80031ce:	9802      	ldr	r0, [sp, #8]
 80031d0:	f7fe ff86 	bl	80020e0 <move_window>
 80031d4:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80031d6:	3c01      	subs	r4, #1
 80031d8:	9b02      	ldr	r3, [sp, #8]
 80031da:	615c      	str	r4, [r3, #20]
 80031dc:	e025      	b.n	800322a <f_open+0x13a>
				res = FR_INVALID_NAME;
 80031de:	2506      	movs	r5, #6
 80031e0:	e7b3      	b.n	800314a <f_open+0x5a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80031e2:	f7fe fd81 	bl	8001ce8 <enq_lock>
 80031e6:	b908      	cbnz	r0, 80031ec <f_open+0xfc>
 80031e8:	2512      	movs	r5, #18
 80031ea:	e7b5      	b.n	8003158 <f_open+0x68>
 80031ec:	a803      	add	r0, sp, #12
 80031ee:	f7ff feb1 	bl	8002f54 <dir_register>
 80031f2:	4605      	mov	r5, r0
 80031f4:	e7b0      	b.n	8003158 <f_open+0x68>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80031f6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80031fa:	f013 0f11 	tst.w	r3, #17
 80031fe:	d113      	bne.n	8003228 <f_open+0x138>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003200:	f014 0f04 	tst.w	r4, #4
 8003204:	d0aa      	beq.n	800315c <f_open+0x6c>
 8003206:	2508      	movs	r5, #8
 8003208:	e784      	b.n	8003114 <f_open+0x24>
			if (res == FR_OK) {					/* Following succeeded */
 800320a:	2d00      	cmp	r5, #0
 800320c:	d182      	bne.n	8003114 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800320e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003212:	f013 0f10 	tst.w	r3, #16
 8003216:	d17a      	bne.n	800330e <f_open+0x21e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003218:	f014 0f02 	tst.w	r4, #2
 800321c:	d005      	beq.n	800322a <f_open+0x13a>
 800321e:	f013 0f01 	tst.w	r3, #1
 8003222:	d002      	beq.n	800322a <f_open+0x13a>
						res = FR_DENIED;
 8003224:	2507      	movs	r5, #7
 8003226:	e775      	b.n	8003114 <f_open+0x24>
					res = FR_DENIED;
 8003228:	2507      	movs	r5, #7
		if (res == FR_OK) {
 800322a:	2d00      	cmp	r5, #0
 800322c:	f47f af72 	bne.w	8003114 <f_open+0x24>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003230:	f017 0f08 	tst.w	r7, #8
 8003234:	d001      	beq.n	800323a <f_open+0x14a>
				mode |= FA_MODIFIED;
 8003236:	f047 0740 	orr.w	r7, r7, #64	@ 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800323a:	9b02      	ldr	r3, [sp, #8]
 800323c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323e:	6273      	str	r3, [r6, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8003240:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003242:	62b3      	str	r3, [r6, #40]	@ 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003244:	2f01      	cmp	r7, #1
 8003246:	bf94      	ite	ls
 8003248:	2100      	movls	r1, #0
 800324a:	2101      	movhi	r1, #1
 800324c:	a803      	add	r0, sp, #12
 800324e:	f7fe fd5b 	bl	8001d08 <inc_lock>
 8003252:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003254:	b908      	cbnz	r0, 800325a <f_open+0x16a>
 8003256:	2502      	movs	r5, #2
 8003258:	e75c      	b.n	8003114 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800325a:	9c02      	ldr	r4, [sp, #8]
 800325c:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8003260:	4641      	mov	r1, r8
 8003262:	4620      	mov	r0, r4
 8003264:	f7fe fdfd 	bl	8001e62 <ld_clust>
 8003268:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800326a:	f108 001c 	add.w	r0, r8, #28
 800326e:	f7fe fcc4 	bl	8001bfa <ld_dword>
 8003272:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003274:	2100      	movs	r1, #0
 8003276:	62f1      	str	r1, [r6, #44]	@ 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003278:	6034      	str	r4, [r6, #0]
			fp->obj.id = fs->id;
 800327a:	88e3      	ldrh	r3, [r4, #6]
 800327c:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800327e:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8003280:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003282:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003284:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003286:	f106 0830 	add.w	r8, r6, #48	@ 0x30
 800328a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800328e:	4640      	mov	r0, r8
 8003290:	f7fe fcd6 	bl	8001c40 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003294:	f017 0f20 	tst.w	r7, #32
 8003298:	d035      	beq.n	8003306 <f_open+0x216>
 800329a:	68f4      	ldr	r4, [r6, #12]
 800329c:	b39c      	cbz	r4, 8003306 <f_open+0x216>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800329e:	61b4      	str	r4, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80032a0:	9b02      	ldr	r3, [sp, #8]
 80032a2:	895f      	ldrh	r7, [r3, #10]
 80032a4:	899b      	ldrh	r3, [r3, #12]
 80032a6:	fb03 f707 	mul.w	r7, r3, r7
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80032aa:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80032ac:	e001      	b.n	80032b2 <f_open+0x1c2>
					if (clst <= 1) res = FR_INT_ERR;
 80032ae:	2502      	movs	r5, #2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80032b0:	1be4      	subs	r4, r4, r7
 80032b2:	b965      	cbnz	r5, 80032ce <f_open+0x1de>
 80032b4:	42bc      	cmp	r4, r7
 80032b6:	d90a      	bls.n	80032ce <f_open+0x1de>
					clst = get_fat(&fp->obj, clst);
 80032b8:	4630      	mov	r0, r6
 80032ba:	f7ff f9ae 	bl	800261a <get_fat>
 80032be:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80032c0:	2801      	cmp	r0, #1
 80032c2:	d9f4      	bls.n	80032ae <f_open+0x1be>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80032c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032c8:	d1f2      	bne.n	80032b0 <f_open+0x1c0>
 80032ca:	2501      	movs	r5, #1
 80032cc:	e7f0      	b.n	80032b0 <f_open+0x1c0>
				fp->clust = clst;
 80032ce:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80032d0:	2d00      	cmp	r5, #0
 80032d2:	f47f af1f 	bne.w	8003114 <f_open+0x24>
 80032d6:	9f02      	ldr	r7, [sp, #8]
 80032d8:	f8b7 900c 	ldrh.w	r9, [r7, #12]
 80032dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80032e0:	fb09 4313 	mls	r3, r9, r3, r4
 80032e4:	b17b      	cbz	r3, 8003306 <f_open+0x216>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80032e6:	4638      	mov	r0, r7
 80032e8:	f7fe fd9c 	bl	8001e24 <clust2sect>
 80032ec:	b908      	cbnz	r0, 80032f2 <f_open+0x202>
						res = FR_INT_ERR;
 80032ee:	2502      	movs	r5, #2
 80032f0:	e710      	b.n	8003114 <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80032f2:	fbb4 f2f9 	udiv	r2, r4, r9
 80032f6:	4402      	add	r2, r0
 80032f8:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	4641      	mov	r1, r8
 80032fe:	7878      	ldrb	r0, [r7, #1]
 8003300:	f7fd fdf2 	bl	8000ee8 <disk_read>
 8003304:	b928      	cbnz	r0, 8003312 <f_open+0x222>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003306:	2d00      	cmp	r5, #0
 8003308:	f43f af06 	beq.w	8003118 <f_open+0x28>
 800330c:	e702      	b.n	8003114 <f_open+0x24>
					res = FR_NO_FILE;
 800330e:	2504      	movs	r5, #4
 8003310:	e700      	b.n	8003114 <f_open+0x24>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003312:	2501      	movs	r5, #1
 8003314:	e6fe      	b.n	8003114 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8003316:	2509      	movs	r5, #9
 8003318:	e6fe      	b.n	8003118 <f_open+0x28>

0800331a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800331a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331e:	b085      	sub	sp, #20
 8003320:	4604      	mov	r4, r0
 8003322:	460f      	mov	r7, r1
 8003324:	4615      	mov	r5, r2
 8003326:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8003328:	2300      	movs	r3, #0
 800332a:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800332e:	a903      	add	r1, sp, #12
 8003330:	f7fe fe89 	bl	8002046 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003334:	9001      	str	r0, [sp, #4]
 8003336:	2800      	cmp	r0, #0
 8003338:	d14a      	bne.n	80033d0 <f_write+0xb6>
 800333a:	7d63      	ldrb	r3, [r4, #21]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d146      	bne.n	80033d0 <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003342:	7d23      	ldrb	r3, [r4, #20]
 8003344:	f013 0f02 	tst.w	r3, #2
 8003348:	f000 80ec 	beq.w	8003524 <f_write+0x20a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800334c:	69a3      	ldr	r3, [r4, #24]
 800334e:	42eb      	cmn	r3, r5
 8003350:	f0c0 80b6 	bcc.w	80034c0 <f_write+0x1a6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8003354:	43dd      	mvns	r5, r3
 8003356:	e0b3      	b.n	80034c0 <f_write+0x1a6>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8003358:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d03c      	beq.n	80033d8 <f_write+0xbe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800335e:	4620      	mov	r0, r4
 8003360:	f7fe fd6c 	bl	8001e3c <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8003364:	2800      	cmp	r0, #0
 8003366:	f000 80d8 	beq.w	800351a <f_write+0x200>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800336a:	2801      	cmp	r0, #1
 800336c:	d039      	beq.n	80033e2 <f_write+0xc8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800336e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003372:	d03d      	beq.n	80033f0 <f_write+0xd6>
				fp->clust = clst;			/* Update current cluster */
 8003374:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8003376:	68a3      	ldr	r3, [r4, #8]
 8003378:	b903      	cbnz	r3, 800337c <f_write+0x62>
 800337a:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800337c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db3c      	blt.n	80033fe <f_write+0xe4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003384:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003388:	69e1      	ldr	r1, [r4, #28]
 800338a:	4658      	mov	r0, fp
 800338c:	f7fe fd4a 	bl	8001e24 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003390:	4681      	mov	r9, r0
 8003392:	2800      	cmp	r0, #0
 8003394:	d048      	beq.n	8003428 <f_write+0x10e>
			sect += csect;
 8003396:	44b1      	add	r9, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8003398:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800339c:	fbb5 faf3 	udiv	sl, r5, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	d85f      	bhi.n	8003464 <f_write+0x14a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80033a4:	eb06 030a 	add.w	r3, r6, sl
 80033a8:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <f_write+0x9a>
					cc = fs->csize - csect;
 80033b0:	eba2 0a06 	sub.w	sl, r2, r6
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80033b4:	4653      	mov	r3, sl
 80033b6:	464a      	mov	r2, r9
 80033b8:	4639      	mov	r1, r7
 80033ba:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80033be:	f7fd fd9f 	bl	8000f00 <disk_write>
 80033c2:	b3c0      	cbz	r0, 8003436 <f_write+0x11c>
 80033c4:	f04f 0a01 	mov.w	sl, #1
 80033c8:	f884 a015 	strb.w	sl, [r4, #21]
 80033cc:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80033d0:	9801      	ldr	r0, [sp, #4]
 80033d2:	b005      	add	sp, #20
 80033d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80033d8:	69e1      	ldr	r1, [r4, #28]
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff f9fb 	bl	80027d6 <create_chain>
 80033e0:	e7c0      	b.n	8003364 <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80033e2:	f04f 0a02 	mov.w	sl, #2
 80033e6:	f884 a015 	strb.w	sl, [r4, #21]
 80033ea:	f8cd a004 	str.w	sl, [sp, #4]
 80033ee:	e7ef      	b.n	80033d0 <f_write+0xb6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80033f0:	f04f 0a01 	mov.w	sl, #1
 80033f4:	f884 a015 	strb.w	sl, [r4, #21]
 80033f8:	f8cd a004 	str.w	sl, [sp, #4]
 80033fc:	e7e8      	b.n	80033d0 <f_write+0xb6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80033fe:	2301      	movs	r3, #1
 8003400:	6a22      	ldr	r2, [r4, #32]
 8003402:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8003406:	9803      	ldr	r0, [sp, #12]
 8003408:	7840      	ldrb	r0, [r0, #1]
 800340a:	f7fd fd79 	bl	8000f00 <disk_write>
 800340e:	b920      	cbnz	r0, 800341a <f_write+0x100>
				fp->flag &= (BYTE)~FA_DIRTY;
 8003410:	7d23      	ldrb	r3, [r4, #20]
 8003412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003416:	7523      	strb	r3, [r4, #20]
 8003418:	e7b4      	b.n	8003384 <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800341a:	f04f 0a01 	mov.w	sl, #1
 800341e:	f884 a015 	strb.w	sl, [r4, #21]
 8003422:	f8cd a004 	str.w	sl, [sp, #4]
 8003426:	e7d3      	b.n	80033d0 <f_write+0xb6>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003428:	f04f 0a02 	mov.w	sl, #2
 800342c:	f884 a015 	strb.w	sl, [r4, #21]
 8003430:	f8cd a004 	str.w	sl, [sp, #4]
 8003434:	e7cc      	b.n	80033d0 <f_write+0xb6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8003436:	6a23      	ldr	r3, [r4, #32]
 8003438:	eba3 0309 	sub.w	r3, r3, r9
 800343c:	4553      	cmp	r3, sl
 800343e:	d304      	bcc.n	800344a <f_write+0x130>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	899e      	ldrh	r6, [r3, #12]
 8003444:	fb0a f606 	mul.w	r6, sl, r6
				continue;
 8003448:	e02b      	b.n	80034a2 <f_write+0x188>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800344a:	9a03      	ldr	r2, [sp, #12]
 800344c:	8992      	ldrh	r2, [r2, #12]
 800344e:	fb02 7103 	mla	r1, r2, r3, r7
 8003452:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8003456:	f7fe fbe9 	bl	8001c2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800345a:	7d23      	ldrb	r3, [r4, #20]
 800345c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003460:	7523      	strb	r3, [r4, #20]
 8003462:	e7ed      	b.n	8003440 <f_write+0x126>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8003464:	6a23      	ldr	r3, [r4, #32]
 8003466:	454b      	cmp	r3, r9
 8003468:	d003      	beq.n	8003472 <f_write+0x158>
				fp->fptr < fp->obj.objsize &&
 800346a:	69a2      	ldr	r2, [r4, #24]
 800346c:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800346e:	429a      	cmp	r2, r3
 8003470:	d342      	bcc.n	80034f8 <f_write+0x1de>
			fp->sect = sect;
 8003472:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003476:	9b03      	ldr	r3, [sp, #12]
 8003478:	899e      	ldrh	r6, [r3, #12]
 800347a:	69a3      	ldr	r3, [r4, #24]
 800347c:	fbb3 f2f6 	udiv	r2, r3, r6
 8003480:	fb06 3312 	mls	r3, r6, r2, r3
 8003484:	1af6      	subs	r6, r6, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8003486:	42b5      	cmp	r5, r6
 8003488:	d200      	bcs.n	800348c <f_write+0x172>
 800348a:	462e      	mov	r6, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800348c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8003490:	4632      	mov	r2, r6
 8003492:	4639      	mov	r1, r7
 8003494:	4418      	add	r0, r3
 8003496:	f7fe fbc9 	bl	8001c2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800349a:	7d23      	ldrb	r3, [r4, #20]
 800349c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034a0:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80034a2:	4437      	add	r7, r6
 80034a4:	69a3      	ldr	r3, [r4, #24]
 80034a6:	4433      	add	r3, r6
 80034a8:	61a3      	str	r3, [r4, #24]
 80034aa:	68e2      	ldr	r2, [r4, #12]
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bf38      	it	cc
 80034b0:	4613      	movcc	r3, r2
 80034b2:	60e3      	str	r3, [r4, #12]
 80034b4:	f8d8 3000 	ldr.w	r3, [r8]
 80034b8:	4433      	add	r3, r6
 80034ba:	f8c8 3000 	str.w	r3, [r8]
 80034be:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 80034c0:	b35d      	cbz	r5, 800351a <f_write+0x200>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80034c2:	69a1      	ldr	r1, [r4, #24]
 80034c4:	9a03      	ldr	r2, [sp, #12]
 80034c6:	8996      	ldrh	r6, [r2, #12]
 80034c8:	fbb1 f3f6 	udiv	r3, r1, r6
 80034cc:	fb06 1313 	mls	r3, r6, r3, r1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1d0      	bne.n	8003476 <f_write+0x15c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80034d4:	fbb1 f6f6 	udiv	r6, r1, r6
 80034d8:	8953      	ldrh	r3, [r2, #10]
 80034da:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80034dc:	401e      	ands	r6, r3
 80034de:	f47f af4d 	bne.w	800337c <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80034e2:	2900      	cmp	r1, #0
 80034e4:	f47f af38 	bne.w	8003358 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80034e8:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80034ea:	2800      	cmp	r0, #0
 80034ec:	f47f af3d 	bne.w	800336a <f_write+0x50>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff f970 	bl	80027d6 <create_chain>
 80034f6:	e735      	b.n	8003364 <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80034f8:	2301      	movs	r3, #1
 80034fa:	464a      	mov	r2, r9
 80034fc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8003500:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003504:	f7fd fcf0 	bl	8000ee8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8003508:	2800      	cmp	r0, #0
 800350a:	d0b2      	beq.n	8003472 <f_write+0x158>
					ABORT(fs, FR_DISK_ERR);
 800350c:	f04f 0a01 	mov.w	sl, #1
 8003510:	f884 a015 	strb.w	sl, [r4, #21]
 8003514:	f8cd a004 	str.w	sl, [sp, #4]
 8003518:	e75a      	b.n	80033d0 <f_write+0xb6>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800351a:	7d23      	ldrb	r3, [r4, #20]
 800351c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003520:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8003522:	e755      	b.n	80033d0 <f_write+0xb6>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8003524:	2307      	movs	r3, #7
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	e752      	b.n	80033d0 <f_write+0xb6>

0800352a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800352a:	b570      	push	{r4, r5, r6, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003530:	a901      	add	r1, sp, #4
 8003532:	f7fe fd88 	bl	8002046 <validate>
	if (res == FR_OK) {
 8003536:	b970      	cbnz	r0, 8003556 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003538:	7d23      	ldrb	r3, [r4, #20]
 800353a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800353e:	d00a      	beq.n	8003556 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003544:	d109      	bne.n	800355a <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8003546:	f7fd ffad 	bl	80014a4 <get_fattime>
 800354a:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800354c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800354e:	9801      	ldr	r0, [sp, #4]
 8003550:	f7fe fdc6 	bl	80020e0 <move_window>
				if (res == FR_OK) {
 8003554:	b178      	cbz	r0, 8003576 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003556:	b002      	add	sp, #8
 8003558:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800355a:	2301      	movs	r3, #1
 800355c:	6a22      	ldr	r2, [r4, #32]
 800355e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8003562:	9801      	ldr	r0, [sp, #4]
 8003564:	7840      	ldrb	r0, [r0, #1]
 8003566:	f7fd fccb 	bl	8000f00 <disk_write>
 800356a:	bb40      	cbnz	r0, 80035be <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800356c:	7d23      	ldrb	r3, [r4, #20]
 800356e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003572:	7523      	strb	r3, [r4, #20]
 8003574:	e7e7      	b.n	8003546 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8003576:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003578:	7af3      	ldrb	r3, [r6, #11]
 800357a:	f043 0320 	orr.w	r3, r3, #32
 800357e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003580:	68a2      	ldr	r2, [r4, #8]
 8003582:	4631      	mov	r1, r6
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	f7fe fc7f 	bl	8001e88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800358a:	68e1      	ldr	r1, [r4, #12]
 800358c:	f106 001c 	add.w	r0, r6, #28
 8003590:	f7fe fb42 	bl	8001c18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003594:	4629      	mov	r1, r5
 8003596:	f106 0016 	add.w	r0, r6, #22
 800359a:	f7fe fb3d 	bl	8001c18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800359e:	2100      	movs	r1, #0
 80035a0:	f106 0012 	add.w	r0, r6, #18
 80035a4:	f7fe fb34 	bl	8001c10 <st_word>
					fs->wflag = 1;
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80035ae:	9801      	ldr	r0, [sp, #4]
 80035b0:	f7ff fa6a 	bl	8002a88 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80035b4:	7d23      	ldrb	r3, [r4, #20]
 80035b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035ba:	7523      	strb	r3, [r4, #20]
 80035bc:	e7cb      	b.n	8003556 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80035be:	2001      	movs	r0, #1
 80035c0:	e7c9      	b.n	8003556 <f_sync+0x2c>

080035c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80035c2:	b510      	push	{r4, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80035c8:	f7ff ffaf 	bl	800352a <f_sync>
	if (res == FR_OK)
 80035cc:	b108      	cbz	r0, 80035d2 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80035ce:	b002      	add	sp, #8
 80035d0:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80035d2:	a901      	add	r1, sp, #4
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7fe fd36 	bl	8002046 <validate>
		if (res == FR_OK) {
 80035da:	2800      	cmp	r0, #0
 80035dc:	d1f7      	bne.n	80035ce <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80035de:	6920      	ldr	r0, [r4, #16]
 80035e0:	f7fe fbe2 	bl	8001da8 <dec_lock>
			if (res == FR_OK)
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1f2      	bne.n	80035ce <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 80035e8:	6020      	str	r0, [r4, #0]
 80035ea:	e7f0      	b.n	80035ce <f_close+0xc>

080035ec <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80035ec:	4b13      	ldr	r3, [pc, #76]	@ (800363c <FATFS_LinkDriverEx+0x50>)
 80035ee:	7a5b      	ldrb	r3, [r3, #9]
 80035f0:	bb13      	cbnz	r3, 8003638 <FATFS_LinkDriverEx+0x4c>
{
 80035f2:	b510      	push	{r4, lr}
 80035f4:	4604      	mov	r4, r0
 80035f6:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <FATFS_LinkDriverEx+0x50>)
 80035fc:	f893 c009 	ldrb.w	ip, [r3, #9]
 8003600:	fa5f fc8c 	uxtb.w	ip, ip
 8003604:	f04f 0e00 	mov.w	lr, #0
 8003608:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800360c:	f893 c009 	ldrb.w	ip, [r3, #9]
 8003610:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003614:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8003618:	7a5c      	ldrb	r4, [r3, #9]
 800361a:	441c      	add	r4, r3
 800361c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800361e:	7a5a      	ldrb	r2, [r3, #9]
 8003620:	1c54      	adds	r4, r2, #1
 8003622:	b2e4      	uxtb	r4, r4
 8003624:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8003626:	3230      	adds	r2, #48	@ 0x30
 8003628:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800362a:	233a      	movs	r3, #58	@ 0x3a
 800362c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800362e:	232f      	movs	r3, #47	@ 0x2f
 8003630:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003632:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8003636:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8003638:	2001      	movs	r0, #1
}
 800363a:	4770      	bx	lr
 800363c:	20000568 	.word	0x20000568

08003640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003640:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	f7ff ffd2 	bl	80035ec <FATFS_LinkDriverEx>
}
 8003648:	bd08      	pop	{r3, pc}
	...

0800364c <font_GetFontStruct>:
};


//==============================================================================
uint8_t *font_GetFontStruct(uint8_t FontID, char Char)
{
 800364c:	b508      	push	{r3, lr}
  return font_table_funcs[FontID](Char);
 800364e:	4b03      	ldr	r3, [pc, #12]	@ (800365c <font_GetFontStruct+0x10>)
 8003650:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003654:	4608      	mov	r0, r1
 8003656:	4798      	blx	r3
}
 8003658:	bd08      	pop	{r3, pc}
 800365a:	bf00      	nop
 800365c:	08014f8c 	.word	0x08014f8c

08003660 <font_GetCharWidth>:

//==============================================================================
uint8_t font_GetCharWidth(uint8_t *pCharTable)
{
  return *pCharTable;
}
 8003660:	7800      	ldrb	r0, [r0, #0]
 8003662:	4770      	bx	lr

08003664 <font_GetCharHeight>:
//==============================================================================
uint8_t font_GetCharHeight(uint8_t *pCharTable)
{
  pCharTable++;
  return *pCharTable;
}
 8003664:	7840      	ldrb	r0, [r0, #1]
 8003666:	4770      	bx	lr

08003668 <SwapBytes>:
#if (GC9A01_MODE == GC9A01_BUFFER_MODE)
static uint16_t ScreenBuff[GC9A01A_Height * GC9A01A_Width];
#endif

static void SwapBytes(uint16_t *color) {
	uint8_t temp = *color >> 8;
 8003668:	8802      	ldrh	r2, [r0, #0]
	*color = (*color << 8) | temp;
 800366a:	0213      	lsls	r3, r2, #8
 800366c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8003670:	8003      	strh	r3, [r0, #0]
}
 8003672:	4770      	bx	lr

08003674 <SendPart2>:
			//GC9A01A_DrawPixel(col, row, color);
			ScreenBuff[(y + row) * GC9A01A_Width + x + col] = color;
	}
}

void SendPart2() {
 8003674:	b500      	push	{lr}
 8003676:	b083      	sub	sp, #12
	uint16_t len = GC9A01A_Width * GC9A01A_Height;
	SPI_send_dma(GC9A01A_SPI_periph, 0, (uint8_t*) &ScreenBuff[len / 2], len,
 8003678:	2100      	movs	r1, #0
 800367a:	9100      	str	r1, [sp, #0]
 800367c:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8003680:	4a03      	ldr	r2, [pc, #12]	@ (8003690 <SendPart2+0x1c>)
 8003682:	4804      	ldr	r0, [pc, #16]	@ (8003694 <SendPart2+0x20>)
 8003684:	f002 fd26 	bl	80060d4 <SPI_send_dma>
			0);
}
 8003688:	b003      	add	sp, #12
 800368a:	f85d fb04 	ldr.w	pc, [sp], #4
 800368e:	bf00      	nop
 8003690:	2000e674 	.word	0x2000e674
 8003694:	40013000 	.word	0x40013000

08003698 <GPIO_init>:
}

#endif


static void GPIO_init(void) {
 8003698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800369c:	b089      	sub	sp, #36	@ 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800369e:	2600      	movs	r6, #0
 80036a0:	9601      	str	r6, [sp, #4]
 80036a2:	4b25      	ldr	r3, [pc, #148]	@ (8003738 <GPIO_init+0xa0>)
 80036a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80036ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ae:	f002 0201 	and.w	r2, r2, #1
 80036b2:	9201      	str	r2, [sp, #4]
 80036b4:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80036b6:	9602      	str	r6, [sp, #8]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ba:	f042 0202 	orr.w	r2, r2, #2
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	9302      	str	r3, [sp, #8]
 80036c8:	9b02      	ldr	r3, [sp, #8]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ca:	2502      	movs	r5, #2
 80036cc:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ce:	f04f 0801 	mov.w	r8, #1
 80036d2:	f8cd 8010 	str.w	r8, [sp, #16]

#if (GC9A01A_RESET_Used)
	gpio_PortClockStart(GC9A01A_RESET_Port);
 80036d6:	4c19      	ldr	r4, [pc, #100]	@ (800373c <GPIO_init+0xa4>)
 80036d8:	4620      	mov	r0, r4
 80036da:	f000 fc0f 	bl	8003efc <gpio_PortClockStart>
	GPIO_InitStruct.Pin = GC9A01A_RESET_Pin;
 80036de:	2740      	movs	r7, #64	@ 0x40
 80036e0:	9703      	str	r7, [sp, #12]
	HAL_GPIO_Init(GC9A01A_RESET_Port, &GPIO_InitStruct);
 80036e2:	a903      	add	r1, sp, #12
 80036e4:	4620      	mov	r0, r4
 80036e6:	f003 f86f 	bl	80067c8 <HAL_GPIO_Init>
	RESET_HIGH();
 80036ea:	4642      	mov	r2, r8
 80036ec:	4639      	mov	r1, r7
 80036ee:	4620      	mov	r0, r4
 80036f0:	f003 f95a 	bl	80069a8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GC9A01A_CS_Port, &GPIO_InitStruct);
  CS_HIGH();
#endif

#if (GC9A01A_DC_Used)
	gpio_PortClockStart(GC9A01A_DC_Port);
 80036f4:	4f12      	ldr	r7, [pc, #72]	@ (8003740 <GPIO_init+0xa8>)
 80036f6:	4638      	mov	r0, r7
 80036f8:	f000 fc00 	bl	8003efc <gpio_PortClockStart>
	GPIO_InitStruct.Pin = GC9A01A_DC_Pin;
 80036fc:	f04f 0910 	mov.w	r9, #16
 8003700:	f8cd 900c 	str.w	r9, [sp, #12]
	HAL_GPIO_Init(GC9A01A_DC_Port, &GPIO_InitStruct);
 8003704:	a903      	add	r1, sp, #12
 8003706:	4638      	mov	r0, r7
 8003708:	f003 f85e 	bl	80067c8 <HAL_GPIO_Init>
	DC_HIGH();
 800370c:	4642      	mov	r2, r8
 800370e:	4649      	mov	r1, r9
 8003710:	4638      	mov	r0, r7
 8003712:	f003 f949 	bl	80069a8 <HAL_GPIO_WritePin>
#if (GC9A01A_BLK_PWM_Used)
	//tmr11_PWM_init(100, 0);
	//tmr11_start();
	GC9A01A_SetBL(0);
#else
  gpio_PortClockStart(GC9A01A_BLK_Port);
 8003716:	4620      	mov	r0, r4
 8003718:	f000 fbf0 	bl	8003efc <gpio_PortClockStart>
  GPIO_InitStruct.Pin = GC9A01A_BLK_Pin;
 800371c:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GC9A01A_BLK_Port, &GPIO_InitStruct);
 800371e:	a903      	add	r1, sp, #12
 8003720:	4620      	mov	r0, r4
 8003722:	f003 f851 	bl	80067c8 <HAL_GPIO_Init>
  BLK_LOW();
 8003726:	4632      	mov	r2, r6
 8003728:	4629      	mov	r1, r5
 800372a:	4620      	mov	r0, r4
 800372c:	f003 f93c 	bl	80069a8 <HAL_GPIO_WritePin>
#endif
}
 8003730:	b009      	add	sp, #36	@ 0x24
 8003732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020800 	.word	0x40020800

08003744 <SendCmd>:
void SendCmd(uint8_t Cmd) {
 8003744:	b500      	push	{lr}
 8003746:	b083      	sub	sp, #12
 8003748:	f88d 0007 	strb.w	r0, [sp, #7]
	DC_LOW(); CS_LOW();
 800374c:	2200      	movs	r2, #0
 800374e:	2110      	movs	r1, #16
 8003750:	4806      	ldr	r0, [pc, #24]	@ (800376c <SendCmd+0x28>)
 8003752:	f003 f929 	bl	80069a8 <HAL_GPIO_WritePin>
	SPI_send(GC9A01A_SPI_periph, 0, &Cmd, 1);
 8003756:	2301      	movs	r3, #1
 8003758:	f10d 0207 	add.w	r2, sp, #7
 800375c:	2100      	movs	r1, #0
 800375e:	4804      	ldr	r0, [pc, #16]	@ (8003770 <SendCmd+0x2c>)
 8003760:	f002 fca4 	bl	80060ac <SPI_send>
}
 8003764:	b003      	add	sp, #12
 8003766:	f85d fb04 	ldr.w	pc, [sp], #4
 800376a:	bf00      	nop
 800376c:	40020800 	.word	0x40020800
 8003770:	40013000 	.word	0x40013000

08003774 <SendData>:
void SendData(uint8_t Data) {
 8003774:	b500      	push	{lr}
 8003776:	b083      	sub	sp, #12
 8003778:	f88d 0007 	strb.w	r0, [sp, #7]
	DC_HIGH(); CS_LOW();
 800377c:	2201      	movs	r2, #1
 800377e:	2110      	movs	r1, #16
 8003780:	4806      	ldr	r0, [pc, #24]	@ (800379c <SendData+0x28>)
 8003782:	f003 f911 	bl	80069a8 <HAL_GPIO_WritePin>
	SPI_send(GC9A01A_SPI_periph, 0, &Data, 1);
 8003786:	2301      	movs	r3, #1
 8003788:	f10d 0207 	add.w	r2, sp, #7
 800378c:	2100      	movs	r1, #0
 800378e:	4804      	ldr	r0, [pc, #16]	@ (80037a0 <SendData+0x2c>)
 8003790:	f002 fc8c 	bl	80060ac <SPI_send>
}
 8003794:	b003      	add	sp, #12
 8003796:	f85d fb04 	ldr.w	pc, [sp], #4
 800379a:	bf00      	nop
 800379c:	40020800 	.word	0x40020800
 80037a0:	40013000 	.word	0x40013000

080037a4 <ColumnSet>:
	if (ColumnStart > ColumnEnd)
 80037a4:	4288      	cmp	r0, r1
 80037a6:	d801      	bhi.n	80037ac <ColumnSet+0x8>
	if (ColumnEnd > GC9A01A_Width)
 80037a8:	29f0      	cmp	r1, #240	@ 0xf0
 80037aa:	d900      	bls.n	80037ae <ColumnSet+0xa>
 80037ac:	4770      	bx	lr
static void ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd) {
 80037ae:	b538      	push	{r3, r4, r5, lr}
	ColumnStart += GC9A01A_X_Start;
 80037b0:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <ColumnSet+0x38>)
 80037b2:	781d      	ldrb	r5, [r3, #0]
 80037b4:	4428      	add	r0, r5
 80037b6:	b284      	uxth	r4, r0
	ColumnEnd += GC9A01A_X_Start;
 80037b8:	440d      	add	r5, r1
 80037ba:	b2ad      	uxth	r5, r5
	SendCmd(Cmd_CASET);
 80037bc:	202a      	movs	r0, #42	@ 0x2a
 80037be:	f7ff ffc1 	bl	8003744 <SendCmd>
	SendData(ColumnStart >> 8);
 80037c2:	0a20      	lsrs	r0, r4, #8
 80037c4:	f7ff ffd6 	bl	8003774 <SendData>
	SendData(ColumnStart & 0xFF);
 80037c8:	b2e0      	uxtb	r0, r4
 80037ca:	f7ff ffd3 	bl	8003774 <SendData>
	SendData(ColumnEnd >> 8);
 80037ce:	0a28      	lsrs	r0, r5, #8
 80037d0:	f7ff ffd0 	bl	8003774 <SendData>
	SendData(ColumnEnd & 0xFF);
 80037d4:	b2e8      	uxtb	r0, r5
 80037d6:	f7ff ffcd 	bl	8003774 <SendData>
}
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	2001c775 	.word	0x2001c775

080037e0 <RowSet>:
	if (RowStart > RowEnd)
 80037e0:	4288      	cmp	r0, r1
 80037e2:	d801      	bhi.n	80037e8 <RowSet+0x8>
	if (RowEnd > GC9A01A_Height)
 80037e4:	29f0      	cmp	r1, #240	@ 0xf0
 80037e6:	d900      	bls.n	80037ea <RowSet+0xa>
 80037e8:	4770      	bx	lr
static void RowSet(uint16_t RowStart, uint16_t RowEnd) {
 80037ea:	b538      	push	{r3, r4, r5, lr}
	RowStart += GC9A01A_Y_Start;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <RowSet+0x38>)
 80037ee:	781d      	ldrb	r5, [r3, #0]
 80037f0:	4428      	add	r0, r5
 80037f2:	b284      	uxth	r4, r0
	RowEnd += GC9A01A_Y_Start;
 80037f4:	440d      	add	r5, r1
 80037f6:	b2ad      	uxth	r5, r5
	SendCmd(Cmd_RASET);
 80037f8:	202b      	movs	r0, #43	@ 0x2b
 80037fa:	f7ff ffa3 	bl	8003744 <SendCmd>
	SendData(RowStart >> 8);
 80037fe:	0a20      	lsrs	r0, r4, #8
 8003800:	f7ff ffb8 	bl	8003774 <SendData>
	SendData(RowStart & 0xFF);
 8003804:	b2e0      	uxtb	r0, r4
 8003806:	f7ff ffb5 	bl	8003774 <SendData>
	SendData(RowEnd >> 8);
 800380a:	0a28      	lsrs	r0, r5, #8
 800380c:	f7ff ffb2 	bl	8003774 <SendData>
	SendData(RowEnd & 0xFF);
 8003810:	b2e8      	uxtb	r0, r5
 8003812:	f7ff ffaf 	bl	8003774 <SendData>
}
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	2001c774 	.word	0x2001c774

0800381c <MemAccessModeSet>:
		uint8_t HorizMirror, uint8_t IsBGR) {
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	460f      	mov	r7, r1
 8003820:	4616      	mov	r6, r2
 8003822:	461d      	mov	r5, r3
	Rotation &= 7;
 8003824:	f000 0407 	and.w	r4, r0, #7
	SendCmd(Cmd_MADCTL);
 8003828:	2036      	movs	r0, #54	@ 0x36
 800382a:	f7ff ff8b 	bl	8003744 <SendCmd>
	switch (Rotation) {
 800382e:	2c07      	cmp	r4, #7
 8003830:	d806      	bhi.n	8003840 <MemAccessModeSet+0x24>
 8003832:	e8df f004 	tbb	[pc, r4]
 8003836:	0405      	.short	0x0405
 8003838:	16141210 	.word	0x16141210
 800383c:	1a18      	.short	0x1a18
		Value = MADCTL_MX;
 800383e:	2440      	movs	r4, #64	@ 0x40
	if (VertMirror)
 8003840:	b107      	cbz	r7, 8003844 <MemAccessModeSet+0x28>
		Value = MADCTL_ML;
 8003842:	2410      	movs	r4, #16
	if (HorizMirror)
 8003844:	b106      	cbz	r6, 8003848 <MemAccessModeSet+0x2c>
		Value = MADCTL_MH;
 8003846:	2404      	movs	r4, #4
	if (IsBGR)
 8003848:	b10d      	cbz	r5, 800384e <MemAccessModeSet+0x32>
		Value |= MADCTL_BGR;
 800384a:	f044 0408 	orr.w	r4, r4, #8
	SendData(Value);
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff ff90 	bl	8003774 <SendData>
}
 8003854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Value = MADCTL_MY;
 8003856:	2480      	movs	r4, #128	@ 0x80
		break;
 8003858:	e7f2      	b.n	8003840 <MemAccessModeSet+0x24>
		Value = MADCTL_MX | MADCTL_MY;
 800385a:	24c0      	movs	r4, #192	@ 0xc0
		break;
 800385c:	e7f0      	b.n	8003840 <MemAccessModeSet+0x24>
		Value = MADCTL_MV;
 800385e:	2420      	movs	r4, #32
		break;
 8003860:	e7ee      	b.n	8003840 <MemAccessModeSet+0x24>
		Value = MADCTL_MV | MADCTL_MX;
 8003862:	2460      	movs	r4, #96	@ 0x60
		break;
 8003864:	e7ec      	b.n	8003840 <MemAccessModeSet+0x24>
		Value = MADCTL_MV | MADCTL_MY;
 8003866:	24a0      	movs	r4, #160	@ 0xa0
		break;
 8003868:	e7ea      	b.n	8003840 <MemAccessModeSet+0x24>
		Value = MADCTL_MV | MADCTL_MX | MADCTL_MY;
 800386a:	24e0      	movs	r4, #224	@ 0xe0
		break;
 800386c:	e7e8      	b.n	8003840 <MemAccessModeSet+0x24>

0800386e <ColorModeSet>:
static void ColorModeSet(uint8_t ColorMode) {
 800386e:	b510      	push	{r4, lr}
 8003870:	4604      	mov	r4, r0
	SendCmd(Cmd_COLMOD);
 8003872:	203a      	movs	r0, #58	@ 0x3a
 8003874:	f7ff ff66 	bl	8003744 <SendCmd>
	SendData(ColorMode & 0x77);
 8003878:	f004 0077 	and.w	r0, r4, #119	@ 0x77
 800387c:	f7ff ff7a 	bl	8003774 <SendData>
}
 8003880:	bd10      	pop	{r4, pc}
	...

08003884 <GC9A01A_HardReset>:
void GC9A01A_HardReset(void) {
 8003884:	b510      	push	{r4, lr}
	RESET_LOW();
 8003886:	4c09      	ldr	r4, [pc, #36]	@ (80038ac <GC9A01A_HardReset+0x28>)
 8003888:	2200      	movs	r2, #0
 800388a:	2140      	movs	r1, #64	@ 0x40
 800388c:	4620      	mov	r0, r4
 800388e:	f003 f88b 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003892:	200a      	movs	r0, #10
 8003894:	f002 fc84 	bl	80061a0 <HAL_Delay>
	RESET_HIGH();
 8003898:	2201      	movs	r2, #1
 800389a:	2140      	movs	r1, #64	@ 0x40
 800389c:	4620      	mov	r0, r4
 800389e:	f003 f883 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80038a2:	2096      	movs	r0, #150	@ 0x96
 80038a4:	f002 fc7c 	bl	80061a0 <HAL_Delay>
}
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	bf00      	nop
 80038ac:	40020000 	.word	0x40020000

080038b0 <GC9A01A_SleepMode>:
void GC9A01A_SleepMode(uint8_t Mode) {
 80038b0:	b508      	push	{r3, lr}
	if (Mode)
 80038b2:	b138      	cbz	r0, 80038c4 <GC9A01A_SleepMode+0x14>
		SendCmd(Cmd_SLPIN);
 80038b4:	2010      	movs	r0, #16
 80038b6:	f7ff ff45 	bl	8003744 <SendCmd>
	HAL_Delay(500);
 80038ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80038be:	f002 fc6f 	bl	80061a0 <HAL_Delay>
}
 80038c2:	bd08      	pop	{r3, pc}
		SendCmd(Cmd_SLPOUT);
 80038c4:	2011      	movs	r0, #17
 80038c6:	f7ff ff3d 	bl	8003744 <SendCmd>
 80038ca:	e7f6      	b.n	80038ba <GC9A01A_SleepMode+0xa>

080038cc <GC9A01A_InversionMode>:
void GC9A01A_InversionMode(uint8_t Mode) {
 80038cc:	b508      	push	{r3, lr}
	if (Mode)
 80038ce:	b118      	cbz	r0, 80038d8 <GC9A01A_InversionMode+0xc>
		SendCmd(Cmd_INVON);
 80038d0:	2021      	movs	r0, #33	@ 0x21
 80038d2:	f7ff ff37 	bl	8003744 <SendCmd>
}
 80038d6:	bd08      	pop	{r3, pc}
		SendCmd(Cmd_INVOFF);
 80038d8:	2020      	movs	r0, #32
 80038da:	f7ff ff33 	bl	8003744 <SendCmd>
}
 80038de:	e7fa      	b.n	80038d6 <GC9A01A_InversionMode+0xa>

080038e0 <GC9A01A_DisplayPower>:
void GC9A01A_DisplayPower(uint8_t On) {
 80038e0:	b508      	push	{r3, lr}
	if (On)
 80038e2:	b118      	cbz	r0, 80038ec <GC9A01A_DisplayPower+0xc>
		SendCmd(Cmd_DISPON);
 80038e4:	2029      	movs	r0, #41	@ 0x29
 80038e6:	f7ff ff2d 	bl	8003744 <SendCmd>
}
 80038ea:	bd08      	pop	{r3, pc}
		SendCmd(Cmd_DISPOFF);
 80038ec:	2028      	movs	r0, #40	@ 0x28
 80038ee:	f7ff ff29 	bl	8003744 <SendCmd>
}
 80038f2:	e7fa      	b.n	80038ea <GC9A01A_DisplayPower+0xa>

080038f4 <GC9A01A_SetWindow>:
void GC9A01A_SetWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	460c      	mov	r4, r1
 80038f8:	461d      	mov	r5, r3
	ColumnSet(x0, x1);
 80038fa:	4611      	mov	r1, r2
 80038fc:	f7ff ff52 	bl	80037a4 <ColumnSet>
	RowSet(y0, y1);
 8003900:	4629      	mov	r1, r5
 8003902:	4620      	mov	r0, r4
 8003904:	f7ff ff6c 	bl	80037e0 <RowSet>
	SendCmd(Cmd_RAMWR);
 8003908:	202c      	movs	r0, #44	@ 0x2c
 800390a:	f7ff ff1b 	bl	8003744 <SendCmd>
}
 800390e:	bd38      	pop	{r3, r4, r5, pc}

08003910 <GC9A01A_SetBL>:
void GC9A01A_SetBL(uint8_t Value) {
 8003910:	b508      	push	{r3, lr}
	if (Value > 100)
 8003912:	2864      	cmp	r0, #100	@ 0x64
 8003914:	d800      	bhi.n	8003918 <GC9A01A_SetBL+0x8>
  if (Value)
 8003916:	b128      	cbz	r0, 8003924 <GC9A01A_SetBL+0x14>
    BLK_HIGH();
 8003918:	2201      	movs	r2, #1
 800391a:	2102      	movs	r1, #2
 800391c:	4804      	ldr	r0, [pc, #16]	@ (8003930 <GC9A01A_SetBL+0x20>)
 800391e:	f003 f843 	bl	80069a8 <HAL_GPIO_WritePin>
}
 8003922:	bd08      	pop	{r3, pc}
    BLK_LOW();
 8003924:	2200      	movs	r2, #0
 8003926:	2102      	movs	r1, #2
 8003928:	4801      	ldr	r0, [pc, #4]	@ (8003930 <GC9A01A_SetBL+0x20>)
 800392a:	f003 f83d 	bl	80069a8 <HAL_GPIO_WritePin>
}
 800392e:	e7f8      	b.n	8003922 <GC9A01A_SetBL+0x12>
 8003930:	40020000 	.word	0x40020000

08003934 <GC9A01A_DrawPixel>:
void GC9A01A_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8003934:	b530      	push	{r4, r5, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	f8ad 2006 	strh.w	r2, [sp, #6]
	if ((x < 0) || (x >= GC9A01A_Width) || (y < 0) || (y >= GC9A01A_Height))
 800393c:	b283      	uxth	r3, r0
 800393e:	2bef      	cmp	r3, #239	@ 0xef
 8003940:	d805      	bhi.n	800394e <GC9A01A_DrawPixel+0x1a>
 8003942:	4605      	mov	r5, r0
 8003944:	460c      	mov	r4, r1
 8003946:	2900      	cmp	r1, #0
 8003948:	db01      	blt.n	800394e <GC9A01A_DrawPixel+0x1a>
 800394a:	29ef      	cmp	r1, #239	@ 0xef
 800394c:	dd01      	ble.n	8003952 <GC9A01A_DrawPixel+0x1e>
}
 800394e:	b003      	add	sp, #12
 8003950:	bd30      	pop	{r4, r5, pc}
	SwapBytes(&color);
 8003952:	f10d 0006 	add.w	r0, sp, #6
 8003956:	f7ff fe87 	bl	8003668 <SwapBytes>
	ScreenBuff[y * GC9A01A_Width + x] = color;
 800395a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800395e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 8003962:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <GC9A01A_DrawPixel+0x3c>)
 8003964:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003968:	f823 2015 	strh.w	r2, [r3, r5, lsl #1]
 800396c:	e7ef      	b.n	800394e <GC9A01A_DrawPixel+0x1a>
 800396e:	bf00      	nop
 8003970:	20000574 	.word	0x20000574

08003974 <GC9A01A_FillRect>:
		uint16_t color) {
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((w <= 0) || (h <= 0) || (x >= GC9A01A_Width) || (y >= GC9A01A_Height))
 8003976:	1e14      	subs	r4, r2, #0
 8003978:	dd43      	ble.n	8003a02 <GC9A01A_FillRect+0x8e>
 800397a:	461f      	mov	r7, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	dd40      	ble.n	8003a02 <GC9A01A_FillRect+0x8e>
 8003980:	28ef      	cmp	r0, #239	@ 0xef
 8003982:	dc3e      	bgt.n	8003a02 <GC9A01A_FillRect+0x8e>
 8003984:	29ef      	cmp	r1, #239	@ 0xef
 8003986:	dc3c      	bgt.n	8003a02 <GC9A01A_FillRect+0x8e>
	if (x < 0) {
 8003988:	2800      	cmp	r0, #0
 800398a:	db19      	blt.n	80039c0 <GC9A01A_FillRect+0x4c>
	if (y < 0) {
 800398c:	2900      	cmp	r1, #0
 800398e:	db1b      	blt.n	80039c8 <GC9A01A_FillRect+0x54>
	if ((w <= 0) || (h <= 0))
 8003990:	2c00      	cmp	r4, #0
 8003992:	dd36      	ble.n	8003a02 <GC9A01A_FillRect+0x8e>
 8003994:	2f00      	cmp	r7, #0
 8003996:	dd34      	ble.n	8003a02 <GC9A01A_FillRect+0x8e>
	if ((x + w) > GC9A01A_Width)
 8003998:	4605      	mov	r5, r0
 800399a:	1823      	adds	r3, r4, r0
 800399c:	2bf0      	cmp	r3, #240	@ 0xf0
 800399e:	dd02      	ble.n	80039a6 <GC9A01A_FillRect+0x32>
		w = GC9A01A_Width - x;
 80039a0:	f1c0 00f0 	rsb	r0, r0, #240	@ 0xf0
 80039a4:	b204      	sxth	r4, r0
	if ((y + h) > GC9A01A_Height)
 80039a6:	460e      	mov	r6, r1
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2bf0      	cmp	r3, #240	@ 0xf0
 80039ac:	dd02      	ble.n	80039b4 <GC9A01A_FillRect+0x40>
		h = GC9A01A_Height - y;
 80039ae:	f1c1 01f0 	rsb	r1, r1, #240	@ 0xf0
 80039b2:	b20f      	sxth	r7, r1
	SwapBytes(&color);
 80039b4:	a806      	add	r0, sp, #24
 80039b6:	f7ff fe57 	bl	8003668 <SwapBytes>
	for (uint16_t row = 0; row < h; row++) {
 80039ba:	f04f 0e00 	mov.w	lr, #0
 80039be:	e01b      	b.n	80039f8 <GC9A01A_FillRect+0x84>
		w += x;
 80039c0:	4420      	add	r0, r4
 80039c2:	b204      	sxth	r4, r0
		x = 0;
 80039c4:	2000      	movs	r0, #0
 80039c6:	e7e1      	b.n	800398c <GC9A01A_FillRect+0x18>
		h += y;
 80039c8:	4439      	add	r1, r7
 80039ca:	b20f      	sxth	r7, r1
		y = 0;
 80039cc:	2100      	movs	r1, #0
 80039ce:	e7df      	b.n	8003990 <GC9A01A_FillRect+0x1c>
			ScreenBuff[(y + row) * GC9A01A_Width + x + col] = color;
 80039d0:	eb06 010c 	add.w	r1, r6, ip
 80039d4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80039d8:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 80039dc:	4419      	add	r1, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <GC9A01A_FillRect+0x90>)
 80039e0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80039e4:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
		for (uint16_t col = 0; col < w; col++)
 80039e8:	3301      	adds	r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	dbef      	blt.n	80039d0 <GC9A01A_FillRect+0x5c>
	for (uint16_t row = 0; row < h; row++) {
 80039f0:	f10e 0e01 	add.w	lr, lr, #1
 80039f4:	fa1f fe8e 	uxth.w	lr, lr
 80039f8:	46f4      	mov	ip, lr
 80039fa:	45be      	cmp	lr, r7
 80039fc:	da01      	bge.n	8003a02 <GC9A01A_FillRect+0x8e>
		for (uint16_t col = 0; col < w; col++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7f4      	b.n	80039ec <GC9A01A_FillRect+0x78>
}
 8003a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a04:	20000574 	.word	0x20000574

08003a08 <GC9A01A_Update>:
void GC9A01A_Update() {
 8003a08:	b500      	push	{lr}
 8003a0a:	b083      	sub	sp, #12
	GC9A01A_SetWindow(0, 0, GC9A01A_Width - 1, GC9A01A_Height - 1);
 8003a0c:	23ef      	movs	r3, #239	@ 0xef
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2100      	movs	r1, #0
 8003a12:	4608      	mov	r0, r1
 8003a14:	f7ff ff6e 	bl	80038f4 <GC9A01A_SetWindow>
	DC_HIGH(); CS_LOW();
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2110      	movs	r1, #16
 8003a1c:	4807      	ldr	r0, [pc, #28]	@ (8003a3c <GC9A01A_Update+0x34>)
 8003a1e:	f002 ffc3 	bl	80069a8 <HAL_GPIO_WritePin>
	SPI_send_dma(GC9A01A_SPI_periph, 0, (uint8_t*) ScreenBuff, len, SendPart2);
 8003a22:	4b07      	ldr	r3, [pc, #28]	@ (8003a40 <GC9A01A_Update+0x38>)
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8003a2a:	4a06      	ldr	r2, [pc, #24]	@ (8003a44 <GC9A01A_Update+0x3c>)
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4806      	ldr	r0, [pc, #24]	@ (8003a48 <GC9A01A_Update+0x40>)
 8003a30:	f002 fb50 	bl	80060d4 <SPI_send_dma>
}
 8003a34:	b003      	add	sp, #12
 8003a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a3a:	bf00      	nop
 8003a3c:	40020800 	.word	0x40020800
 8003a40:	08003675 	.word	0x08003675
 8003a44:	20000574 	.word	0x20000574
 8003a48:	40013000 	.word	0x40013000

08003a4c <GC9A01A_GetWidth>:
//==============================================================================

uint16_t GC9A01A_GetWidth() {
	return GC9A01A_Width;
}
 8003a4c:	20f0      	movs	r0, #240	@ 0xf0
 8003a4e:	4770      	bx	lr

08003a50 <GC9A01A_GetHeight>:

uint16_t GC9A01A_GetHeight() {
	return GC9A01A_Height;
}
 8003a50:	20f0      	movs	r0, #240	@ 0xf0
 8003a52:	4770      	bx	lr

08003a54 <GC9A01A_Init>:

//==============================================================================

//==============================================================================
void GC9A01A_Init() {
 8003a54:	b510      	push	{r4, lr}
 8003a56:	b082      	sub	sp, #8
	GC9A01A_X_Start = 0;
 8003a58:	2400      	movs	r4, #0
 8003a5a:	4bfd      	ldr	r3, [pc, #1012]	@ (8003e50 <GC9A01A_Init+0x3fc>)
 8003a5c:	701c      	strb	r4, [r3, #0]
	GC9A01A_Y_Start = 0;
 8003a5e:	4bfd      	ldr	r3, [pc, #1012]	@ (8003e54 <GC9A01A_Init+0x400>)
 8003a60:	701c      	strb	r4, [r3, #0]

	GPIO_init();
 8003a62:	f7ff fe19 	bl	8003698 <GPIO_init>
	spim_init(GC9A01A_SPI_periph, 1);
 8003a66:	2101      	movs	r1, #1
 8003a68:	48fb      	ldr	r0, [pc, #1004]	@ (8003e58 <GC9A01A_Init+0x404>)
 8003a6a:	f002 fa89 	bl	8005f80 <spim_init>

	GC9A01A_HardReset();
 8003a6e:	f7ff ff09 	bl	8003884 <GC9A01A_HardReset>

	SendCmd(Cmd_InnerReg2Enable);
 8003a72:	20ef      	movs	r0, #239	@ 0xef
 8003a74:	f7ff fe66 	bl	8003744 <SendCmd>
	SendCmd(0xEB);        // ?
 8003a78:	20eb      	movs	r0, #235	@ 0xeb
 8003a7a:	f7ff fe63 	bl	8003744 <SendCmd>
	SendData(0x14);
 8003a7e:	2014      	movs	r0, #20
 8003a80:	f7ff fe78 	bl	8003774 <SendData>

	SendCmd(Cmd_InnerReg1Enable);
 8003a84:	20fe      	movs	r0, #254	@ 0xfe
 8003a86:	f7ff fe5d 	bl	8003744 <SendCmd>
	SendCmd(Cmd_InnerReg2Enable);
 8003a8a:	20ef      	movs	r0, #239	@ 0xef
 8003a8c:	f7ff fe5a 	bl	8003744 <SendCmd>

	SendCmd(0xEB);        // ?
 8003a90:	20eb      	movs	r0, #235	@ 0xeb
 8003a92:	f7ff fe57 	bl	8003744 <SendCmd>
	SendData(0x14);       // ?
 8003a96:	2014      	movs	r0, #20
 8003a98:	f7ff fe6c 	bl	8003774 <SendData>

	SendCmd(0x84);        // ?
 8003a9c:	2084      	movs	r0, #132	@ 0x84
 8003a9e:	f7ff fe51 	bl	8003744 <SendCmd>
	SendData(0x40);
 8003aa2:	2040      	movs	r0, #64	@ 0x40
 8003aa4:	f7ff fe66 	bl	8003774 <SendData>

	SendCmd(0x85);        // ?
 8003aa8:	2085      	movs	r0, #133	@ 0x85
 8003aaa:	f7ff fe4b 	bl	8003744 <SendCmd>
	SendData(0xFF);
 8003aae:	20ff      	movs	r0, #255	@ 0xff
 8003ab0:	f7ff fe60 	bl	8003774 <SendData>

	SendCmd(0x86);        // ?
 8003ab4:	2086      	movs	r0, #134	@ 0x86
 8003ab6:	f7ff fe45 	bl	8003744 <SendCmd>
	SendData(0xFF);
 8003aba:	20ff      	movs	r0, #255	@ 0xff
 8003abc:	f7ff fe5a 	bl	8003774 <SendData>

	SendCmd(0x87);        // ?
 8003ac0:	2087      	movs	r0, #135	@ 0x87
 8003ac2:	f7ff fe3f 	bl	8003744 <SendCmd>
	SendData(0xFF);
 8003ac6:	20ff      	movs	r0, #255	@ 0xff
 8003ac8:	f7ff fe54 	bl	8003774 <SendData>

	SendCmd(0x88);        // ?
 8003acc:	2088      	movs	r0, #136	@ 0x88
 8003ace:	f7ff fe39 	bl	8003744 <SendCmd>
	SendData(0x0A);
 8003ad2:	200a      	movs	r0, #10
 8003ad4:	f7ff fe4e 	bl	8003774 <SendData>

	SendCmd(0x89);        // ?
 8003ad8:	2089      	movs	r0, #137	@ 0x89
 8003ada:	f7ff fe33 	bl	8003744 <SendCmd>
	SendData(0x21);
 8003ade:	2021      	movs	r0, #33	@ 0x21
 8003ae0:	f7ff fe48 	bl	8003774 <SendData>

	SendCmd(0x8A);        // ?
 8003ae4:	208a      	movs	r0, #138	@ 0x8a
 8003ae6:	f7ff fe2d 	bl	8003744 <SendCmd>
	SendData(0x00);
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7ff fe42 	bl	8003774 <SendData>

	SendCmd(0x8B);        // ?
 8003af0:	208b      	movs	r0, #139	@ 0x8b
 8003af2:	f7ff fe27 	bl	8003744 <SendCmd>
	SendData(0x80);
 8003af6:	2080      	movs	r0, #128	@ 0x80
 8003af8:	f7ff fe3c 	bl	8003774 <SendData>

	SendCmd(0x8C);        // ?
 8003afc:	208c      	movs	r0, #140	@ 0x8c
 8003afe:	f7ff fe21 	bl	8003744 <SendCmd>
	SendData(0x01);
 8003b02:	2001      	movs	r0, #1
 8003b04:	f7ff fe36 	bl	8003774 <SendData>

	SendCmd(0x8D);        // ?
 8003b08:	208d      	movs	r0, #141	@ 0x8d
 8003b0a:	f7ff fe1b 	bl	8003744 <SendCmd>
	SendData(0x01);
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f7ff fe30 	bl	8003774 <SendData>

	SendCmd(0x8E);        // ?
 8003b14:	208e      	movs	r0, #142	@ 0x8e
 8003b16:	f7ff fe15 	bl	8003744 <SendCmd>
	SendData(0xFF);
 8003b1a:	20ff      	movs	r0, #255	@ 0xff
 8003b1c:	f7ff fe2a 	bl	8003774 <SendData>

	SendCmd(0x8F);        // ?
 8003b20:	208f      	movs	r0, #143	@ 0x8f
 8003b22:	f7ff fe0f 	bl	8003744 <SendCmd>
	SendData(0xFF);
 8003b26:	20ff      	movs	r0, #255	@ 0xff
 8003b28:	f7ff fe24 	bl	8003774 <SendData>

	SendCmd(Cmd_DisplayFunctionControl);
 8003b2c:	20b6      	movs	r0, #182	@ 0xb6
 8003b2e:	f7ff fe09 	bl	8003744 <SendCmd>
	SendData(0x00);
 8003b32:	4620      	mov	r0, r4
 8003b34:	f7ff fe1e 	bl	8003774 <SendData>
	SendData(0x20); // Scan direction S360 -> S1
 8003b38:	2020      	movs	r0, #32
 8003b3a:	f7ff fe1b 	bl	8003774 <SendData>

	MemAccessModeSet(0, 0, 0, 1);
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4622      	mov	r2, r4
 8003b42:	4621      	mov	r1, r4
 8003b44:	4620      	mov	r0, r4
 8003b46:	f7ff fe69 	bl	800381c <MemAccessModeSet>
	ColorModeSet(ColorMode_MCU_16bit);
 8003b4a:	2005      	movs	r0, #5
 8003b4c:	f7ff fe8f 	bl	800386e <ColorModeSet>

	SendCmd(0x90);        // ?
 8003b50:	2090      	movs	r0, #144	@ 0x90
 8003b52:	f7ff fdf7 	bl	8003744 <SendCmd>
	SendData(0x08);
 8003b56:	2008      	movs	r0, #8
 8003b58:	f7ff fe0c 	bl	8003774 <SendData>
	SendData(0x08);
 8003b5c:	2008      	movs	r0, #8
 8003b5e:	f7ff fe09 	bl	8003774 <SendData>
	SendData(0x08);
 8003b62:	2008      	movs	r0, #8
 8003b64:	f7ff fe06 	bl	8003774 <SendData>
	SendData(0x08);
 8003b68:	2008      	movs	r0, #8
 8003b6a:	f7ff fe03 	bl	8003774 <SendData>

	SendCmd(0xBD);        // ?
 8003b6e:	20bd      	movs	r0, #189	@ 0xbd
 8003b70:	f7ff fde8 	bl	8003744 <SendCmd>
	SendData(0x06);
 8003b74:	2006      	movs	r0, #6
 8003b76:	f7ff fdfd 	bl	8003774 <SendData>

	SendCmd(0xBC);        // ?
 8003b7a:	20bc      	movs	r0, #188	@ 0xbc
 8003b7c:	f7ff fde2 	bl	8003744 <SendCmd>
	SendData(0x00);
 8003b80:	4620      	mov	r0, r4
 8003b82:	f7ff fdf7 	bl	8003774 <SendData>

	SendCmd(0xFF);        // ?
 8003b86:	20ff      	movs	r0, #255	@ 0xff
 8003b88:	f7ff fddc 	bl	8003744 <SendCmd>
	SendData(0x60);
 8003b8c:	2060      	movs	r0, #96	@ 0x60
 8003b8e:	f7ff fdf1 	bl	8003774 <SendData>
	SendData(0x01);
 8003b92:	2001      	movs	r0, #1
 8003b94:	f7ff fdee 	bl	8003774 <SendData>
	SendData(0x04);
 8003b98:	2004      	movs	r0, #4
 8003b9a:	f7ff fdeb 	bl	8003774 <SendData>

	SendCmd(Cmd_PWCTR2);  // Power control 2
 8003b9e:	20c3      	movs	r0, #195	@ 0xc3
 8003ba0:	f7ff fdd0 	bl	8003744 <SendCmd>
	SendData(0x13);       // 5.18 V
 8003ba4:	2013      	movs	r0, #19
 8003ba6:	f7ff fde5 	bl	8003774 <SendData>
	SendCmd(Cmd_PWCTR3);  // Power control 3
 8003baa:	20c4      	movs	r0, #196	@ 0xc4
 8003bac:	f7ff fdca 	bl	8003744 <SendCmd>
	SendData(0x13);       // VREG2A = -3.82 V, VREG2B = 0.68 V
 8003bb0:	2013      	movs	r0, #19
 8003bb2:	f7ff fddf 	bl	8003774 <SendData>
	SendCmd(Cmd_PWCTR4);  // Power control 4
 8003bb6:	20c9      	movs	r0, #201	@ 0xc9
 8003bb8:	f7ff fdc4 	bl	8003744 <SendCmd>
	SendData(0x22);       // VREG2A = 5.88 V, VREG2B = -2.88 V
 8003bbc:	2022      	movs	r0, #34	@ 0x22
 8003bbe:	f7ff fdd9 	bl	8003774 <SendData>

	SendCmd(0xBE);        // ?
 8003bc2:	20be      	movs	r0, #190	@ 0xbe
 8003bc4:	f7ff fdbe 	bl	8003744 <SendCmd>
	SendData(0x11);
 8003bc8:	2011      	movs	r0, #17
 8003bca:	f7ff fdd3 	bl	8003774 <SendData>

	SendCmd(0xE1);        // ?
 8003bce:	20e1      	movs	r0, #225	@ 0xe1
 8003bd0:	f7ff fdb8 	bl	8003744 <SendCmd>
	SendData(0x10);
 8003bd4:	2010      	movs	r0, #16
 8003bd6:	f7ff fdcd 	bl	8003774 <SendData>
	SendData(0x0E);
 8003bda:	200e      	movs	r0, #14
 8003bdc:	f7ff fdca 	bl	8003774 <SendData>

	SendCmd(0xDF);        // ?
 8003be0:	20df      	movs	r0, #223	@ 0xdf
 8003be2:	f7ff fdaf 	bl	8003744 <SendCmd>
	SendData(0x21);
 8003be6:	2021      	movs	r0, #33	@ 0x21
 8003be8:	f7ff fdc4 	bl	8003774 <SendData>
	SendData(0x0c);
 8003bec:	200c      	movs	r0, #12
 8003bee:	f7ff fdc1 	bl	8003774 <SendData>
	SendData(0x02);
 8003bf2:	2002      	movs	r0, #2
 8003bf4:	f7ff fdbe 	bl	8003774 <SendData>

	SendCmd(Cmd_GAMMA1);
 8003bf8:	20f0      	movs	r0, #240	@ 0xf0
 8003bfa:	f7ff fda3 	bl	8003744 <SendCmd>
	SendData(0x45);
 8003bfe:	2045      	movs	r0, #69	@ 0x45
 8003c00:	f7ff fdb8 	bl	8003774 <SendData>
	SendData(0x09);
 8003c04:	2009      	movs	r0, #9
 8003c06:	f7ff fdb5 	bl	8003774 <SendData>
	SendData(0x08);
 8003c0a:	2008      	movs	r0, #8
 8003c0c:	f7ff fdb2 	bl	8003774 <SendData>
	SendData(0x08);
 8003c10:	2008      	movs	r0, #8
 8003c12:	f7ff fdaf 	bl	8003774 <SendData>
	SendData(0x26);
 8003c16:	2026      	movs	r0, #38	@ 0x26
 8003c18:	f7ff fdac 	bl	8003774 <SendData>
	SendData(0x2A);
 8003c1c:	202a      	movs	r0, #42	@ 0x2a
 8003c1e:	f7ff fda9 	bl	8003774 <SendData>

	SendCmd(Cmd_GAMMA2);
 8003c22:	20f1      	movs	r0, #241	@ 0xf1
 8003c24:	f7ff fd8e 	bl	8003744 <SendCmd>
	SendData(0x43);
 8003c28:	2043      	movs	r0, #67	@ 0x43
 8003c2a:	f7ff fda3 	bl	8003774 <SendData>
	SendData(0x70);
 8003c2e:	2070      	movs	r0, #112	@ 0x70
 8003c30:	f7ff fda0 	bl	8003774 <SendData>
	SendData(0x72);
 8003c34:	2072      	movs	r0, #114	@ 0x72
 8003c36:	f7ff fd9d 	bl	8003774 <SendData>
	SendData(0x36);
 8003c3a:	2036      	movs	r0, #54	@ 0x36
 8003c3c:	f7ff fd9a 	bl	8003774 <SendData>
	SendData(0x37);
 8003c40:	2037      	movs	r0, #55	@ 0x37
 8003c42:	f7ff fd97 	bl	8003774 <SendData>
	SendData(0x6F);
 8003c46:	206f      	movs	r0, #111	@ 0x6f
 8003c48:	f7ff fd94 	bl	8003774 <SendData>

	SendCmd(Cmd_GAMMA3);
 8003c4c:	20f2      	movs	r0, #242	@ 0xf2
 8003c4e:	f7ff fd79 	bl	8003744 <SendCmd>
	SendData(0x45);
 8003c52:	2045      	movs	r0, #69	@ 0x45
 8003c54:	f7ff fd8e 	bl	8003774 <SendData>
	SendData(0x09);
 8003c58:	2009      	movs	r0, #9
 8003c5a:	f7ff fd8b 	bl	8003774 <SendData>
	SendData(0x08);
 8003c5e:	2008      	movs	r0, #8
 8003c60:	f7ff fd88 	bl	8003774 <SendData>
	SendData(0x08);
 8003c64:	2008      	movs	r0, #8
 8003c66:	f7ff fd85 	bl	8003774 <SendData>
	SendData(0x26);
 8003c6a:	2026      	movs	r0, #38	@ 0x26
 8003c6c:	f7ff fd82 	bl	8003774 <SendData>
	SendData(0x2A);
 8003c70:	202a      	movs	r0, #42	@ 0x2a
 8003c72:	f7ff fd7f 	bl	8003774 <SendData>

	SendCmd(Cmd_GAMMA4);
 8003c76:	20f3      	movs	r0, #243	@ 0xf3
 8003c78:	f7ff fd64 	bl	8003744 <SendCmd>
	SendData(0x43);
 8003c7c:	2043      	movs	r0, #67	@ 0x43
 8003c7e:	f7ff fd79 	bl	8003774 <SendData>
	SendData(0x70);
 8003c82:	2070      	movs	r0, #112	@ 0x70
 8003c84:	f7ff fd76 	bl	8003774 <SendData>
	SendData(0x72);
 8003c88:	2072      	movs	r0, #114	@ 0x72
 8003c8a:	f7ff fd73 	bl	8003774 <SendData>
	SendData(0x36);
 8003c8e:	2036      	movs	r0, #54	@ 0x36
 8003c90:	f7ff fd70 	bl	8003774 <SendData>
	SendData(0x37);
 8003c94:	2037      	movs	r0, #55	@ 0x37
 8003c96:	f7ff fd6d 	bl	8003774 <SendData>
	SendData(0x6F);
 8003c9a:	206f      	movs	r0, #111	@ 0x6f
 8003c9c:	f7ff fd6a 	bl	8003774 <SendData>

	SendCmd(0xED);        // ?
 8003ca0:	20ed      	movs	r0, #237	@ 0xed
 8003ca2:	f7ff fd4f 	bl	8003744 <SendCmd>
	SendData(0x1B);
 8003ca6:	201b      	movs	r0, #27
 8003ca8:	f7ff fd64 	bl	8003774 <SendData>
	SendData(0x0B);
 8003cac:	200b      	movs	r0, #11
 8003cae:	f7ff fd61 	bl	8003774 <SendData>

	SendCmd(0xAE);        // ?
 8003cb2:	20ae      	movs	r0, #174	@ 0xae
 8003cb4:	f7ff fd46 	bl	8003744 <SendCmd>
	SendData(0x77);
 8003cb8:	2077      	movs	r0, #119	@ 0x77
 8003cba:	f7ff fd5b 	bl	8003774 <SendData>

	SendCmd(0xCD);        // ?
 8003cbe:	20cd      	movs	r0, #205	@ 0xcd
 8003cc0:	f7ff fd40 	bl	8003744 <SendCmd>
	SendData(0x63);
 8003cc4:	2063      	movs	r0, #99	@ 0x63
 8003cc6:	f7ff fd55 	bl	8003774 <SendData>

	SendCmd(0x70);        // ?
 8003cca:	2070      	movs	r0, #112	@ 0x70
 8003ccc:	f7ff fd3a 	bl	8003744 <SendCmd>
	SendData(0x07);
 8003cd0:	2007      	movs	r0, #7
 8003cd2:	f7ff fd4f 	bl	8003774 <SendData>
	SendData(0x07);
 8003cd6:	2007      	movs	r0, #7
 8003cd8:	f7ff fd4c 	bl	8003774 <SendData>
	SendData(0x04);
 8003cdc:	2004      	movs	r0, #4
 8003cde:	f7ff fd49 	bl	8003774 <SendData>
	SendData(0x0E);
 8003ce2:	200e      	movs	r0, #14
 8003ce4:	f7ff fd46 	bl	8003774 <SendData>
	SendData(0x0F);
 8003ce8:	200f      	movs	r0, #15
 8003cea:	f7ff fd43 	bl	8003774 <SendData>
	SendData(0x09);
 8003cee:	2009      	movs	r0, #9
 8003cf0:	f7ff fd40 	bl	8003774 <SendData>
	SendData(0x07);
 8003cf4:	2007      	movs	r0, #7
 8003cf6:	f7ff fd3d 	bl	8003774 <SendData>
	SendData(0x08);
 8003cfa:	2008      	movs	r0, #8
 8003cfc:	f7ff fd3a 	bl	8003774 <SendData>
	SendData(0x03);
 8003d00:	2003      	movs	r0, #3
 8003d02:	f7ff fd37 	bl	8003774 <SendData>

	SendCmd(Cmd_FRAMERATE);       // Frame rate
 8003d06:	20e8      	movs	r0, #232	@ 0xe8
 8003d08:	f7ff fd1c 	bl	8003744 <SendCmd>
	SendData(0x34);         // 4 dot inversion
 8003d0c:	2034      	movs	r0, #52	@ 0x34
 8003d0e:	f7ff fd31 	bl	8003774 <SendData>

	SendCmd(0x62);        // ?
 8003d12:	2062      	movs	r0, #98	@ 0x62
 8003d14:	f7ff fd16 	bl	8003744 <SendCmd>
	SendData(0x18);
 8003d18:	2018      	movs	r0, #24
 8003d1a:	f7ff fd2b 	bl	8003774 <SendData>
	SendData(0x0D);
 8003d1e:	200d      	movs	r0, #13
 8003d20:	f7ff fd28 	bl	8003774 <SendData>
	SendData(0x71);
 8003d24:	2071      	movs	r0, #113	@ 0x71
 8003d26:	f7ff fd25 	bl	8003774 <SendData>
	SendData(0xED);
 8003d2a:	20ed      	movs	r0, #237	@ 0xed
 8003d2c:	f7ff fd22 	bl	8003774 <SendData>
	SendData(0x70);
 8003d30:	2070      	movs	r0, #112	@ 0x70
 8003d32:	f7ff fd1f 	bl	8003774 <SendData>
	SendData(0x70);
 8003d36:	2070      	movs	r0, #112	@ 0x70
 8003d38:	f7ff fd1c 	bl	8003774 <SendData>
	SendData(0x18);
 8003d3c:	2018      	movs	r0, #24
 8003d3e:	f7ff fd19 	bl	8003774 <SendData>
	SendData(0x0F);
 8003d42:	200f      	movs	r0, #15
 8003d44:	f7ff fd16 	bl	8003774 <SendData>
	SendData(0x71);
 8003d48:	2071      	movs	r0, #113	@ 0x71
 8003d4a:	f7ff fd13 	bl	8003774 <SendData>
	SendData(0xEF);
 8003d4e:	20ef      	movs	r0, #239	@ 0xef
 8003d50:	f7ff fd10 	bl	8003774 <SendData>
	SendData(0x70);
 8003d54:	2070      	movs	r0, #112	@ 0x70
 8003d56:	f7ff fd0d 	bl	8003774 <SendData>
	SendData(0x70);
 8003d5a:	2070      	movs	r0, #112	@ 0x70
 8003d5c:	f7ff fd0a 	bl	8003774 <SendData>

	SendCmd(0x63);        // ?
 8003d60:	2063      	movs	r0, #99	@ 0x63
 8003d62:	f7ff fcef 	bl	8003744 <SendCmd>
	SendData(0x18);
 8003d66:	2018      	movs	r0, #24
 8003d68:	f7ff fd04 	bl	8003774 <SendData>
	SendData(0x11);
 8003d6c:	2011      	movs	r0, #17
 8003d6e:	f7ff fd01 	bl	8003774 <SendData>
	SendData(0x71);
 8003d72:	2071      	movs	r0, #113	@ 0x71
 8003d74:	f7ff fcfe 	bl	8003774 <SendData>
	SendData(0xF1);
 8003d78:	20f1      	movs	r0, #241	@ 0xf1
 8003d7a:	f7ff fcfb 	bl	8003774 <SendData>
	SendData(0x70);
 8003d7e:	2070      	movs	r0, #112	@ 0x70
 8003d80:	f7ff fcf8 	bl	8003774 <SendData>
	SendData(0x70);
 8003d84:	2070      	movs	r0, #112	@ 0x70
 8003d86:	f7ff fcf5 	bl	8003774 <SendData>
	SendData(0x18);
 8003d8a:	2018      	movs	r0, #24
 8003d8c:	f7ff fcf2 	bl	8003774 <SendData>
	SendData(0x13);
 8003d90:	2013      	movs	r0, #19
 8003d92:	f7ff fcef 	bl	8003774 <SendData>
	SendData(0x71);
 8003d96:	2071      	movs	r0, #113	@ 0x71
 8003d98:	f7ff fcec 	bl	8003774 <SendData>
	SendData(0xF3);
 8003d9c:	20f3      	movs	r0, #243	@ 0xf3
 8003d9e:	f7ff fce9 	bl	8003774 <SendData>
	SendData(0x70);
 8003da2:	2070      	movs	r0, #112	@ 0x70
 8003da4:	f7ff fce6 	bl	8003774 <SendData>
	SendData(0x70);
 8003da8:	2070      	movs	r0, #112	@ 0x70
 8003daa:	f7ff fce3 	bl	8003774 <SendData>

	SendCmd(0x64);        // ?
 8003dae:	2064      	movs	r0, #100	@ 0x64
 8003db0:	f7ff fcc8 	bl	8003744 <SendCmd>
	SendData(0x28);
 8003db4:	2028      	movs	r0, #40	@ 0x28
 8003db6:	f7ff fcdd 	bl	8003774 <SendData>
	SendData(0x29);
 8003dba:	2029      	movs	r0, #41	@ 0x29
 8003dbc:	f7ff fcda 	bl	8003774 <SendData>
	SendData(0xF1);
 8003dc0:	20f1      	movs	r0, #241	@ 0xf1
 8003dc2:	f7ff fcd7 	bl	8003774 <SendData>
	SendData(0x01);
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f7ff fcd4 	bl	8003774 <SendData>
	SendData(0xF1);
 8003dcc:	20f1      	movs	r0, #241	@ 0xf1
 8003dce:	f7ff fcd1 	bl	8003774 <SendData>
	SendData(0x00);
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f7ff fcce 	bl	8003774 <SendData>
	SendData(0x07);
 8003dd8:	2007      	movs	r0, #7
 8003dda:	f7ff fccb 	bl	8003774 <SendData>

	SendCmd(0x66);        // ?
 8003dde:	2066      	movs	r0, #102	@ 0x66
 8003de0:	f7ff fcb0 	bl	8003744 <SendCmd>
	SendData(0x3C);
 8003de4:	203c      	movs	r0, #60	@ 0x3c
 8003de6:	f7ff fcc5 	bl	8003774 <SendData>
	SendData(0x00);
 8003dea:	4620      	mov	r0, r4
 8003dec:	f7ff fcc2 	bl	8003774 <SendData>
	SendData(0xCD);
 8003df0:	20cd      	movs	r0, #205	@ 0xcd
 8003df2:	f7ff fcbf 	bl	8003774 <SendData>
	SendData(0x67);
 8003df6:	2067      	movs	r0, #103	@ 0x67
 8003df8:	f7ff fcbc 	bl	8003774 <SendData>
	SendData(0x45);
 8003dfc:	2045      	movs	r0, #69	@ 0x45
 8003dfe:	f7ff fcb9 	bl	8003774 <SendData>
	SendData(0x45);
 8003e02:	2045      	movs	r0, #69	@ 0x45
 8003e04:	f7ff fcb6 	bl	8003774 <SendData>
	SendData(0x10);
 8003e08:	2010      	movs	r0, #16
 8003e0a:	f7ff fcb3 	bl	8003774 <SendData>
	SendData(0x00);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff fcb0 	bl	8003774 <SendData>
	SendData(0x00);
 8003e14:	4620      	mov	r0, r4
 8003e16:	f7ff fcad 	bl	8003774 <SendData>
	SendData(0x00);
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f7ff fcaa 	bl	8003774 <SendData>

	SendCmd(0x67);        // ?
 8003e20:	2067      	movs	r0, #103	@ 0x67
 8003e22:	f7ff fc8f 	bl	8003744 <SendCmd>
	SendData(0x00);
 8003e26:	4620      	mov	r0, r4
 8003e28:	f7ff fca4 	bl	8003774 <SendData>
	SendData(0x3C);
 8003e2c:	203c      	movs	r0, #60	@ 0x3c
 8003e2e:	f7ff fca1 	bl	8003774 <SendData>
	SendData(0x00);
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff fc9e 	bl	8003774 <SendData>
	SendData(0x00);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff fc9b 	bl	8003774 <SendData>
	SendData(0x00);
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7ff fc98 	bl	8003774 <SendData>
	SendData(0x01);
 8003e44:	2001      	movs	r0, #1
 8003e46:	f7ff fc95 	bl	8003774 <SendData>
	SendData(0x54);
 8003e4a:	2054      	movs	r0, #84	@ 0x54
 8003e4c:	e006      	b.n	8003e5c <GC9A01A_Init+0x408>
 8003e4e:	bf00      	nop
 8003e50:	2001c775 	.word	0x2001c775
 8003e54:	2001c774 	.word	0x2001c774
 8003e58:	40013000 	.word	0x40013000
 8003e5c:	f7ff fc8a 	bl	8003774 <SendData>
	SendData(0x10);
 8003e60:	2010      	movs	r0, #16
 8003e62:	f7ff fc87 	bl	8003774 <SendData>
	SendData(0x32);
 8003e66:	2032      	movs	r0, #50	@ 0x32
 8003e68:	f7ff fc84 	bl	8003774 <SendData>
	SendData(0x98);
 8003e6c:	2098      	movs	r0, #152	@ 0x98
 8003e6e:	f7ff fc81 	bl	8003774 <SendData>

	SendCmd(0x74);        // ?
 8003e72:	2074      	movs	r0, #116	@ 0x74
 8003e74:	f7ff fc66 	bl	8003744 <SendCmd>
	SendData(0x10);
 8003e78:	2010      	movs	r0, #16
 8003e7a:	f7ff fc7b 	bl	8003774 <SendData>
	SendData(0x85);
 8003e7e:	2085      	movs	r0, #133	@ 0x85
 8003e80:	f7ff fc78 	bl	8003774 <SendData>
	SendData(0x80);
 8003e84:	2080      	movs	r0, #128	@ 0x80
 8003e86:	f7ff fc75 	bl	8003774 <SendData>
	SendData(0x00);
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f7ff fc72 	bl	8003774 <SendData>
	SendData(0x00);
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7ff fc6f 	bl	8003774 <SendData>
	SendData(0x4E);
 8003e96:	204e      	movs	r0, #78	@ 0x4e
 8003e98:	f7ff fc6c 	bl	8003774 <SendData>
	SendData(0x00);
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f7ff fc69 	bl	8003774 <SendData>

	SendCmd(0x98);        // ?
 8003ea2:	2098      	movs	r0, #152	@ 0x98
 8003ea4:	f7ff fc4e 	bl	8003744 <SendCmd>
	SendData(0x3e);
 8003ea8:	203e      	movs	r0, #62	@ 0x3e
 8003eaa:	f7ff fc63 	bl	8003774 <SendData>
	SendData(0x07);
 8003eae:	2007      	movs	r0, #7
 8003eb0:	f7ff fc60 	bl	8003774 <SendData>

	SendCmd(Cmd_TEON); // Tearing effect line on
 8003eb4:	2035      	movs	r0, #53	@ 0x35
 8003eb6:	f7ff fc45 	bl	8003744 <SendCmd>

	GC9A01A_InversionMode(1);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7ff fd06 	bl	80038cc <GC9A01A_InversionMode>
	GC9A01A_SleepMode(0);
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f7ff fcf5 	bl	80038b0 <GC9A01A_SleepMode>

	HAL_Delay(120);
 8003ec6:	2078      	movs	r0, #120	@ 0x78
 8003ec8:	f002 f96a 	bl	80061a0 <HAL_Delay>
	GC9A01A_DisplayPower(1);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f7ff fd07 	bl	80038e0 <GC9A01A_DisplayPower>
	HAL_Delay(20);
 8003ed2:	2014      	movs	r0, #20
 8003ed4:	f002 f964 	bl	80061a0 <HAL_Delay>

	GC9A01A_FillRect(0, 0, GC9A01A_Width, GC9A01A_Height, BLACK);
 8003ed8:	9400      	str	r4, [sp, #0]
 8003eda:	23f0      	movs	r3, #240	@ 0xf0
 8003edc:	461a      	mov	r2, r3
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff fd47 	bl	8003974 <GC9A01A_FillRect>
	GC9A01A_Update();
 8003ee6:	f7ff fd8f 	bl	8003a08 <GC9A01A_Update>
	HAL_Delay(20);
 8003eea:	2014      	movs	r0, #20
 8003eec:	f002 f958 	bl	80061a0 <HAL_Delay>

	GC9A01A_SetBL(100);
 8003ef0:	2064      	movs	r0, #100	@ 0x64
 8003ef2:	f7ff fd0d 	bl	8003910 <GC9A01A_SetBL>
}
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	bf00      	nop

08003efc <gpio_PortClockStart>:
	InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOx, &InitStruct);
}

void gpio_PortClockStart(GPIO_TypeDef *GPIOx) {
 8003efc:	b086      	sub	sp, #24
	if (GPIOx == GPIOA)
 8003efe:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <gpio_PortClockStart+0xa4>)
 8003f00:	4298      	cmp	r0, r3
 8003f02:	d018      	beq.n	8003f36 <gpio_PortClockStart+0x3a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
	else if (GPIOx == GPIOB)
 8003f04:	4b27      	ldr	r3, [pc, #156]	@ (8003fa4 <gpio_PortClockStart+0xa8>)
 8003f06:	4298      	cmp	r0, r3
 8003f08:	d023      	beq.n	8003f52 <gpio_PortClockStart+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
	else if (GPIOx == GPIOC)
 8003f0a:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <gpio_PortClockStart+0xac>)
 8003f0c:	4298      	cmp	r0, r3
 8003f0e:	d02d      	beq.n	8003f6c <gpio_PortClockStart+0x70>
		__HAL_RCC_GPIOC_CLK_ENABLE();
	else if (GPIOx == GPIOD)
 8003f10:	4b26      	ldr	r3, [pc, #152]	@ (8003fac <gpio_PortClockStart+0xb0>)
 8003f12:	4298      	cmp	r0, r3
 8003f14:	d037      	beq.n	8003f86 <gpio_PortClockStart+0x8a>
		__HAL_RCC_GPIOD_CLK_ENABLE();
	else if (GPIOx == GPIOE)
 8003f16:	4b26      	ldr	r3, [pc, #152]	@ (8003fb0 <gpio_PortClockStart+0xb4>)
 8003f18:	4298      	cmp	r0, r3
 8003f1a:	d118      	bne.n	8003f4e <gpio_PortClockStart+0x52>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9305      	str	r3, [sp, #20]
 8003f20:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <gpio_PortClockStart+0xb8>)
 8003f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f24:	f042 0210 	orr.w	r2, r2, #16
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	9b05      	ldr	r3, [sp, #20]
}
 8003f34:	e00b      	b.n	8003f4e <gpio_PortClockStart+0x52>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb4 <gpio_PortClockStart+0xb8>)
 8003f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	9b01      	ldr	r3, [sp, #4]
}
 8003f4e:	b006      	add	sp, #24
 8003f50:	4770      	bx	lr
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	9302      	str	r3, [sp, #8]
 8003f56:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <gpio_PortClockStart+0xb8>)
 8003f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f5a:	f042 0202 	orr.w	r2, r2, #2
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	9b02      	ldr	r3, [sp, #8]
 8003f6a:	e7f0      	b.n	8003f4e <gpio_PortClockStart+0x52>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <gpio_PortClockStart+0xb8>)
 8003f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f74:	f042 0204 	orr.w	r2, r2, #4
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	9303      	str	r3, [sp, #12]
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	e7e3      	b.n	8003f4e <gpio_PortClockStart+0x52>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb4 <gpio_PortClockStart+0xb8>)
 8003f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f8e:	f042 0208 	orr.w	r2, r2, #8
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	9b04      	ldr	r3, [sp, #16]
 8003f9e:	e7d6      	b.n	8003f4e <gpio_PortClockStart+0x52>
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40020400 	.word	0x40020400
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	40020c00 	.word	0x40020c00
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <GetBlueRedPalette>:
static bool diplayFlag;

Message notifications[5];

static void GetBlueRedPalette(uint16_t steps, sRGB888 *pBuff, uint8_t type) {
	if (!pBuff)
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	f000 808a 	beq.w	80040d2 <GetBlueRedPalette+0x11a>
static void GetBlueRedPalette(uint16_t steps, sRGB888 *pBuff, uint8_t type) {
 8003fbe:	b500      	push	{lr}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	4686      	mov	lr, r0
 8003fc4:	468c      	mov	ip, r1
		return;

	sRGB888 KeyColors[] = { { 0x00, 0x00, 0xFF }, { 0xFF, 0x00, 0x00 } };
 8003fc6:	4b43      	ldr	r3, [pc, #268]	@ (80040d4 <GetBlueRedPalette+0x11c>)
 8003fc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003fcc:	9000      	str	r0, [sp, #0]
 8003fce:	f8ad 1004 	strh.w	r1, [sp, #4]
	switch (type)
 8003fd2:	2a01      	cmp	r2, #1
 8003fd4:	d003      	beq.n	8003fde <GetBlueRedPalette+0x26>
 8003fd6:	2a02      	cmp	r2, #2
 8003fd8:	d010      	beq.n	8003ffc <GetBlueRedPalette+0x44>
static void GetBlueRedPalette(uint16_t steps, sRGB888 *pBuff, uint8_t type) {
 8003fda:	2200      	movs	r2, #0
 8003fdc:	e074      	b.n	80040c8 <GetBlueRedPalette+0x110>
	{
	case LIGHT_PALETTE:
		KeyColors[0].r = 0x5F;
 8003fde:	235f      	movs	r3, #95	@ 0x5f
 8003fe0:	f88d 3000 	strb.w	r3, [sp]
		KeyColors[0].g = 0x5F;
 8003fe4:	f88d 3001 	strb.w	r3, [sp, #1]
		KeyColors[0].b = 0x1C;  // LIGHT
 8003fe8:	231c      	movs	r3, #28
 8003fea:	f88d 3002 	strb.w	r3, [sp, #2]
		KeyColors[1].r = 0xFF;
		KeyColors[1].g = 0xFF;
 8003fee:	23ff      	movs	r3, #255	@ 0xff
 8003ff0:	f88d 3004 	strb.w	r3, [sp, #4]
		KeyColors[1].b = 0x55; 
 8003ff4:	2355      	movs	r3, #85	@ 0x55
 8003ff6:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
 8003ffa:	e7ee      	b.n	8003fda <GetBlueRedPalette+0x22>
	case ERROR_PALETTE:
		KeyColors[0].r = 0xF5;
 8003ffc:	23f5      	movs	r3, #245	@ 0xf5
 8003ffe:	f88d 3000 	strb.w	r3, [sp]
		KeyColors[0].g = 0x75;
 8004002:	2375      	movs	r3, #117	@ 0x75
 8004004:	f88d 3001 	strb.w	r3, [sp, #1]
		KeyColors[0].b = 0x42;  // ERROR
 8004008:	2342      	movs	r3, #66	@ 0x42
 800400a:	f88d 3002 	strb.w	r3, [sp, #2]
		KeyColors[1].r = 0xFF;
		KeyColors[1].g = 0x42;
 800400e:	f88d 3004 	strb.w	r3, [sp, #4]
		KeyColors[1].b = 0x42; 
 8004012:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
 8004016:	e7e0      	b.n	8003fda <GetBlueRedPalette+0x22>
	}
	

	for (uint16_t step = 0; step < steps; step++) {
		float n = (float) step / (float) (steps - 1);
 8004018:	ee07 2a90 	vmov	s15, r2
 800401c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004020:	f10e 33ff 	add.w	r3, lr, #4294967295
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402c:	ee87 6a27 	vdiv.f32	s12, s14, s15

		pBuff->r = ((float) KeyColors[0].r) * (1.0f - n)
 8004030:	f89d 3000 	ldrb.w	r3, [sp]
 8004034:	ee07 3a10 	vmov	s14, r3
 8004038:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800403c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004040:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004044:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ ((float) KeyColors[1].r) * n;
 8004048:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80040d8 <GetBlueRedPalette+0x120>
 800404c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004050:	ee37 7a26 	vadd.f32	s14, s14, s13
		pBuff->r = ((float) KeyColors[0].r) * (1.0f - n)
 8004054:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004058:	ee17 3a10 	vmov	r3, s14
 800405c:	f88c 3000 	strb.w	r3, [ip]
		pBuff->g = ((float) KeyColors[0].g) * (1.0f - n)
 8004060:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004064:	ee07 3a10 	vmov	s14, r3
 8004068:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800406c:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ ((float) KeyColors[1].g) * n;
 8004070:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004074:	ee06 3a90 	vmov	s13, r3
 8004078:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800407c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004080:	ee37 7a26 	vadd.f32	s14, s14, s13
		pBuff->g = ((float) KeyColors[0].g) * (1.0f - n)
 8004084:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004088:	ee17 3a10 	vmov	r3, s14
 800408c:	f88c 3001 	strb.w	r3, [ip, #1]
		pBuff->b = ((float) KeyColors[0].b) * (1.0f - n)
 8004090:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004094:	ee07 3a10 	vmov	s14, r3
 8004098:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800409c:	ee67 7a87 	vmul.f32	s15, s15, s14
				+ ((float) KeyColors[1].b) * n;
 80040a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80040a4:	ee07 3a10 	vmov	s14, r3
 80040a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80040ac:	ee27 7a06 	vmul.f32	s14, s14, s12
 80040b0:	ee77 7a87 	vadd.f32	s15, s15, s14
		pBuff->b = ((float) KeyColors[0].b) * (1.0f - n)
 80040b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b8:	ee17 3a90 	vmov	r3, s15
 80040bc:	f88c 3002 	strb.w	r3, [ip, #2]

		pBuff++;
 80040c0:	f10c 0c03 	add.w	ip, ip, #3
	for (uint16_t step = 0; step < steps; step++) {
 80040c4:	3201      	adds	r2, #1
 80040c6:	b292      	uxth	r2, r2
 80040c8:	4572      	cmp	r2, lr
 80040ca:	d3a5      	bcc.n	8004018 <GetBlueRedPalette+0x60>
	}
}
 80040cc:	b003      	add	sp, #12
 80040ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	08011678 	.word	0x08011678
 80040d8:	437f0000 	.word	0x437f0000

080040dc <Draw_BMP>:

void Draw_BMP(int16_t x, int16_t y, int8_t w, int8_t h, const uint16_t map[h][w], bool isPNG){
 80040dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	4682      	mov	sl, r0
 80040e2:	4689      	mov	r9, r1
 80040e4:	4616      	mov	r6, r2
 80040e6:	469b      	mov	fp, r3
 80040e8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80040ea:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
	for (int i = 0; i < h; i++){
 80040ee:	2500      	movs	r5, #0
 80040f0:	e01d      	b.n	800412e <Draw_BMP+0x52>
		for (int j = 0; j < w; j++){
			if (isPNG && map[i][j] == 0x0000){
				continue;
			}
			uint16_t color = map[i][j];
 80040f2:	fb06 f305 	mul.w	r3, r6, r5
 80040f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
			dispcolor_DrawPixel(x+j, y+i, color);
 80040fa:	eb04 000a 	add.w	r0, r4, sl
 80040fe:	eb05 0109 	add.w	r1, r5, r9
 8004102:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8004106:	b209      	sxth	r1, r1
 8004108:	b200      	sxth	r0, r0
 800410a:	f7fc ff15 	bl	8000f38 <dispcolor_DrawPixel>
		for (int j = 0; j < w; j++){
 800410e:	3401      	adds	r4, #1
 8004110:	42a6      	cmp	r6, r4
 8004112:	dd0b      	ble.n	800412c <Draw_BMP+0x50>
			if (isPNG && map[i][j] == 0x0000){
 8004114:	f1b8 0f00 	cmp.w	r8, #0
 8004118:	d0eb      	beq.n	80040f2 <Draw_BMP+0x16>
 800411a:	fb06 f305 	mul.w	r3, r6, r5
 800411e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004122:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e3      	bne.n	80040f2 <Draw_BMP+0x16>
 800412a:	e7f0      	b.n	800410e <Draw_BMP+0x32>
	for (int i = 0; i < h; i++){
 800412c:	3501      	adds	r5, #1
 800412e:	45ab      	cmp	fp, r5
 8004130:	dd01      	ble.n	8004136 <Draw_BMP+0x5a>
		for (int j = 0; j < w; j++){
 8004132:	2400      	movs	r4, #0
 8004134:	e7ec      	b.n	8004110 <Draw_BMP+0x34>
		}
	}
}
 8004136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800413c <Add_Message>:
		}
	}
}

bool Add_Message(char *message){
	for (uint8_t i =0; i < 5; i++){
 800413c:	2300      	movs	r3, #0
 800413e:	2b04      	cmp	r3, #4
 8004140:	d817      	bhi.n	8004172 <Add_Message+0x36>
		if (!notifications[i].isActive){
 8004142:	4a0d      	ldr	r2, [pc, #52]	@ (8004178 <Add_Message+0x3c>)
 8004144:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004148:	7912      	ldrb	r2, [r2, #4]
 800414a:	b112      	cbz	r2, 8004152 <Add_Message+0x16>
	for (uint8_t i =0; i < 5; i++){
 800414c:	3301      	adds	r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	e7f5      	b.n	800413e <Add_Message+0x2>
bool Add_Message(char *message){
 8004152:	b410      	push	{r4}
			notifications[i].isActive = true;
 8004154:	4c08      	ldr	r4, [pc, #32]	@ (8004178 <Add_Message+0x3c>)
 8004156:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 800415a:	2201      	movs	r2, #1
 800415c:	710a      	strb	r2, [r1, #4]
			notifications[i].message = message;
 800415e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
			notifications[i].y = -30;
 8004162:	23e2      	movs	r3, #226	@ 0xe2
 8004164:	714b      	strb	r3, [r1, #5]
			notifications[i].tick = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	80cb      	strh	r3, [r1, #6]
			return true;
 800416a:	4610      	mov	r0, r2
		}
	}
	return false;
}
 800416c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004170:	4770      	bx	lr
	return false;
 8004172:	2000      	movs	r0, #0
}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	2001c778 	.word	0x2001c778

0800417c <Draw_NavBar>:

	Update_Messages();
	dispcolor_Update();
}

void Draw_NavBar(uint8_t devs, int8_t cur_dev){
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	4605      	mov	r5, r0
	uint8_t y_pos = 190;
	uint8_t x_pos = 105;
	if(cur_dev != -1){
 8004182:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004186:	d027      	beq.n	80041d8 <Draw_NavBar+0x5c>
 8004188:	460e      	mov	r6, r1
		Draw_BMP(x_pos, y_pos, 10, 10,  home_inact_10x10, true);
 800418a:	2301      	movs	r3, #1
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <Draw_NavBar+0x94>)
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	230a      	movs	r3, #10
 8004194:	461a      	mov	r2, r3
 8004196:	21be      	movs	r1, #190	@ 0xbe
 8004198:	2069      	movs	r0, #105	@ 0x69
 800419a:	f7ff ff9f 	bl	80040dc <Draw_BMP>
		for(uint8_t dev = 0; dev < devs; dev++){
 800419e:	2400      	movs	r4, #0
 80041a0:	e00b      	b.n	80041ba <Draw_NavBar+0x3e>
			if(dev == cur_dev){
				dispcolor_FillCircle(x_pos+15+10*dev, y_pos+5, 3, WHITE);
 80041a2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80041a6:	0040      	lsls	r0, r0, #1
 80041a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041ac:	2203      	movs	r2, #3
 80041ae:	21c3      	movs	r1, #195	@ 0xc3
 80041b0:	3078      	adds	r0, #120	@ 0x78
 80041b2:	f7fd f820 	bl	80011f6 <dispcolor_FillCircle>
		for(uint8_t dev = 0; dev < devs; dev++){
 80041b6:	3401      	adds	r4, #1
 80041b8:	b2e4      	uxtb	r4, r4
 80041ba:	42ac      	cmp	r4, r5
 80041bc:	d226      	bcs.n	800420c <Draw_NavBar+0x90>
			if(dev == cur_dev){
 80041be:	42b4      	cmp	r4, r6
 80041c0:	d0ef      	beq.n	80041a2 <Draw_NavBar+0x26>
				continue;
			}
			dispcolor_FillCircle(x_pos+15+10*dev, y_pos+5, 3, GRAY);
 80041c2:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80041c6:	0040      	lsls	r0, r0, #1
 80041c8:	f248 4310 	movw	r3, #33808	@ 0x8410
 80041cc:	2203      	movs	r2, #3
 80041ce:	21c3      	movs	r1, #195	@ 0xc3
 80041d0:	3078      	adds	r0, #120	@ 0x78
 80041d2:	f7fd f810 	bl	80011f6 <dispcolor_FillCircle>
 80041d6:	e7ee      	b.n	80041b6 <Draw_NavBar+0x3a>
		}
	}else{
		Draw_BMP(x_pos, y_pos, 10, 10,  home_act_10x10, true);
 80041d8:	2301      	movs	r3, #1
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <Draw_NavBar+0x98>)
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	230a      	movs	r3, #10
 80041e2:	461a      	mov	r2, r3
 80041e4:	21be      	movs	r1, #190	@ 0xbe
 80041e6:	2069      	movs	r0, #105	@ 0x69
 80041e8:	f7ff ff78 	bl	80040dc <Draw_BMP>
		for(uint8_t dev = 0; dev < devs; dev++){
 80041ec:	2400      	movs	r4, #0
 80041ee:	e00b      	b.n	8004208 <Draw_NavBar+0x8c>
			dispcolor_FillCircle(x_pos+15+10*dev, y_pos+5, 3, GRAY);
 80041f0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80041f4:	0040      	lsls	r0, r0, #1
 80041f6:	f248 4310 	movw	r3, #33808	@ 0x8410
 80041fa:	2203      	movs	r2, #3
 80041fc:	21c3      	movs	r1, #195	@ 0xc3
 80041fe:	3078      	adds	r0, #120	@ 0x78
 8004200:	f7fc fff9 	bl	80011f6 <dispcolor_FillCircle>
		for(uint8_t dev = 0; dev < devs; dev++){
 8004204:	3401      	adds	r4, #1
 8004206:	b2e4      	uxtb	r4, r4
 8004208:	42ac      	cmp	r4, r5
 800420a:	d3f1      	bcc.n	80041f0 <Draw_NavBar+0x74>
		}
	}
}
 800420c:	b002      	add	sp, #8
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	08014f9c 	.word	0x08014f9c
 8004214:	08015064 	.word	0x08015064

08004218 <Show_SD_Warning>:

void Set_Time(RTC_DateTypeDef *gDate, RTC_TimeTypeDef *gTime){

}

void Show_SD_Warning(){
 8004218:	b510      	push	{r4, lr}
 800421a:	b082      	sub	sp, #8
	uint32_t tmr = HAL_GetTick();
 800421c:	f001 ffba 	bl	8006194 <HAL_GetTick>
 8004220:	4604      	mov	r4, r0
	while(HAL_GetTick() - tmr < 1000){
 8004222:	f001 ffb7 	bl	8006194 <HAL_GetTick>
 8004226:	1b00      	subs	r0, r0, r4
 8004228:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800422c:	d219      	bcs.n	8004262 <Show_SD_Warning+0x4a>
		HAL_Delay(30);
 800422e:	201e      	movs	r0, #30
 8004230:	f001 ffb6 	bl	80061a0 <HAL_Delay>
		dispcolor_FillScreen(BLACK);
 8004234:	2000      	movs	r0, #0
 8004236:	f7fc ff79 	bl	800112c <dispcolor_FillScreen>
		Draw_BMP(78, 78, 84, 84, sd_warn_84x84, 1);
 800423a:	2301      	movs	r3, #1
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <Show_SD_Warning+0x50>)
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	2354      	movs	r3, #84	@ 0x54
 8004244:	461a      	mov	r2, r3
 8004246:	214e      	movs	r1, #78	@ 0x4e
 8004248:	4608      	mov	r0, r1
 800424a:	f7ff ff47 	bl	80040dc <Draw_BMP>
		dispcolor_Update();
 800424e:	f7fc fe6f 	bl	8000f30 <dispcolor_Update>
		// IWDG RESET START
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 8004252:	4806      	ldr	r0, [pc, #24]	@ (800426c <Show_SD_Warning+0x54>)
 8004254:	f004 f972 	bl	800853c <HAL_IWDG_Refresh>
 8004258:	2800      	cmp	r0, #0
 800425a:	d0e2      	beq.n	8004222 <Show_SD_Warning+0xa>
		{
		Error_Handler();
 800425c:	f000 ffc8 	bl	80051f0 <Error_Handler>
 8004260:	e7df      	b.n	8004222 <Show_SD_Warning+0xa>
		}
		// IWDG RESET END
	}
}
 8004262:	b002      	add	sp, #8
 8004264:	bd10      	pop	{r4, pc}
 8004266:	bf00      	nop
 8004268:	0801884c 	.word	0x0801884c
 800426c:	2001d0fc 	.word	0x2001d0fc

08004270 <Show_RTC_Warning>:

void Show_RTC_Warning(){
 8004270:	b510      	push	{r4, lr}
 8004272:	b082      	sub	sp, #8
	uint32_t tmr = HAL_GetTick();
 8004274:	f001 ff8e 	bl	8006194 <HAL_GetTick>
 8004278:	4604      	mov	r4, r0
	while(HAL_GetTick() - tmr < 1000){
 800427a:	f001 ff8b 	bl	8006194 <HAL_GetTick>
 800427e:	1b00      	subs	r0, r0, r4
 8004280:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004284:	d219      	bcs.n	80042ba <Show_RTC_Warning+0x4a>
		HAL_Delay(30);
 8004286:	201e      	movs	r0, #30
 8004288:	f001 ff8a 	bl	80061a0 <HAL_Delay>
		dispcolor_FillScreen(BLACK);
 800428c:	2000      	movs	r0, #0
 800428e:	f7fc ff4d 	bl	800112c <dispcolor_FillScreen>
		Draw_BMP(78, 78, 84, 84, rtc_warning_84x84, 1);
 8004292:	2301      	movs	r3, #1
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <Show_RTC_Warning+0x50>)
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2354      	movs	r3, #84	@ 0x54
 800429c:	461a      	mov	r2, r3
 800429e:	214e      	movs	r1, #78	@ 0x4e
 80042a0:	4608      	mov	r0, r1
 80042a2:	f7ff ff1b 	bl	80040dc <Draw_BMP>
		dispcolor_Update();
 80042a6:	f7fc fe43 	bl	8000f30 <dispcolor_Update>
		// IWDG RESET START
		if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 80042aa:	4806      	ldr	r0, [pc, #24]	@ (80042c4 <Show_RTC_Warning+0x54>)
 80042ac:	f004 f946 	bl	800853c <HAL_IWDG_Refresh>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d0e2      	beq.n	800427a <Show_RTC_Warning+0xa>
		{
		Error_Handler();
 80042b4:	f000 ff9c 	bl	80051f0 <Error_Handler>
 80042b8:	e7df      	b.n	800427a <Show_RTC_Warning+0xa>
		}
		// IWDG RESET END
	}
}
 80042ba:	b002      	add	sp, #8
 80042bc:	bd10      	pop	{r4, pc}
 80042be:	bf00      	nop
 80042c0:	0801512c 	.word	0x0801512c
 80042c4:	2001d0fc 	.word	0x2001d0fc

080042c8 <DrawRoundedRect>:

void DrawRoundedRect(uint8_t x, int8_t y, uint8_t width, uint8_t height, uint8_t radius, uint16_t color) {
 80042c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042cc:	b08b      	sub	sp, #44	@ 0x2c
 80042ce:	4607      	mov	r7, r0
 80042d0:	460d      	mov	r5, r1
 80042d2:	461c      	mov	r4, r3
 80042d4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80042d8:	9302      	str	r3, [sp, #8]
 80042da:	f8bd b054 	ldrh.w	fp, [sp, #84]	@ 0x54
    int x1 = x + radius;                 // Left edge of the straight part
 80042de:	4418      	add	r0, r3
 80042e0:	9006      	str	r0, [sp, #24]
    int x2 = x + width - radius - 1;     // Right edge of the straight part
 80042e2:	19d6      	adds	r6, r2, r7
 80042e4:	461a      	mov	r2, r3
 80042e6:	1af3      	subs	r3, r6, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	9309      	str	r3, [sp, #36]	@ 0x24
    int y1 = y + radius;                 // Top edge of the straight part
 80042ee:	1853      	adds	r3, r2, r1
 80042f0:	9307      	str	r3, [sp, #28]
    int y2 = y + height - radius - 1;    // Bottom edge of the straight part
 80042f2:	1863      	adds	r3, r4, r1
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	3b01      	subs	r3, #1
 80042f8:	9308      	str	r3, [sp, #32]

    // Draw the straight edges
    dispcolor_DrawLine(x1, y, x2, y, color);              // Top edge
 80042fa:	eb07 0802 	add.w	r8, r7, r2
 80042fe:	4682      	mov	sl, r0
 8004300:	fa0f f980 	sxth.w	r9, r0
 8004304:	f8cd b000 	str.w	fp, [sp]
 8004308:	460b      	mov	r3, r1
 800430a:	464a      	mov	r2, r9
 800430c:	4640      	mov	r0, r8
 800430e:	f7fc ff39 	bl	8001184 <dispcolor_DrawLine>
    dispcolor_DrawLine(x1, y + height - 1, x2, y + height - 1, color); // Bottom edge
 8004312:	442c      	add	r4, r5
 8004314:	b2a4      	uxth	r4, r4
 8004316:	1e61      	subs	r1, r4, #1
 8004318:	b209      	sxth	r1, r1
 800431a:	f8cd b000 	str.w	fp, [sp]
 800431e:	460b      	mov	r3, r1
 8004320:	464a      	mov	r2, r9
 8004322:	4640      	mov	r0, r8
 8004324:	f7fc ff2e 	bl	8001184 <dispcolor_DrawLine>
    dispcolor_DrawLine(x, y1, x, y2, color);              // Left edge
 8004328:	b238      	sxth	r0, r7
 800432a:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 800432e:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8004332:	f8cd b000 	str.w	fp, [sp]
 8004336:	464b      	mov	r3, r9
 8004338:	4602      	mov	r2, r0
 800433a:	4641      	mov	r1, r8
 800433c:	f7fc ff22 	bl	8001184 <dispcolor_DrawLine>
    dispcolor_DrawLine(x + width - 1, y1, x + width - 1, y2, color); // Right edge
 8004340:	1e70      	subs	r0, r6, #1
 8004342:	b200      	sxth	r0, r0
 8004344:	f8cd b000 	str.w	fp, [sp]
 8004348:	464b      	mov	r3, r9
 800434a:	4602      	mov	r2, r0
 800434c:	4641      	mov	r1, r8
 800434e:	f7fc ff19 	bl	8001184 <dispcolor_DrawLine>

	for (int j = x1; j <= x2; j++){
 8004352:	9e06      	ldr	r6, [sp, #24]
 8004354:	4657      	mov	r7, sl
 8004356:	e009      	b.n	800436c <DrawRoundedRect+0xa4>
		dispcolor_DrawLine(j, y+1, j, y + height - 2, BLACK);              // Top edge
 8004358:	b230      	sxth	r0, r6
 800435a:	1ea3      	subs	r3, r4, #2
 800435c:	2200      	movs	r2, #0
 800435e:	9200      	str	r2, [sp, #0]
 8004360:	b21b      	sxth	r3, r3
 8004362:	4602      	mov	r2, r0
 8004364:	1c69      	adds	r1, r5, #1
 8004366:	f7fc ff0d 	bl	8001184 <dispcolor_DrawLine>
	for (int j = x1; j <= x2; j++){
 800436a:	3601      	adds	r6, #1
 800436c:	42be      	cmp	r6, r7
 800436e:	ddf3      	ble.n	8004358 <DrawRoundedRect+0x90>
	}

    // Draw the corners as quarter circles
    for (int i = 0; i <= radius; i++) {
 8004370:	f04f 0a00 	mov.w	sl, #0
 8004374:	e001      	b.n	800437a <DrawRoundedRect+0xb2>
 8004376:	f10a 0a01 	add.w	sl, sl, #1
 800437a:	9b02      	ldr	r3, [sp, #8]
 800437c:	4553      	cmp	r3, sl
 800437e:	db77      	blt.n	8004470 <DrawRoundedRect+0x1a8>
        int h = (int)sqrt(radius * radius - i * i); // Height of the quarter circle at this point
 8004380:	9b02      	ldr	r3, [sp, #8]
 8004382:	fb03 f003 	mul.w	r0, r3, r3
 8004386:	fb0a 001a 	mls	r0, sl, sl, r0
 800438a:	f7fc f8d3 	bl	8000534 <__aeabi_i2d>
 800438e:	ec41 0b10 	vmov	d0, r0, r1
 8004392:	f00b fa5d 	bl	800f850 <sqrt>
 8004396:	ec51 0b10 	vmov	r0, r1, d0
 800439a:	f7fc fbe5 	bl	8000b68 <__aeabi_d2iz>

        // Top-left corner
        dispcolor_DrawPixel(x1 - i, y1 - h, color);
 800439e:	9a06      	ldr	r2, [sp, #24]
 80043a0:	b297      	uxth	r7, r2
 80043a2:	fa1f f58a 	uxth.w	r5, sl
 80043a6:	1b53      	subs	r3, r2, r5
 80043a8:	b21a      	sxth	r2, r3
 80043aa:	4613      	mov	r3, r2
 80043ac:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80043b0:	b284      	uxth	r4, r0
 80043b2:	eba6 0804 	sub.w	r8, r6, r4
 80043b6:	fa1f f288 	uxth.w	r2, r8
 80043ba:	9205      	str	r2, [sp, #20]
 80043bc:	fa0f f888 	sxth.w	r8, r8
 80043c0:	465a      	mov	r2, fp
 80043c2:	4641      	mov	r1, r8
 80043c4:	9303      	str	r3, [sp, #12]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc fdb6 	bl	8000f38 <dispcolor_DrawPixel>
        dispcolor_DrawPixel(x1 - h, y1 - i, color);
 80043cc:	1b3f      	subs	r7, r7, r4
 80043ce:	b23f      	sxth	r7, r7
 80043d0:	1b76      	subs	r6, r6, r5
 80043d2:	b236      	sxth	r6, r6
 80043d4:	465a      	mov	r2, fp
 80043d6:	4631      	mov	r1, r6
 80043d8:	9704      	str	r7, [sp, #16]
 80043da:	4638      	mov	r0, r7
 80043dc:	f7fc fdac 	bl	8000f38 <dispcolor_DrawPixel>

        // Top-right corner
        dispcolor_DrawPixel(x2 + i, y1 - h, color);
 80043e0:	f8bd 7024 	ldrh.w	r7, [sp, #36]	@ 0x24
 80043e4:	eb05 0907 	add.w	r9, r5, r7
 80043e8:	fa0f f989 	sxth.w	r9, r9
 80043ec:	465a      	mov	r2, fp
 80043ee:	4641      	mov	r1, r8
 80043f0:	4648      	mov	r0, r9
 80043f2:	f7fc fda1 	bl	8000f38 <dispcolor_DrawPixel>
        dispcolor_DrawPixel(x2 + h, y1 - i, color);
 80043f6:	4427      	add	r7, r4
 80043f8:	b23f      	sxth	r7, r7
 80043fa:	465a      	mov	r2, fp
 80043fc:	4631      	mov	r1, r6
 80043fe:	4638      	mov	r0, r7
 8004400:	f7fc fd9a 	bl	8000f38 <dispcolor_DrawPixel>

        // Bottom-left corner
        dispcolor_DrawPixel(x1 - i, y2 + h, color);
 8004404:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8004408:	4434      	add	r4, r6
 800440a:	fa1f f884 	uxth.w	r8, r4
 800440e:	b224      	sxth	r4, r4
 8004410:	465a      	mov	r2, fp
 8004412:	4621      	mov	r1, r4
 8004414:	9803      	ldr	r0, [sp, #12]
 8004416:	f7fc fd8f 	bl	8000f38 <dispcolor_DrawPixel>
        dispcolor_DrawPixel(x1 - h, y2 + i, color);
 800441a:	4435      	add	r5, r6
 800441c:	b22d      	sxth	r5, r5
 800441e:	465a      	mov	r2, fp
 8004420:	4629      	mov	r1, r5
 8004422:	9804      	ldr	r0, [sp, #16]
 8004424:	f7fc fd88 	bl	8000f38 <dispcolor_DrawPixel>

        // Bottom-right corner
        dispcolor_DrawPixel(x2 + i, y2 + h, color);
 8004428:	465a      	mov	r2, fp
 800442a:	4621      	mov	r1, r4
 800442c:	4648      	mov	r0, r9
 800442e:	f7fc fd83 	bl	8000f38 <dispcolor_DrawPixel>
        dispcolor_DrawPixel(x2 + h, y2 + i, color);
 8004432:	465a      	mov	r2, fp
 8004434:	4629      	mov	r1, r5
 8004436:	4638      	mov	r0, r7
 8004438:	f7fc fd7e 	bl	8000f38 <dispcolor_DrawPixel>
		if(i < radius){
 800443c:	9b02      	ldr	r3, [sp, #8]
 800443e:	4553      	cmp	r3, sl
 8004440:	dd99      	ble.n	8004376 <DrawRoundedRect+0xae>
			dispcolor_DrawLine(x1 - i, y1 - h+1, x1 - i, y2 + h-1, BLACK);
 8004442:	9c05      	ldr	r4, [sp, #20]
 8004444:	3401      	adds	r4, #1
 8004446:	b224      	sxth	r4, r4
 8004448:	f108 38ff 	add.w	r8, r8, #4294967295
 800444c:	fa0f f888 	sxth.w	r8, r8
 8004450:	2500      	movs	r5, #0
 8004452:	9500      	str	r5, [sp, #0]
 8004454:	4643      	mov	r3, r8
 8004456:	9a03      	ldr	r2, [sp, #12]
 8004458:	4621      	mov	r1, r4
 800445a:	4610      	mov	r0, r2
 800445c:	f7fc fe92 	bl	8001184 <dispcolor_DrawLine>
			dispcolor_DrawLine(x2 + i, y1-h+1, x2 + i, y2 + h -1, BLACK);
 8004460:	9500      	str	r5, [sp, #0]
 8004462:	4643      	mov	r3, r8
 8004464:	464a      	mov	r2, r9
 8004466:	4621      	mov	r1, r4
 8004468:	4648      	mov	r0, r9
 800446a:	f7fc fe8b 	bl	8001184 <dispcolor_DrawLine>
 800446e:	e782      	b.n	8004376 <DrawRoundedRect+0xae>
		}
    }
}
 8004470:	b00b      	add	sp, #44	@ 0x2c
 8004472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004478 <Update_Messages>:
void Update_Messages(){
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447a:	b087      	sub	sp, #28
	for (uint8_t i =0; i < 5; i++){
 800447c:	2400      	movs	r4, #0
 800447e:	e03a      	b.n	80044f6 <Update_Messages+0x7e>
				notifications[i].isActive = false;
 8004480:	4b41      	ldr	r3, [pc, #260]	@ (8004588 <Update_Messages+0x110>)
 8004482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004486:	2200      	movs	r2, #0
 8004488:	711a      	strb	r2, [r3, #4]
				continue;
 800448a:	e032      	b.n	80044f2 <Update_Messages+0x7a>
			notifications[i].tick++;
 800448c:	4e3e      	ldr	r6, [pc, #248]	@ (8004588 <Update_Messages+0x110>)
 800448e:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
 8004492:	3301      	adds	r3, #1
 8004494:	80fb      	strh	r3, [r7, #6]
			DrawRoundedRect(60, notifications[i].y, 120, 60, 10, WHITE);
 8004496:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	230a      	movs	r3, #10
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	233c      	movs	r3, #60	@ 0x3c
 80044a2:	2278      	movs	r2, #120	@ 0x78
 80044a4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff0d 	bl	80042c8 <DrawRoundedRect>
			dispcolor_FillCircle(70, notifications[i].y+10, 3, ORANGE);
 80044ae:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80044b2:	b289      	uxth	r1, r1
 80044b4:	310a      	adds	r1, #10
 80044b6:	f64f 53a0 	movw	r3, #64928	@ 0xfda0
 80044ba:	2203      	movs	r2, #3
 80044bc:	b209      	sxth	r1, r1
 80044be:	2046      	movs	r0, #70	@ 0x46
 80044c0:	f7fc fe99 	bl	80011f6 <dispcolor_FillCircle>
			if(strlen(notifications[i].message)<13){
 80044c4:	f856 6035 	ldr.w	r6, [r6, r5, lsl #3]
 80044c8:	4630      	mov	r0, r6
 80044ca:	f7fb fe89 	bl	80001e0 <strlen>
 80044ce:	280c      	cmp	r0, #12
 80044d0:	d856      	bhi.n	8004580 <Update_Messages+0x108>
				dispcolor_DrawString(120-(strlen(notifications[i].message)*4), notifications[i].y+22, FONTID_16F, notifications[i].message, WHITE);
 80044d2:	f1c0 001e 	rsb	r0, r0, #30
 80044d6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80044da:	b289      	uxth	r1, r1
 80044dc:	3116      	adds	r1, #22
 80044de:	0080      	lsls	r0, r0, #2
 80044e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4633      	mov	r3, r6
 80044e8:	2201      	movs	r2, #1
 80044ea:	b209      	sxth	r1, r1
 80044ec:	b200      	sxth	r0, r0
 80044ee:	f7fc ff33 	bl	8001358 <dispcolor_DrawString>
	for (uint8_t i =0; i < 5; i++){
 80044f2:	3401      	adds	r4, #1
 80044f4:	b2e4      	uxtb	r4, r4
 80044f6:	2c04      	cmp	r4, #4
 80044f8:	d844      	bhi.n	8004584 <Update_Messages+0x10c>
		if(notifications[i].isActive){
 80044fa:	4625      	mov	r5, r4
 80044fc:	4b22      	ldr	r3, [pc, #136]	@ (8004588 <Update_Messages+0x110>)
 80044fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004502:	791b      	ldrb	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f4      	beq.n	80044f2 <Update_Messages+0x7a>
			if(notifications[i].tick > max_tick){
 8004508:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <Update_Messages+0x110>)
 800450a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800450e:	88db      	ldrh	r3, [r3, #6]
 8004510:	2b32      	cmp	r3, #50	@ 0x32
 8004512:	d8b5      	bhi.n	8004480 <Update_Messages+0x8>
			if(notifications[i].tick < max_tick/5){notifications[i].y += 5;}
 8004514:	2b09      	cmp	r3, #9
 8004516:	d805      	bhi.n	8004524 <Update_Messages+0xac>
 8004518:	4a1b      	ldr	r2, [pc, #108]	@ (8004588 <Update_Messages+0x110>)
 800451a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800451e:	7951      	ldrb	r1, [r2, #5]
 8004520:	3105      	adds	r1, #5
 8004522:	7151      	strb	r1, [r2, #5]
			if(notifications[i].tick > max_tick-max_tick/5){notifications[i].y -= 5;}
 8004524:	2b28      	cmp	r3, #40	@ 0x28
 8004526:	d9b1      	bls.n	800448c <Update_Messages+0x14>
 8004528:	4a17      	ldr	r2, [pc, #92]	@ (8004588 <Update_Messages+0x110>)
 800452a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800452e:	7951      	ldrb	r1, [r2, #5]
 8004530:	3905      	subs	r1, #5
 8004532:	7151      	strb	r1, [r2, #5]
 8004534:	e7aa      	b.n	800448c <Update_Messages+0x14>
					buff[j] = notifications[i].message[j];
 8004536:	5cf1      	ldrb	r1, [r6, r3]
 8004538:	f103 0218 	add.w	r2, r3, #24
 800453c:	446a      	add	r2, sp
 800453e:	f802 1c10 	strb.w	r1, [r2, #-16]
				for (uint8_t j = 0; j < 10; j++){
 8004542:	3301      	adds	r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b09      	cmp	r3, #9
 8004548:	d9f5      	bls.n	8004536 <Update_Messages+0xbe>
				strcpy(buff + 10, "...");
 800454a:	4b10      	ldr	r3, [pc, #64]	@ (800458c <Update_Messages+0x114>)
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f8cd 0012 	str.w	r0, [sp, #18]
				dispcolor_DrawString(120-(strlen(notifications[i].message)*4), notifications[i].y+22, FONTID_16F, buff, WHITE);
 8004552:	4630      	mov	r0, r6
 8004554:	f7fb fe44 	bl	80001e0 <strlen>
 8004558:	f1c0 001e 	rsb	r0, r0, #30
 800455c:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <Update_Messages+0x110>)
 800455e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004562:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8004566:	b289      	uxth	r1, r1
 8004568:	3116      	adds	r1, #22
 800456a:	0080      	lsls	r0, r0, #2
 800456c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	ab02      	add	r3, sp, #8
 8004574:	2201      	movs	r2, #1
 8004576:	b209      	sxth	r1, r1
 8004578:	b200      	sxth	r0, r0
 800457a:	f7fc feed 	bl	8001358 <dispcolor_DrawString>
 800457e:	e7b8      	b.n	80044f2 <Update_Messages+0x7a>
				for (uint8_t j = 0; j < 10; j++){
 8004580:	2300      	movs	r3, #0
 8004582:	e7e0      	b.n	8004546 <Update_Messages+0xce>
}
 8004584:	b007      	add	sp, #28
 8004586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004588:	2001c778 	.word	0x2001c778
 800458c:	08014d50 	.word	0x08014d50

08004590 <Dispaly_Data>:
void Dispaly_Data(Device *dev) {
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	ed2d 8b04 	vpush	{d8-d9}
 8004598:	b089      	sub	sp, #36	@ 0x24
	double data = dev->currentValue;
 800459a:	ed90 8b04 	vldr	d8, [r0, #16]
	double set = dev->setValue;
 800459e:	ed90 9b06 	vldr	d9, [r0, #24]
	bool isOn = dev->isDevOn;
 80045a2:	f890 b030 	ldrb.w	fp, [r0, #48]	@ 0x30
	double minV = dev->minValue;
 80045a6:	e9d0 8908 	ldrd	r8, r9, [r0, #32]
	double maxV = dev->maxValue;
 80045aa:	ed90 7b0a 	vldr	d7, [r0, #40]	@ 0x28
 80045ae:	ed8d 7b02 	vstr	d7, [sp, #8]
	char symbol = dev->symbol;
 80045b2:	f890 a047 	ldrb.w	sl, [r0, #71]	@ 0x47
	uint8_t paletteType = dev->paletteType;
 80045b6:	f890 6032 	ldrb.w	r6, [r0, #50]	@ 0x32
	uint8_t deviceType = dev->deviceMode;
 80045ba:	7944      	ldrb	r4, [r0, #5]
	bool displayMode = dev->deviceDisplayMode;
 80045bc:	f890 5031 	ldrb.w	r5, [r0, #49]	@ 0x31
	if (!PaletteReady || paletteType != OldPalette) {
 80045c0:	4bb5      	ldr	r3, [pc, #724]	@ (8004898 <Dispaly_Data+0x308>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b11b      	cbz	r3, 80045ce <Dispaly_Data+0x3e>
 80045c6:	4bb5      	ldr	r3, [pc, #724]	@ (800489c <Dispaly_Data+0x30c>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	42b3      	cmp	r3, r6
 80045cc:	d009      	beq.n	80045e2 <Dispaly_Data+0x52>
		GetBlueRedPalette(PALETTE_SIZE, Palette, paletteType);
 80045ce:	4632      	mov	r2, r6
 80045d0:	49b3      	ldr	r1, [pc, #716]	@ (80048a0 <Dispaly_Data+0x310>)
 80045d2:	2043      	movs	r0, #67	@ 0x43
 80045d4:	f7ff fcf0 	bl	8003fb8 <GetBlueRedPalette>
		PaletteReady = 1;
 80045d8:	4baf      	ldr	r3, [pc, #700]	@ (8004898 <Dispaly_Data+0x308>)
 80045da:	2201      	movs	r2, #1
 80045dc:	701a      	strb	r2, [r3, #0]
		OldPalette = paletteType;
 80045de:	4baf      	ldr	r3, [pc, #700]	@ (800489c <Dispaly_Data+0x30c>)
 80045e0:	701e      	strb	r6, [r3, #0]
	if (data>maxV||data<minV){
 80045e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045e6:	ec51 0b18 	vmov	r0, r1, d8
 80045ea:	f7fc fa9d 	bl	8000b28 <__aeabi_dcmpgt>
 80045ee:	b930      	cbnz	r0, 80045fe <Dispaly_Data+0x6e>
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	ec51 0b18 	vmov	r0, r1, d8
 80045f8:	f7fc fa78 	bl	8000aec <__aeabi_dcmplt>
 80045fc:	b1f0      	cbz	r0, 800463c <Dispaly_Data+0xac>
		GetBlueRedPalette(PALETTE_SIZE, Palette, ERROR_PALETTE);
 80045fe:	2202      	movs	r2, #2
 8004600:	49a7      	ldr	r1, [pc, #668]	@ (80048a0 <Dispaly_Data+0x310>)
 8004602:	2043      	movs	r0, #67	@ 0x43
 8004604:	f7ff fcd8 	bl	8003fb8 <GetBlueRedPalette>
		PaletteReady = 1;
 8004608:	4ba3      	ldr	r3, [pc, #652]	@ (8004898 <Dispaly_Data+0x308>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
		OldPalette = paletteType;
 800460e:	4ba3      	ldr	r3, [pc, #652]	@ (800489c <Dispaly_Data+0x30c>)
 8004610:	701e      	strb	r6, [r3, #0]
		if(data>maxV){
 8004612:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004616:	4632      	mov	r2, r6
 8004618:	463b      	mov	r3, r7
 800461a:	ec51 0b18 	vmov	r0, r1, d8
 800461e:	f7fc fa83 	bl	8000b28 <__aeabi_dcmpgt>
 8004622:	b128      	cbz	r0, 8004630 <Dispaly_Data+0xa0>
			drawData = maxV;
 8004624:	4630      	mov	r0, r6
 8004626:	4639      	mov	r1, r7
 8004628:	f7fc fa9e 	bl	8000b68 <__aeabi_d2iz>
 800462c:	b206      	sxth	r6, r0
 800462e:	e00d      	b.n	800464c <Dispaly_Data+0xbc>
			drawData = minV;
 8004630:	4640      	mov	r0, r8
 8004632:	4649      	mov	r1, r9
 8004634:	f7fc fa98 	bl	8000b68 <__aeabi_d2iz>
 8004638:	b206      	sxth	r6, r0
 800463a:	e007      	b.n	800464c <Dispaly_Data+0xbc>
		PaletteReady = 0;
 800463c:	4b96      	ldr	r3, [pc, #600]	@ (8004898 <Dispaly_Data+0x308>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
		drawData = data;
 8004642:	ec51 0b18 	vmov	r0, r1, d8
 8004646:	f7fc fa8f 	bl	8000b68 <__aeabi_d2iz>
 800464a:	b206      	sxth	r6, r0
	HAL_Delay(30);
 800464c:	201e      	movs	r0, #30
 800464e:	f001 fda7 	bl	80061a0 <HAL_Delay>
	dispcolor_FillScreen(bgColor);
 8004652:	2000      	movs	r0, #0
 8004654:	f7fc fd6a 	bl	800112c <dispcolor_FillScreen>
	if (deviceType == TYPE_SET_ONLY || displayMode == MODE_EDIT){
 8004658:	2c01      	cmp	r4, #1
 800465a:	d000      	beq.n	800465e <Dispaly_Data+0xce>
 800465c:	b145      	cbz	r5, 8004670 <Dispaly_Data+0xe0>
		drawData = set; 
 800465e:	ec51 0b19 	vmov	r0, r1, d9
 8004662:	f7fc fa81 	bl	8000b68 <__aeabi_d2iz>
 8004666:	b206      	sxth	r6, r0
		data = set;
 8004668:	eeb0 8a49 	vmov.f32	s16, s18
 800466c:	eef0 8a69 	vmov.f32	s17, s19
	int16_t position = (drawData - minV) * (MAX_ANGLE - MIN_ANGLE) / (maxV - minV) + MIN_ANGLE;
 8004670:	4630      	mov	r0, r6
 8004672:	f7fb ff5f 	bl	8000534 <__aeabi_i2d>
 8004676:	4642      	mov	r2, r8
 8004678:	464b      	mov	r3, r9
 800467a:	f7fb fe0d 	bl	8000298 <__aeabi_dsub>
 800467e:	a382      	add	r3, pc, #520	@ (adr r3, 8004888 <Dispaly_Data+0x2f8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb ffc0 	bl	8000608 <__aeabi_dmul>
 8004688:	4606      	mov	r6, r0
 800468a:	460f      	mov	r7, r1
 800468c:	4642      	mov	r2, r8
 800468e:	464b      	mov	r3, r9
 8004690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004694:	f7fb fe00 	bl	8000298 <__aeabi_dsub>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4630      	mov	r0, r6
 800469e:	4639      	mov	r1, r7
 80046a0:	f7fc f8dc 	bl	800085c <__aeabi_ddiv>
 80046a4:	2200      	movs	r2, #0
 80046a6:	4b7f      	ldr	r3, [pc, #508]	@ (80048a4 <Dispaly_Data+0x314>)
 80046a8:	f7fb fdf6 	bl	8000298 <__aeabi_dsub>
 80046ac:	f7fc fa5c 	bl	8000b68 <__aeabi_d2iz>
 80046b0:	b206      	sxth	r6, r0
	if (deviceType != TYPE_SET_ONLY){
 80046b2:	2c01      	cmp	r4, #1
 80046b4:	d022      	beq.n	80046fc <Dispaly_Data+0x16c>
		gcvt(data, 3, b);
 80046b6:	a905      	add	r1, sp, #20
 80046b8:	2003      	movs	r0, #3
 80046ba:	eeb0 0a48 	vmov.f32	s0, s16
 80046be:	eef0 0a68 	vmov.f32	s1, s17
 80046c2:	f007 fa4b 	bl	800bb5c <gcvt>
		sprintf(buf, "%s %c", b, symbol);
 80046c6:	4653      	mov	r3, sl
 80046c8:	aa05      	add	r2, sp, #20
 80046ca:	4977      	ldr	r1, [pc, #476]	@ (80048a8 <Dispaly_Data+0x318>)
 80046cc:	a806      	add	r0, sp, #24
 80046ce:	f007 fb69 	bl	800bda4 <siprintf>
		if(displayMode == MODE_NORMAL){
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	d136      	bne.n	8004744 <Dispaly_Data+0x1b4>
			dispcolor_DrawString(120-(strlen(buf)*6), 160, FONTID_32F, buf, textColor);		
 80046d6:	a806      	add	r0, sp, #24
 80046d8:	f7fb fd82 	bl	80001e0 <strlen>
 80046dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80046e0:	0040      	lsls	r0, r0, #1
 80046e2:	f1c0 0078 	rsb	r0, r0, #120	@ 0x78
 80046e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	ab06      	add	r3, sp, #24
 80046ee:	2203      	movs	r2, #3
 80046f0:	21a0      	movs	r1, #160	@ 0xa0
 80046f2:	b200      	sxth	r0, r0
 80046f4:	f7fc fe30 	bl	8001358 <dispcolor_DrawString>
	if (deviceType != TYPE_TEL_ONLY){
 80046f8:	2c02      	cmp	r4, #2
 80046fa:	d020      	beq.n	800473e <Dispaly_Data+0x1ae>
		gcvt(set, 3, b);
 80046fc:	a905      	add	r1, sp, #20
 80046fe:	2003      	movs	r0, #3
 8004700:	eeb0 0a49 	vmov.f32	s0, s18
 8004704:	eef0 0a69 	vmov.f32	s1, s19
 8004708:	f007 fa28 	bl	800bb5c <gcvt>
		sprintf(buf, "%s %c", b, symbol);
 800470c:	4653      	mov	r3, sl
 800470e:	aa05      	add	r2, sp, #20
 8004710:	4965      	ldr	r1, [pc, #404]	@ (80048a8 <Dispaly_Data+0x318>)
 8004712:	a806      	add	r0, sp, #24
 8004714:	f007 fb46 	bl	800bda4 <siprintf>
		if (displayMode == MODE_NORMAL || HAL_GetTick() - edit_tmr < 500){
 8004718:	2d00      	cmp	r5, #0
 800471a:	d142      	bne.n	80047a2 <Dispaly_Data+0x212>
			if (deviceType == TYPE_SET_ONLY){
 800471c:	2c01      	cmp	r4, #1
 800471e:	d056      	beq.n	80047ce <Dispaly_Data+0x23e>
				dispcolor_DrawString(120-(strlen(buf)*4), 200, FONTID_24F, buf, textColor);
 8004720:	a806      	add	r0, sp, #24
 8004722:	f7fb fd5d 	bl	80001e0 <strlen>
 8004726:	f1c0 001e 	rsb	r0, r0, #30
 800472a:	0080      	lsls	r0, r0, #2
 800472c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	ab06      	add	r3, sp, #24
 8004734:	2202      	movs	r2, #2
 8004736:	21c8      	movs	r1, #200	@ 0xc8
 8004738:	b200      	sxth	r0, r0
 800473a:	f7fc fe0d 	bl	8001358 <dispcolor_DrawString>
		data = set;
 800473e:	f06f 04df 	mvn.w	r4, #223	@ 0xdf
 8004742:	e09b      	b.n	800487c <Dispaly_Data+0x2ec>
			if(HAL_GetTick() - edit_tmr > 500 && HAL_GetTick() - edit_tmr < 1000){
 8004744:	f001 fd26 	bl	8006194 <HAL_GetTick>
 8004748:	4b58      	ldr	r3, [pc, #352]	@ (80048ac <Dispaly_Data+0x31c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	1ac3      	subs	r3, r0, r3
 800474e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004752:	d80c      	bhi.n	800476e <Dispaly_Data+0x1de>
			if (HAL_GetTick() - edit_tmr > 1000){edit_tmr = HAL_GetTick();}	
 8004754:	f001 fd1e 	bl	8006194 <HAL_GetTick>
 8004758:	4b54      	ldr	r3, [pc, #336]	@ (80048ac <Dispaly_Data+0x31c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1ac3      	subs	r3, r0, r3
 800475e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004762:	d9c9      	bls.n	80046f8 <Dispaly_Data+0x168>
 8004764:	f001 fd16 	bl	8006194 <HAL_GetTick>
 8004768:	4b50      	ldr	r3, [pc, #320]	@ (80048ac <Dispaly_Data+0x31c>)
 800476a:	6018      	str	r0, [r3, #0]
 800476c:	e7c4      	b.n	80046f8 <Dispaly_Data+0x168>
			if(HAL_GetTick() - edit_tmr > 500 && HAL_GetTick() - edit_tmr < 1000){
 800476e:	f001 fd11 	bl	8006194 <HAL_GetTick>
 8004772:	4b4e      	ldr	r3, [pc, #312]	@ (80048ac <Dispaly_Data+0x31c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1ac3      	subs	r3, r0, r3
 8004778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800477c:	d2ea      	bcs.n	8004754 <Dispaly_Data+0x1c4>
				dispcolor_DrawString(120-(strlen(buf)*6), 160, FONTID_32F, buf, textColor);		
 800477e:	a806      	add	r0, sp, #24
 8004780:	f7fb fd2e 	bl	80001e0 <strlen>
 8004784:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004788:	0040      	lsls	r0, r0, #1
 800478a:	f1c0 0078 	rsb	r0, r0, #120	@ 0x78
 800478e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	ab06      	add	r3, sp, #24
 8004796:	2203      	movs	r2, #3
 8004798:	21a0      	movs	r1, #160	@ 0xa0
 800479a:	b200      	sxth	r0, r0
 800479c:	f7fc fddc 	bl	8001358 <dispcolor_DrawString>
 80047a0:	e7d8      	b.n	8004754 <Dispaly_Data+0x1c4>
		if (displayMode == MODE_NORMAL || HAL_GetTick() - edit_tmr < 500){
 80047a2:	f001 fcf7 	bl	8006194 <HAL_GetTick>
 80047a6:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <Dispaly_Data+0x31c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	1ac3      	subs	r3, r0, r3
 80047ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80047b0:	d3b4      	bcc.n	800471c <Dispaly_Data+0x18c>
			if (HAL_GetTick() - edit_tmr > 750){
 80047b2:	f001 fcef 	bl	8006194 <HAL_GetTick>
 80047b6:	4b3d      	ldr	r3, [pc, #244]	@ (80048ac <Dispaly_Data+0x31c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	1ac3      	subs	r3, r0, r3
 80047bc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d9bc      	bls.n	800473e <Dispaly_Data+0x1ae>
				edit_tmr = HAL_GetTick();
 80047c4:	f001 fce6 	bl	8006194 <HAL_GetTick>
 80047c8:	4b38      	ldr	r3, [pc, #224]	@ (80048ac <Dispaly_Data+0x31c>)
 80047ca:	6018      	str	r0, [r3, #0]
 80047cc:	e7b7      	b.n	800473e <Dispaly_Data+0x1ae>
				dispcolor_DrawString(120-(strlen(buf)*6), 200, FONTID_32F, buf, textColor);
 80047ce:	a806      	add	r0, sp, #24
 80047d0:	f7fb fd06 	bl	80001e0 <strlen>
 80047d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80047d8:	0040      	lsls	r0, r0, #1
 80047da:	f1c0 0078 	rsb	r0, r0, #120	@ 0x78
 80047de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	ab06      	add	r3, sp, #24
 80047e6:	2203      	movs	r2, #3
 80047e8:	21c8      	movs	r1, #200	@ 0xc8
 80047ea:	b200      	sxth	r0, r0
 80047ec:	f7fc fdb4 	bl	8001358 <dispcolor_DrawString>
 80047f0:	e7a5      	b.n	800473e <Dispaly_Data+0x1ae>
		float angleRad = (float) angle * PI / 180;
 80047f2:	ee07 4a90 	vmov	s15, r4
 80047f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047fa:	ee17 0a90 	vmov	r0, s15
 80047fe:	f7fb feab 	bl	8000558 <__aeabi_f2d>
 8004802:	a323      	add	r3, pc, #140	@ (adr r3, 8004890 <Dispaly_Data+0x300>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fb fefe 	bl	8000608 <__aeabi_dmul>
 800480c:	2200      	movs	r2, #0
 800480e:	4b28      	ldr	r3, [pc, #160]	@ (80048b0 <Dispaly_Data+0x320>)
 8004810:	f7fc f824 	bl	800085c <__aeabi_ddiv>
 8004814:	f7fc f9f0 	bl	8000bf8 <__aeabi_d2f>
		int xMain = cos(angleRad) * mainRadius + xC;
 8004818:	f7fb fe9e 	bl	8000558 <__aeabi_f2d>
 800481c:	ec41 0b18 	vmov	d8, r0, r1
 8004820:	eeb0 0a48 	vmov.f32	s0, s16
 8004824:	eef0 0a68 	vmov.f32	s1, s17
 8004828:	f00b f846 	bl	800f8b8 <cos>
 800482c:	ec51 0b10 	vmov	r0, r1, d0
 8004830:	2200      	movs	r2, #0
 8004832:	4b20      	ldr	r3, [pc, #128]	@ (80048b4 <Dispaly_Data+0x324>)
 8004834:	f7fb fee8 	bl	8000608 <__aeabi_dmul>
 8004838:	2200      	movs	r2, #0
 800483a:	4b1f      	ldr	r3, [pc, #124]	@ (80048b8 <Dispaly_Data+0x328>)
 800483c:	f7fb fd2e 	bl	800029c <__adddf3>
 8004840:	f7fc f992 	bl	8000b68 <__aeabi_d2iz>
 8004844:	4605      	mov	r5, r0
		int yMain = sin(angleRad) * mainRadius + yC;
 8004846:	eeb0 0a48 	vmov.f32	s0, s16
 800484a:	eef0 0a68 	vmov.f32	s1, s17
 800484e:	f00b f877 	bl	800f940 <sin>
 8004852:	ec51 0b10 	vmov	r0, r1, d0
 8004856:	2200      	movs	r2, #0
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <Dispaly_Data+0x324>)
 800485a:	f7fb fed5 	bl	8000608 <__aeabi_dmul>
 800485e:	2200      	movs	r2, #0
 8004860:	4b15      	ldr	r3, [pc, #84]	@ (80048b8 <Dispaly_Data+0x328>)
 8004862:	f7fb fd1b 	bl	800029c <__adddf3>
 8004866:	f7fc f97f 	bl	8000b68 <__aeabi_d2iz>
		dispcolor_FillCircle(xMain, yMain, 20, RGB565(17, 17, 17));
 800486a:	f241 0382 	movw	r3, #4226	@ 0x1082
 800486e:	2214      	movs	r2, #20
 8004870:	b201      	sxth	r1, r0
 8004872:	b228      	sxth	r0, r5
 8004874:	f7fc fcbf 	bl	80011f6 <dispcolor_FillCircle>
	for (int16_t angle = MIN_ANGLE; angle < MAX_ANGLE; idx++, angle += 4) {
 8004878:	3404      	adds	r4, #4
 800487a:	b224      	sxth	r4, r4
 800487c:	2c2b      	cmp	r4, #43	@ 0x2b
 800487e:	ddb8      	ble.n	80047f2 <Dispaly_Data+0x262>
	for (int16_t angle = MIN_ANGLE; angle < position; idx++, angle += 4) {
 8004880:	f06f 04df 	mvn.w	r4, #223	@ 0xdf
	idx = 0;
 8004884:	2500      	movs	r5, #0
 8004886:	e070      	b.n	800496a <Dispaly_Data+0x3da>
 8004888:	00000000 	.word	0x00000000
 800488c:	4070c000 	.word	0x4070c000
 8004890:	53c8d4f1 	.word	0x53c8d4f1
 8004894:	400921fb 	.word	0x400921fb
 8004898:	2001c86e 	.word	0x2001c86e
 800489c:	2001c86d 	.word	0x2001c86d
 80048a0:	2001c7a4 	.word	0x2001c7a4
 80048a4:	406c0000 	.word	0x406c0000
 80048a8:	08014d54 	.word	0x08014d54
 80048ac:	2001c7a0 	.word	0x2001c7a0
 80048b0:	40668000 	.word	0x40668000
 80048b4:	40594000 	.word	0x40594000
 80048b8:	405e0000 	.word	0x405e0000
		float angleRad = (float) angle * PI / 180;
 80048bc:	ee07 4a90 	vmov	s15, r4
 80048c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c4:	ee17 0a90 	vmov	r0, s15
 80048c8:	f7fb fe46 	bl	8000558 <__aeabi_f2d>
 80048cc:	a33e      	add	r3, pc, #248	@ (adr r3, 80049c8 <Dispaly_Data+0x438>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fb fe99 	bl	8000608 <__aeabi_dmul>
 80048d6:	2200      	movs	r2, #0
 80048d8:	4b35      	ldr	r3, [pc, #212]	@ (80049b0 <Dispaly_Data+0x420>)
 80048da:	f7fb ffbf 	bl	800085c <__aeabi_ddiv>
 80048de:	f7fc f98b 	bl	8000bf8 <__aeabi_d2f>
		int xMain = cos(angleRad) * mainRadius + xC;
 80048e2:	f7fb fe39 	bl	8000558 <__aeabi_f2d>
 80048e6:	ec41 0b18 	vmov	d8, r0, r1
 80048ea:	eeb0 0a48 	vmov.f32	s0, s16
 80048ee:	eef0 0a68 	vmov.f32	s1, s17
 80048f2:	f00a ffe1 	bl	800f8b8 <cos>
 80048f6:	ec51 0b10 	vmov	r0, r1, d0
 80048fa:	2200      	movs	r2, #0
 80048fc:	4b2d      	ldr	r3, [pc, #180]	@ (80049b4 <Dispaly_Data+0x424>)
 80048fe:	f7fb fe83 	bl	8000608 <__aeabi_dmul>
 8004902:	2200      	movs	r2, #0
 8004904:	4b2c      	ldr	r3, [pc, #176]	@ (80049b8 <Dispaly_Data+0x428>)
 8004906:	f7fb fcc9 	bl	800029c <__adddf3>
 800490a:	f7fc f92d 	bl	8000b68 <__aeabi_d2iz>
 800490e:	4607      	mov	r7, r0
		int yMain = sin(angleRad) * mainRadius + yC;
 8004910:	eeb0 0a48 	vmov.f32	s0, s16
 8004914:	eef0 0a68 	vmov.f32	s1, s17
 8004918:	f00b f812 	bl	800f940 <sin>
 800491c:	ec51 0b10 	vmov	r0, r1, d0
 8004920:	2200      	movs	r2, #0
 8004922:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <Dispaly_Data+0x424>)
 8004924:	f7fb fe70 	bl	8000608 <__aeabi_dmul>
 8004928:	2200      	movs	r2, #0
 800492a:	4b23      	ldr	r3, [pc, #140]	@ (80049b8 <Dispaly_Data+0x428>)
 800492c:	f7fb fcb6 	bl	800029c <__adddf3>
 8004930:	f7fc f91a 	bl	8000b68 <__aeabi_d2iz>
				RGB565(Palette[idx].r, Palette[idx].g, Palette[idx].b));
 8004934:	4a21      	ldr	r2, [pc, #132]	@ (80049bc <Dispaly_Data+0x42c>)
 8004936:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800493a:	18d1      	adds	r1, r2, r3
 800493c:	5cd3      	ldrb	r3, [r2, r3]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8004944:	b21b      	sxth	r3, r3
 8004946:	784a      	ldrb	r2, [r1, #1]
 8004948:	00d2      	lsls	r2, r2, #3
 800494a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800494e:	4313      	orrs	r3, r2
 8004950:	788a      	ldrb	r2, [r1, #2]
 8004952:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
		dispcolor_FillCircle(xMain, yMain, 20,
 8004956:	b29b      	uxth	r3, r3
 8004958:	2214      	movs	r2, #20
 800495a:	b201      	sxth	r1, r0
 800495c:	b238      	sxth	r0, r7
 800495e:	f7fc fc4a 	bl	80011f6 <dispcolor_FillCircle>
	for (int16_t angle = MIN_ANGLE; angle < position; idx++, angle += 4) {
 8004962:	3501      	adds	r5, #1
 8004964:	b2ad      	uxth	r5, r5
 8004966:	3404      	adds	r4, #4
 8004968:	b224      	sxth	r4, r4
 800496a:	42b4      	cmp	r4, r6
 800496c:	dba6      	blt.n	80048bc <Dispaly_Data+0x32c>
	if (!isOn){
 800496e:	f1bb 0f00 	cmp.w	fp, #0
 8004972:	d112      	bne.n	800499a <Dispaly_Data+0x40a>
		Draw_BMP(78, 78, 84, 84, bitmap_off_84x84, 1);
 8004974:	2301      	movs	r3, #1
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <Dispaly_Data+0x430>)
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2354      	movs	r3, #84	@ 0x54
 800497e:	461a      	mov	r2, r3
 8004980:	214e      	movs	r1, #78	@ 0x4e
 8004982:	4608      	mov	r0, r1
 8004984:	f7ff fbaa 	bl	80040dc <Draw_BMP>
	Update_Messages();
 8004988:	f7ff fd76 	bl	8004478 <Update_Messages>
	dispcolor_Update();
 800498c:	f7fc fad0 	bl	8000f30 <dispcolor_Update>
}
 8004990:	b009      	add	sp, #36	@ 0x24
 8004992:	ecbd 8b04 	vpop	{d8-d9}
 8004996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Draw_BMP(78, 78, 84, 84, bitmap_on_84x84, 1);
 800499a:	2301      	movs	r3, #1
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <Dispaly_Data+0x434>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2354      	movs	r3, #84	@ 0x54
 80049a4:	461a      	mov	r2, r3
 80049a6:	214e      	movs	r1, #78	@ 0x4e
 80049a8:	4608      	mov	r0, r1
 80049aa:	f7ff fb97 	bl	80040dc <Draw_BMP>
 80049ae:	e7eb      	b.n	8004988 <Dispaly_Data+0x3f8>
 80049b0:	40668000 	.word	0x40668000
 80049b4:	40594000 	.word	0x40594000
 80049b8:	405e0000 	.word	0x405e0000
 80049bc:	2001c7a4 	.word	0x2001c7a4
 80049c0:	0801bf6c 	.word	0x0801bf6c
 80049c4:	0801f68c 	.word	0x0801f68c
 80049c8:	53c8d4f1 	.word	0x53c8d4f1
 80049cc:	400921fb 	.word	0x400921fb

080049d0 <Draw_Main_Screen>:
void Draw_Main_Screen(){
 80049d0:	b510      	push	{r4, lr}
 80049d2:	b08a      	sub	sp, #40	@ 0x28
	HAL_Delay(30);
 80049d4:	201e      	movs	r0, #30
 80049d6:	f001 fbe3 	bl	80061a0 <HAL_Delay>
	dispcolor_FillScreen(BLACK);
 80049da:	2000      	movs	r0, #0
 80049dc:	f7fc fba6 	bl	800112c <dispcolor_FillScreen>
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80049e0:	4c10      	ldr	r4, [pc, #64]	@ (8004a24 <Draw_Main_Screen+0x54>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	a903      	add	r1, sp, #12
 80049e6:	4620      	mov	r0, r4
 80049e8:	f005 f861 	bl	8009aae <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80049ec:	2200      	movs	r2, #0
 80049ee:	a902      	add	r1, sp, #8
 80049f0:	4620      	mov	r0, r4
 80049f2:	f005 f882 	bl	8009afa <HAL_RTC_GetDate>
	sprintf(time_buf, "%02d:%02d", gTime.Hours, gTime.Minutes);
 80049f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80049fa:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80049fe:	490a      	ldr	r1, [pc, #40]	@ (8004a28 <Draw_Main_Screen+0x58>)
 8004a00:	a808      	add	r0, sp, #32
 8004a02:	f007 f9cf 	bl	800bda4 <siprintf>
	dispcolor_DrawString(85, 105, FONTID_32F, time_buf, WHITE);
 8004a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	ab08      	add	r3, sp, #32
 8004a0e:	2203      	movs	r2, #3
 8004a10:	2169      	movs	r1, #105	@ 0x69
 8004a12:	2055      	movs	r0, #85	@ 0x55
 8004a14:	f7fc fca0 	bl	8001358 <dispcolor_DrawString>
	Update_Messages();
 8004a18:	f7ff fd2e 	bl	8004478 <Update_Messages>
	dispcolor_Update();
 8004a1c:	f7fc fa88 	bl	8000f30 <dispcolor_Update>
}
 8004a20:	b00a      	add	sp, #40	@ 0x28
 8004a22:	bd10      	pop	{r4, pc}
 8004a24:	2001d0dc 	.word	0x2001d0dc
 8004a28:	08014d5c 	.word	0x08014d5c

08004a2c <Display_Init>:
void Display_Init(int data, int maxV){
 8004a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	4607      	mov	r7, r0
 8004a32:	460e      	mov	r6, r1
	HAL_Delay(30);
 8004a34:	201e      	movs	r0, #30
 8004a36:	f001 fbb3 	bl	80061a0 <HAL_Delay>
	dispcolor_FillScreen(BLACK);
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f7fc fb76 	bl	800112c <dispcolor_FillScreen>
	dispcolor_DrawString(85, 105, FONTID_16F, "Device init", WHITE);
 8004a40:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8004a44:	9400      	str	r4, [sp, #0]
 8004a46:	4b19      	ldr	r3, [pc, #100]	@ (8004aac <Display_Init+0x80>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	2169      	movs	r1, #105	@ 0x69
 8004a4c:	2055      	movs	r0, #85	@ 0x55
 8004a4e:	f7fc fc83 	bl	8001358 <dispcolor_DrawString>
	uint32_t id = HAL_GetDEVID();
 8004a52:	f001 fbb9 	bl	80061c8 <HAL_GetDEVID>
 8004a56:	4602      	mov	r2, r0
	sprintf(buf, "DEV ID: %d", id);
 8004a58:	4915      	ldr	r1, [pc, #84]	@ (8004ab0 <Display_Init+0x84>)
 8004a5a:	a803      	add	r0, sp, #12
 8004a5c:	f007 f9a2 	bl	800bda4 <siprintf>
	dispcolor_DrawString(80, 175, FONTID_16F, buf, WHITE);
 8004a60:	9400      	str	r4, [sp, #0]
 8004a62:	ab03      	add	r3, sp, #12
 8004a64:	2201      	movs	r2, #1
 8004a66:	21af      	movs	r1, #175	@ 0xaf
 8004a68:	2050      	movs	r0, #80	@ 0x50
 8004a6a:	f7fc fc75 	bl	8001358 <dispcolor_DrawString>
	for (int j = 1; j < maxV; j++){
 8004a6e:	2501      	movs	r5, #1
 8004a70:	e010      	b.n	8004a94 <Display_Init+0x68>
			dispcolor_FillCircle((4*i)+(27*j), 150, 10, 0x00FF00);
 8004a72:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8004a76:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8004a7a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004a7e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8004a82:	220a      	movs	r2, #10
 8004a84:	2196      	movs	r1, #150	@ 0x96
 8004a86:	b200      	sxth	r0, r0
 8004a88:	f7fc fbb5 	bl	80011f6 <dispcolor_FillCircle>
		for (int i = 1; i < 10; i++){
 8004a8c:	3401      	adds	r4, #1
 8004a8e:	2c09      	cmp	r4, #9
 8004a90:	ddef      	ble.n	8004a72 <Display_Init+0x46>
	for (int j = 1; j < maxV; j++){
 8004a92:	3501      	adds	r5, #1
 8004a94:	42b5      	cmp	r5, r6
 8004a96:	da03      	bge.n	8004aa0 <Display_Init+0x74>
		if (j > data){break;}
 8004a98:	42bd      	cmp	r5, r7
 8004a9a:	dc01      	bgt.n	8004aa0 <Display_Init+0x74>
		for (int i = 1; i < 10; i++){
 8004a9c:	2401      	movs	r4, #1
 8004a9e:	e7f6      	b.n	8004a8e <Display_Init+0x62>
	Update_Messages();
 8004aa0:	f7ff fcea 	bl	8004478 <Update_Messages>
	dispcolor_Update();
 8004aa4:	f7fc fa44 	bl	8000f30 <dispcolor_Update>
}
 8004aa8:	b007      	add	sp, #28
 8004aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aac:	08014d68 	.word	0x08014d68
 8004ab0:	08014d74 	.word	0x08014d74
 8004ab4:	00000000 	.word	0x00000000

08004ab8 <isTouchInsideArc>:

bool isTouchInsideArc(int touchX, int touchY, int centerX, int centerY, int innerRadius, int outerRadius, float startAngle, float endAngle) {
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	ed2d 8b04 	vpush	{d8-d9}
 8004abe:	9d08      	ldr	r5, [sp, #32]
 8004ac0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
    // Convert degrees to radians for calculations
    const float DEG_TO_RAD = PI / 180.0;

    // Compute squared distance from touch point to center
    int dx = touchX - centerX;
 8004ac2:	1a80      	subs	r0, r0, r2
    int dy = touchY - centerY;
 8004ac4:	1acc      	subs	r4, r1, r3
    int distanceSquared = dx * dx + dy * dy;
 8004ac6:	fb04 f304 	mul.w	r3, r4, r4
 8004aca:	fb00 3300 	mla	r3, r0, r0, r3

    // Compute squared radii
    int innerRadiusSquared = innerRadius * innerRadius;
 8004ace:	fb05 f505 	mul.w	r5, r5, r5
    int outerRadiusSquared = outerRadius * outerRadius;
 8004ad2:	fb06 f606 	mul.w	r6, r6, r6

    // Check if within the radii
    if (distanceSquared < innerRadiusSquared || distanceSquared > outerRadiusSquared) {
 8004ad6:	42ab      	cmp	r3, r5
 8004ad8:	db50      	blt.n	8004b7c <isTouchInsideArc+0xc4>
 8004ada:	eeb0 8a40 	vmov.f32	s16, s0
 8004ade:	eef0 8a60 	vmov.f32	s17, s1
 8004ae2:	42b3      	cmp	r3, r6
 8004ae4:	dd01      	ble.n	8004aea <isTouchInsideArc+0x32>
        return false; // Outside the ring
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	e049      	b.n	8004b7e <isTouchInsideArc+0xc6>
    }

    // Compute the angle of the touch point relative to the center
    float touchAngle = atan2(dy, dx) * (180.0 / PI); // Convert to degrees
 8004aea:	f7fb fd23 	bl	8000534 <__aeabi_i2d>
 8004aee:	ec41 0b19 	vmov	d9, r0, r1
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7fb fd1e 	bl	8000534 <__aeabi_i2d>
 8004af8:	eeb0 1a49 	vmov.f32	s2, s18
 8004afc:	eef0 1a69 	vmov.f32	s3, s19
 8004b00:	ec41 0b10 	vmov	d0, r0, r1
 8004b04:	f00a fea2 	bl	800f84c <atan2>
 8004b08:	ec51 0b10 	vmov	r0, r1, d0
 8004b0c:	a31f      	add	r3, pc, #124	@ (adr r3, 8004b8c <isTouchInsideArc+0xd4>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fd79 	bl	8000608 <__aeabi_dmul>
 8004b16:	f7fc f86f 	bl	8000bf8 <__aeabi_d2f>
 8004b1a:	ee07 0a90 	vmov	s15, r0
    if (touchAngle < 0) {
 8004b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b26:	d410      	bmi.n	8004b4a <isTouchInsideArc+0x92>
        touchAngle += 360.0; // Normalize to [0, 360)
    }

    // Check if within the angular range
    if (startAngle <= endAngle) {
 8004b28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b30:	d814      	bhi.n	8004b5c <isTouchInsideArc+0xa4>
        // Simple case: start and end angles are in the correct order
        return touchAngle >= startAngle && touchAngle <= endAngle;
 8004b32:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	db0b      	blt.n	8004b54 <isTouchInsideArc+0x9c>
 8004b3c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b44:	d908      	bls.n	8004b58 <isTouchInsideArc+0xa0>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e019      	b.n	8004b7e <isTouchInsideArc+0xc6>
        touchAngle += 360.0; // Normalize to [0, 360)
 8004b4a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8004b88 <isTouchInsideArc+0xd0>
 8004b4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b52:	e7e9      	b.n	8004b28 <isTouchInsideArc+0x70>
        return touchAngle >= startAngle && touchAngle <= endAngle;
 8004b54:	2000      	movs	r0, #0
 8004b56:	e012      	b.n	8004b7e <isTouchInsideArc+0xc6>
 8004b58:	2001      	movs	r0, #1
 8004b5a:	e010      	b.n	8004b7e <isTouchInsideArc+0xc6>
    } else {
        // Wraparound case: end angle is before start angle
        return touchAngle >= startAngle || touchAngle <= endAngle;
 8004b5c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	da06      	bge.n	8004b74 <isTouchInsideArc+0xbc>
 8004b66:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	d803      	bhi.n	8004b78 <isTouchInsideArc+0xc0>
 8004b70:	2001      	movs	r0, #1
 8004b72:	e004      	b.n	8004b7e <isTouchInsideArc+0xc6>
 8004b74:	2001      	movs	r0, #1
 8004b76:	e002      	b.n	8004b7e <isTouchInsideArc+0xc6>
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e000      	b.n	8004b7e <isTouchInsideArc+0xc6>
        return false; // Outside the ring
 8004b7c:	2000      	movs	r0, #0
    }
}
 8004b7e:	ecbd 8b04 	vpop	{d8-d9}
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	f3af 8000 	nop.w
 8004b88:	43b40000 	.word	0x43b40000
 8004b8c:	1af05a77 	.word	0x1af05a77
 8004b90:	404ca5dc 	.word	0x404ca5dc
 8004b94:	00000000 	.word	0x00000000

08004b98 <getTouchAngle>:

float getTouchAngle(int touchX, int touchY) {
 8004b98:	b508      	push	{r3, lr}
 8004b9a:	ed2d 8b04 	vpush	{d8-d9}
    // Calculate the differences in X and Y coordinates
    float dx = touchX - 120;
 8004b9e:	3878      	subs	r0, #120	@ 0x78
    float dy = touchY - 120;
 8004ba0:	3978      	subs	r1, #120	@ 0x78
 8004ba2:	ee07 1a90 	vmov	s15, r1
 8004ba6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15

    // Calculate the angle in radians using atan2
    float angleRad = atan2(dy, dx);
 8004baa:	ee07 0a90 	vmov	s15, r0
 8004bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bb2:	ee17 0a90 	vmov	r0, s15
 8004bb6:	f7fb fccf 	bl	8000558 <__aeabi_f2d>
 8004bba:	ec41 0b19 	vmov	d9, r0, r1
 8004bbe:	ee18 0a10 	vmov	r0, s16
 8004bc2:	f7fb fcc9 	bl	8000558 <__aeabi_f2d>
 8004bc6:	eeb0 1a49 	vmov.f32	s2, s18
 8004bca:	eef0 1a69 	vmov.f32	s3, s19
 8004bce:	ec41 0b10 	vmov	d0, r0, r1
 8004bd2:	f00a fe3b 	bl	800f84c <atan2>
 8004bd6:	ec51 0b10 	vmov	r0, r1, d0
 8004bda:	f7fc f80d 	bl	8000bf8 <__aeabi_d2f>

    // Convert radians to degrees
    float angleDeg = angleRad * (180.0 / PI);
 8004bde:	f7fb fcbb 	bl	8000558 <__aeabi_f2d>
 8004be2:	a30f      	add	r3, pc, #60	@ (adr r3, 8004c20 <getTouchAngle+0x88>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f7fb fd0e 	bl	8000608 <__aeabi_dmul>
 8004bec:	f7fc f804 	bl	8000bf8 <__aeabi_d2f>
 8004bf0:	ee00 0a10 	vmov	s0, r0
	angleDeg -= 90;
 8004bf4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8004c18 <getTouchAngle+0x80>
 8004bf8:	ee30 0a67 	vsub.f32	s0, s0, s15
    // Normalize the angle to the range [0, 360)
    if (angleDeg < 0) {
 8004bfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	d402      	bmi.n	8004c0c <getTouchAngle+0x74>
        angleDeg += 360.0;
    }

    return angleDeg;
 8004c06:	ecbd 8b04 	vpop	{d8-d9}
 8004c0a:	bd08      	pop	{r3, pc}
        angleDeg += 360.0;
 8004c0c:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8004c1c <getTouchAngle+0x84>
 8004c10:	ee30 0a27 	vadd.f32	s0, s0, s15
    return angleDeg;
 8004c14:	e7f7      	b.n	8004c06 <getTouchAngle+0x6e>
 8004c16:	bf00      	nop
 8004c18:	42b40000 	.word	0x42b40000
 8004c1c:	43b40000 	.word	0x43b40000
 8004c20:	1af05a77 	.word	0x1af05a77
 8004c24:	404ca5dc 	.word	0x404ca5dc

08004c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c2c:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2e:	2400      	movs	r4, #0
 8004c30:	9405      	str	r4, [sp, #20]
 8004c32:	9406      	str	r4, [sp, #24]
 8004c34:	9407      	str	r4, [sp, #28]
 8004c36:	9408      	str	r4, [sp, #32]
 8004c38:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c3a:	9400      	str	r4, [sp, #0]
 8004c3c:	4b47      	ldr	r3, [pc, #284]	@ (8004d5c <MX_GPIO_Init+0x134>)
 8004c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c40:	f042 0204 	orr.w	r2, r2, #4
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c48:	f002 0204 	and.w	r2, r2, #4
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c50:	9401      	str	r4, [sp, #4]
 8004c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c58:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c5c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8004c60:	9201      	str	r2, [sp, #4]
 8004c62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c64:	9402      	str	r4, [sp, #8]
 8004c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c70:	f002 0201 	and.w	r2, r2, #1
 8004c74:	9202      	str	r2, [sp, #8]
 8004c76:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c78:	9403      	str	r4, [sp, #12]
 8004c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c7c:	f042 0202 	orr.w	r2, r2, #2
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c84:	f002 0202 	and.w	r2, r2, #2
 8004c88:	9203      	str	r2, [sp, #12]
 8004c8a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c8c:	9404      	str	r4, [sp, #16]
 8004c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c90:	f042 0208 	orr.w	r2, r2, #8
 8004c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	9304      	str	r3, [sp, #16]
 8004c9e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DEV0_RST_Pin|SPI2_CS_Pin|DC_Pin
 8004ca0:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8004d68 <MX_GPIO_Init+0x140>
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	f242 1113 	movw	r1, #8467	@ 0x2113
 8004caa:	4648      	mov	r0, r9
 8004cac:	f001 fe7c 	bl	80069a8 <HAL_GPIO_WritePin>
                          |BL_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8004cb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8004d6c <MX_GPIO_Init+0x144>
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	2140      	movs	r1, #64	@ 0x40
 8004cb8:	4640      	mov	r0, r8
 8004cba:	f001 fe75 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV1_RST_Pin|DEV2_RST_Pin, GPIO_PIN_RESET);
 8004cbe:	4d28      	ldr	r5, [pc, #160]	@ (8004d60 <MX_GPIO_Init+0x138>)
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f001 fe6f 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEV3_RST_GPIO_Port, DEV3_RST_Pin, GPIO_PIN_RESET);
 8004cca:	4f26      	ldr	r7, [pc, #152]	@ (8004d64 <MX_GPIO_Init+0x13c>)
 8004ccc:	4622      	mov	r2, r4
 8004cce:	2104      	movs	r1, #4
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	f001 fe69 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f001 fe63 	bl	80069a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 DEV0_RST_Pin SPI2_CS_Pin DC_Pin
                           BL_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DEV0_RST_Pin|SPI2_CS_Pin|DC_Pin
 8004ce2:	f242 1313 	movw	r3, #8467	@ 0x2113
 8004ce6:	9305      	str	r3, [sp, #20]
                          |BL_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce8:	2601      	movs	r6, #1
 8004cea:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cee:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cf0:	a905      	add	r1, sp, #20
 8004cf2:	4648      	mov	r0, r9
 8004cf4:	f001 fd68 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8004cf8:	2340      	movs	r3, #64	@ 0x40
 8004cfa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfe:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d00:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004d02:	a905      	add	r1, sp, #20
 8004d04:	4640      	mov	r0, r8
 8004d06:	f001 fd5f 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEV1_RST_Pin DEV2_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = DEV1_RST_Pin|DEV2_RST_Pin|TP_RST_Pin;
 8004d0a:	f240 1303 	movw	r3, #259	@ 0x103
 8004d0e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d10:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d12:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d14:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d16:	a905      	add	r1, sp, #20
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f001 fd55 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEV3_RST_Pin */
  GPIO_InitStruct.Pin = DEV3_RST_Pin;
 8004d1e:	2304      	movs	r3, #4
 8004d20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d22:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d26:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(DEV3_RST_GPIO_Port, &GPIO_InitStruct);
 8004d28:	a905      	add	r1, sp, #20
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f001 fd4c 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8004d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004d36:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8004d3a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8004d3e:	a905      	add	r1, sp, #20
 8004d40:	4628      	mov	r0, r5
 8004d42:	f001 fd41 	bl	80067c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d46:	4622      	mov	r2, r4
 8004d48:	4621      	mov	r1, r4
 8004d4a:	2017      	movs	r0, #23
 8004d4c:	f001 faaa 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d50:	2017      	movs	r0, #23
 8004d52:	f001 fab7 	bl	80062c4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d56:	b00b      	add	sp, #44	@ 0x2c
 8004d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40020400 	.word	0x40020400
 8004d64:	40020c00 	.word	0x40020c00
 8004d68:	40020800 	.word	0x40020800
 8004d6c:	40020000 	.word	0x40020000

08004d70 <MX_DMA_Init>:
{
 8004d70:	b510      	push	{r4, lr}
 8004d72:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004d74:	2400      	movs	r4, #0
 8004d76:	9400      	str	r4, [sp, #0]
 8004d78:	4b36      	ldr	r3, [pc, #216]	@ (8004e54 <MX_DMA_Init+0xe4>)
 8004d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d7c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d84:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8004d88:	9200      	str	r2, [sp, #0]
 8004d8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d8c:	9401      	str	r4, [sp, #4]
 8004d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d90:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004da0:	4622      	mov	r2, r4
 8004da2:	4621      	mov	r1, r4
 8004da4:	200b      	movs	r0, #11
 8004da6:	f001 fa7d 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004daa:	200b      	movs	r0, #11
 8004dac:	f001 fa8a 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004db0:	4622      	mov	r2, r4
 8004db2:	4621      	mov	r1, r4
 8004db4:	200c      	movs	r0, #12
 8004db6:	f001 fa75 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004dba:	200c      	movs	r0, #12
 8004dbc:	f001 fa82 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	200d      	movs	r0, #13
 8004dc6:	f001 fa6d 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004dca:	200d      	movs	r0, #13
 8004dcc:	f001 fa7a 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	200e      	movs	r0, #14
 8004dd6:	f001 fa65 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004dda:	200e      	movs	r0, #14
 8004ddc:	f001 fa72 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004de0:	4622      	mov	r2, r4
 8004de2:	4621      	mov	r1, r4
 8004de4:	200f      	movs	r0, #15
 8004de6:	f001 fa5d 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004dea:	200f      	movs	r0, #15
 8004dec:	f001 fa6a 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004df0:	4622      	mov	r2, r4
 8004df2:	4621      	mov	r1, r4
 8004df4:	2010      	movs	r0, #16
 8004df6:	f001 fa55 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004dfa:	2010      	movs	r0, #16
 8004dfc:	f001 fa62 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004e00:	4622      	mov	r2, r4
 8004e02:	4621      	mov	r1, r4
 8004e04:	2011      	movs	r0, #17
 8004e06:	f001 fa4d 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004e0a:	2011      	movs	r0, #17
 8004e0c:	f001 fa5a 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004e10:	4622      	mov	r2, r4
 8004e12:	4621      	mov	r1, r4
 8004e14:	202f      	movs	r0, #47	@ 0x2f
 8004e16:	f001 fa45 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004e1a:	202f      	movs	r0, #47	@ 0x2f
 8004e1c:	f001 fa52 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8004e20:	4622      	mov	r2, r4
 8004e22:	4621      	mov	r1, r4
 8004e24:	2039      	movs	r0, #57	@ 0x39
 8004e26:	f001 fa3d 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004e2a:	2039      	movs	r0, #57	@ 0x39
 8004e2c:	f001 fa4a 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004e30:	4622      	mov	r2, r4
 8004e32:	4621      	mov	r1, r4
 8004e34:	203a      	movs	r0, #58	@ 0x3a
 8004e36:	f001 fa35 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004e3a:	203a      	movs	r0, #58	@ 0x3a
 8004e3c:	f001 fa42 	bl	80062c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004e40:	4622      	mov	r2, r4
 8004e42:	4621      	mov	r1, r4
 8004e44:	2045      	movs	r0, #69	@ 0x45
 8004e46:	f001 fa2d 	bl	80062a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004e4a:	2045      	movs	r0, #69	@ 0x45
 8004e4c:	f001 fa3a 	bl	80062c4 <HAL_NVIC_EnableIRQ>
}
 8004e50:	b002      	add	sp, #8
 8004e52:	bd10      	pop	{r4, pc}
 8004e54:	40023800 	.word	0x40023800

08004e58 <HAL_UART_RxCpltCallback>:
  //   // if(isHold(&button)){return;}
  // }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
  // HAL_UART_Receive_DMA(deviceList[dev_num].uart, (uint8_t*)&rx_buff, 10);
  //   return;
  // }

  /* SIM COMMUNICATION */
  if (huart == SIM800_UART){
 8004e60:	4b7f      	ldr	r3, [pc, #508]	@ (8005060 <HAL_UART_RxCpltCallback+0x208>)
 8004e62:	4283      	cmp	r3, r0
 8004e64:	d01b      	beq.n	8004e9e <HAL_UART_RxCpltCallback+0x46>
    return;
  }


  char rx_buff[10];
  HAL_UART_Receive_DMA(deviceList[dev_num].uart, (uint8_t*)&rx_buff, 10);
 8004e66:	4b7f      	ldr	r3, [pc, #508]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004e6e:	220a      	movs	r2, #10
 8004e70:	1d39      	adds	r1, r7, #4
 8004e72:	487d      	ldr	r0, [pc, #500]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8004e74:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 8004e78:	f005 fe80 	bl	800ab7c <HAL_UART_Receive_DMA>


    // NEW CODE START
    // IF FIRST LETTER IS L OR T
  if(rx_buff[0] == 76 || rx_buff[0] == 84){
 8004e7c:	793b      	ldrb	r3, [r7, #4]
 8004e7e:	2b4c      	cmp	r3, #76	@ 0x4c
 8004e80:	d017      	beq.n	8004eb2 <HAL_UART_RxCpltCallback+0x5a>
 8004e82:	2b54      	cmp	r3, #84	@ 0x54
 8004e84:	d015      	beq.n	8004eb2 <HAL_UART_RxCpltCallback+0x5a>
  //     deviceList[dev_num].isDevOn = 1;
  //   }else{
  //     deviceList[dev_num].isDevOn = 0;
  //   }
  // }
  else if(rx_buff[0] == 79){
 8004e86:	2b4f      	cmp	r3, #79	@ 0x4f
 8004e88:	f000 80cb 	beq.w	8005022 <HAL_UART_RxCpltCallback+0x1ca>
    transmitMode = TRANSMIT_MODE_GET;
  }else{// ISSUE START
    if(!isDevPolledFirstTime){
 8004e8c:	4b77      	ldr	r3, [pc, #476]	@ (800506c <HAL_UART_RxCpltCallback+0x214>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80ca 	beq.w	800502a <HAL_UART_RxCpltCallback+0x1d2>
      deviceList[dev_num].currentValue = atof(rx_buff);
      deviceList[dev_num].currentValue /= 10;
    }else{
      isDevPolledFirstTime = false;
 8004e96:	4b75      	ldr	r3, [pc, #468]	@ (800506c <HAL_UART_RxCpltCallback+0x214>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	e0bd      	b.n	800501a <HAL_UART_RxCpltCallback+0x1c2>
    SIMrxBuffer[RX_BUFFER_SIZE - 1] = '\0'; // Null-terminate the buffer for string operations
 8004e9e:	4974      	ldr	r1, [pc, #464]	@ (8005070 <HAL_UART_RxCpltCallback+0x218>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f881 31ff 	strb.w	r3, [r1, #511]	@ 0x1ff
    HAL_UART_Receive_DMA(&huart6, SIMrxBuffer, RX_BUFFER_SIZE);
 8004ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eaa:	486d      	ldr	r0, [pc, #436]	@ (8005060 <HAL_UART_RxCpltCallback+0x208>)
 8004eac:	f005 fe66 	bl	800ab7c <HAL_UART_Receive_DMA>
    return;
 8004eb0:	e0b3      	b.n	800501a <HAL_UART_RxCpltCallback+0x1c2>
    if (rx_buff[0] == 76){
 8004eb2:	2b4c      	cmp	r3, #76	@ 0x4c
 8004eb4:	d013      	beq.n	8004ede <HAL_UART_RxCpltCallback+0x86>
      deviceList[dev_num].paletteType = TEMP_PALETTE;
 8004eb6:	4b6b      	ldr	r3, [pc, #428]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8004ec0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    switch (rx_buff[1])
 8004eca:	797b      	ldrb	r3, [r7, #5]
 8004ecc:	2b53      	cmp	r3, #83	@ 0x53
 8004ece:	d011      	beq.n	8004ef4 <HAL_UART_RxCpltCallback+0x9c>
 8004ed0:	2b54      	cmp	r3, #84	@ 0x54
 8004ed2:	d019      	beq.n	8004f08 <HAL_UART_RxCpltCallback+0xb0>
 8004ed4:	2b42      	cmp	r3, #66	@ 0x42
 8004ed6:	d021      	beq.n	8004f1c <HAL_UART_RxCpltCallback+0xc4>
    for (int i = 2; i<10; i++){
 8004ed8:	2302      	movs	r3, #2
    uint8_t minValueEndIndex = 0;
 8004eda:	2500      	movs	r5, #0
    for (int i = 2; i<10; i++){
 8004edc:	e02b      	b.n	8004f36 <HAL_UART_RxCpltCallback+0xde>
      deviceList[dev_num].paletteType = LIGHT_PALETTE;
 8004ede:	4b61      	ldr	r3, [pc, #388]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004ee6:	4a60      	ldr	r2, [pc, #384]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8004ee8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8004ef2:	e7ea      	b.n	8004eca <HAL_UART_RxCpltCallback+0x72>
      deviceList[dev_num].deviceMode = TYPE_SET_ONLY;
 8004ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004efc:	4a5a      	ldr	r2, [pc, #360]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8004efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f02:	2201      	movs	r2, #1
 8004f04:	715a      	strb	r2, [r3, #5]
      break;
 8004f06:	e7e7      	b.n	8004ed8 <HAL_UART_RxCpltCallback+0x80>
      deviceList[dev_num].deviceMode = TYPE_TEL_ONLY;
 8004f08:	4b56      	ldr	r3, [pc, #344]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004f10:	4a55      	ldr	r2, [pc, #340]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8004f12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f16:	2202      	movs	r2, #2
 8004f18:	715a      	strb	r2, [r3, #5]
      break;
 8004f1a:	e7dd      	b.n	8004ed8 <HAL_UART_RxCpltCallback+0x80>
      deviceList[dev_num].deviceMode = TYPE_SET_TEL;
 8004f1c:	4b51      	ldr	r3, [pc, #324]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004f24:	4a50      	ldr	r2, [pc, #320]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8004f26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	715a      	strb	r2, [r3, #5]
      break;
 8004f2e:	e7d3      	b.n	8004ed8 <HAL_UART_RxCpltCallback+0x80>
      if(rx_buff[i] == 89){
 8004f30:	2a59      	cmp	r2, #89	@ 0x59
 8004f32:	d00d      	beq.n	8004f50 <HAL_UART_RxCpltCallback+0xf8>
    for (int i = 2; i<10; i++){
 8004f34:	3301      	adds	r3, #1
 8004f36:	2b09      	cmp	r3, #9
 8004f38:	dc0e      	bgt.n	8004f58 <HAL_UART_RxCpltCallback+0x100>
      if(rx_buff[i] == 88){
 8004f3a:	f103 0210 	add.w	r2, r3, #16
 8004f3e:	443a      	add	r2, r7
 8004f40:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f44:	2a58      	cmp	r2, #88	@ 0x58
 8004f46:	d1f3      	bne.n	8004f30 <HAL_UART_RxCpltCallback+0xd8>
        minValueEndIndex = i-1;
 8004f48:	b2dd      	uxtb	r5, r3
 8004f4a:	3d01      	subs	r5, #1
 8004f4c:	b2ed      	uxtb	r5, r5
 8004f4e:	e7ef      	b.n	8004f30 <HAL_UART_RxCpltCallback+0xd8>
        maxValueEndIndex = i-1;
 8004f50:	b2dc      	uxtb	r4, r3
 8004f52:	3c01      	subs	r4, #1
 8004f54:	b2e4      	uxtb	r4, r4
        break;
 8004f56:	e000      	b.n	8004f5a <HAL_UART_RxCpltCallback+0x102>
    uint8_t maxValueEndIndex = 0;
 8004f58:	2400      	movs	r4, #0
    char minValueArr[minValueEndIndex-1];
 8004f5a:	466e      	mov	r6, sp
 8004f5c:	1dab      	adds	r3, r5, #6
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	ebad 0d03 	sub.w	sp, sp, r3
 8004f66:	46ea      	mov	sl, sp
    char maxValueArr[maxValueEndIndex-minValueEndIndex-1];
 8004f68:	eba4 0805 	sub.w	r8, r4, r5
 8004f6c:	f108 0306 	add.w	r3, r8, #6
 8004f70:	f023 0307 	bic.w	r3, r3, #7
 8004f74:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(minValueArr, &rx_buff[2], (minValueEndIndex-1) * sizeof(char));
 8004f78:	1e6a      	subs	r2, r5, #1
 8004f7a:	1db9      	adds	r1, r7, #6
 8004f7c:	4650      	mov	r0, sl
 8004f7e:	f007 f848 	bl	800c012 <memcpy>
    memcpy(maxValueArr, &rx_buff[minValueEndIndex+2], (maxValueEndIndex-minValueEndIndex) * sizeof(char));
 8004f82:	1ca9      	adds	r1, r5, #2
 8004f84:	4642      	mov	r2, r8
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	4419      	add	r1, r3
 8004f8a:	4668      	mov	r0, sp
 8004f8c:	f007 f841 	bl	800c012 <memcpy>
    deviceList[dev_num].minValue = atof(minValueArr);
 8004f90:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8005064 <HAL_UART_RxCpltCallback+0x20c>
 8004f94:	f899 8000 	ldrb.w	r8, [r9]
 8004f98:	4650      	mov	r0, sl
 8004f9a:	f005 ff72 	bl	800ae82 <atof>
 8004f9e:	4d32      	ldr	r5, [pc, #200]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8004fa0:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8004fa4:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 8004fa8:	ed88 0b08 	vstr	d0, [r8, #32]
    deviceList[dev_num].maxValue = atof(maxValueArr);    
 8004fac:	f899 8000 	ldrb.w	r8, [r9]
 8004fb0:	4668      	mov	r0, sp
 8004fb2:	f005 ff66 	bl	800ae82 <atof>
 8004fb6:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 8004fba:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 8004fbe:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28
    deviceList[dev_num].symbol = rx_buff[maxValueEndIndex+2];
 8004fc2:	f899 1000 	ldrb.w	r1, [r9]
 8004fc6:	f104 0312 	add.w	r3, r4, #18
 8004fca:	19dc      	adds	r4, r3, r7
 8004fcc:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
 8004fd0:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8004fd4:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8004fd8:	f885 3047 	strb.w	r3, [r5, #71]	@ 0x47
    deviceList[dev_num].tx_buff[0] = 71;
 8004fdc:	2347      	movs	r3, #71	@ 0x47
 8004fde:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
    if(state == STATE_INIT){
 8004fe2:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <HAL_UART_RxCpltCallback+0x21c>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	b9bb      	cbnz	r3, 8005018 <HAL_UART_RxCpltCallback+0x1c0>
      deviceList[dev_num].initState = DEV_STATE_IN;
 8004fe8:	2001      	movs	r0, #1
 8004fea:	7128      	strb	r0, [r5, #4]
      allDeviceIsUnIn = false;
 8004fec:	4a22      	ldr	r2, [pc, #136]	@ (8005078 <HAL_UART_RxCpltCallback+0x220>)
 8004fee:	2000      	movs	r0, #0
 8004ff0:	7010      	strb	r0, [r2, #0]
      act_dev_cnt++;
 8004ff2:	4822      	ldr	r0, [pc, #136]	@ (800507c <HAL_UART_RxCpltCallback+0x224>)
 8004ff4:	7802      	ldrb	r2, [r0, #0]
 8004ff6:	3201      	adds	r2, #1
 8004ff8:	7002      	strb	r2, [r0, #0]
      for (uint8_t i = 0; i< 4; i++){
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d809      	bhi.n	8005012 <HAL_UART_RxCpltCallback+0x1ba>
        if(act_dev_list[i] == -1){
 8004ffe:	4a20      	ldr	r2, [pc, #128]	@ (8005080 <HAL_UART_RxCpltCallback+0x228>)
 8005000:	56d2      	ldrsb	r2, [r2, r3]
 8005002:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005006:	d002      	beq.n	800500e <HAL_UART_RxCpltCallback+0x1b6>
      for (uint8_t i = 0; i< 4; i++){
 8005008:	3301      	adds	r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e7f5      	b.n	8004ffa <HAL_UART_RxCpltCallback+0x1a2>
          act_dev_list[i] = dev_num;
 800500e:	4a1c      	ldr	r2, [pc, #112]	@ (8005080 <HAL_UART_RxCpltCallback+0x228>)
 8005010:	54d1      	strb	r1, [r2, r3]
      dev_num++;
 8005012:	1c4b      	adds	r3, r1, #1
 8005014:	4a13      	ldr	r2, [pc, #76]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 8005016:	7013      	strb	r3, [r2, #0]
 8005018:	46b5      	mov	sp, r6
    }
  }// ISSUE END
  // NEW CODE END
}
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    transmitMode = TRANSMIT_MODE_GET;
 8005022:	4b18      	ldr	r3, [pc, #96]	@ (8005084 <HAL_UART_RxCpltCallback+0x22c>)
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	e7f7      	b.n	800501a <HAL_UART_RxCpltCallback+0x1c2>
      deviceList[dev_num].currentValue = atof(rx_buff);
 800502a:	4d0e      	ldr	r5, [pc, #56]	@ (8005064 <HAL_UART_RxCpltCallback+0x20c>)
 800502c:	782c      	ldrb	r4, [r5, #0]
 800502e:	1d38      	adds	r0, r7, #4
 8005030:	f005 ff27 	bl	800ae82 <atof>
 8005034:	4a0c      	ldr	r2, [pc, #48]	@ (8005068 <HAL_UART_RxCpltCallback+0x210>)
 8005036:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800503a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800503e:	ed84 0b04 	vstr	d0, [r4, #16]
      deviceList[dev_num].currentValue /= 10;
 8005042:	782b      	ldrb	r3, [r5, #0]
 8005044:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005048:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800504c:	460c      	mov	r4, r1
 800504e:	2200      	movs	r2, #0
 8005050:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <HAL_UART_RxCpltCallback+0x230>)
 8005052:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8005056:	f7fb fc01 	bl	800085c <__aeabi_ddiv>
 800505a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800505e:	e7dc      	b.n	800501a <HAL_UART_RxCpltCallback+0x1c2>
 8005060:	2001cec4 	.word	0x2001cec4
 8005064:	2001cb00 	.word	0x2001cb00
 8005068:	20000008 	.word	0x20000008
 800506c:	20000128 	.word	0x20000128
 8005070:	2001c8f8 	.word	0x2001c8f8
 8005074:	2001cb01 	.word	0x2001cb01
 8005078:	20000002 	.word	0x20000002
 800507c:	2001caff 	.word	0x2001caff
 8005080:	2000012c 	.word	0x2000012c
 8005084:	2001c876 	.word	0x2001c876
 8005088:	40240000 	.word	0x40240000

0800508c <HAL_GPIO_EXTI_Callback>:
//   Set_Alarm(alarm_timeout);
// }

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == GPIO_PIN_9){
 800508c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005090:	d001      	beq.n	8005096 <HAL_GPIO_EXTI_Callback+0xa>
    touchAvailable = true;
	}else {
      __NOP();
 8005092:	bf00      	nop
  }
}
 8005094:	4770      	bx	lr
    touchAvailable = true;
 8005096:	4b02      	ldr	r3, [pc, #8]	@ (80050a0 <HAL_GPIO_EXTI_Callback+0x14>)
 8005098:	2201      	movs	r2, #1
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	2001c872 	.word	0x2001c872

080050a4 <findNextInDev>:

void findNextInDev(bool dir){
  if(!allDeviceIsUnIn){
 80050a4:	4b18      	ldr	r3, [pc, #96]	@ (8005108 <findNextInDev+0x64>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	bb63      	cbnz	r3, 8005104 <findNextInDev+0x60>
    if(dir){
 80050aa:	b300      	cbz	r0, 80050ee <findNextInDev+0x4a>
 80050ac:	e00b      	b.n	80050c6 <findNextInDev+0x22>
      do{
        if(dev_num < DEV_COUNT-1){
          dev_num++;
 80050ae:	3301      	adds	r3, #1
 80050b0:	4a16      	ldr	r2, [pc, #88]	@ (800510c <findNextInDev+0x68>)
 80050b2:	7013      	strb	r3, [r2, #0]
        }else{
          dev_num=0;
        }
      }while (!deviceList[dev_num].initState);  
 80050b4:	4b15      	ldr	r3, [pc, #84]	@ (800510c <findNextInDev+0x68>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80050bc:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <findNextInDev+0x6c>)
 80050be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050c2:	791b      	ldrb	r3, [r3, #4]
 80050c4:	b9db      	cbnz	r3, 80050fe <findNextInDev+0x5a>
        if(dev_num < DEV_COUNT-1){
 80050c6:	4b11      	ldr	r3, [pc, #68]	@ (800510c <findNextInDev+0x68>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d9ef      	bls.n	80050ae <findNextInDev+0xa>
          dev_num=0;
 80050ce:	4b0f      	ldr	r3, [pc, #60]	@ (800510c <findNextInDev+0x68>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e7ee      	b.n	80050b4 <findNextInDev+0x10>
    }else{
      do{
        if(dev_num > 0){
          dev_num--;
 80050d6:	3b01      	subs	r3, #1
 80050d8:	4a0c      	ldr	r2, [pc, #48]	@ (800510c <findNextInDev+0x68>)
 80050da:	7013      	strb	r3, [r2, #0]
        }else{
          dev_num=DEV_COUNT-1;
        }
      }while (!deviceList[dev_num].initState);  
 80050dc:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <findNextInDev+0x68>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80050e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <findNextInDev+0x6c>)
 80050e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050ea:	791b      	ldrb	r3, [r3, #4]
 80050ec:	b93b      	cbnz	r3, 80050fe <findNextInDev+0x5a>
        if(dev_num > 0){
 80050ee:	4b07      	ldr	r3, [pc, #28]	@ (800510c <findNextInDev+0x68>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1ef      	bne.n	80050d6 <findNextInDev+0x32>
          dev_num=DEV_COUNT-1;
 80050f6:	4b05      	ldr	r3, [pc, #20]	@ (800510c <findNextInDev+0x68>)
 80050f8:	2203      	movs	r2, #3
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e7ee      	b.n	80050dc <findNextInDev+0x38>
    }
    isDevPolledFirstTime = true;
 80050fe:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <findNextInDev+0x70>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
  }
}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000002 	.word	0x20000002
 800510c:	2001cb00 	.word	0x2001cb00
 8005110:	20000008 	.word	0x20000008
 8005114:	20000128 	.word	0x20000128

08005118 <map>:

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max){
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005118:	eba0 0c01 	sub.w	ip, r0, r1
 800511c:	9800      	ldr	r0, [sp, #0]
 800511e:	1ac0      	subs	r0, r0, r3
 8005120:	fb00 fc0c 	mul.w	ip, r0, ip
 8005124:	1a52      	subs	r2, r2, r1
 8005126:	fbbc fcf2 	udiv	ip, ip, r2
}
 800512a:	eb0c 0003 	add.w	r0, ip, r3
 800512e:	4770      	bx	lr

08005130 <SIM_sendCommand>:

void SIM_sendCommand(const char *command){
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4605      	mov	r5, r0
    memset(SIMtxBuffer, 0, TX_BUFFER_SIZE);
 8005134:	4c0a      	ldr	r4, [pc, #40]	@ (8005160 <SIM_sendCommand+0x30>)
 8005136:	2680      	movs	r6, #128	@ 0x80
 8005138:	4632      	mov	r2, r6
 800513a:	2100      	movs	r1, #0
 800513c:	4620      	mov	r0, r4
 800513e:	f006 fec4 	bl	800beca <memset>
    snprintf((char *)SIMtxBuffer, TX_BUFFER_SIZE, "%s\r\n", command);
 8005142:	462b      	mov	r3, r5
 8005144:	4a07      	ldr	r2, [pc, #28]	@ (8005164 <SIM_sendCommand+0x34>)
 8005146:	4631      	mov	r1, r6
 8005148:	4620      	mov	r0, r4
 800514a:	f006 fdf5 	bl	800bd38 <sniprintf>
    HAL_UART_Transmit_DMA(&huart6, SIMtxBuffer, strlen((char *)SIMtxBuffer));
 800514e:	4620      	mov	r0, r4
 8005150:	f7fb f846 	bl	80001e0 <strlen>
 8005154:	b282      	uxth	r2, r0
 8005156:	4621      	mov	r1, r4
 8005158:	4803      	ldr	r0, [pc, #12]	@ (8005168 <SIM_sendCommand+0x38>)
 800515a:	f005 f9f9 	bl	800a550 <HAL_UART_Transmit_DMA>
}
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	2001c878 	.word	0x2001c878
 8005164:	08014d80 	.word	0x08014d80
 8005168:	2001cec4 	.word	0x2001cec4

0800516c <checkSIMStatus>:

bool checkSIMStatus(){
 800516c:	b508      	push	{r3, lr}
    SIM_sendCommand("AT+CSMINS?");
 800516e:	4806      	ldr	r0, [pc, #24]	@ (8005188 <checkSIMStatus+0x1c>)
 8005170:	f7ff ffde 	bl	8005130 <SIM_sendCommand>
    HAL_Delay(100);
 8005174:	2064      	movs	r0, #100	@ 0x64
 8005176:	f001 f813 	bl	80061a0 <HAL_Delay>
    if (strstr((char *)SIMrxBuffer, "+CSMINS: 0,1") != NULL) {
 800517a:	4904      	ldr	r1, [pc, #16]	@ (800518c <checkSIMStatus+0x20>)
 800517c:	4804      	ldr	r0, [pc, #16]	@ (8005190 <checkSIMStatus+0x24>)
 800517e:	f006 febe 	bl	800befe <strstr>
 8005182:	b100      	cbz	r0, 8005186 <checkSIMStatus+0x1a>
        return true; // SIM installed
 8005184:	2001      	movs	r0, #1
    }
    return false; // SIM not installed
}
 8005186:	bd08      	pop	{r3, pc}
 8005188:	08014d88 	.word	0x08014d88
 800518c:	08014d94 	.word	0x08014d94
 8005190:	2001c8f8 	.word	0x2001c8f8

08005194 <checkInitStatus>:

bool checkInitStatus(){
 8005194:	b508      	push	{r3, lr}
  SIM_sendCommand("AT+CREG?");
 8005196:	4805      	ldr	r0, [pc, #20]	@ (80051ac <checkInitStatus+0x18>)
 8005198:	f7ff ffca 	bl	8005130 <SIM_sendCommand>
  if (strstr((char *)SIMrxBuffer, "+CREG: 0,1") != NULL) {
 800519c:	4904      	ldr	r1, [pc, #16]	@ (80051b0 <checkInitStatus+0x1c>)
 800519e:	4805      	ldr	r0, [pc, #20]	@ (80051b4 <checkInitStatus+0x20>)
 80051a0:	f006 fead 	bl	800befe <strstr>
 80051a4:	b100      	cbz	r0, 80051a8 <checkInitStatus+0x14>
    return true;
 80051a6:	2001      	movs	r0, #1
  }
  return false;
}
 80051a8:	bd08      	pop	{r3, pc}
 80051aa:	bf00      	nop
 80051ac:	08014da4 	.word	0x08014da4
 80051b0:	08014db0 	.word	0x08014db0
 80051b4:	2001c8f8 	.word	0x2001c8f8

080051b8 <resetModule>:
    return false;
  }
  return true;
}

void resetModule(){
 80051b8:	b508      	push	{r3, lr}
  SIM_sendCommand("AT+CFUN=1,1");
 80051ba:	4803      	ldr	r0, [pc, #12]	@ (80051c8 <resetModule+0x10>)
 80051bc:	f7ff ffb8 	bl	8005130 <SIM_sendCommand>
  HAL_Delay(50);
 80051c0:	2032      	movs	r0, #50	@ 0x32
 80051c2:	f000 ffed 	bl	80061a0 <HAL_Delay>
}
 80051c6:	bd08      	pop	{r3, pc}
 80051c8:	08014dbc 	.word	0x08014dbc

080051cc <syncTime>:

void syncTime(){
 80051cc:	b508      	push	{r3, lr}
  SIM_sendCommand("AT+CLTS=1");
 80051ce:	4806      	ldr	r0, [pc, #24]	@ (80051e8 <syncTime+0x1c>)
 80051d0:	f7ff ffae 	bl	8005130 <SIM_sendCommand>
  HAL_Delay(50);
 80051d4:	2032      	movs	r0, #50	@ 0x32
 80051d6:	f000 ffe3 	bl	80061a0 <HAL_Delay>
  SIM_sendCommand("AT&W");
 80051da:	4804      	ldr	r0, [pc, #16]	@ (80051ec <syncTime+0x20>)
 80051dc:	f7ff ffa8 	bl	8005130 <SIM_sendCommand>
  HAL_Delay(50);
 80051e0:	2032      	movs	r0, #50	@ 0x32
 80051e2:	f000 ffdd 	bl	80061a0 <HAL_Delay>

}
 80051e6:	bd08      	pop	{r3, pc}
 80051e8:	08014dc8 	.word	0x08014dc8
 80051ec:	08014dd4 	.word	0x08014dd4

080051f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051f0:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051f2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 80051f4:	f001 f86a 	bl	80062cc <HAL_NVIC_SystemReset>
  //while (1){}
  /* USER CODE END Error_Handler_Debug */
}
 80051f8:	bd08      	pop	{r3, pc}
	...

080051fc <MX_SPI1_Init>:
{
 80051fc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80051fe:	480e      	ldr	r0, [pc, #56]	@ (8005238 <MX_SPI1_Init+0x3c>)
 8005200:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <MX_SPI1_Init+0x40>)
 8005202:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005204:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005208:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800520a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800520e:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005210:	2300      	movs	r3, #0
 8005212:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005214:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005216:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005218:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800521c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800521e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005220:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005222:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005224:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005226:	230a      	movs	r3, #10
 8005228:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800522a:	f004 fd33 	bl	8009c94 <HAL_SPI_Init>
 800522e:	b900      	cbnz	r0, 8005232 <MX_SPI1_Init+0x36>
}
 8005230:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005232:	f7ff ffdd 	bl	80051f0 <Error_Handler>
}
 8005236:	e7fb      	b.n	8005230 <MX_SPI1_Init+0x34>
 8005238:	2001d084 	.word	0x2001d084
 800523c:	40013000 	.word	0x40013000

08005240 <MX_UART5_Init>:
{
 8005240:	b508      	push	{r3, lr}
  huart5.Instance = UART5;
 8005242:	480a      	ldr	r0, [pc, #40]	@ (800526c <MX_UART5_Init+0x2c>)
 8005244:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <MX_UART5_Init+0x30>)
 8005246:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 8005248:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800524c:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800524e:	2300      	movs	r3, #0
 8005250:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005252:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005254:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005256:	220c      	movs	r2, #12
 8005258:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800525a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800525c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800525e:	f005 f947 	bl	800a4f0 <HAL_UART_Init>
 8005262:	b900      	cbnz	r0, 8005266 <MX_UART5_Init+0x26>
}
 8005264:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005266:	f7ff ffc3 	bl	80051f0 <Error_Handler>
}
 800526a:	e7fb      	b.n	8005264 <MX_UART5_Init+0x24>
 800526c:	2001cf9c 	.word	0x2001cf9c
 8005270:	40005000 	.word	0x40005000

08005274 <MX_USART6_UART_Init>:
{
 8005274:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8005276:	480a      	ldr	r0, [pc, #40]	@ (80052a0 <MX_USART6_UART_Init+0x2c>)
 8005278:	4b0a      	ldr	r3, [pc, #40]	@ (80052a4 <MX_USART6_UART_Init+0x30>)
 800527a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 800527c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005280:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005282:	2300      	movs	r3, #0
 8005284:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005286:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005288:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800528a:	220c      	movs	r2, #12
 800528c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800528e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005290:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005292:	f005 f92d 	bl	800a4f0 <HAL_UART_Init>
 8005296:	b900      	cbnz	r0, 800529a <MX_USART6_UART_Init+0x26>
}
 8005298:	bd08      	pop	{r3, pc}
    Error_Handler();
 800529a:	f7ff ffa9 	bl	80051f0 <Error_Handler>
}
 800529e:	e7fb      	b.n	8005298 <MX_USART6_UART_Init+0x24>
 80052a0:	2001cec4 	.word	0x2001cec4
 80052a4:	40011400 	.word	0x40011400

080052a8 <MX_SPI2_Init>:
{
 80052a8:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80052aa:	480e      	ldr	r0, [pc, #56]	@ (80052e4 <MX_SPI2_Init+0x3c>)
 80052ac:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <MX_SPI2_Init+0x40>)
 80052ae:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80052b0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80052b4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80052b6:	2300      	movs	r3, #0
 80052b8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80052ba:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052bc:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052be:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80052c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052c4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80052c6:	2238      	movs	r2, #56	@ 0x38
 80052c8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052ca:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80052cc:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ce:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80052d0:	230a      	movs	r3, #10
 80052d2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80052d4:	f004 fcde 	bl	8009c94 <HAL_SPI_Init>
 80052d8:	b900      	cbnz	r0, 80052dc <MX_SPI2_Init+0x34>
}
 80052da:	bd08      	pop	{r3, pc}
    Error_Handler();
 80052dc:	f7ff ff88 	bl	80051f0 <Error_Handler>
}
 80052e0:	e7fb      	b.n	80052da <MX_SPI2_Init+0x32>
 80052e2:	bf00      	nop
 80052e4:	2001d02c 	.word	0x2001d02c
 80052e8:	40003800 	.word	0x40003800

080052ec <MX_RTC_Init>:
{
 80052ec:	b510      	push	{r4, lr}
 80052ee:	b090      	sub	sp, #64	@ 0x40
  RTC_TimeTypeDef sTime = {0};
 80052f0:	2400      	movs	r4, #0
 80052f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80052f4:	940c      	str	r4, [sp, #48]	@ 0x30
 80052f6:	940d      	str	r4, [sp, #52]	@ 0x34
 80052f8:	940e      	str	r4, [sp, #56]	@ 0x38
 80052fa:	940f      	str	r4, [sp, #60]	@ 0x3c
  RTC_DateTypeDef sDate = {0};
 80052fc:	940a      	str	r4, [sp, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80052fe:	2228      	movs	r2, #40	@ 0x28
 8005300:	4621      	mov	r1, r4
 8005302:	4668      	mov	r0, sp
 8005304:	f006 fde1 	bl	800beca <memset>
  hrtc.Instance = RTC;
 8005308:	482d      	ldr	r0, [pc, #180]	@ (80053c0 <MX_RTC_Init+0xd4>)
 800530a:	4b2e      	ldr	r3, [pc, #184]	@ (80053c4 <MX_RTC_Init+0xd8>)
 800530c:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800530e:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005310:	237f      	movs	r3, #127	@ 0x7f
 8005312:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8005314:	23ff      	movs	r3, #255	@ 0xff
 8005316:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005318:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800531a:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800531c:	6184      	str	r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800531e:	f004 f9f9 	bl	8009714 <HAL_RTC_Init>
 8005322:	2800      	cmp	r0, #0
 8005324:	d13f      	bne.n	80053a6 <MX_RTC_Init+0xba>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_BKP_CONSTANT){return;}
 8005326:	2101      	movs	r1, #1
 8005328:	4825      	ldr	r0, [pc, #148]	@ (80053c0 <MX_RTC_Init+0xd4>)
 800532a:	f004 fc09 	bl	8009b40 <HAL_RTCEx_BKUPRead>
 800532e:	f242 3345 	movw	r3, #9029	@ 0x2345
 8005332:	4298      	cmp	r0, r3
 8005334:	d035      	beq.n	80053a2 <MX_RTC_Init+0xb6>
  sTime.Hours = 0x0;
 8005336:	2300      	movs	r3, #0
 8005338:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800533c:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8005340:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005344:	930e      	str	r3, [sp, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005346:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005348:	2201      	movs	r2, #1
 800534a:	a90b      	add	r1, sp, #44	@ 0x2c
 800534c:	481c      	ldr	r0, [pc, #112]	@ (80053c0 <MX_RTC_Init+0xd4>)
 800534e:	f004 fa3b 	bl	80097c8 <HAL_RTC_SetTime>
 8005352:	bb58      	cbnz	r0, 80053ac <MX_RTC_Init+0xc0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005354:	2201      	movs	r2, #1
 8005356:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800535a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  sDate.Date = 0x1;
 800535e:	f88d 202a 	strb.w	r2, [sp, #42]	@ 0x2a
  sDate.Year = 0x0;
 8005362:	2300      	movs	r3, #0
 8005364:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005368:	a90a      	add	r1, sp, #40	@ 0x28
 800536a:	4815      	ldr	r0, [pc, #84]	@ (80053c0 <MX_RTC_Init+0xd4>)
 800536c:	f004 fa8c 	bl	8009888 <HAL_RTC_SetDate>
 8005370:	b9f8      	cbnz	r0, 80053b2 <MX_RTC_Init+0xc6>
  sAlarm.AlarmTime.Hours = 0x0;
 8005372:	2300      	movs	r3, #0
 8005374:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 8005378:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800537c:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8005380:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005382:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005384:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005386:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005388:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800538a:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800538c:	2201      	movs	r2, #1
 800538e:	f88d 2020 	strb.w	r2, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8005392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005396:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005398:	4669      	mov	r1, sp
 800539a:	4809      	ldr	r0, [pc, #36]	@ (80053c0 <MX_RTC_Init+0xd4>)
 800539c:	f004 fac2 	bl	8009924 <HAL_RTC_SetAlarm>
 80053a0:	b950      	cbnz	r0, 80053b8 <MX_RTC_Init+0xcc>
}
 80053a2:	b010      	add	sp, #64	@ 0x40
 80053a4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80053a6:	f7ff ff23 	bl	80051f0 <Error_Handler>
 80053aa:	e7bc      	b.n	8005326 <MX_RTC_Init+0x3a>
    Error_Handler();
 80053ac:	f7ff ff20 	bl	80051f0 <Error_Handler>
 80053b0:	e7d0      	b.n	8005354 <MX_RTC_Init+0x68>
    Error_Handler();
 80053b2:	f7ff ff1d 	bl	80051f0 <Error_Handler>
 80053b6:	e7dc      	b.n	8005372 <MX_RTC_Init+0x86>
    Error_Handler();
 80053b8:	f7ff ff1a 	bl	80051f0 <Error_Handler>
 80053bc:	e7f1      	b.n	80053a2 <MX_RTC_Init+0xb6>
 80053be:	bf00      	nop
 80053c0:	2001d0dc 	.word	0x2001d0dc
 80053c4:	40002800 	.word	0x40002800

080053c8 <MX_USART2_UART_Init>:
{
 80053c8:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80053ca:	480a      	ldr	r0, [pc, #40]	@ (80053f4 <MX_USART2_UART_Init+0x2c>)
 80053cc:	4b0a      	ldr	r3, [pc, #40]	@ (80053f8 <MX_USART2_UART_Init+0x30>)
 80053ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80053d0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80053d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053d6:	2300      	movs	r3, #0
 80053d8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053da:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053dc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053de:	220c      	movs	r2, #12
 80053e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053e6:	f005 f883 	bl	800a4f0 <HAL_UART_Init>
 80053ea:	b900      	cbnz	r0, 80053ee <MX_USART2_UART_Init+0x26>
}
 80053ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80053ee:	f7ff feff 	bl	80051f0 <Error_Handler>
}
 80053f2:	e7fb      	b.n	80053ec <MX_USART2_UART_Init+0x24>
 80053f4:	2001cf54 	.word	0x2001cf54
 80053f8:	40004400 	.word	0x40004400

080053fc <MX_IWDG_Init>:
{
 80053fc:	b508      	push	{r3, lr}
  hiwdg.Instance = IWDG;
 80053fe:	4807      	ldr	r0, [pc, #28]	@ (800541c <MX_IWDG_Init+0x20>)
 8005400:	4b07      	ldr	r3, [pc, #28]	@ (8005420 <MX_IWDG_Init+0x24>)
 8005402:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8005404:	2306      	movs	r3, #6
 8005406:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 1250;
 8005408:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 800540c:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800540e:	f003 f869 	bl	80084e4 <HAL_IWDG_Init>
 8005412:	b900      	cbnz	r0, 8005416 <MX_IWDG_Init+0x1a>
}
 8005414:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005416:	f7ff feeb 	bl	80051f0 <Error_Handler>
}
 800541a:	e7fb      	b.n	8005414 <MX_IWDG_Init+0x18>
 800541c:	2001d0fc 	.word	0x2001d0fc
 8005420:	40003000 	.word	0x40003000

08005424 <MX_UART4_Init>:
{
 8005424:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 8005426:	480a      	ldr	r0, [pc, #40]	@ (8005450 <MX_UART4_Init+0x2c>)
 8005428:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <MX_UART4_Init+0x30>)
 800542a:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 800542c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005430:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005432:	2300      	movs	r3, #0
 8005434:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005436:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005438:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800543a:	220c      	movs	r2, #12
 800543c:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800543e:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005440:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005442:	f005 f855 	bl	800a4f0 <HAL_UART_Init>
 8005446:	b900      	cbnz	r0, 800544a <MX_UART4_Init+0x26>
}
 8005448:	bd08      	pop	{r3, pc}
    Error_Handler();
 800544a:	f7ff fed1 	bl	80051f0 <Error_Handler>
}
 800544e:	e7fb      	b.n	8005448 <MX_UART4_Init+0x24>
 8005450:	2001cfe4 	.word	0x2001cfe4
 8005454:	40004c00 	.word	0x40004c00

08005458 <MX_USART3_UART_Init>:
{
 8005458:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800545a:	480a      	ldr	r0, [pc, #40]	@ (8005484 <MX_USART3_UART_Init+0x2c>)
 800545c:	4b0a      	ldr	r3, [pc, #40]	@ (8005488 <MX_USART3_UART_Init+0x30>)
 800545e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8005460:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005464:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005466:	2300      	movs	r3, #0
 8005468:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800546a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800546c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800546e:	220c      	movs	r2, #12
 8005470:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005472:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005474:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005476:	f005 f83b 	bl	800a4f0 <HAL_UART_Init>
 800547a:	b900      	cbnz	r0, 800547e <MX_USART3_UART_Init+0x26>
}
 800547c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800547e:	f7ff feb7 	bl	80051f0 <Error_Handler>
}
 8005482:	e7fb      	b.n	800547c <MX_USART3_UART_Init+0x24>
 8005484:	2001cf0c 	.word	0x2001cf0c
 8005488:	40004800 	.word	0x40004800

0800548c <MX_I2C1_Init>:
{
 800548c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800548e:	480b      	ldr	r0, [pc, #44]	@ (80054bc <MX_I2C1_Init+0x30>)
 8005490:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <MX_I2C1_Init+0x34>)
 8005492:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005494:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <MX_I2C1_Init+0x38>)
 8005496:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005498:	2300      	movs	r3, #0
 800549a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800549c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800549e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054a2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054a4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80054a6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054a8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054aa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054ac:	f001 feca 	bl	8007244 <HAL_I2C_Init>
 80054b0:	b900      	cbnz	r0, 80054b4 <MX_I2C1_Init+0x28>
}
 80054b2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80054b4:	f7ff fe9c 	bl	80051f0 <Error_Handler>
}
 80054b8:	e7fb      	b.n	80054b2 <MX_I2C1_Init+0x26>
 80054ba:	bf00      	nop
 80054bc:	2001d108 	.word	0x2001d108
 80054c0:	40005400 	.word	0x40005400
 80054c4:	000186a0 	.word	0x000186a0

080054c8 <SystemClock_Config>:
{
 80054c8:	b500      	push	{lr}
 80054ca:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054cc:	2234      	movs	r2, #52	@ 0x34
 80054ce:	2100      	movs	r1, #0
 80054d0:	a807      	add	r0, sp, #28
 80054d2:	f006 fcfa 	bl	800beca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054d6:	2300      	movs	r3, #0
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	9303      	str	r3, [sp, #12]
 80054dc:	9304      	str	r3, [sp, #16]
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <SystemClock_Config+0xa8>)
 80054e6:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80054e8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80054ec:	6411      	str	r1, [r2, #64]	@ 0x40
 80054ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80054f0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80054f4:	9200      	str	r2, [sp, #0]
 80054f6:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005574 <SystemClock_Config+0xac>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800550e:	230d      	movs	r3, #13
 8005510:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005512:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005516:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005518:	2301      	movs	r3, #1
 800551a:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800551c:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800551e:	2302      	movs	r3, #2
 8005520:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005522:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005526:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005528:	2204      	movs	r2, #4
 800552a:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800552c:	2260      	movs	r2, #96	@ 0x60
 800552e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005530:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005532:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005534:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005536:	a807      	add	r0, sp, #28
 8005538:	f003 fe92 	bl	8009260 <HAL_RCC_OscConfig>
 800553c:	b988      	cbnz	r0, 8005562 <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800553e:	230f      	movs	r3, #15
 8005540:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005542:	2302      	movs	r3, #2
 8005544:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005546:	2300      	movs	r3, #0
 8005548:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800554a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800554e:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005550:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005552:	2103      	movs	r1, #3
 8005554:	a802      	add	r0, sp, #8
 8005556:	f003 fbbf 	bl	8008cd8 <HAL_RCC_ClockConfig>
 800555a:	b928      	cbnz	r0, 8005568 <SystemClock_Config+0xa0>
}
 800555c:	b015      	add	sp, #84	@ 0x54
 800555e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005562:	f7ff fe45 	bl	80051f0 <Error_Handler>
 8005566:	e7ea      	b.n	800553e <SystemClock_Config+0x76>
    Error_Handler();
 8005568:	f7ff fe42 	bl	80051f0 <Error_Handler>
}
 800556c:	e7f6      	b.n	800555c <SystemClock_Config+0x94>
 800556e:	bf00      	nop
 8005570:	40023800 	.word	0x40023800
 8005574:	40007000 	.word	0x40007000

08005578 <getTime>:
void getTime(){
 8005578:	b500      	push	{lr}
 800557a:	b09b      	sub	sp, #108	@ 0x6c
  SIM_sendCommand("AT+CCLK?");
 800557c:	4842      	ldr	r0, [pc, #264]	@ (8005688 <getTime+0x110>)
 800557e:	f7ff fdd7 	bl	8005130 <SIM_sendCommand>
  HAL_Delay(50);
 8005582:	2032      	movs	r0, #50	@ 0x32
 8005584:	f000 fe0c 	bl	80061a0 <HAL_Delay>
  for(i=0; SIMrxBuffer[i]!='\0'; i++) {
 8005588:	f04f 0c00 	mov.w	ip, #0
 800558c:	e00d      	b.n	80055aa <getTime+0x32>
    for(j=i, k=0; cclk[k]!='\0' && SIMrxBuffer[j]==cclk[k]; j++, k++)
 800558e:	3101      	adds	r1, #1
 8005590:	3201      	adds	r2, #1
 8005592:	4b3e      	ldr	r3, [pc, #248]	@ (800568c <getTime+0x114>)
 8005594:	5c9b      	ldrb	r3, [r3, r2]
 8005596:	b11b      	cbz	r3, 80055a0 <getTime+0x28>
 8005598:	483d      	ldr	r0, [pc, #244]	@ (8005690 <getTime+0x118>)
 800559a:	5c40      	ldrb	r0, [r0, r1]
 800559c:	4283      	cmp	r3, r0
 800559e:	d0f6      	beq.n	800558e <getTime+0x16>
    if(k>0 && cclk[k]=='\0')
 80055a0:	2a00      	cmp	r2, #0
 80055a2:	dd00      	ble.n	80055a6 <getTime+0x2e>
 80055a4:	b19b      	cbz	r3, 80055ce <getTime+0x56>
  for(i=0; SIMrxBuffer[i]!='\0'; i++) {
 80055a6:	f10c 0c01 	add.w	ip, ip, #1
 80055aa:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <getTime+0x118>)
 80055ac:	f813 300c 	ldrb.w	r3, [r3, ip]
 80055b0:	b17b      	cbz	r3, 80055d2 <getTime+0x5a>
    for(j=i, k=0; cclk[k]!='\0' && SIMrxBuffer[j]==cclk[k]; j++, k++)
 80055b2:	4661      	mov	r1, ip
 80055b4:	2200      	movs	r2, #0
 80055b6:	e7ec      	b.n	8005592 <getTime+0x1a>
          time[l] = SIMrxBuffer[i+l];
 80055b8:	eb03 020c 	add.w	r2, r3, ip
 80055bc:	4934      	ldr	r1, [pc, #208]	@ (8005690 <getTime+0x118>)
 80055be:	5c89      	ldrb	r1, [r1, r2]
 80055c0:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055c4:	446a      	add	r2, sp
 80055c6:	f802 1c20 	strb.w	r1, [r2, #-32]
        for (uint8_t l = 0; l < 30; l++){
 80055ca:	3301      	adds	r3, #1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b1d      	cmp	r3, #29
 80055d0:	d9f2      	bls.n	80055b8 <getTime+0x40>
  time[29] ='\0';
 80055d2:	2300      	movs	r3, #0
 80055d4:	f88d 3065 	strb.w	r3, [sp, #101]	@ 0x65
  int result = sscanf(time, "+CCLK: \"%8s,%8s%3s\"", date_part, time_part, offset_part);
 80055d8:	ab05      	add	r3, sp, #20
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	ab06      	add	r3, sp, #24
 80055de:	aa09      	add	r2, sp, #36	@ 0x24
 80055e0:	492c      	ldr	r1, [pc, #176]	@ (8005694 <getTime+0x11c>)
 80055e2:	a812      	add	r0, sp, #72	@ 0x48
 80055e4:	f006 fc00 	bl	800bde8 <siscanf>
  if (result == 3) {
 80055e8:	2803      	cmp	r0, #3
 80055ea:	d002      	beq.n	80055f2 <getTime+0x7a>
}
 80055ec:	b01b      	add	sp, #108	@ 0x6c
 80055ee:	f85d fb04 	ldr.w	pc, [sp], #4
    sscanf(date_part, "%2d/%2d/%2d", &year, &month, &day);
 80055f2:	f10d 030e 	add.w	r3, sp, #14
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	f10d 030f 	add.w	r3, sp, #15
 80055fc:	aa04      	add	r2, sp, #16
 80055fe:	4926      	ldr	r1, [pc, #152]	@ (8005698 <getTime+0x120>)
 8005600:	a809      	add	r0, sp, #36	@ 0x24
 8005602:	f006 fbf1 	bl	800bde8 <siscanf>
    nDate.Year = year;
 8005606:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800560a:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
    nDate.Month = month;
 800560e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005612:	f88d 3045 	strb.w	r3, [sp, #69]	@ 0x45
    nDate.Date = day;
 8005616:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800561a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
    nDate.WeekDay = 5;
 800561e:	2305      	movs	r3, #5
 8005620:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
    if (HAL_RTC_SetDate(&hrtc, &nDate, RTC_FORMAT_BIN) != HAL_OK)
 8005624:	2200      	movs	r2, #0
 8005626:	a911      	add	r1, sp, #68	@ 0x44
 8005628:	481c      	ldr	r0, [pc, #112]	@ (800569c <getTime+0x124>)
 800562a:	f004 f92d 	bl	8009888 <HAL_RTC_SetDate>
 800562e:	bb28      	cbnz	r0, 800567c <getTime+0x104>
    sscanf(time_part, "%2d:%2d:%2d", &hours, &minutes, &seconds);
 8005630:	f10d 0313 	add.w	r3, sp, #19
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	f10d 0312 	add.w	r3, sp, #18
 800563a:	f10d 0211 	add.w	r2, sp, #17
 800563e:	4918      	ldr	r1, [pc, #96]	@ (80056a0 <getTime+0x128>)
 8005640:	a806      	add	r0, sp, #24
 8005642:	f006 fbd1 	bl	800bde8 <siscanf>
    nTime.Hours = hours;
 8005646:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800564a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
    nTime.Minutes = minutes;
 800564e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005652:	f88d 3031 	strb.w	r3, [sp, #49]	@ 0x31
    nTime.Seconds = seconds;
 8005656:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800565a:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
    nTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800565e:	2200      	movs	r2, #0
 8005660:	920f      	str	r2, [sp, #60]	@ 0x3c
    nTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005662:	9210      	str	r2, [sp, #64]	@ 0x40
    if (HAL_RTC_SetTime(&hrtc, &nTime, RTC_FORMAT_BIN) != HAL_OK)
 8005664:	a90c      	add	r1, sp, #48	@ 0x30
 8005666:	480d      	ldr	r0, [pc, #52]	@ (800569c <getTime+0x124>)
 8005668:	f004 f8ae 	bl	80097c8 <HAL_RTC_SetTime>
 800566c:	b948      	cbnz	r0, 8005682 <getTime+0x10a>
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_BKP_CONSTANT);
 800566e:	f242 3245 	movw	r2, #9029	@ 0x2345
 8005672:	2101      	movs	r1, #1
 8005674:	4809      	ldr	r0, [pc, #36]	@ (800569c <getTime+0x124>)
 8005676:	f004 fa5e 	bl	8009b36 <HAL_RTCEx_BKUPWrite>
}
 800567a:	e7b7      	b.n	80055ec <getTime+0x74>
      Error_Handler();
 800567c:	f7ff fdb8 	bl	80051f0 <Error_Handler>
 8005680:	e7d6      	b.n	8005630 <getTime+0xb8>
      Error_Handler();
 8005682:	f7ff fdb5 	bl	80051f0 <Error_Handler>
 8005686:	e7f2      	b.n	800566e <getTime+0xf6>
 8005688:	08014ddc 	.word	0x08014ddc
 800568c:	08014de8 	.word	0x08014de8
 8005690:	2001c8f8 	.word	0x2001c8f8
 8005694:	08014df0 	.word	0x08014df0
 8005698:	08014e04 	.word	0x08014e04
 800569c:	2001d0dc 	.word	0x2001d0dc
 80056a0:	08014e10 	.word	0x08014e10

080056a4 <main>:
{
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 80056ac:	b081      	sub	sp, #4
  HAL_Init();
 80056ae:	f000 fd4b 	bl	8006148 <HAL_Init>
  SystemClock_Config();
 80056b2:	f7ff ff09 	bl	80054c8 <SystemClock_Config>
  MX_GPIO_Init();
 80056b6:	f7ff fab7 	bl	8004c28 <MX_GPIO_Init>
  MX_DMA_Init();
 80056ba:	f7ff fb59 	bl	8004d70 <MX_DMA_Init>
  MX_SPI1_Init();
 80056be:	f7ff fd9d 	bl	80051fc <MX_SPI1_Init>
  MX_UART5_Init();
 80056c2:	f7ff fdbd 	bl	8005240 <MX_UART5_Init>
  MX_USART6_UART_Init();
 80056c6:	f7ff fdd5 	bl	8005274 <MX_USART6_UART_Init>
  MX_SPI2_Init();
 80056ca:	f7ff fded 	bl	80052a8 <MX_SPI2_Init>
  MX_FATFS_Init();
 80056ce:	f7fb fedb 	bl	8001488 <MX_FATFS_Init>
  MX_RTC_Init();
 80056d2:	f7ff fe0b 	bl	80052ec <MX_RTC_Init>
  MX_USART2_UART_Init();
 80056d6:	f7ff fe77 	bl	80053c8 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80056da:	f7ff fe8f 	bl	80053fc <MX_IWDG_Init>
  MX_UART4_Init();
 80056de:	f7ff fea1 	bl	8005424 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80056e2:	f7ff feb9 	bl	8005458 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80056e6:	f7ff fed1 	bl	800548c <MX_I2C1_Init>
	dispcolor_Init(240, 240);
 80056ea:	21f0      	movs	r1, #240	@ 0xf0
 80056ec:	4608      	mov	r0, r1
 80056ee:	f7fb fd37 	bl	8001160 <dispcolor_Init>
	uint32_t dev_init_timeout = HAL_GetTick();
 80056f2:	f000 fd4f 	bl	8006194 <HAL_GetTick>
  uint32_t screen_disp_time = HAL_GetTick();
 80056f6:	f000 fd4d 	bl	8006194 <HAL_GetTick>
 80056fa:	4605      	mov	r5, r0
  uint32_t touch_tmr = HAL_GetTick();
 80056fc:	f000 fd4a 	bl	8006194 <HAL_GetTick>
 8005700:	4607      	mov	r7, r0
  uint32_t sim_tmr = HAL_GetTick();
 8005702:	f000 fd47 	bl	8006194 <HAL_GetTick>
 8005706:	4604      	mov	r4, r0
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8005708:	4ebe      	ldr	r6, [pc, #760]	@ (8005a04 <main+0x360>)
 800570a:	2200      	movs	r2, #0
 800570c:	f50d 5104 	add.w	r1, sp, #8448	@ 0x2100
 8005710:	3128      	adds	r1, #40	@ 0x28
 8005712:	4630      	mov	r0, r6
 8005714:	f004 f9cb 	bl	8009aae <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8005718:	2200      	movs	r2, #0
 800571a:	f50d 5104 	add.w	r1, sp, #8448	@ 0x2100
 800571e:	313c      	adds	r1, #60	@ 0x3c
 8005720:	4630      	mov	r0, r6
 8005722:	f004 f9ea 	bl	8009afa <HAL_RTC_GetDate>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_BKP_CONSTANT){
 8005726:	2101      	movs	r1, #1
 8005728:	4630      	mov	r0, r6
 800572a:	f004 fa09 	bl	8009b40 <HAL_RTCEx_BKUPRead>
 800572e:	f242 3345 	movw	r3, #9029	@ 0x2345
 8005732:	4298      	cmp	r0, r3
 8005734:	d116      	bne.n	8005764 <main+0xc0>
    isRTCSetUp = true;
 8005736:	4bb4      	ldr	r3, [pc, #720]	@ (8005a08 <main+0x364>)
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
  FR_Status = f_mount(&FatFs, "", 1);
 800573c:	2201      	movs	r2, #1
 800573e:	49b3      	ldr	r1, [pc, #716]	@ (8005a0c <main+0x368>)
 8005740:	f50d 5087 	add.w	r0, sp, #4320	@ 0x10e0
 8005744:	3010      	adds	r0, #16
 8005746:	f7fd fca5 	bl	8003094 <f_mount>
  if (FR_Status == FR_OK){
 800574a:	b970      	cbnz	r0, 800576a <main+0xc6>
    isSDInitialised = true;
 800574c:	4bb0      	ldr	r3, [pc, #704]	@ (8005a10 <main+0x36c>)
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart6, SIMrxBuffer, RX_BUFFER_SIZE);
 8005752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005756:	49af      	ldr	r1, [pc, #700]	@ (8005a14 <main+0x370>)
 8005758:	48af      	ldr	r0, [pc, #700]	@ (8005a18 <main+0x374>)
 800575a:	f005 fa0f 	bl	800ab7c <HAL_UART_Receive_DMA>
  for (int i = 0; i < DEV_COUNT; i++){
 800575e:	f04f 0800 	mov.w	r8, #0
 8005762:	e020      	b.n	80057a6 <main+0x102>
    Show_RTC_Warning();
 8005764:	f7fe fd84 	bl	8004270 <Show_RTC_Warning>
 8005768:	e7e8      	b.n	800573c <main+0x98>
    Show_SD_Warning();
 800576a:	f7fe fd55 	bl	8004218 <Show_SD_Warning>
 800576e:	e7f0      	b.n	8005752 <main+0xae>
    GPIO_TypeDef *curDevRSTport = deviceList[i].RSTport;
 8005770:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
 8005774:	4ea9      	ldr	r6, [pc, #676]	@ (8005a1c <main+0x378>)
 8005776:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 800577a:	f8d6 9008 	ldr.w	r9, [r6, #8]
    uint16_t curDevRSTpin = deviceList[i].RSTpin;
 800577e:	f8b6 a00c 	ldrh.w	sl, [r6, #12]
    HAL_GPIO_WritePin(curDevRSTport, curDevRSTpin, GPIO_PIN_RESET);
 8005782:	2200      	movs	r2, #0
 8005784:	4651      	mov	r1, sl
 8005786:	4648      	mov	r0, r9
 8005788:	f001 f90e 	bl	80069a8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800578c:	2064      	movs	r0, #100	@ 0x64
 800578e:	f000 fd07 	bl	80061a0 <HAL_Delay>
    HAL_GPIO_WritePin(curDevRSTport, curDevRSTpin, GPIO_PIN_SET);
 8005792:	2201      	movs	r2, #1
 8005794:	4651      	mov	r1, sl
 8005796:	4648      	mov	r0, r9
 8005798:	f001 f906 	bl	80069a8 <HAL_GPIO_WritePin>
    deviceList[i].tx_buff[0] = 84;
 800579c:	2354      	movs	r3, #84	@ 0x54
 800579e:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
  for (int i = 0; i < DEV_COUNT; i++){
 80057a2:	f108 0801 	add.w	r8, r8, #1
 80057a6:	f1b8 0f03 	cmp.w	r8, #3
 80057aa:	dde1      	ble.n	8005770 <main+0xcc>
  dev_init_timeout = HAL_GetTick();
 80057ac:	f000 fcf2 	bl	8006194 <HAL_GetTick>
 80057b0:	4606      	mov	r6, r0
  if (!CST816S_Init(&hi2c1)){
 80057b2:	489b      	ldr	r0, [pc, #620]	@ (8005a20 <main+0x37c>)
 80057b4:	f7fb fb16 	bl	8000de4 <CST816S_Init>
 80057b8:	b110      	cbz	r0, 80057c0 <main+0x11c>
  for (int i = 0; i < DEV_COUNT; i++){
 80057ba:	f04f 0900 	mov.w	r9, #0
 80057be:	e1cb      	b.n	8005b58 <main+0x4b4>
    HAL_NVIC_SystemReset();
 80057c0:	f000 fd84 	bl	80062cc <HAL_NVIC_SystemReset>
 80057c4:	e7f9      	b.n	80057ba <main+0x116>
      Display_Init(dev_num, DEV_COUNT);
 80057c6:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005a24 <main+0x380>
 80057ca:	2104      	movs	r1, #4
 80057cc:	f89a 0000 	ldrb.w	r0, [sl]
 80057d0:	f7ff f92c 	bl	8004a2c <Display_Init>
      HAL_UART_Transmit_DMA(deviceList[dev_num].uart, deviceList[dev_num].tx_buff, 10);
 80057d4:	f89a 3000 	ldrb.w	r3, [sl]
 80057d8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80057dc:	00c9      	lsls	r1, r1, #3
 80057de:	3138      	adds	r1, #56	@ 0x38
 80057e0:	f8df 8238 	ldr.w	r8, [pc, #568]	@ 8005a1c <main+0x378>
 80057e4:	4441      	add	r1, r8
 80057e6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80057ea:	220a      	movs	r2, #10
 80057ec:	3105      	adds	r1, #5
 80057ee:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
 80057f2:	f004 fead 	bl	800a550 <HAL_UART_Transmit_DMA>
      HAL_UART_Receive_DMA(deviceList[dev_num].uart, deviceList[dev_num].rx_buff, 10);
 80057f6:	f89a 3000 	ldrb.w	r3, [sl]
 80057fa:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80057fe:	00c9      	lsls	r1, r1, #3
 8005800:	3130      	adds	r1, #48	@ 0x30
 8005802:	4441      	add	r1, r8
 8005804:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005808:	220a      	movs	r2, #10
 800580a:	3103      	adds	r1, #3
 800580c:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
 8005810:	f005 f9b4 	bl	800ab7c <HAL_UART_Receive_DMA>
 8005814:	e1b5      	b.n	8005b82 <main+0x4de>
        Dispaly_Data(&deviceList[dev_num]);
 8005816:	4b83      	ldr	r3, [pc, #524]	@ (8005a24 <main+0x380>)
 8005818:	7818      	ldrb	r0, [r3, #0]
 800581a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800581e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a1c <main+0x378>)
 8005820:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005824:	f7fe feb4 	bl	8004590 <Dispaly_Data>
        if(transmitMode == TRANSMIT_MODE_GET){
 8005828:	4b7f      	ldr	r3, [pc, #508]	@ (8005a28 <main+0x384>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	bb9b      	cbnz	r3, 8005896 <main+0x1f2>
          if(deviceList[dev_num].deviceMode != TYPE_SET_ONLY){
 800582e:	4b7d      	ldr	r3, [pc, #500]	@ (8005a24 <main+0x380>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8005836:	4a79      	ldr	r2, [pc, #484]	@ (8005a1c <main+0x378>)
 8005838:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800583c:	7952      	ldrb	r2, [r2, #5]
 800583e:	2a01      	cmp	r2, #1
 8005840:	d10c      	bne.n	800585c <main+0x1b8>
        for(uint8_t act_dev = 0; act_dev < 4; act_dev++){
 8005842:	2100      	movs	r1, #0
 8005844:	2903      	cmp	r1, #3
 8005846:	f200 819c 	bhi.w	8005b82 <main+0x4de>
          if (act_dev_list[act_dev] == dev_num){
 800584a:	4b78      	ldr	r3, [pc, #480]	@ (8005a2c <main+0x388>)
 800584c:	565a      	ldrsb	r2, [r3, r1]
 800584e:	4b75      	ldr	r3, [pc, #468]	@ (8005a24 <main+0x380>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d03f      	beq.n	80058d6 <main+0x232>
        for(uint8_t act_dev = 0; act_dev < 4; act_dev++){
 8005856:	3101      	adds	r1, #1
 8005858:	b2c9      	uxtb	r1, r1
 800585a:	e7f3      	b.n	8005844 <main+0x1a0>
            HAL_UART_Transmit_DMA(deviceList[dev_num].uart, deviceList[dev_num].tx_buff, 10);
 800585c:	00c9      	lsls	r1, r1, #3
 800585e:	3138      	adds	r1, #56	@ 0x38
 8005860:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 8005a1c <main+0x378>
 8005864:	4441      	add	r1, r8
 8005866:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800586a:	220a      	movs	r2, #10
 800586c:	3105      	adds	r1, #5
 800586e:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
 8005872:	f004 fe6d 	bl	800a550 <HAL_UART_Transmit_DMA>
            HAL_UART_Receive_DMA(deviceList[dev_num].uart, deviceList[dev_num].rx_buff, 10);
 8005876:	4b6b      	ldr	r3, [pc, #428]	@ (8005a24 <main+0x380>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 800587e:	00c9      	lsls	r1, r1, #3
 8005880:	3130      	adds	r1, #48	@ 0x30
 8005882:	4441      	add	r1, r8
 8005884:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005888:	220a      	movs	r2, #10
 800588a:	3103      	adds	r1, #3
 800588c:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
 8005890:	f005 f974 	bl	800ab7c <HAL_UART_Receive_DMA>
 8005894:	e7d5      	b.n	8005842 <main+0x19e>
          itoa(deviceList[dev_num].setValue, setValueTx, 10);
 8005896:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 8005a1c <main+0x378>
 800589a:	f8df a188 	ldr.w	sl, [pc, #392]	@ 8005a24 <main+0x380>
 800589e:	f89a 3000 	ldrb.w	r3, [sl]
 80058a2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80058a6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80058aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80058ae:	f7fb f95b 	bl	8000b68 <__aeabi_d2iz>
 80058b2:	220a      	movs	r2, #10
 80058b4:	a91c      	add	r1, sp, #112	@ 0x70
 80058b6:	f005 faff 	bl	800aeb8 <itoa>
          HAL_UART_Transmit_DMA(deviceList[dev_num].uart, (uint8_t*)&setValueTx, 10);
 80058ba:	f89a 3000 	ldrb.w	r3, [sl]
 80058be:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80058c2:	220a      	movs	r2, #10
 80058c4:	a91c      	add	r1, sp, #112	@ 0x70
 80058c6:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
 80058ca:	f004 fe41 	bl	800a550 <HAL_UART_Transmit_DMA>
          transmitMode = TRANSMIT_MODE_GET;
 80058ce:	4b56      	ldr	r3, [pc, #344]	@ (8005a28 <main+0x384>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e7b5      	b.n	8005842 <main+0x19e>
            Draw_NavBar(act_dev_cnt, act_dev);
 80058d6:	b249      	sxtb	r1, r1
 80058d8:	4b55      	ldr	r3, [pc, #340]	@ (8005a30 <main+0x38c>)
 80058da:	7818      	ldrb	r0, [r3, #0]
 80058dc:	f7fe fc4e 	bl	800417c <Draw_NavBar>
            break;
 80058e0:	e14f      	b.n	8005b82 <main+0x4de>
        dev_num++;
 80058e2:	f108 0301 	add.w	r3, r8, #1
 80058e6:	4a4f      	ldr	r2, [pc, #316]	@ (8005a24 <main+0x380>)
 80058e8:	7013      	strb	r3, [r2, #0]
 80058ea:	e159      	b.n	8005ba0 <main+0x4fc>
        if(checkSIMStatus()){
 80058ec:	f7ff fc3e 	bl	800516c <checkSIMStatus>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f000 8168 	beq.w	8005bc6 <main+0x522>
          Add_Message("SIM detected");
 80058f6:	484f      	ldr	r0, [pc, #316]	@ (8005a34 <main+0x390>)
 80058f8:	f7fe fc20 	bl	800413c <Add_Message>
          isSIMInserted = true;
 80058fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a38 <main+0x394>)
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e160      	b.n	8005bc6 <main+0x522>
        if(checkInitStatus()){
 8005904:	f7ff fc46 	bl	8005194 <checkInitStatus>
 8005908:	2800      	cmp	r0, #0
 800590a:	f000 8164 	beq.w	8005bd6 <main+0x532>
          Add_Message("GSM connected");
 800590e:	484b      	ldr	r0, [pc, #300]	@ (8005a3c <main+0x398>)
 8005910:	f7fe fc14 	bl	800413c <Add_Message>
          if(!isRTCSetUp && !isRTCTimeSync){
 8005914:	4b3c      	ldr	r3, [pc, #240]	@ (8005a08 <main+0x364>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	b913      	cbnz	r3, 8005920 <main+0x27c>
 800591a:	4b49      	ldr	r3, [pc, #292]	@ (8005a40 <main+0x39c>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b11b      	cbz	r3, 8005928 <main+0x284>
            isSIMInitialised = true;
 8005920:	4b48      	ldr	r3, [pc, #288]	@ (8005a44 <main+0x3a0>)
 8005922:	2201      	movs	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e156      	b.n	8005bd6 <main+0x532>
            syncTime();
 8005928:	f7ff fc50 	bl	80051cc <syncTime>
            resetModule();
 800592c:	f7ff fc44 	bl	80051b8 <resetModule>
            isRTCTimeSync = true;
 8005930:	4b43      	ldr	r3, [pc, #268]	@ (8005a40 <main+0x39c>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e14e      	b.n	8005bd6 <main+0x532>
        getTime();
 8005938:	f7ff fe1e 	bl	8005578 <getTime>
        if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_BKP_CONSTANT){
 800593c:	2101      	movs	r1, #1
 800593e:	4831      	ldr	r0, [pc, #196]	@ (8005a04 <main+0x360>)
 8005940:	f004 f8fe 	bl	8009b40 <HAL_RTCEx_BKUPRead>
 8005944:	f242 3345 	movw	r3, #9029	@ 0x2345
 8005948:	4298      	cmp	r0, r3
 800594a:	f040 814c 	bne.w	8005be6 <main+0x542>
          Add_Message("RTC is set up");
 800594e:	483e      	ldr	r0, [pc, #248]	@ (8005a48 <main+0x3a4>)
 8005950:	f7fe fbf4 	bl	800413c <Add_Message>
          isRTCSetUp = true;
 8005954:	4b2c      	ldr	r3, [pc, #176]	@ (8005a08 <main+0x364>)
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	e144      	b.n	8005be6 <main+0x542>
    if(dev_num == DEV_COUNT && state == STATE_INIT){
 800595c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a4c <main+0x3a8>)
 800595e:	f893 8000 	ldrb.w	r8, [r3]
 8005962:	f1b8 0f00 	cmp.w	r8, #0
 8005966:	f040 8146 	bne.w	8005bf6 <main+0x552>
      state = STATE_DISPLAY;
 800596a:	2001      	movs	r0, #1
 800596c:	7018      	strb	r0, [r3, #0]
      findNextInDev(true);
 800596e:	f7ff fb99 	bl	80050a4 <findNextInDev>
      screen_scroll_mode = SCROLL_MODE_AUTO;
 8005972:	4b37      	ldr	r3, [pc, #220]	@ (8005a50 <main+0x3ac>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
      if(isSDInitialised){
 8005978:	4b25      	ldr	r3, [pc, #148]	@ (8005a10 <main+0x36c>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 813a 	beq.w	8005bf6 <main+0x552>
        sprintf(filename_buff, "init_%02d-%02d-%02d_%02d-%02d-%2d.txt", gTime.Hours, gTime.Minutes, gTime.Seconds, gDate.Date, gDate.Month, gDate.Year);
 8005982:	f50d 5304 	add.w	r3, sp, #8448	@ 0x2100
 8005986:	332a      	adds	r3, #42	@ 0x2a
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	f50d 5204 	add.w	r2, sp, #8448	@ 0x2100
 800598e:	323e      	adds	r2, #62	@ 0x3e
 8005990:	7812      	ldrb	r2, [r2, #0]
 8005992:	f50d 5104 	add.w	r1, sp, #8448	@ 0x2100
 8005996:	313d      	adds	r1, #61	@ 0x3d
 8005998:	7809      	ldrb	r1, [r1, #0]
 800599a:	f50d 5004 	add.w	r0, sp, #8448	@ 0x2100
 800599e:	303f      	adds	r0, #63	@ 0x3f
 80059a0:	7800      	ldrb	r0, [r0, #0]
 80059a2:	9003      	str	r0, [sp, #12]
 80059a4:	9102      	str	r1, [sp, #8]
 80059a6:	9201      	str	r2, [sp, #4]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	f50d 5304 	add.w	r3, sp, #8448	@ 0x2100
 80059ae:	3329      	adds	r3, #41	@ 0x29
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	f50d 5204 	add.w	r2, sp, #8448	@ 0x2100
 80059b6:	3228      	adds	r2, #40	@ 0x28
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	4926      	ldr	r1, [pc, #152]	@ (8005a54 <main+0x3b0>)
 80059bc:	a813      	add	r0, sp, #76	@ 0x4c
 80059be:	f006 f9f1 	bl	800bda4 <siprintf>
        FR_Status = f_open(&Fil, filename_buff, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80059c2:	221a      	movs	r2, #26
 80059c4:	a913      	add	r1, sp, #76	@ 0x4c
 80059c6:	a830      	add	r0, sp, #192	@ 0xc0
 80059c8:	f7fd fb92 	bl	80030f0 <f_open>
        uint32_t reset_flags = RCC->CSR;
 80059cc:	4b22      	ldr	r3, [pc, #136]	@ (8005a58 <main+0x3b4>)
 80059ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        if (reset_flags & RCC_CSR_IWDGRSTF) {
 80059d0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80059d4:	d109      	bne.n	80059ea <main+0x346>
        }else if (reset_flags & RCC_CSR_PINRSTF){
 80059d6:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80059da:	d141      	bne.n	8005a60 <main+0x3bc>
        uint8_t buf_len = 0;
 80059dc:	4642      	mov	r2, r8
        FR_Status = f_write(&Fil, reset_cause_buf, buf_len, &bytesWrote);
 80059de:	ab2f      	add	r3, sp, #188	@ 0xbc
 80059e0:	a90e      	add	r1, sp, #56	@ 0x38
 80059e2:	a830      	add	r0, sp, #192	@ 0xc0
 80059e4:	f7fd fc99 	bl	800331a <f_write>
        for (uint8_t i = 0; i < DEV_COUNT; i++){
 80059e8:	e06f      	b.n	8005aca <main+0x426>
          buf_len = sprintf(reset_cause_buf, "Reset by IWDG\n");
 80059ea:	4b1c      	ldr	r3, [pc, #112]	@ (8005a5c <main+0x3b8>)
 80059ec:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80059f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059f2:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80059f6:	f82c 3b02 	strh.w	r3, [ip], #2
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	f88c 3000 	strb.w	r3, [ip]
 8005a00:	220e      	movs	r2, #14
 8005a02:	e7ec      	b.n	80059de <main+0x33a>
 8005a04:	2001d0dc 	.word	0x2001d0dc
 8005a08:	2001c871 	.word	0x2001c871
 8005a0c:	08014ef8 	.word	0x08014ef8
 8005a10:	2001c875 	.word	0x2001c875
 8005a14:	2001c8f8 	.word	0x2001c8f8
 8005a18:	2001cec4 	.word	0x2001cec4
 8005a1c:	20000008 	.word	0x20000008
 8005a20:	2001d108 	.word	0x2001d108
 8005a24:	2001cb00 	.word	0x2001cb00
 8005a28:	2001c876 	.word	0x2001c876
 8005a2c:	2000012c 	.word	0x2000012c
 8005a30:	2001caff 	.word	0x2001caff
 8005a34:	08014e1c 	.word	0x08014e1c
 8005a38:	2001c873 	.word	0x2001c873
 8005a3c:	08014e2c 	.word	0x08014e2c
 8005a40:	2001c870 	.word	0x2001c870
 8005a44:	2001c874 	.word	0x2001c874
 8005a48:	08014e3c 	.word	0x08014e3c
 8005a4c:	2001cb01 	.word	0x2001cb01
 8005a50:	2001cafe 	.word	0x2001cafe
 8005a54:	08014e4c 	.word	0x08014e4c
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	08014e74 	.word	0x08014e74
          buf_len = sprintf(reset_cause_buf, "Normal startup\n");
 8005a60:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8005a64:	4ba2      	ldr	r3, [pc, #648]	@ (8005cf0 <main+0x64c>)
 8005a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8005a6c:	220f      	movs	r2, #15
 8005a6e:	e7b6      	b.n	80059de <main+0x33a>
              sprintf(dev_type_buf, "TYPE_SET_ONLY");
 8005a70:	4ba0      	ldr	r3, [pc, #640]	@ (8005cf4 <main+0x650>)
 8005a72:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8005a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a78:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8005a7c:	f8ac 3000 	strh.w	r3, [ip]
            gcvt(deviceList[i].minValue, 5, min);
 8005a80:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
 8005a84:	4b9c      	ldr	r3, [pc, #624]	@ (8005cf8 <main+0x654>)
 8005a86:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
 8005a8a:	a908      	add	r1, sp, #32
 8005a8c:	2005      	movs	r0, #5
 8005a8e:	ed9a 0b08 	vldr	d0, [sl, #32]
 8005a92:	f006 f863 	bl	800bb5c <gcvt>
            gcvt(deviceList[i].maxValue, 5, max);
 8005a96:	a906      	add	r1, sp, #24
 8005a98:	2005      	movs	r0, #5
 8005a9a:	ed9a 0b0a 	vldr	d0, [sl, #40]	@ 0x28
 8005a9e:	f006 f85d 	bl	800bb5c <gcvt>
            buf_len = sprintf(init_file_buf, "DEV: %d\nMin/Max: %s/%s\nDev type: %s\n\n", i, min, max, dev_type_buf);
 8005aa2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	ab06      	add	r3, sp, #24
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	ab08      	add	r3, sp, #32
 8005aac:	465a      	mov	r2, fp
 8005aae:	4993      	ldr	r1, [pc, #588]	@ (8005cfc <main+0x658>)
 8005ab0:	a81c      	add	r0, sp, #112	@ 0x70
 8005ab2:	f006 f977 	bl	800bda4 <siprintf>
 8005ab6:	b2c2      	uxtb	r2, r0
          FR_Status = f_write(&Fil, init_file_buf, buf_len, &bytesWrote);
 8005ab8:	ab2f      	add	r3, sp, #188	@ 0xbc
 8005aba:	a91c      	add	r1, sp, #112	@ 0x70
 8005abc:	a830      	add	r0, sp, #192	@ 0xc0
 8005abe:	f7fd fc2c 	bl	800331a <f_write>
        for (uint8_t i = 0; i < DEV_COUNT; i++){
 8005ac2:	f108 0801 	add.w	r8, r8, #1
 8005ac6:	fa5f f888 	uxtb.w	r8, r8
 8005aca:	f1b8 0f03 	cmp.w	r8, #3
 8005ace:	d82d      	bhi.n	8005b2c <main+0x488>
          if(deviceList[i].initState == DEV_STATE_IN){
 8005ad0:	46c3      	mov	fp, r8
 8005ad2:	eb08 02c8 	add.w	r2, r8, r8, lsl #3
 8005ad6:	4b88      	ldr	r3, [pc, #544]	@ (8005cf8 <main+0x654>)
 8005ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005adc:	791b      	ldrb	r3, [r3, #4]
 8005ade:	b1db      	cbz	r3, 8005b18 <main+0x474>
            switch (deviceList[i].deviceMode)
 8005ae0:	4b85      	ldr	r3, [pc, #532]	@ (8005cf8 <main+0x654>)
 8005ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ae6:	795b      	ldrb	r3, [r3, #5]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d0c1      	beq.n	8005a70 <main+0x3cc>
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d00a      	beq.n	8005b06 <main+0x462>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1c5      	bne.n	8005a80 <main+0x3dc>
              sprintf(dev_type_buf, "TYPE_SET_TEL");
 8005af4:	4b82      	ldr	r3, [pc, #520]	@ (8005d00 <main+0x65c>)
 8005af6:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8005afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005afc:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8005b00:	f88c 3000 	strb.w	r3, [ip]
              break;
 8005b04:	e7bc      	b.n	8005a80 <main+0x3dc>
              sprintf(dev_type_buf, "TYPE_TEL_ONLY");
 8005b06:	4b7f      	ldr	r3, [pc, #508]	@ (8005d04 <main+0x660>)
 8005b08:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8005b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b0e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8005b12:	f8ac 3000 	strh.w	r3, [ip]
              break;
 8005b16:	e7b3      	b.n	8005a80 <main+0x3dc>
            buf_len = sprintf(init_file_buf, "DEV: empty\n\n");
 8005b18:	4b7b      	ldr	r3, [pc, #492]	@ (8005d08 <main+0x664>)
 8005b1a:	f10d 0c70 	add.w	ip, sp, #112	@ 0x70
 8005b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b20:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8005b24:	f88c 3000 	strb.w	r3, [ip]
 8005b28:	220c      	movs	r2, #12
 8005b2a:	e7c5      	b.n	8005ab8 <main+0x414>
        f_close(&Fil);
 8005b2c:	a830      	add	r0, sp, #192	@ 0xc0
 8005b2e:	f7fd fd48 	bl	80035c2 <f_close>
 8005b32:	e060      	b.n	8005bf6 <main+0x552>
      screen_disp_time = HAL_GetTick();
 8005b34:	f000 fb2e 	bl	8006194 <HAL_GetTick>
 8005b38:	4605      	mov	r5, r0
    if(HAL_GetTick() - touch_tmr > 30 && touchAvailable){
 8005b3a:	f000 fb2b 	bl	8006194 <HAL_GetTick>
 8005b3e:	1bc0      	subs	r0, r0, r7
 8005b40:	281e      	cmp	r0, #30
 8005b42:	d903      	bls.n	8005b4c <main+0x4a8>
 8005b44:	4b71      	ldr	r3, [pc, #452]	@ (8005d0c <main+0x668>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d16f      	bne.n	8005c2c <main+0x588>
    if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK){
 8005b4c:	4870      	ldr	r0, [pc, #448]	@ (8005d10 <main+0x66c>)
 8005b4e:	f002 fcf5 	bl	800853c <HAL_IWDG_Refresh>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	f040 81e1 	bne.w	8005f1a <main+0x876>
    if(state == STATE_INIT){
 8005b58:	4b6e      	ldr	r3, [pc, #440]	@ (8005d14 <main+0x670>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f43f ae32 	beq.w	80057c6 <main+0x122>
      if (!allDeviceIsUnIn && !showMainScreen){
 8005b62:	4b6d      	ldr	r3, [pc, #436]	@ (8005d18 <main+0x674>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b923      	cbnz	r3, 8005b72 <main+0x4ce>
 8005b68:	4b6c      	ldr	r3, [pc, #432]	@ (8005d1c <main+0x678>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f43f ae52 	beq.w	8005816 <main+0x172>
        Draw_Main_Screen();
 8005b72:	f7fe ff2d 	bl	80049d0 <Draw_Main_Screen>
        Draw_NavBar(act_dev_cnt, -1);
 8005b76:	f04f 31ff 	mov.w	r1, #4294967295
 8005b7a:	4b69      	ldr	r3, [pc, #420]	@ (8005d20 <main+0x67c>)
 8005b7c:	7818      	ldrb	r0, [r3, #0]
 8005b7e:	f7fe fafd 	bl	800417c <Draw_NavBar>
    if (HAL_GetTick()-dev_init_timeout>1000 && state == STATE_INIT){
 8005b82:	f000 fb07 	bl	8006194 <HAL_GetTick>
 8005b86:	1b80      	subs	r0, r0, r6
 8005b88:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005b8c:	d90f      	bls.n	8005bae <main+0x50a>
 8005b8e:	4b61      	ldr	r3, [pc, #388]	@ (8005d14 <main+0x670>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	b963      	cbnz	r3, 8005bae <main+0x50a>
      if(dev_num == old_dev_num){
 8005b94:	4b63      	ldr	r3, [pc, #396]	@ (8005d24 <main+0x680>)
 8005b96:	f893 8000 	ldrb.w	r8, [r3]
 8005b9a:	45c8      	cmp	r8, r9
 8005b9c:	f43f aea1 	beq.w	80058e2 <main+0x23e>
      dev_init_timeout = HAL_GetTick();
 8005ba0:	f000 faf8 	bl	8006194 <HAL_GetTick>
 8005ba4:	4606      	mov	r6, r0
      screen_disp_time = HAL_GetTick();
 8005ba6:	f000 faf5 	bl	8006194 <HAL_GetTick>
 8005baa:	4605      	mov	r5, r0
 8005bac:	46c1      	mov	r9, r8
    if(HAL_GetTick()-sim_tmr > 5000){
 8005bae:	f000 faf1 	bl	8006194 <HAL_GetTick>
 8005bb2:	1b00      	subs	r0, r0, r4
 8005bb4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005bb8:	4298      	cmp	r0, r3
 8005bba:	d917      	bls.n	8005bec <main+0x548>
      if(!isSIMInserted){
 8005bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d28 <main+0x684>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f43f ae93 	beq.w	80058ec <main+0x248>
      if(isSIMInserted && !isSIMInitialised){
 8005bc6:	4b58      	ldr	r3, [pc, #352]	@ (8005d28 <main+0x684>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	b123      	cbz	r3, 8005bd6 <main+0x532>
 8005bcc:	4b57      	ldr	r3, [pc, #348]	@ (8005d2c <main+0x688>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f43f ae97 	beq.w	8005904 <main+0x260>
      if(isSIMInitialised && !isRTCSetUp){
 8005bd6:	4b55      	ldr	r3, [pc, #340]	@ (8005d2c <main+0x688>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b123      	cbz	r3, 8005be6 <main+0x542>
 8005bdc:	4b54      	ldr	r3, [pc, #336]	@ (8005d30 <main+0x68c>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f43f aea9 	beq.w	8005938 <main+0x294>
      sim_tmr = HAL_GetTick();
 8005be6:	f000 fad5 	bl	8006194 <HAL_GetTick>
 8005bea:	4604      	mov	r4, r0
    if(dev_num == DEV_COUNT && state == STATE_INIT){
 8005bec:	4b4d      	ldr	r3, [pc, #308]	@ (8005d24 <main+0x680>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	f43f aeb3 	beq.w	800595c <main+0x2b8>
    if (HAL_GetTick()-screen_disp_time>5000 && screen_scroll_mode == SCROLL_MODE_AUTO && !allDeviceIsUnIn && !showMainScreen){
 8005bf6:	f000 facd 	bl	8006194 <HAL_GetTick>
 8005bfa:	1b40      	subs	r0, r0, r5
 8005bfc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c00:	4298      	cmp	r0, r3
 8005c02:	d99a      	bls.n	8005b3a <main+0x496>
 8005c04:	4b4b      	ldr	r3, [pc, #300]	@ (8005d34 <main+0x690>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d196      	bne.n	8005b3a <main+0x496>
 8005c0c:	4b42      	ldr	r3, [pc, #264]	@ (8005d18 <main+0x674>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d192      	bne.n	8005b3a <main+0x496>
 8005c14:	4b41      	ldr	r3, [pc, #260]	@ (8005d1c <main+0x678>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d18e      	bne.n	8005b3a <main+0x496>
      if(state != STATE_INIT){
 8005c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d14 <main+0x670>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d087      	beq.n	8005b34 <main+0x490>
        findNextInDev(true);
 8005c24:	2001      	movs	r0, #1
 8005c26:	f7ff fa3d 	bl	80050a4 <findNextInDev>
 8005c2a:	e783      	b.n	8005b34 <main+0x490>
      CST816S_ReadTouchData(&hi2c1, &TP);
 8005c2c:	4f42      	ldr	r7, [pc, #264]	@ (8005d38 <main+0x694>)
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4842      	ldr	r0, [pc, #264]	@ (8005d3c <main+0x698>)
 8005c32:	f7fb f90f 	bl	8000e54 <CST816S_ReadTouchData>
      if (TP.finger_num != 0){
 8005c36:	787b      	ldrb	r3, [r7, #1]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d051      	beq.n	8005ce0 <main+0x63c>
        uint8_t x = map(TP.x_coord, 0, 65535, 0, 240);
 8005c3c:	46ba      	mov	sl, r7
 8005c3e:	f04f 0bf0 	mov.w	fp, #240	@ 0xf0
 8005c42:	f8cd b000 	str.w	fp, [sp]
 8005c46:	2300      	movs	r3, #0
 8005c48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	8878      	ldrh	r0, [r7, #2]
 8005c50:	f7ff fa62 	bl	8005118 <map>
 8005c54:	4680      	mov	r8, r0
 8005c56:	b2c7      	uxtb	r7, r0
        uint8_t y = map(TP.y_coord, 0, 65535, 0, 240);
 8005c58:	f8cd b000 	str.w	fp, [sp]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c62:	4619      	mov	r1, r3
 8005c64:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8005c68:	f7ff fa56 	bl	8005118 <map>
 8005c6c:	b2c3      	uxtb	r3, r0
        if (x>78 && x < 162 && y > 78 && y<162 && TP.gesture_id == 0x00){
 8005c6e:	3f4f      	subs	r7, #79	@ 0x4f
 8005c70:	b2ff      	uxtb	r7, r7
 8005c72:	2f52      	cmp	r7, #82	@ 0x52
 8005c74:	d812      	bhi.n	8005c9c <main+0x5f8>
 8005c76:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c78:	d910      	bls.n	8005c9c <main+0x5f8>
 8005c7a:	2ba1      	cmp	r3, #161	@ 0xa1
 8005c7c:	d80e      	bhi.n	8005c9c <main+0x5f8>
 8005c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c82:	b95b      	cbnz	r3, 8005c9c <main+0x5f8>
          deviceList[dev_num].isDevOn = !deviceList[dev_num].isDevOn;
 8005c84:	4b27      	ldr	r3, [pc, #156]	@ (8005d24 <main+0x680>)
 8005c86:	781a      	ldrb	r2, [r3, #0]
 8005c88:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <main+0x654>)
 8005c8a:	2148      	movs	r1, #72	@ 0x48
 8005c8c:	fb01 3302 	mla	r3, r1, r2, r3
 8005c90:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005c94:	f082 0201 	eor.w	r2, r2, #1
 8005c98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        if(TP.gesture_id == 0x00 && deviceList[dev_num].deviceDisplayMode ==MODE_EDIT){
 8005c9c:	4b26      	ldr	r3, [pc, #152]	@ (8005d38 <main+0x694>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b953      	cbnz	r3, 8005cb8 <main+0x614>
 8005ca2:	4b20      	ldr	r3, [pc, #128]	@ (8005d24 <main+0x680>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005caa:	4a13      	ldr	r2, [pc, #76]	@ (8005cf8 <main+0x654>)
 8005cac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005cb0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d149      	bne.n	8005d4c <main+0x6a8>
        if(TP.gesture_id == 0x0C && !longPressFlag && deviceList[dev_num].deviceMode != TYPE_TEL_ONLY && !showMainScreen){
 8005cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d38 <main+0x694>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b0c      	cmp	r3, #12
 8005cbe:	f000 808b 	beq.w	8005dd8 <main+0x734>
        if(TP.gesture_id != 0x0C){
 8005cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d38 <main+0x694>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b0c      	cmp	r3, #12
 8005cc8:	d002      	beq.n	8005cd0 <main+0x62c>
          longPressFlag = false;
 8005cca:	4a1d      	ldr	r2, [pc, #116]	@ (8005d40 <main+0x69c>)
 8005ccc:	2100      	movs	r1, #0
 8005cce:	7011      	strb	r1, [r2, #0]
        if(TP.gesture_id == 0x03 && deviceList[dev_num].deviceDisplayMode != MODE_EDIT){ // LEFT
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	f000 80cf 	beq.w	8005e74 <main+0x7d0>
        if(TP.gesture_id == 0x04 && deviceList[dev_num].deviceDisplayMode != MODE_EDIT){ // RIGHT
 8005cd6:	4b18      	ldr	r3, [pc, #96]	@ (8005d38 <main+0x694>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	f000 80f3 	beq.w	8005ec6 <main+0x822>
      touchAvailable = false;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <main+0x668>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
      touch_tmr = HAL_GetTick();
 8005ce6:	f000 fa55 	bl	8006194 <HAL_GetTick>
 8005cea:	4607      	mov	r7, r0
 8005cec:	e72e      	b.n	8005b4c <main+0x4a8>
 8005cee:	bf00      	nop
 8005cf0:	08014e84 	.word	0x08014e84
 8005cf4:	08014e94 	.word	0x08014e94
 8005cf8:	20000008 	.word	0x20000008
 8005cfc:	08014ec4 	.word	0x08014ec4
 8005d00:	08014ea4 	.word	0x08014ea4
 8005d04:	08014eb4 	.word	0x08014eb4
 8005d08:	08014eec 	.word	0x08014eec
 8005d0c:	2001c872 	.word	0x2001c872
 8005d10:	2001d0fc 	.word	0x2001d0fc
 8005d14:	2001cb01 	.word	0x2001cb01
 8005d18:	20000002 	.word	0x20000002
 8005d1c:	20000001 	.word	0x20000001
 8005d20:	2001caff 	.word	0x2001caff
 8005d24:	2001cb00 	.word	0x2001cb00
 8005d28:	2001c873 	.word	0x2001c873
 8005d2c:	2001c874 	.word	0x2001c874
 8005d30:	2001c871 	.word	0x2001c871
 8005d34:	2001cafe 	.word	0x2001cafe
 8005d38:	2001caf8 	.word	0x2001caf8
 8005d3c:	2001d108 	.word	0x2001d108
 8005d40:	2001c86f 	.word	0x2001c86f
 8005d44:	42300000 	.word	0x42300000
 8005d48:	43080000 	.word	0x43080000
          if (isTouchInsideArc(x, y, 120, 120, 55, 120, 136, 44)) {
 8005d4c:	fa5f f888 	uxtb.w	r8, r8
 8005d50:	b2c7      	uxtb	r7, r0
 8005d52:	2278      	movs	r2, #120	@ 0x78
 8005d54:	9201      	str	r2, [sp, #4]
 8005d56:	2337      	movs	r3, #55	@ 0x37
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	ed5f 0a06 	vldr	s1, [pc, #-24]	@ 8005d44 <main+0x6a0>
 8005d5e:	ed1f 0a06 	vldr	s0, [pc, #-24]	@ 8005d48 <main+0x6a4>
 8005d62:	4613      	mov	r3, r2
 8005d64:	4639      	mov	r1, r7
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7fe fea6 	bl	8004ab8 <isTouchInsideArc>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d0a3      	beq.n	8005cb8 <main+0x614>
              float tp_angle = getTouchAngle(x, y); // 46 314
 8005d70:	4639      	mov	r1, r7
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7fe ff10 	bl	8004b98 <getTouchAngle>
              deviceList[dev_num].setValue = map(tp_angle, 46, 314, deviceList[dev_num].minValue, deviceList[dev_num].maxValue);
 8005d78:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005d7c:	ee17 8a90 	vmov	r8, s15
 8005d80:	4b67      	ldr	r3, [pc, #412]	@ (8005f20 <main+0x87c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	4f67      	ldr	r7, [pc, #412]	@ (8005f24 <main+0x880>)
 8005d86:	2248      	movs	r2, #72	@ 0x48
 8005d88:	fb02 7703 	mla	r7, r2, r3, r7
 8005d8c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8005d90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d94:	f7fa ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8005d98:	9005      	str	r0, [sp, #20]
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	f7fa ff0b 	bl	8000bb8 <__aeabi_d2uiz>
 8005da2:	9000      	str	r0, [sp, #0]
 8005da4:	9b05      	ldr	r3, [sp, #20]
 8005da6:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8005daa:	212e      	movs	r1, #46	@ 0x2e
 8005dac:	4640      	mov	r0, r8
 8005dae:	f7ff f9b3 	bl	8005118 <map>
 8005db2:	f7fa fbaf 	bl	8000514 <__aeabi_ui2d>
 8005db6:	e9c7 0106 	strd	r0, r1, [r7, #24]
              sprintf(buf, "%d", map(tp_angle, 46, 314, 0, 100));
 8005dba:	2364      	movs	r3, #100	@ 0x64
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8005dc4:	212e      	movs	r1, #46	@ 0x2e
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	f7ff f9a6 	bl	8005118 <map>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4956      	ldr	r1, [pc, #344]	@ (8005f28 <main+0x884>)
 8005dd0:	a81c      	add	r0, sp, #112	@ 0x70
 8005dd2:	f005 ffe7 	bl	800bda4 <siprintf>
 8005dd6:	e76f      	b.n	8005cb8 <main+0x614>
        if(TP.gesture_id == 0x0C && !longPressFlag && deviceList[dev_num].deviceMode != TYPE_TEL_ONLY && !showMainScreen){
 8005dd8:	4b54      	ldr	r3, [pc, #336]	@ (8005f2c <main+0x888>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f af70 	bne.w	8005cc2 <main+0x61e>
 8005de2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f20 <main+0x87c>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8005dea:	4a4e      	ldr	r2, [pc, #312]	@ (8005f24 <main+0x880>)
 8005dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005df0:	795b      	ldrb	r3, [r3, #5]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	f43f af65 	beq.w	8005cc2 <main+0x61e>
 8005df8:	4b4d      	ldr	r3, [pc, #308]	@ (8005f30 <main+0x88c>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f af60 	bne.w	8005cc2 <main+0x61e>
          longPressFlag = true;
 8005e02:	4b4a      	ldr	r3, [pc, #296]	@ (8005f2c <main+0x888>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	701a      	strb	r2, [r3, #0]
          screen_disp_time = HAL_GetTick();
 8005e08:	f000 f9c4 	bl	8006194 <HAL_GetTick>
 8005e0c:	4605      	mov	r5, r0
          if(deviceList[dev_num].deviceDisplayMode == MODE_NORMAL){
 8005e0e:	4b44      	ldr	r3, [pc, #272]	@ (8005f20 <main+0x87c>)
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	4b44      	ldr	r3, [pc, #272]	@ (8005f24 <main+0x880>)
 8005e14:	2148      	movs	r1, #72	@ 0x48
 8005e16:	fb01 3302 	mla	r3, r1, r2, r3
 8005e1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e1e:	b9d3      	cbnz	r3, 8005e56 <main+0x7b2>
            if (deviceList[dev_num].deviceMode != TYPE_SET_ONLY){
 8005e20:	4b40      	ldr	r3, [pc, #256]	@ (8005f24 <main+0x880>)
 8005e22:	fb01 3302 	mla	r3, r1, r2, r3
 8005e26:	795b      	ldrb	r3, [r3, #5]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d006      	beq.n	8005e3a <main+0x796>
              deviceList[dev_num].setValue = deviceList[dev_num].currentValue;
 8005e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f24 <main+0x880>)
 8005e2e:	fb01 3302 	mla	r3, r1, r2, r3
 8005e32:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005e36:	e9c3 0106 	strd	r0, r1, [r3, #24]
            deviceList[dev_num].deviceDisplayMode = MODE_EDIT;
 8005e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8005f24 <main+0x880>)
 8005e3c:	2148      	movs	r1, #72	@ 0x48
 8005e3e:	fb01 3302 	mla	r3, r1, r2, r3
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
          if(screen_scroll_mode == SCROLL_MODE_AUTO){
 8005e48:	4b3a      	ldr	r3, [pc, #232]	@ (8005f34 <main+0x890>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b973      	cbnz	r3, 8005e6c <main+0x7c8>
            screen_scroll_mode = SCROLL_MODE_HALT;
 8005e4e:	4b39      	ldr	r3, [pc, #228]	@ (8005f34 <main+0x890>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e735      	b.n	8005cc2 <main+0x61e>
            transmitMode = TRANSMIT_MODE_SET;
 8005e56:	4b38      	ldr	r3, [pc, #224]	@ (8005f38 <main+0x894>)
 8005e58:	2101      	movs	r1, #1
 8005e5a:	7019      	strb	r1, [r3, #0]
            deviceList[dev_num].deviceDisplayMode = MODE_NORMAL;
 8005e5c:	4b31      	ldr	r3, [pc, #196]	@ (8005f24 <main+0x880>)
 8005e5e:	2148      	movs	r1, #72	@ 0x48
 8005e60:	fb01 3302 	mla	r3, r1, r2, r3
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8005e6a:	e7ed      	b.n	8005e48 <main+0x7a4>
            screen_scroll_mode = SCROLL_MODE_AUTO;
 8005e6c:	4b31      	ldr	r3, [pc, #196]	@ (8005f34 <main+0x890>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e726      	b.n	8005cc2 <main+0x61e>
        if(TP.gesture_id == 0x03 && deviceList[dev_num].deviceDisplayMode != MODE_EDIT){ // LEFT
 8005e74:	4b2a      	ldr	r3, [pc, #168]	@ (8005f20 <main+0x87c>)
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8005e7c:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <main+0x880>)
 8005e7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005e82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f47f af25 	bne.w	8005cd6 <main+0x632>
          if (showMainScreen){showMainScreen=false; dev_num = act_dev_list[0];}
 8005e8c:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <main+0x88c>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b153      	cbz	r3, 8005ea8 <main+0x804>
 8005e92:	4b27      	ldr	r3, [pc, #156]	@ (8005f30 <main+0x88c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	4b28      	ldr	r3, [pc, #160]	@ (8005f3c <main+0x898>)
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	4b20      	ldr	r3, [pc, #128]	@ (8005f20 <main+0x87c>)
 8005e9e:	701a      	strb	r2, [r3, #0]
          screen_disp_time = HAL_GetTick();
 8005ea0:	f000 f978 	bl	8006194 <HAL_GetTick>
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	e716      	b.n	8005cd6 <main+0x632>
          else if (dev_num == act_dev_list[act_dev_cnt-1]){showMainScreen=true;}
 8005ea8:	4b25      	ldr	r3, [pc, #148]	@ (8005f40 <main+0x89c>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4923      	ldr	r1, [pc, #140]	@ (8005f3c <main+0x898>)
 8005eb0:	56cb      	ldrsb	r3, [r1, r3]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d103      	bne.n	8005ebe <main+0x81a>
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f30 <main+0x88c>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	e7f0      	b.n	8005ea0 <main+0x7fc>
          else{findNextInDev(true);}
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	f7ff f8f0 	bl	80050a4 <findNextInDev>
 8005ec4:	e7ec      	b.n	8005ea0 <main+0x7fc>
        if(TP.gesture_id == 0x04 && deviceList[dev_num].deviceDisplayMode != MODE_EDIT){ // RIGHT
 8005ec6:	4b16      	ldr	r3, [pc, #88]	@ (8005f20 <main+0x87c>)
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8005ece:	4b15      	ldr	r3, [pc, #84]	@ (8005f24 <main+0x880>)
 8005ed0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005ed4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f47f af01 	bne.w	8005ce0 <main+0x63c>
          if (showMainScreen){showMainScreen=false; dev_num = act_dev_list[act_dev_cnt-1];}
 8005ede:	4b14      	ldr	r3, [pc, #80]	@ (8005f30 <main+0x88c>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	b16b      	cbz	r3, 8005f00 <main+0x85c>
 8005ee4:	4b12      	ldr	r3, [pc, #72]	@ (8005f30 <main+0x88c>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	4b15      	ldr	r3, [pc, #84]	@ (8005f40 <main+0x89c>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a12      	ldr	r2, [pc, #72]	@ (8005f3c <main+0x898>)
 8005ef2:	5cd2      	ldrb	r2, [r2, r3]
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f20 <main+0x87c>)
 8005ef6:	701a      	strb	r2, [r3, #0]
          screen_disp_time = HAL_GetTick();
 8005ef8:	f000 f94c 	bl	8006194 <HAL_GetTick>
 8005efc:	4605      	mov	r5, r0
 8005efe:	e6ef      	b.n	8005ce0 <main+0x63c>
          else if(dev_num == act_dev_list[0]){showMainScreen=true;}
 8005f00:	4b0e      	ldr	r3, [pc, #56]	@ (8005f3c <main+0x898>)
 8005f02:	f993 3000 	ldrsb.w	r3, [r3]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d103      	bne.n	8005f12 <main+0x86e>
 8005f0a:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <main+0x88c>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	e7f2      	b.n	8005ef8 <main+0x854>
          else{findNextInDev(false);}
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7ff f8c6 	bl	80050a4 <findNextInDev>
 8005f18:	e7ee      	b.n	8005ef8 <main+0x854>
      Error_Handler();
 8005f1a:	f7ff f969 	bl	80051f0 <Error_Handler>
 8005f1e:	e61b      	b.n	8005b58 <main+0x4b4>
 8005f20:	2001cb00 	.word	0x2001cb00
 8005f24:	20000008 	.word	0x20000008
 8005f28:	08014d7c 	.word	0x08014d7c
 8005f2c:	2001c86f 	.word	0x2001c86f
 8005f30:	20000001 	.word	0x20000001
 8005f34:	2001cafe 	.word	0x2001cafe
 8005f38:	2001c876 	.word	0x2001c876
 8005f3c:	2000012c 	.word	0x2000012c
 8005f40:	2001caff 	.word	0x2001caff

08005f44 <HAL_SPI_TxCpltCallback>:

SPI_HandleTypeDef hspi;
DMA_HandleTypeDef hdma_spi1_tx;
void (*spi_end)(void);

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *spihandle) {
 8005f44:	b508      	push	{r3, lr}
	if (&hspi == spihandle)
 8005f46:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <HAL_SPI_TxCpltCallback+0x18>)
 8005f48:	4283      	cmp	r3, r0
 8005f4a:	d000      	beq.n	8005f4e <HAL_SPI_TxCpltCallback+0xa>
		if (spi_end)
			spi_end();
}
 8005f4c:	bd08      	pop	{r3, pc}
		if (spi_end)
 8005f4e:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <HAL_SPI_TxCpltCallback+0x1c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0fa      	beq.n	8005f4c <HAL_SPI_TxCpltCallback+0x8>
			spi_end();
 8005f56:	4798      	blx	r3
}
 8005f58:	e7f8      	b.n	8005f4c <HAL_SPI_TxCpltCallback+0x8>
 8005f5a:	bf00      	nop
 8005f5c:	2001d1c0 	.word	0x2001d1c0
 8005f60:	2001d15c 	.word	0x2001d15c

08005f64 <spi_init>:

void spi_init(uint8_t word16bit) {
 8005f64:	b508      	push	{r3, lr}
	hspi.Init.DataSize = word16bit ? SPI_DATASIZE_16BIT : SPI_DATASIZE_8BIT;
 8005f66:	b130      	cbz	r0, 8005f76 <spi_init+0x12>
 8005f68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f6c:	4803      	ldr	r0, [pc, #12]	@ (8005f7c <spi_init+0x18>)
 8005f6e:	60c3      	str	r3, [r0, #12]
	HAL_SPI_Init(&hspi);
 8005f70:	f003 fe90 	bl	8009c94 <HAL_SPI_Init>
}
 8005f74:	bd08      	pop	{r3, pc}
	hspi.Init.DataSize = word16bit ? SPI_DATASIZE_16BIT : SPI_DATASIZE_8BIT;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e7f8      	b.n	8005f6c <spi_init+0x8>
 8005f7a:	bf00      	nop
 8005f7c:	2001d1c0 	.word	0x2001d1c0

08005f80 <spim_init>:


void spim_init(SPI_TypeDef *SPIx, uint8_t fastSpeed) {
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	b08a      	sub	sp, #40	@ 0x28
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005f88:	2100      	movs	r1, #0
 8005f8a:	9101      	str	r1, [sp, #4]
 8005f8c:	4b41      	ldr	r3, [pc, #260]	@ (8006094 <spim_init+0x114>)
 8005f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	9b01      	ldr	r3, [sp, #4]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 8005fa0:	23b0      	movs	r3, #176	@ 0xb0
 8005fa2:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa8:	9107      	str	r1, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005faa:	2303      	movs	r3, #3
 8005fac:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005fae:	2305      	movs	r3, #5
 8005fb0:	9309      	str	r3, [sp, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb2:	a905      	add	r1, sp, #20
 8005fb4:	4838      	ldr	r0, [pc, #224]	@ (8006098 <spim_init+0x118>)
 8005fb6:	f000 fc07 	bl	80067c8 <HAL_GPIO_Init>

	if (SPIx == SPI1)
 8005fba:	4b38      	ldr	r3, [pc, #224]	@ (800609c <spim_init+0x11c>)
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	d05a      	beq.n	8006076 <spim_init+0xf6>
		__HAL_RCC_SPI1_CLK_ENABLE();
	else
		__HAL_RCC_SPI2_CLK_ENABLE();
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9303      	str	r3, [sp, #12]
 8005fc4:	4b33      	ldr	r3, [pc, #204]	@ (8006094 <spim_init+0x114>)
 8005fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd4:	9303      	str	r3, [sp, #12]
 8005fd6:	9b03      	ldr	r3, [sp, #12]

	__HAL_SPI_DISABLE(&hspi);
 8005fd8:	4b31      	ldr	r3, [pc, #196]	@ (80060a0 <spim_init+0x120>)
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	680a      	ldr	r2, [r1, #0]
 8005fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fe2:	600a      	str	r2, [r1, #0]
	hspi.Instance = SPIx;
 8005fe4:	601c      	str	r4, [r3, #0]
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	609a      	str	r2, [r3, #8]
	hspi.Init.Mode = SPI_MODE_MASTER;
 8005fea:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005fee:	6059      	str	r1, [r3, #4]
	hspi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	6119      	str	r1, [r3, #16]
	hspi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	6159      	str	r1, [r3, #20]
	hspi.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005ff8:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8005ffc:	6199      	str	r1, [r3, #24]
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ffe:	621a      	str	r2, [r3, #32]
	hspi.Init.BaudRatePrescaler =
			fastSpeed ? SPI_BAUDRATEPRESCALER_2 : SPI_BAUDRATEPRESCALER_64;
 8006000:	2d00      	cmp	r5, #0
 8006002:	d045      	beq.n	8006090 <spim_init+0x110>
 8006004:	4613      	mov	r3, r2
	hspi.Init.BaudRatePrescaler =
 8006006:	4e26      	ldr	r6, [pc, #152]	@ (80060a0 <spim_init+0x120>)
 8006008:	61f3      	str	r3, [r6, #28]
	spi_init(0);
 800600a:	2000      	movs	r0, #0
 800600c:	f7ff ffaa 	bl	8005f64 <spi_init>

	// DMA controller clock enable
	__HAL_RCC_DMA2_CLK_ENABLE();
 8006010:	2500      	movs	r5, #0
 8006012:	9504      	str	r5, [sp, #16]
 8006014:	4b1f      	ldr	r3, [pc, #124]	@ (8006094 <spim_init+0x114>)
 8006016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006018:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	9b04      	ldr	r3, [sp, #16]

	// SPI1 DMA Init
	// SPI1_TX Init
	hdma_spi1_tx.Instance = DMA2_Stream2;
 8006028:	4c1e      	ldr	r4, [pc, #120]	@ (80060a4 <spim_init+0x124>)
 800602a:	4b1f      	ldr	r3, [pc, #124]	@ (80060a8 <spim_init+0x128>)
 800602c:	6023      	str	r3, [r4, #0]
	hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800602e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006032:	6063      	str	r3, [r4, #4]
	hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006034:	2340      	movs	r3, #64	@ 0x40
 8006036:	60a3      	str	r3, [r4, #8]
	hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006038:	60e5      	str	r5, [r4, #12]
	hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800603a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800603e:	6123      	str	r3, [r4, #16]
	hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006040:	6165      	str	r5, [r4, #20]
	hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006042:	61a5      	str	r5, [r4, #24]
	hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006044:	61e5      	str	r5, [r4, #28]
	hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;	// DMA_PRIORITY_LOW;
 8006046:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800604a:	6223      	str	r3, [r4, #32]
	hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800604c:	6265      	str	r5, [r4, #36]	@ 0x24
	HAL_DMA_Init(&hdma_spi1_tx);
 800604e:	4620      	mov	r0, r4
 8006050:	f000 f9d0 	bl	80063f4 <HAL_DMA_Init>

	hspi.hdmatx = &hdma_spi1_tx;
 8006054:	64b4      	str	r4, [r6, #72]	@ 0x48
	hdma_spi1_tx.Parent = &hspi;
 8006056:	63a6      	str	r6, [r4, #56]	@ 0x38

	// DMA interrupt init
	// DMA2_Stream2_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006058:	462a      	mov	r2, r5
 800605a:	4629      	mov	r1, r5
 800605c:	203a      	movs	r0, #58	@ 0x3a
 800605e:	f000 f921 	bl	80062a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006062:	203a      	movs	r0, #58	@ 0x3a
 8006064:	f000 f92e 	bl	80062c4 <HAL_NVIC_EnableIRQ>

	__HAL_SPI_ENABLE(&hspi);
 8006068:	6832      	ldr	r2, [r6, #0]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006070:	6013      	str	r3, [r2, #0]
}
 8006072:	b00a      	add	sp, #40	@ 0x28
 8006074:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_SPI1_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	9302      	str	r3, [sp, #8]
 800607a:	4b06      	ldr	r3, [pc, #24]	@ (8006094 <spim_init+0x114>)
 800607c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800607e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006082:	645a      	str	r2, [r3, #68]	@ 0x44
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800608a:	9302      	str	r3, [sp, #8]
 800608c:	9b02      	ldr	r3, [sp, #8]
 800608e:	e7a3      	b.n	8005fd8 <spim_init+0x58>
			fastSpeed ? SPI_BAUDRATEPRESCALER_2 : SPI_BAUDRATEPRESCALER_64;
 8006090:	2328      	movs	r3, #40	@ 0x28
 8006092:	e7b8      	b.n	8006006 <spim_init+0x86>
 8006094:	40023800 	.word	0x40023800
 8006098:	40020000 	.word	0x40020000
 800609c:	40013000 	.word	0x40013000
 80060a0:	2001d1c0 	.word	0x2001d1c0
 80060a4:	2001d160 	.word	0x2001d160
 80060a8:	40026440 	.word	0x40026440

080060ac <SPI_send>:

void SPI_send(SPI_TypeDef *SPIx, uint8_t word16bit, uint8_t *pBuff,
		uint16_t Len) {
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	461d      	mov	r5, r3
	if (SPIx == hspi.Instance) {
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <SPI_send+0x24>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4283      	cmp	r3, r0
 80060b6:	d000      	beq.n	80060ba <SPI_send+0xe>
		spi_init(word16bit);
		HAL_SPI_Transmit(&hspi, pBuff, Len, 100);
	}
}
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
 80060ba:	4614      	mov	r4, r2
		spi_init(word16bit);
 80060bc:	4608      	mov	r0, r1
 80060be:	f7ff ff51 	bl	8005f64 <spi_init>
		HAL_SPI_Transmit(&hspi, pBuff, Len, 100);
 80060c2:	2364      	movs	r3, #100	@ 0x64
 80060c4:	462a      	mov	r2, r5
 80060c6:	4621      	mov	r1, r4
 80060c8:	4801      	ldr	r0, [pc, #4]	@ (80060d0 <SPI_send+0x24>)
 80060ca:	f003 fe42 	bl	8009d52 <HAL_SPI_Transmit>
}
 80060ce:	e7f3      	b.n	80060b8 <SPI_send+0xc>
 80060d0:	2001d1c0 	.word	0x2001d1c0

080060d4 <SPI_send_dma>:

void SPI_send_dma(SPI_TypeDef *SPIx, uint8_t word16bit, uint8_t *pBuff,
		uint16_t Len, void (*func)(void)) {
 80060d4:	4611      	mov	r1, r2
	if (SPIx == hspi.Instance) {
 80060d6:	4a07      	ldr	r2, [pc, #28]	@ (80060f4 <SPI_send_dma+0x20>)
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	4282      	cmp	r2, r0
 80060dc:	d000      	beq.n	80060e0 <SPI_send_dma+0xc>
 80060de:	4770      	bx	lr
		uint16_t Len, void (*func)(void)) {
 80060e0:	b508      	push	{r3, lr}
		spi_end = func;
 80060e2:	9802      	ldr	r0, [sp, #8]
 80060e4:	4a04      	ldr	r2, [pc, #16]	@ (80060f8 <SPI_send_dma+0x24>)
 80060e6:	6010      	str	r0, [r2, #0]
		//spi_init(word16bit);
		HAL_SPI_Transmit_DMA(&hspi, pBuff, Len);
 80060e8:	461a      	mov	r2, r3
 80060ea:	4802      	ldr	r0, [pc, #8]	@ (80060f4 <SPI_send_dma+0x20>)
 80060ec:	f004 f83e 	bl	800a16c <HAL_SPI_Transmit_DMA>
	}
}
 80060f0:	bd08      	pop	{r3, pc}
 80060f2:	bf00      	nop
 80060f4:	2001d1c0 	.word	0x2001d1c0
 80060f8:	2001d15c 	.word	0x2001d15c

080060fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060fc:	b510      	push	{r4, lr}
 80060fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006100:	4b0e      	ldr	r3, [pc, #56]	@ (800613c <HAL_InitTick+0x40>)
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006108:	fbb3 f3f2 	udiv	r3, r3, r2
 800610c:	4a0c      	ldr	r2, [pc, #48]	@ (8006140 <HAL_InitTick+0x44>)
 800610e:	6810      	ldr	r0, [r2, #0]
 8006110:	fbb0 f0f3 	udiv	r0, r0, r3
 8006114:	f000 f8de 	bl	80062d4 <HAL_SYSTICK_Config>
 8006118:	b968      	cbnz	r0, 8006136 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800611a:	2c0f      	cmp	r4, #15
 800611c:	d901      	bls.n	8006122 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800611e:	2001      	movs	r0, #1
 8006120:	e00a      	b.n	8006138 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006122:	2200      	movs	r2, #0
 8006124:	4621      	mov	r1, r4
 8006126:	f04f 30ff 	mov.w	r0, #4294967295
 800612a:	f000 f8bb 	bl	80062a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800612e:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <HAL_InitTick+0x48>)
 8006130:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006132:	2000      	movs	r0, #0
 8006134:	e000      	b.n	8006138 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8006136:	2001      	movs	r0, #1
}
 8006138:	bd10      	pop	{r4, pc}
 800613a:	bf00      	nop
 800613c:	20000130 	.word	0x20000130
 8006140:	20000138 	.word	0x20000138
 8006144:	20000134 	.word	0x20000134

08006148 <HAL_Init>:
{
 8006148:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800614a:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <HAL_Init+0x30>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006152:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800615a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006162:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006164:	2003      	movs	r0, #3
 8006166:	f000 f88b 	bl	8006280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800616a:	200f      	movs	r0, #15
 800616c:	f7ff ffc6 	bl	80060fc <HAL_InitTick>
  HAL_MspInit();
 8006170:	f002 f9ea 	bl	8008548 <HAL_MspInit>
}
 8006174:	2000      	movs	r0, #0
 8006176:	bd08      	pop	{r3, pc}
 8006178:	40023c00 	.word	0x40023c00

0800617c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800617c:	4a03      	ldr	r2, [pc, #12]	@ (800618c <HAL_IncTick+0x10>)
 800617e:	6811      	ldr	r1, [r2, #0]
 8006180:	4b03      	ldr	r3, [pc, #12]	@ (8006190 <HAL_IncTick+0x14>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	440b      	add	r3, r1
 8006186:	6013      	str	r3, [r2, #0]
}
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	2001d218 	.word	0x2001d218
 8006190:	20000130 	.word	0x20000130

08006194 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006194:	4b01      	ldr	r3, [pc, #4]	@ (800619c <HAL_GetTick+0x8>)
 8006196:	6818      	ldr	r0, [r3, #0]
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	2001d218 	.word	0x2001d218

080061a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80061a4:	f7ff fff6 	bl	8006194 <HAL_GetTick>
 80061a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061aa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80061ae:	d002      	beq.n	80061b6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80061b0:	4b04      	ldr	r3, [pc, #16]	@ (80061c4 <HAL_Delay+0x24>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80061b6:	f7ff ffed 	bl	8006194 <HAL_GetTick>
 80061ba:	1b40      	subs	r0, r0, r5
 80061bc:	42a0      	cmp	r0, r4
 80061be:	d3fa      	bcc.n	80061b6 <HAL_Delay+0x16>
  {
  }
}
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
 80061c2:	bf00      	nop
 80061c4:	20000130 	.word	0x20000130

080061c8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80061c8:	4b02      	ldr	r3, [pc, #8]	@ (80061d4 <HAL_GetDEVID+0xc>)
 80061ca:	6818      	ldr	r0, [r3, #0]
}
 80061cc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	e0042000 	.word	0xe0042000

080061d8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80061d8:	2800      	cmp	r0, #0
 80061da:	db07      	blt.n	80061ec <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061dc:	f000 021f 	and.w	r2, r0, #31
 80061e0:	0940      	lsrs	r0, r0, #5
 80061e2:	2301      	movs	r3, #1
 80061e4:	4093      	lsls	r3, r2
 80061e6:	4a02      	ldr	r2, [pc, #8]	@ (80061f0 <__NVIC_EnableIRQ+0x18>)
 80061e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	e000e100 	.word	0xe000e100

080061f4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80061f4:	2800      	cmp	r0, #0
 80061f6:	db08      	blt.n	800620a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061f8:	0109      	lsls	r1, r1, #4
 80061fa:	b2c9      	uxtb	r1, r1
 80061fc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006200:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006204:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8006208:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800620a:	f000 000f 	and.w	r0, r0, #15
 800620e:	0109      	lsls	r1, r1, #4
 8006210:	b2c9      	uxtb	r1, r1
 8006212:	4b01      	ldr	r3, [pc, #4]	@ (8006218 <__NVIC_SetPriority+0x24>)
 8006214:	5419      	strb	r1, [r3, r0]
  }
}
 8006216:	4770      	bx	lr
 8006218:	e000ed14 	.word	0xe000ed14

0800621c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800621c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800621e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006222:	f1c0 0c07 	rsb	ip, r0, #7
 8006226:	f1bc 0f04 	cmp.w	ip, #4
 800622a:	bf28      	it	cs
 800622c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006230:	1d03      	adds	r3, r0, #4
 8006232:	2b06      	cmp	r3, #6
 8006234:	d90f      	bls.n	8006256 <NVIC_EncodePriority+0x3a>
 8006236:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006238:	f04f 3eff 	mov.w	lr, #4294967295
 800623c:	fa0e f00c 	lsl.w	r0, lr, ip
 8006240:	ea21 0100 	bic.w	r1, r1, r0
 8006244:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006246:	fa0e fe03 	lsl.w	lr, lr, r3
 800624a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800624e:	ea41 0002 	orr.w	r0, r1, r2
 8006252:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006256:	2300      	movs	r3, #0
 8006258:	e7ee      	b.n	8006238 <NVIC_EncodePriority+0x1c>
	...

0800625c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800625c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006260:	4905      	ldr	r1, [pc, #20]	@ (8006278 <__NVIC_SystemReset+0x1c>)
 8006262:	68ca      	ldr	r2, [r1, #12]
 8006264:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006268:	4b04      	ldr	r3, [pc, #16]	@ (800627c <__NVIC_SystemReset+0x20>)
 800626a:	4313      	orrs	r3, r2
 800626c:	60cb      	str	r3, [r1, #12]
 800626e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006272:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006274:	e7fd      	b.n	8006272 <__NVIC_SystemReset+0x16>
 8006276:	bf00      	nop
 8006278:	e000ed00 	.word	0xe000ed00
 800627c:	05fa0004 	.word	0x05fa0004

08006280 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006280:	4a07      	ldr	r2, [pc, #28]	@ (80062a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006284:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006288:	041b      	lsls	r3, r3, #16
 800628a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800628c:	0200      	lsls	r0, r0, #8
 800628e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006292:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8006294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800629c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800629e:	4770      	bx	lr
 80062a0:	e000ed00 	.word	0xe000ed00

080062a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062a4:	b510      	push	{r4, lr}
 80062a6:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062a8:	4b05      	ldr	r3, [pc, #20]	@ (80062c0 <HAL_NVIC_SetPriority+0x1c>)
 80062aa:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062ac:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80062b0:	f7ff ffb4 	bl	800621c <NVIC_EncodePriority>
 80062b4:	4601      	mov	r1, r0
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff ff9c 	bl	80061f4 <__NVIC_SetPriority>
}
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	bf00      	nop
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062c6:	f7ff ff87 	bl	80061d8 <__NVIC_EnableIRQ>
}
 80062ca:	bd08      	pop	{r3, pc}

080062cc <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80062cc:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 80062ce:	f7ff ffc5 	bl	800625c <__NVIC_SystemReset>
	...

080062d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062d4:	3801      	subs	r0, #1
 80062d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80062da:	d20b      	bcs.n	80062f4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80062e0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e2:	4a05      	ldr	r2, [pc, #20]	@ (80062f8 <HAL_SYSTICK_Config+0x24>)
 80062e4:	21f0      	movs	r1, #240	@ 0xf0
 80062e6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062ea:	2000      	movs	r0, #0
 80062ec:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ee:	2207      	movs	r2, #7
 80062f0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062f2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80062f4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80062f6:	4770      	bx	lr
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062fc:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062fe:	6805      	ldr	r5, [r0, #0]
 8006300:	682c      	ldr	r4, [r5, #0]
 8006302:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8006306:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006308:	6804      	ldr	r4, [r0, #0]
 800630a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800630c:	6883      	ldr	r3, [r0, #8]
 800630e:	2b40      	cmp	r3, #64	@ 0x40
 8006310:	d005      	beq.n	800631e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8006312:	6803      	ldr	r3, [r0, #0]
 8006314:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8006316:	6803      	ldr	r3, [r0, #0]
 8006318:	60da      	str	r2, [r3, #12]
  }
}
 800631a:	bc30      	pop	{r4, r5}
 800631c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800631e:	6803      	ldr	r3, [r0, #0]
 8006320:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8006322:	6803      	ldr	r3, [r0, #0]
 8006324:	60d9      	str	r1, [r3, #12]
 8006326:	e7f8      	b.n	800631a <DMA_SetConfig+0x1e>

08006328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006328:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800632a:	6803      	ldr	r3, [r0, #0]
 800632c:	b2d9      	uxtb	r1, r3
 800632e:	3910      	subs	r1, #16
 8006330:	4a0a      	ldr	r2, [pc, #40]	@ (800635c <DMA_CalcBaseAndBitshift+0x34>)
 8006332:	fba2 4201 	umull	r4, r2, r2, r1
 8006336:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006338:	4c09      	ldr	r4, [pc, #36]	@ (8006360 <DMA_CalcBaseAndBitshift+0x38>)
 800633a:	5ca2      	ldrb	r2, [r4, r2]
 800633c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800633e:	295f      	cmp	r1, #95	@ 0x5f
 8006340:	d907      	bls.n	8006352 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006342:	f36f 0309 	bfc	r3, #0, #10
 8006346:	3304      	adds	r3, #4
 8006348:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800634a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 800634c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006350:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006352:	f36f 0309 	bfc	r3, #0, #10
 8006356:	6583      	str	r3, [r0, #88]	@ 0x58
 8006358:	e7f7      	b.n	800634a <DMA_CalcBaseAndBitshift+0x22>
 800635a:	bf00      	nop
 800635c:	aaaaaaab 	.word	0xaaaaaaab
 8006360:	08022dac 	.word	0x08022dac

08006364 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006364:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006366:	6982      	ldr	r2, [r0, #24]
 8006368:	b992      	cbnz	r2, 8006390 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800636a:	2b01      	cmp	r3, #1
 800636c:	d00a      	beq.n	8006384 <DMA_CheckFifoParam+0x20>
 800636e:	2b02      	cmp	r3, #2
 8006370:	d002      	beq.n	8006378 <DMA_CheckFifoParam+0x14>
 8006372:	b10b      	cbz	r3, 8006378 <DMA_CheckFifoParam+0x14>
 8006374:	2000      	movs	r0, #0
 8006376:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006378:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800637a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800637e:	d128      	bne.n	80063d2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8006380:	2000      	movs	r0, #0
 8006382:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006384:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006386:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800638a:	d024      	beq.n	80063d6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2000      	movs	r0, #0
 800638e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006390:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006394:	d009      	beq.n	80063aa <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006396:	2b02      	cmp	r3, #2
 8006398:	d925      	bls.n	80063e6 <DMA_CheckFifoParam+0x82>
 800639a:	2b03      	cmp	r3, #3
 800639c:	d125      	bne.n	80063ea <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800639e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80063a0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80063a4:	d123      	bne.n	80063ee <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80063a6:	2000      	movs	r0, #0
 80063a8:	4770      	bx	lr
    switch (tmp)
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d803      	bhi.n	80063b6 <DMA_CheckFifoParam+0x52>
 80063ae:	e8df f003 	tbb	[pc, r3]
 80063b2:	0414      	.short	0x0414
 80063b4:	0a14      	.short	0x0a14
 80063b6:	2000      	movs	r0, #0
 80063b8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ba:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80063bc:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80063c0:	d10d      	bne.n	80063de <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2000      	movs	r0, #0
 80063c4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063c6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80063c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063cc:	d009      	beq.n	80063e2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80063ce:	2000      	movs	r0, #0
 80063d0:	4770      	bx	lr
        status = HAL_ERROR;
 80063d2:	2001      	movs	r0, #1
 80063d4:	4770      	bx	lr
        status = HAL_ERROR;
 80063d6:	2001      	movs	r0, #1
 80063d8:	4770      	bx	lr
      status = HAL_ERROR;
 80063da:	2001      	movs	r0, #1
 80063dc:	4770      	bx	lr
        status = HAL_ERROR;
 80063de:	2001      	movs	r0, #1
 80063e0:	4770      	bx	lr
        status = HAL_ERROR;
 80063e2:	2001      	movs	r0, #1
 80063e4:	4770      	bx	lr
      status = HAL_ERROR;
 80063e6:	2001      	movs	r0, #1
 80063e8:	4770      	bx	lr
    switch (tmp)
 80063ea:	2000      	movs	r0, #0
 80063ec:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80063ee:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80063f0:	4770      	bx	lr
	...

080063f4 <HAL_DMA_Init>:
{
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80063f8:	f7ff fecc 	bl	8006194 <HAL_GetTick>
  if(hdma == NULL)
 80063fc:	2c00      	cmp	r4, #0
 80063fe:	d05b      	beq.n	80064b8 <HAL_DMA_Init+0xc4>
 8006400:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8006402:	2302      	movs	r3, #2
 8006404:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8006408:	2300      	movs	r3, #0
 800640a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	6813      	ldr	r3, [r2, #0]
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f012 0f01 	tst.w	r2, #1
 8006420:	d00a      	beq.n	8006438 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006422:	f7ff feb7 	bl	8006194 <HAL_GetTick>
 8006426:	1b43      	subs	r3, r0, r5
 8006428:	2b05      	cmp	r3, #5
 800642a:	d9f5      	bls.n	8006418 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800642c:	2320      	movs	r3, #32
 800642e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006430:	2003      	movs	r0, #3
 8006432:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8006436:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8006438:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800643a:	4920      	ldr	r1, [pc, #128]	@ (80064bc <HAL_DMA_Init+0xc8>)
 800643c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800643e:	6862      	ldr	r2, [r4, #4]
 8006440:	68a0      	ldr	r0, [r4, #8]
 8006442:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006444:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006446:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006448:	6920      	ldr	r0, [r4, #16]
 800644a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800644c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800644e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006450:	69a0      	ldr	r0, [r4, #24]
 8006452:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8006454:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006456:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8006458:	6a20      	ldr	r0, [r4, #32]
 800645a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800645c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800645e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006460:	2904      	cmp	r1, #4
 8006462:	d01e      	beq.n	80064a2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8006464:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8006466:	6826      	ldr	r6, [r4, #0]
 8006468:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800646a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800646e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006470:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006472:	2b04      	cmp	r3, #4
 8006474:	d107      	bne.n	8006486 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8006476:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006478:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800647a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800647c:	b11b      	cbz	r3, 8006486 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800647e:	4620      	mov	r0, r4
 8006480:	f7ff ff70 	bl	8006364 <DMA_CheckFifoParam>
 8006484:	b990      	cbnz	r0, 80064ac <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8006486:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006488:	4620      	mov	r0, r4
 800648a:	f7ff ff4d 	bl	8006328 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800648e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006490:	233f      	movs	r3, #63	@ 0x3f
 8006492:	4093      	lsls	r3, r2
 8006494:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006496:	2000      	movs	r0, #0
 8006498:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800649a:	2301      	movs	r3, #1
 800649c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80064a0:	e7c9      	b.n	8006436 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80064a4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80064a6:	4301      	orrs	r1, r0
 80064a8:	430a      	orrs	r2, r1
 80064aa:	e7db      	b.n	8006464 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064ac:	2340      	movs	r3, #64	@ 0x40
 80064ae:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80064b0:	2001      	movs	r0, #1
 80064b2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80064b6:	e7be      	b.n	8006436 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80064b8:	2001      	movs	r0, #1
 80064ba:	e7bc      	b.n	8006436 <HAL_DMA_Init+0x42>
 80064bc:	e010803f 	.word	0xe010803f

080064c0 <HAL_DMA_Start_IT>:
{
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80064c6:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80064ca:	2801      	cmp	r0, #1
 80064cc:	d02b      	beq.n	8006526 <HAL_DMA_Start_IT+0x66>
 80064ce:	2001      	movs	r0, #1
 80064d0:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80064d4:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80064d8:	b2c0      	uxtb	r0, r0
 80064da:	2801      	cmp	r0, #1
 80064dc:	d004      	beq.n	80064e8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80064de:	2300      	movs	r3, #0
 80064e0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80064e4:	2002      	movs	r0, #2
}
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80064e8:	2002      	movs	r0, #2
 80064ea:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064ee:	2000      	movs	r0, #0
 80064f0:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7ff ff02 	bl	80062fc <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064f8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80064fa:	233f      	movs	r3, #63	@ 0x3f
 80064fc:	4093      	lsls	r3, r2
 80064fe:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	f043 0316 	orr.w	r3, r3, #22
 8006508:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800650a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800650c:	b123      	cbz	r3, 8006518 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	6813      	ldr	r3, [r2, #0]
 8006512:	f043 0308 	orr.w	r3, r3, #8
 8006516:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	6813      	ldr	r3, [r2, #0]
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2000      	movs	r0, #0
 8006524:	e7df      	b.n	80064e6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8006526:	2002      	movs	r0, #2
 8006528:	e7dd      	b.n	80064e6 <HAL_DMA_Start_IT+0x26>

0800652a <HAL_DMA_Abort>:
{
 800652a:	b570      	push	{r4, r5, r6, lr}
 800652c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800652e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8006530:	f7ff fe30 	bl	8006194 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006534:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d006      	beq.n	800654c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8006542:	2300      	movs	r3, #0
 8006544:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8006548:	2001      	movs	r0, #1
}
 800654a:	bd70      	pop	{r4, r5, r6, pc}
 800654c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	6813      	ldr	r3, [r2, #0]
 8006552:	f023 0316 	bic.w	r3, r3, #22
 8006556:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	6953      	ldr	r3, [r2, #20]
 800655c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006560:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006562:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006564:	b1e3      	cbz	r3, 80065a0 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	6813      	ldr	r3, [r2, #0]
 800656a:	f023 0308 	bic.w	r3, r3, #8
 800656e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f013 0f01 	tst.w	r3, #1
 8006582:	d011      	beq.n	80065a8 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006584:	f7ff fe06 	bl	8006194 <HAL_GetTick>
 8006588:	1b43      	subs	r3, r0, r5
 800658a:	2b05      	cmp	r3, #5
 800658c:	d9f5      	bls.n	800657a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800658e:	2320      	movs	r3, #32
 8006590:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006592:	2003      	movs	r0, #3
 8006594:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8006598:	2300      	movs	r3, #0
 800659a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 800659e:	e7d4      	b.n	800654a <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065a0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1df      	bne.n	8006566 <HAL_DMA_Abort+0x3c>
 80065a6:	e7e3      	b.n	8006570 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065a8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80065aa:	233f      	movs	r3, #63	@ 0x3f
 80065ac:	4093      	lsls	r3, r2
 80065ae:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80065b6:	2000      	movs	r0, #0
 80065b8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80065bc:	e7c5      	b.n	800654a <HAL_DMA_Abort+0x20>

080065be <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065be:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d003      	beq.n	80065d0 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065c8:	2380      	movs	r3, #128	@ 0x80
 80065ca:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80065cc:	2001      	movs	r0, #1
 80065ce:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80065d0:	2305      	movs	r3, #5
 80065d2:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80065d6:	6802      	ldr	r2, [r0, #0]
 80065d8:	6813      	ldr	r3, [r2, #0]
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80065e0:	2000      	movs	r0, #0
}
 80065e2:	4770      	bx	lr

080065e4 <HAL_DMA_IRQHandler>:
{
 80065e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e6:	b083      	sub	sp, #12
 80065e8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065ee:	4b72      	ldr	r3, [pc, #456]	@ (80067b8 <HAL_DMA_IRQHandler+0x1d4>)
 80065f0:	681d      	ldr	r5, [r3, #0]
 80065f2:	4b72      	ldr	r3, [pc, #456]	@ (80067bc <HAL_DMA_IRQHandler+0x1d8>)
 80065f4:	fba3 3505 	umull	r3, r5, r3, r5
 80065f8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065fa:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 80065fc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065fe:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8006600:	2308      	movs	r3, #8
 8006602:	4093      	lsls	r3, r2
 8006604:	4233      	tst	r3, r6
 8006606:	d010      	beq.n	800662a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006608:	6803      	ldr	r3, [r0, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	f012 0f04 	tst.w	r2, #4
 8006610:	d00b      	beq.n	800662a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	f022 0204 	bic.w	r2, r2, #4
 8006618:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800661a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800661c:	2308      	movs	r3, #8
 800661e:	4093      	lsls	r3, r2
 8006620:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006622:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800662a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800662c:	2301      	movs	r3, #1
 800662e:	4093      	lsls	r3, r2
 8006630:	4233      	tst	r3, r6
 8006632:	d009      	beq.n	8006648 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	6952      	ldr	r2, [r2, #20]
 8006638:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800663c:	d004      	beq.n	8006648 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800663e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006640:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006642:	f043 0302 	orr.w	r3, r3, #2
 8006646:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006648:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800664a:	2304      	movs	r3, #4
 800664c:	4093      	lsls	r3, r2
 800664e:	4233      	tst	r3, r6
 8006650:	d009      	beq.n	8006666 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	f012 0f02 	tst.w	r2, #2
 800665a:	d004      	beq.n	8006666 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800665c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800665e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006660:	f043 0304 	orr.w	r3, r3, #4
 8006664:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006666:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8006668:	2310      	movs	r3, #16
 800666a:	4093      	lsls	r3, r2
 800666c:	4233      	tst	r3, r6
 800666e:	d024      	beq.n	80066ba <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	f012 0f08 	tst.w	r2, #8
 8006678:	d01f      	beq.n	80066ba <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800667a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8006684:	d00d      	beq.n	80066a2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800668c:	d104      	bne.n	8006698 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800668e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006690:	b19b      	cbz	r3, 80066ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8006692:	4620      	mov	r0, r4
 8006694:	4798      	blx	r3
 8006696:	e010      	b.n	80066ba <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006698:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800669a:	b173      	cbz	r3, 80066ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800669c:	4620      	mov	r0, r4
 800669e:	4798      	blx	r3
 80066a0:	e00b      	b.n	80066ba <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80066a8:	d103      	bne.n	80066b2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f022 0208 	bic.w	r2, r2, #8
 80066b0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80066b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066b4:	b10b      	cbz	r3, 80066ba <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80066b6:	4620      	mov	r0, r4
 80066b8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066ba:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80066bc:	2320      	movs	r3, #32
 80066be:	4093      	lsls	r3, r2
 80066c0:	4233      	tst	r3, r6
 80066c2:	d055      	beq.n	8006770 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	f012 0f10 	tst.w	r2, #16
 80066cc:	d050      	beq.n	8006770 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066ce:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066d0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b05      	cmp	r3, #5
 80066d8:	d00e      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80066e2:	d033      	beq.n	800674c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80066ea:	d12a      	bne.n	8006742 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80066ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d03e      	beq.n	8006770 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80066f2:	4620      	mov	r0, r4
 80066f4:	4798      	blx	r3
 80066f6:	e03b      	b.n	8006770 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	6813      	ldr	r3, [r2, #0]
 80066fc:	f023 0316 	bic.w	r3, r3, #22
 8006700:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	6953      	ldr	r3, [r2, #20]
 8006706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800670a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800670c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800670e:	b1a3      	cbz	r3, 800673a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	f023 0308 	bic.w	r3, r3, #8
 8006718:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800671a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800671c:	233f      	movs	r3, #63	@ 0x3f
 800671e:	4093      	lsls	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8006722:	2301      	movs	r3, #1
 8006724:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8006728:	2300      	movs	r3, #0
 800672a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800672e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006730:	2b00      	cmp	r3, #0
 8006732:	d03f      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8006734:	4620      	mov	r0, r4
 8006736:	4798      	blx	r3
        return;
 8006738:	e03c      	b.n	80067b4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800673a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e7      	bne.n	8006710 <HAL_DMA_IRQHandler+0x12c>
 8006740:	e7eb      	b.n	800671a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8006742:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006744:	b1a3      	cbz	r3, 8006770 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8006746:	4620      	mov	r0, r4
 8006748:	4798      	blx	r3
 800674a:	e011      	b.n	8006770 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8006752:	d109      	bne.n	8006768 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	f022 0210 	bic.w	r2, r2, #16
 800675a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800675c:	2301      	movs	r3, #1
 800675e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8006762:	2300      	movs	r3, #0
 8006764:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8006768:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800676a:	b10b      	cbz	r3, 8006770 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800676c:	4620      	mov	r0, r4
 800676e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006770:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006772:	b1fb      	cbz	r3, 80067b4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006774:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006776:	f013 0f01 	tst.w	r3, #1
 800677a:	d017      	beq.n	80067ac <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800677c:	2305      	movs	r3, #5
 800677e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	6813      	ldr	r3, [r2, #0]
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	3301      	adds	r3, #1
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	42ab      	cmp	r3, r5
 8006794:	d804      	bhi.n	80067a0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f013 0f01 	tst.w	r3, #1
 800679e:	d1f5      	bne.n	800678c <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80067a6:	2300      	movs	r3, #0
 80067a8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80067ac:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80067ae:	b10b      	cbz	r3, 80067b4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80067b0:	4620      	mov	r0, r4
 80067b2:	4798      	blx	r3
}
 80067b4:	b003      	add	sp, #12
 80067b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b8:	20000138 	.word	0x20000138
 80067bc:	1b4e81b5 	.word	0x1b4e81b5

080067c0 <HAL_DMA_GetState>:
  return hdma->State;
 80067c0:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 80067c4:	4770      	bx	lr
	...

080067c8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	f200 80e3 	bhi.w	8006996 <HAL_GPIO_Init+0x1ce>
{
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	e065      	b.n	80068a2 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067d6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067d8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80067dc:	2403      	movs	r4, #3
 80067de:	fa04 f40e 	lsl.w	r4, r4, lr
 80067e2:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067e6:	68cc      	ldr	r4, [r1, #12]
 80067e8:	fa04 f40e 	lsl.w	r4, r4, lr
 80067ec:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80067ee:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067f0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067f2:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067f6:	684a      	ldr	r2, [r1, #4]
 80067f8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80067fc:	409a      	lsls	r2, r3
 80067fe:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8006800:	6042      	str	r2, [r0, #4]
 8006802:	e05c      	b.n	80068be <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006804:	08dc      	lsrs	r4, r3, #3
 8006806:	3408      	adds	r4, #8
 8006808:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800680c:	f003 0507 	and.w	r5, r3, #7
 8006810:	00ad      	lsls	r5, r5, #2
 8006812:	f04f 0e0f 	mov.w	lr, #15
 8006816:	fa0e fe05 	lsl.w	lr, lr, r5
 800681a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800681e:	690a      	ldr	r2, [r1, #16]
 8006820:	40aa      	lsls	r2, r5
 8006822:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006826:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800682a:	e05c      	b.n	80068e6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800682c:	2206      	movs	r2, #6
 800682e:	e000      	b.n	8006832 <HAL_GPIO_Init+0x6a>
 8006830:	2200      	movs	r2, #0
 8006832:	fa02 f20e 	lsl.w	r2, r2, lr
 8006836:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006838:	3402      	adds	r4, #2
 800683a:	4d57      	ldr	r5, [pc, #348]	@ (8006998 <HAL_GPIO_Init+0x1d0>)
 800683c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006840:	4a56      	ldr	r2, [pc, #344]	@ (800699c <HAL_GPIO_Init+0x1d4>)
 8006842:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8006844:	ea6f 020c 	mvn.w	r2, ip
 8006848:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800684c:	684e      	ldr	r6, [r1, #4]
 800684e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8006852:	d001      	beq.n	8006858 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8006854:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8006858:	4c50      	ldr	r4, [pc, #320]	@ (800699c <HAL_GPIO_Init+0x1d4>)
 800685a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800685c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800685e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006862:	684e      	ldr	r6, [r1, #4]
 8006864:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8006868:	d001      	beq.n	800686e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800686a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800686e:	4c4b      	ldr	r4, [pc, #300]	@ (800699c <HAL_GPIO_Init+0x1d4>)
 8006870:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8006872:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8006874:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006878:	684e      	ldr	r6, [r1, #4]
 800687a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800687e:	d001      	beq.n	8006884 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8006880:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8006884:	4c45      	ldr	r4, [pc, #276]	@ (800699c <HAL_GPIO_Init+0x1d4>)
 8006886:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006888:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800688a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800688c:	684d      	ldr	r5, [r1, #4]
 800688e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8006892:	d001      	beq.n	8006898 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8006894:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8006898:	4c40      	ldr	r4, [pc, #256]	@ (800699c <HAL_GPIO_Init+0x1d4>)
 800689a:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800689c:	3301      	adds	r3, #1
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	d877      	bhi.n	8006992 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 80068a2:	2201      	movs	r2, #1
 80068a4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068a6:	680c      	ldr	r4, [r1, #0]
 80068a8:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80068ac:	ea32 0404 	bics.w	r4, r2, r4
 80068b0:	d1f4      	bne.n	800689c <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068b2:	684c      	ldr	r4, [r1, #4]
 80068b4:	f004 0403 	and.w	r4, r4, #3
 80068b8:	3c01      	subs	r4, #1
 80068ba:	2c01      	cmp	r4, #1
 80068bc:	d98b      	bls.n	80067d6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068be:	684a      	ldr	r2, [r1, #4]
 80068c0:	f002 0203 	and.w	r2, r2, #3
 80068c4:	2a03      	cmp	r2, #3
 80068c6:	d009      	beq.n	80068dc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80068c8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068ca:	005d      	lsls	r5, r3, #1
 80068cc:	2203      	movs	r2, #3
 80068ce:	40aa      	lsls	r2, r5
 80068d0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068d4:	688a      	ldr	r2, [r1, #8]
 80068d6:	40aa      	lsls	r2, r5
 80068d8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80068da:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068dc:	684a      	ldr	r2, [r1, #4]
 80068de:	f002 0203 	and.w	r2, r2, #3
 80068e2:	2a02      	cmp	r2, #2
 80068e4:	d08e      	beq.n	8006804 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80068e6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068e8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80068ec:	2203      	movs	r2, #3
 80068ee:	fa02 f20e 	lsl.w	r2, r2, lr
 80068f2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068f6:	684a      	ldr	r2, [r1, #4]
 80068f8:	f002 0203 	and.w	r2, r2, #3
 80068fc:	fa02 f20e 	lsl.w	r2, r2, lr
 8006900:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8006902:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006904:	684a      	ldr	r2, [r1, #4]
 8006906:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800690a:	d0c7      	beq.n	800689c <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800690c:	2200      	movs	r2, #0
 800690e:	9201      	str	r2, [sp, #4]
 8006910:	4a23      	ldr	r2, [pc, #140]	@ (80069a0 <HAL_GPIO_Init+0x1d8>)
 8006912:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8006914:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8006918:	6454      	str	r4, [r2, #68]	@ 0x44
 800691a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800691c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006920:	9201      	str	r2, [sp, #4]
 8006922:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006924:	089c      	lsrs	r4, r3, #2
 8006926:	1ca5      	adds	r5, r4, #2
 8006928:	4a1b      	ldr	r2, [pc, #108]	@ (8006998 <HAL_GPIO_Init+0x1d0>)
 800692a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800692e:	f003 0e03 	and.w	lr, r3, #3
 8006932:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8006936:	220f      	movs	r2, #15
 8006938:	fa02 f20e 	lsl.w	r2, r2, lr
 800693c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006940:	4a18      	ldr	r2, [pc, #96]	@ (80069a4 <HAL_GPIO_Init+0x1dc>)
 8006942:	4290      	cmp	r0, r2
 8006944:	f43f af74 	beq.w	8006830 <HAL_GPIO_Init+0x68>
 8006948:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800694c:	4290      	cmp	r0, r2
 800694e:	d016      	beq.n	800697e <HAL_GPIO_Init+0x1b6>
 8006950:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006954:	4290      	cmp	r0, r2
 8006956:	d014      	beq.n	8006982 <HAL_GPIO_Init+0x1ba>
 8006958:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800695c:	4290      	cmp	r0, r2
 800695e:	d012      	beq.n	8006986 <HAL_GPIO_Init+0x1be>
 8006960:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006964:	4290      	cmp	r0, r2
 8006966:	d010      	beq.n	800698a <HAL_GPIO_Init+0x1c2>
 8006968:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800696c:	4290      	cmp	r0, r2
 800696e:	d00e      	beq.n	800698e <HAL_GPIO_Init+0x1c6>
 8006970:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006974:	4290      	cmp	r0, r2
 8006976:	f43f af59 	beq.w	800682c <HAL_GPIO_Init+0x64>
 800697a:	2207      	movs	r2, #7
 800697c:	e759      	b.n	8006832 <HAL_GPIO_Init+0x6a>
 800697e:	2201      	movs	r2, #1
 8006980:	e757      	b.n	8006832 <HAL_GPIO_Init+0x6a>
 8006982:	2202      	movs	r2, #2
 8006984:	e755      	b.n	8006832 <HAL_GPIO_Init+0x6a>
 8006986:	2203      	movs	r2, #3
 8006988:	e753      	b.n	8006832 <HAL_GPIO_Init+0x6a>
 800698a:	2204      	movs	r2, #4
 800698c:	e751      	b.n	8006832 <HAL_GPIO_Init+0x6a>
 800698e:	2205      	movs	r2, #5
 8006990:	e74f      	b.n	8006832 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8006992:	b002      	add	sp, #8
 8006994:	bd70      	pop	{r4, r5, r6, pc}
 8006996:	4770      	bx	lr
 8006998:	40013800 	.word	0x40013800
 800699c:	40013c00 	.word	0x40013c00
 80069a0:	40023800 	.word	0x40023800
 80069a4:	40020000 	.word	0x40020000

080069a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069a8:	b10a      	cbz	r2, 80069ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069aa:	6181      	str	r1, [r0, #24]
 80069ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069ae:	0409      	lsls	r1, r1, #16
 80069b0:	6181      	str	r1, [r0, #24]
  }
}
 80069b2:	4770      	bx	lr

080069b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069b4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80069b6:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	4203      	tst	r3, r0
 80069bc:	d100      	bne.n	80069c0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80069be:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069c0:	4b02      	ldr	r3, [pc, #8]	@ (80069cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80069c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069c4:	f7fe fb62 	bl	800508c <HAL_GPIO_EXTI_Callback>
}
 80069c8:	e7f9      	b.n	80069be <HAL_GPIO_EXTI_IRQHandler+0xa>
 80069ca:	bf00      	nop
 80069cc:	40013c00 	.word	0x40013c00

080069d0 <I2C_Flush_DR>:
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80069d0:	6803      	ldr	r3, [r0, #0]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80069d8:	d001      	beq.n	80069de <I2C_Flush_DR+0xe>
  {
    hi2c->Instance->DR = 0x00U;
 80069da:	2200      	movs	r2, #0
 80069dc:	611a      	str	r2, [r3, #16]
  }
}
 80069de:	4770      	bx	lr

080069e0 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069e0:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	d010      	beq.n	8006a0c <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069ea:	6903      	ldr	r3, [r0, #16]
 80069ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069f0:	d01b      	beq.n	8006a2a <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 80069f2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d139      	bne.n	8006a6c <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80069f8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80069fa:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80069fe:	6802      	ldr	r2, [r0, #0]
 8006a00:	f003 0306 	and.w	r3, r3, #6
 8006a04:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8006a08:	6113      	str	r3, [r2, #16]
 8006a0a:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8006a0c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006a0e:	b92b      	cbnz	r3, 8006a1c <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a10:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a12:	6802      	ldr	r2, [r0, #0]
 8006a14:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a18:	6113      	str	r3, [r2, #16]
 8006a1a:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a1c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a1e:	6802      	ldr	r2, [r0, #0]
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	6113      	str	r3, [r2, #16]
 8006a28:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a2a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b21      	cmp	r3, #33	@ 0x21
 8006a32:	d00f      	beq.n	8006a54 <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006a34:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a36:	6802      	ldr	r2, [r0, #0]
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006a42:	b16b      	cbz	r3, 8006a60 <I2C_Master_SB+0x80>
 8006a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a46:	b15b      	cbz	r3, 8006a60 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	6853      	ldr	r3, [r2, #4]
 8006a4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006a50:	6053      	str	r3, [r2, #4]
 8006a52:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006a54:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a56:	6802      	ldr	r2, [r0, #0]
 8006a58:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006a5c:	6113      	str	r3, [r2, #16]
 8006a5e:	e7ef      	b.n	8006a40 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a60:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006a62:	b133      	cbz	r3, 8006a72 <I2C_Master_SB+0x92>
 8006a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1ee      	bne.n	8006a48 <I2C_Master_SB+0x68>
 8006a6a:	e002      	b.n	8006a72 <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8006a6c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d000      	beq.n	8006a74 <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 8006a72:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006a74:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a76:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8006a7a:	6802      	ldr	r2, [r0, #0]
 8006a7c:	f003 0306 	and.w	r3, r3, #6
 8006a80:	f043 03f1 	orr.w	r3, r3, #241	@ 0xf1
 8006a84:	6113      	str	r3, [r2, #16]
}
 8006a86:	e7f4      	b.n	8006a72 <I2C_Master_SB+0x92>

08006a88 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006a88:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8006a8a:	6802      	ldr	r2, [r0, #0]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006a92:	b13b      	cbz	r3, 8006aa4 <I2C_Master_ADD10+0x1c>
 8006a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a96:	b12b      	cbz	r3, 8006aa4 <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a98:	6802      	ldr	r2, [r0, #0]
 8006a9a:	6853      	ldr	r3, [r2, #4]
 8006a9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006aa0:	6053      	str	r3, [r2, #4]
  }
}
 8006aa2:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006aa4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0fb      	beq.n	8006aa2 <I2C_Master_ADD10+0x1a>
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f3      	bne.n	8006a98 <I2C_Master_ADD10+0x10>
 8006ab0:	e7f7      	b.n	8006aa2 <I2C_Master_ADD10+0x1a>
	...

08006ab4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006ab4:	b410      	push	{r4}
 8006ab6:	b08b      	sub	sp, #44	@ 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006ab8:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8006abc:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006abe:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006ac0:	6b04      	ldr	r4, [r0, #48]	@ 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ac2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b22      	cmp	r3, #34	@ 0x22
 8006aca:	d00b      	beq.n	8006ae4 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006acc:	2300      	movs	r3, #0
 8006ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad0:	6803      	ldr	r3, [r0, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  }
}
 8006adc:	b00b      	add	sp, #44	@ 0x2c
 8006ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae2:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006ae4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006ae6:	b90b      	cbnz	r3, 8006aec <I2C_Master_ADDR+0x38>
 8006ae8:	2a40      	cmp	r2, #64	@ 0x40
 8006aea:	d017      	beq.n	8006b1c <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006aec:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006aee:	b91b      	cbnz	r3, 8006af8 <I2C_Master_ADDR+0x44>
 8006af0:	6903      	ldr	r3, [r0, #16]
 8006af2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006af6:	d019      	beq.n	8006b2c <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 8006af8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d125      	bne.n	8006b4c <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b00:	9302      	str	r3, [sp, #8]
 8006b02:	6803      	ldr	r3, [r0, #0]
 8006b04:	695a      	ldr	r2, [r3, #20]
 8006b06:	9202      	str	r2, [sp, #8]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	9202      	str	r2, [sp, #8]
 8006b0c:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b14:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	6503      	str	r3, [r0, #80]	@ 0x50
 8006b1a:	e7df      	b.n	8006adc <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	6803      	ldr	r3, [r0, #0]
 8006b20:	695a      	ldr	r2, [r3, #20]
 8006b22:	9200      	str	r2, [sp, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	9b00      	ldr	r3, [sp, #0]
 8006b2a:	e7d7      	b.n	8006adc <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	6803      	ldr	r3, [r0, #0]
 8006b32:	695a      	ldr	r2, [r3, #20]
 8006b34:	9201      	str	r2, [sp, #4]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	9201      	str	r2, [sp, #4]
 8006b3a:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b42:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006b44:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006b46:	3301      	adds	r3, #1
 8006b48:	6503      	str	r3, [r0, #80]	@ 0x50
 8006b4a:	e7c7      	b.n	8006adc <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8006b4c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d026      	beq.n	8006ba2 <I2C_Master_ADDR+0xee>
      else if (hi2c->XferCount == 2U)
 8006b54:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d07c      	beq.n	8006c56 <I2C_Master_ADDR+0x1a2>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b5c:	6802      	ldr	r2, [r0, #0]
 8006b5e:	6813      	ldr	r3, [r2, #0]
 8006b60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b64:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b66:	6803      	ldr	r3, [r0, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006b6e:	d00f      	beq.n	8006b90 <I2C_Master_ADDR+0xdc>
 8006b70:	2920      	cmp	r1, #32
 8006b72:	f200 80ae 	bhi.w	8006cd2 <I2C_Master_ADDR+0x21e>
 8006b76:	2908      	cmp	r1, #8
 8006b78:	f0c0 80a7 	bcc.w	8006cca <I2C_Master_ADDR+0x216>
 8006b7c:	3908      	subs	r1, #8
 8006b7e:	4a57      	ldr	r2, [pc, #348]	@ (8006cdc <I2C_Master_ADDR+0x228>)
 8006b80:	40ca      	lsrs	r2, r1
 8006b82:	f012 0f01 	tst.w	r2, #1
 8006b86:	d003      	beq.n	8006b90 <I2C_Master_ADDR+0xdc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b8e:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b90:	2300      	movs	r3, #0
 8006b92:	9308      	str	r3, [sp, #32]
 8006b94:	6803      	ldr	r3, [r0, #0]
 8006b96:	695a      	ldr	r2, [r3, #20]
 8006b98:	9208      	str	r2, [sp, #32]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	9308      	str	r3, [sp, #32]
 8006b9e:	9b08      	ldr	r3, [sp, #32]
 8006ba0:	e7b9      	b.n	8006b16 <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006ba2:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8006ba6:	d011      	beq.n	8006bcc <I2C_Master_ADDR+0x118>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006ba8:	2908      	cmp	r1, #8
 8006baa:	d034      	beq.n	8006c16 <I2C_Master_ADDR+0x162>
 8006bac:	2920      	cmp	r1, #32
 8006bae:	d032      	beq.n	8006c16 <I2C_Master_ADDR+0x162>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006bb0:	2c12      	cmp	r4, #18
 8006bb2:	d02e      	beq.n	8006c12 <I2C_Master_ADDR+0x15e>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bb4:	2904      	cmp	r1, #4
 8006bb6:	d040      	beq.n	8006c3a <I2C_Master_ADDR+0x186>
 8006bb8:	2902      	cmp	r1, #2
 8006bba:	d03e      	beq.n	8006c3a <I2C_Master_ADDR+0x186>
 8006bbc:	2910      	cmp	r1, #16
 8006bbe:	d03c      	beq.n	8006c3a <I2C_Master_ADDR+0x186>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc0:	6802      	ldr	r2, [r0, #0]
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	e03b      	b.n	8006c44 <I2C_Master_ADDR+0x190>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bcc:	6802      	ldr	r2, [r0, #0]
 8006bce:	6813      	ldr	r3, [r2, #0]
 8006bd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bd4:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bd6:	6803      	ldr	r3, [r0, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006bde:	d00c      	beq.n	8006bfa <I2C_Master_ADDR+0x146>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006be6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be8:	2300      	movs	r3, #0
 8006bea:	9303      	str	r3, [sp, #12]
 8006bec:	6803      	ldr	r3, [r0, #0]
 8006bee:	695a      	ldr	r2, [r3, #20]
 8006bf0:	9203      	str	r2, [sp, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	9303      	str	r3, [sp, #12]
 8006bf6:	9b03      	ldr	r3, [sp, #12]
 8006bf8:	e78d      	b.n	8006b16 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	9204      	str	r2, [sp, #16]
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	9204      	str	r2, [sp, #16]
 8006c02:	699a      	ldr	r2, [r3, #24]
 8006c04:	9204      	str	r2, [sp, #16]
 8006c06:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e781      	b.n	8006b16 <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006c12:	2901      	cmp	r1, #1
 8006c14:	d0d0      	beq.n	8006bb8 <I2C_Master_ADDR+0x104>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c16:	6802      	ldr	r2, [r0, #0]
 8006c18:	6813      	ldr	r3, [r2, #0]
 8006c1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c1e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c20:	2300      	movs	r3, #0
 8006c22:	9306      	str	r3, [sp, #24]
 8006c24:	6803      	ldr	r3, [r0, #0]
 8006c26:	695a      	ldr	r2, [r3, #20]
 8006c28:	9206      	str	r2, [sp, #24]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	9206      	str	r2, [sp, #24]
 8006c2e:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e76d      	b.n	8006b16 <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c3a:	6802      	ldr	r2, [r0, #0]
 8006c3c:	6813      	ldr	r3, [r2, #0]
 8006c3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c42:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c44:	2300      	movs	r3, #0
 8006c46:	9305      	str	r3, [sp, #20]
 8006c48:	6803      	ldr	r3, [r0, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	9205      	str	r2, [sp, #20]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	9b05      	ldr	r3, [sp, #20]
 8006c54:	e75f      	b.n	8006b16 <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c56:	2910      	cmp	r1, #16
 8006c58:	d80a      	bhi.n	8006c70 <I2C_Master_ADDR+0x1bc>
 8006c5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ce0 <I2C_Master_ADDR+0x22c>)
 8006c5c:	40cb      	lsrs	r3, r1
 8006c5e:	f013 0f01 	tst.w	r3, #1
 8006c62:	d005      	beq.n	8006c70 <I2C_Master_ADDR+0x1bc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c64:	6802      	ldr	r2, [r0, #0]
 8006c66:	6813      	ldr	r3, [r2, #0]
 8006c68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e009      	b.n	8006c84 <I2C_Master_ADDR+0x1d0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c70:	6802      	ldr	r2, [r0, #0]
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c78:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c7a:	6802      	ldr	r2, [r0, #0]
 8006c7c:	6813      	ldr	r3, [r2, #0]
 8006c7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006c82:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006c84:	6803      	ldr	r3, [r0, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8006c8c:	d00d      	beq.n	8006caa <I2C_Master_ADDR+0x1f6>
 8006c8e:	2920      	cmp	r1, #32
 8006c90:	d817      	bhi.n	8006cc2 <I2C_Master_ADDR+0x20e>
 8006c92:	2908      	cmp	r1, #8
 8006c94:	d312      	bcc.n	8006cbc <I2C_Master_ADDR+0x208>
 8006c96:	3908      	subs	r1, #8
 8006c98:	4a10      	ldr	r2, [pc, #64]	@ (8006cdc <I2C_Master_ADDR+0x228>)
 8006c9a:	40ca      	lsrs	r2, r1
 8006c9c:	f012 0f01 	tst.w	r2, #1
 8006ca0:	d003      	beq.n	8006caa <I2C_Master_ADDR+0x1f6>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ca8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	9307      	str	r3, [sp, #28]
 8006cae:	6803      	ldr	r3, [r0, #0]
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	9207      	str	r2, [sp, #28]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	e72c      	b.n	8006b16 <I2C_Master_ADDR+0x62>
 8006cbc:	2901      	cmp	r1, #1
 8006cbe:	d1f4      	bne.n	8006caa <I2C_Master_ADDR+0x1f6>
 8006cc0:	e7ef      	b.n	8006ca2 <I2C_Master_ADDR+0x1ee>
 8006cc2:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8006cc6:	d1f0      	bne.n	8006caa <I2C_Master_ADDR+0x1f6>
 8006cc8:	e7eb      	b.n	8006ca2 <I2C_Master_ADDR+0x1ee>
 8006cca:	2901      	cmp	r1, #1
 8006ccc:	f47f af60 	bne.w	8006b90 <I2C_Master_ADDR+0xdc>
 8006cd0:	e75a      	b.n	8006b88 <I2C_Master_ADDR+0xd4>
 8006cd2:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8006cd6:	f47f af5b 	bne.w	8006b90 <I2C_Master_ADDR+0xdc>
 8006cda:	e755      	b.n	8006b88 <I2C_Master_ADDR+0xd4>
 8006cdc:	01000101 	.word	0x01000101
 8006ce0:	00010014 	.word	0x00010014

08006ce4 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8006ce4:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	b15b      	cbz	r3, 8006d02 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cea:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8006cec:	6803      	ldr	r3, [r0, #0]
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cf2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cf8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 8006d02:	4770      	bx	lr

08006d04 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8006d04:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	b15b      	cbz	r3, 8006d22 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0a:	6803      	ldr	r3, [r0, #0]
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006d10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d12:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006d14:	3301      	adds	r3, #1
 8006d16:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d18:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 8006d22:	4770      	bx	lr

08006d24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d24:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d64 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	08db      	lsrs	r3, r3, #3
 8006d30:	4a0d      	ldr	r2, [pc, #52]	@ (8006d68 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d3c:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	b133      	cbz	r3, 8006d56 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d48:	6803      	ldr	r3, [r0, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006d50:	d1f5      	bne.n	8006d3e <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8006d52:	2000      	movs	r0, #0
 8006d54:	e004      	b.n	8006d60 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d56:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006d58:	f043 0320 	orr.w	r3, r3, #32
 8006d5c:	6403      	str	r3, [r0, #64]	@ 0x40
      return HAL_ERROR;
 8006d5e:	2001      	movs	r0, #1
}
 8006d60:	b002      	add	sp, #8
 8006d62:	4770      	bx	lr
 8006d64:	20000138 	.word	0x20000138
 8006d68:	14f8b589 	.word	0x14f8b589

08006d6c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d6c:	6803      	ldr	r3, [r0, #0]
 8006d6e:	695a      	ldr	r2, [r3, #20]
 8006d70:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8006d74:	d101      	bne.n	8006d7a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8006d76:	2000      	movs	r0, #0
}
 8006d78:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d7e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d84:	2220      	movs	r2, #32
 8006d86:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d8e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8006d90:	f042 0204 	orr.w	r2, r2, #4
 8006d94:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8006d96:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	4770      	bx	lr

08006d9e <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006d9e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006da0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006da4:	d004      	beq.n	8006db0 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006da6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006da8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006dac:	d003      	beq.n	8006db6 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dae:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006db0:	2301      	movs	r3, #1
 8006db2:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8006db4:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006db6:	2308      	movs	r3, #8
 8006db8:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 8006dba:	e7f8      	b.n	8006dae <I2C_ConvertOtherXferOptions+0x10>

08006dbc <I2C_WaitOnFlagUntilTimeout>:
{
 8006dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	4617      	mov	r7, r2
 8006dc6:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dc8:	e03b      	b.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dca:	f7ff f9e3 	bl	8006194 <HAL_GetTick>
 8006dce:	9b06      	ldr	r3, [sp, #24]
 8006dd0:	1ac0      	subs	r0, r0, r3
 8006dd2:	4540      	cmp	r0, r8
 8006dd4:	d802      	bhi.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x20>
 8006dd6:	f1b8 0f00 	cmp.w	r8, #0
 8006dda:	d132      	bne.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ddc:	2d01      	cmp	r5, #1
 8006dde:	d018      	beq.n	8006e12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006de0:	6833      	ldr	r3, [r6, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	ea24 0303 	bic.w	r3, r4, r3
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	fab3 f383 	clz	r3, r3
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	429f      	cmp	r7, r3
 8006df2:	d126      	bne.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dfe:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e02:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8006e04:	f042 0220 	orr.w	r2, r2, #32
 8006e08:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8006e0a:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8006e0e:	2001      	movs	r0, #1
 8006e10:	e027      	b.n	8006e62 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e12:	6833      	ldr	r3, [r6, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	ea24 0303 	bic.w	r3, r4, r3
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	fab3 f383 	clz	r3, r3
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	e7e5      	b.n	8006df0 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e24:	6833      	ldr	r3, [r6, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	ea24 0c03 	bic.w	ip, r4, r3
 8006e2c:	fa1f fc8c 	uxth.w	ip, ip
 8006e30:	fabc fc8c 	clz	ip, ip
 8006e34:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8006e38:	4567      	cmp	r7, ip
 8006e3a:	d111      	bne.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8006e3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006e40:	d1c3      	bne.n	8006dca <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e42:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8006e46:	2d01      	cmp	r5, #1
 8006e48:	d0ec      	beq.n	8006e24 <I2C_WaitOnFlagUntilTimeout+0x68>
 8006e4a:	6833      	ldr	r3, [r6, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	ea24 0c03 	bic.w	ip, r4, r3
 8006e52:	fa1f fc8c 	uxth.w	ip, ip
 8006e56:	fabc fc8c 	clz	ip, ip
 8006e5a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8006e5e:	e7eb      	b.n	8006e38 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8006e60:	2000      	movs	r0, #0
}
 8006e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8006e66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	460e      	mov	r6, r1
 8006e6e:	4690      	mov	r8, r2
 8006e70:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e72:	e053      	b.n	8006f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e7a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e82:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e8e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e92:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8006e94:	f042 0204 	orr.w	r2, r2, #4
 8006e98:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8006e9a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	e04a      	b.n	8006f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7ff f977 	bl	8006194 <HAL_GetTick>
 8006ea6:	eba0 0009 	sub.w	r0, r0, r9
 8006eaa:	4540      	cmp	r0, r8
 8006eac:	d802      	bhi.n	8006eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8006eae:	f1b8 0f00 	cmp.w	r8, #0
 8006eb2:	d133      	bne.n	8006f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006eb4:	2f01      	cmp	r7, #1
 8006eb6:	d017      	beq.n	8006ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	ea26 0303 	bic.w	r3, r6, r3
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b00      	subs	r3, #0
 8006ec4:	bf18      	it	ne
 8006ec6:	2301      	movne	r3, #1
 8006ec8:	b343      	cbz	r3, 8006f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed4:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed8:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8006eda:	f042 0220 	orr.w	r2, r2, #32
 8006ede:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8006ee0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	e027      	b.n	8006f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	ea26 0303 	bic.w	r3, r6, r3
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b00      	subs	r3, #0
 8006ef4:	bf18      	it	ne
 8006ef6:	2301      	movne	r3, #1
 8006ef8:	e7e6      	b.n	8006ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006efa:	682b      	ldr	r3, [r5, #0]
 8006efc:	699c      	ldr	r4, [r3, #24]
 8006efe:	ea26 0404 	bic.w	r4, r6, r4
 8006f02:	b2a4      	uxth	r4, r4
 8006f04:	3c00      	subs	r4, #0
 8006f06:	bf18      	it	ne
 8006f08:	2401      	movne	r4, #1
 8006f0a:	b1a4      	cbz	r4, 8006f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8006f14:	d1ae      	bne.n	8006e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8006f16:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006f1a:	d1c2      	bne.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f1c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8006f20:	2f01      	cmp	r7, #1
 8006f22:	d1ea      	bne.n	8006efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	695c      	ldr	r4, [r3, #20]
 8006f28:	ea26 0404 	bic.w	r4, r6, r4
 8006f2c:	b2a4      	uxth	r4, r4
 8006f2e:	3c00      	subs	r4, #0
 8006f30:	bf18      	it	ne
 8006f32:	2401      	movne	r4, #1
 8006f34:	e7e9      	b.n	8006f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8006f36:	2000      	movs	r0, #0
}
 8006f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006f3c <I2C_MasterRequestWrite>:
{
 8006f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	4604      	mov	r4, r0
 8006f42:	460d      	mov	r5, r1
 8006f44:	4616      	mov	r6, r2
 8006f46:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f48:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d00d      	beq.n	8006f6a <I2C_MasterRequestWrite+0x2e>
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d00b      	beq.n	8006f6a <I2C_MasterRequestWrite+0x2e>
 8006f52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f56:	d008      	beq.n	8006f6a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006f58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8006f5a:	2b12      	cmp	r3, #18
 8006f5c:	d10a      	bne.n	8006f74 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f5e:	6802      	ldr	r2, [r0, #0]
 8006f60:	6813      	ldr	r3, [r2, #0]
 8006f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e004      	b.n	8006f74 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	6813      	ldr	r3, [r2, #0]
 8006f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f72:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f74:	9700      	str	r7, [sp, #0]
 8006f76:	4633      	mov	r3, r6
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f7ff ff1c 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 8006f84:	b980      	cbnz	r0, 8006fa8 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f8c:	d116      	bne.n	8006fbc <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8006f94:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f96:	463b      	mov	r3, r7
 8006f98:	4632      	mov	r2, r6
 8006f9a:	4913      	ldr	r1, [pc, #76]	@ (8006fe8 <I2C_MasterRequestWrite+0xac>)
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f7ff ff62 	bl	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fa2:	b9f8      	cbnz	r0, 8006fe4 <I2C_MasterRequestWrite+0xa8>
}
 8006fa4:	b003      	add	sp, #12
 8006fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006fb0:	d002      	beq.n	8006fb8 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fb6:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8006fb8:	2003      	movs	r0, #3
 8006fba:	e7f3      	b.n	8006fa4 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006fbc:	11eb      	asrs	r3, r5, #7
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	f003 0306 	and.w	r3, r3, #6
 8006fc4:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8006fc8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006fca:	463b      	mov	r3, r7
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4907      	ldr	r1, [pc, #28]	@ (8006fec <I2C_MasterRequestWrite+0xb0>)
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7ff ff48 	bl	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fd6:	b918      	cbnz	r0, 8006fe0 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	b2ed      	uxtb	r5, r5
 8006fdc:	611d      	str	r5, [r3, #16]
 8006fde:	e7da      	b.n	8006f96 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e7df      	b.n	8006fa4 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	e7dd      	b.n	8006fa4 <I2C_MasterRequestWrite+0x68>
 8006fe8:	00010002 	.word	0x00010002
 8006fec:	00010008 	.word	0x00010008

08006ff0 <I2C_MasterRequestRead>:
{
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	4616      	mov	r6, r2
 8006ffc:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ffe:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007000:	6801      	ldr	r1, [r0, #0]
 8007002:	680b      	ldr	r3, [r1, #0]
 8007004:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007008:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800700a:	2a08      	cmp	r2, #8
 800700c:	d00d      	beq.n	800702a <I2C_MasterRequestRead+0x3a>
 800700e:	2a01      	cmp	r2, #1
 8007010:	d00b      	beq.n	800702a <I2C_MasterRequestRead+0x3a>
 8007012:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8007016:	d008      	beq.n	800702a <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007018:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800701a:	2b11      	cmp	r3, #17
 800701c:	d10a      	bne.n	8007034 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800701e:	6802      	ldr	r2, [r0, #0]
 8007020:	6813      	ldr	r3, [r2, #0]
 8007022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	e004      	b.n	8007034 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	6813      	ldr	r3, [r2, #0]
 800702e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007032:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007034:	9700      	str	r7, [sp, #0]
 8007036:	4633      	mov	r3, r6
 8007038:	2200      	movs	r2, #0
 800703a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800703e:	4620      	mov	r0, r4
 8007040:	f7ff febc 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 8007044:	b998      	cbnz	r0, 800706e <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800704c:	d119      	bne.n	8007082 <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	f045 0501 	orr.w	r5, r5, #1
 8007054:	b2ed      	uxtb	r5, r5
 8007056:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007058:	463b      	mov	r3, r7
 800705a:	4632      	mov	r2, r6
 800705c:	492a      	ldr	r1, [pc, #168]	@ (8007108 <I2C_MasterRequestRead+0x118>)
 800705e:	4620      	mov	r0, r4
 8007060:	f7ff ff01 	bl	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007064:	2800      	cmp	r0, #0
 8007066:	d14c      	bne.n	8007102 <I2C_MasterRequestRead+0x112>
}
 8007068:	b004      	add	sp, #16
 800706a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007076:	d002      	beq.n	800707e <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800707c:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800707e:	2003      	movs	r0, #3
 8007080:	e7f2      	b.n	8007068 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007082:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8007086:	f008 0806 	and.w	r8, r8, #6
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 8007090:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007092:	463b      	mov	r3, r7
 8007094:	4632      	mov	r2, r6
 8007096:	491d      	ldr	r1, [pc, #116]	@ (800710c <I2C_MasterRequestRead+0x11c>)
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff fee4 	bl	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800709e:	b108      	cbz	r0, 80070a4 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 80070a0:	2001      	movs	r0, #1
 80070a2:	e7e1      	b.n	8007068 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	b2ed      	uxtb	r5, r5
 80070a8:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070aa:	463b      	mov	r3, r7
 80070ac:	4632      	mov	r2, r6
 80070ae:	4916      	ldr	r1, [pc, #88]	@ (8007108 <I2C_MasterRequestRead+0x118>)
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7ff fed8 	bl	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070b6:	b108      	cbz	r0, 80070bc <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 80070b8:	2001      	movs	r0, #1
 80070ba:	e7d5      	b.n	8007068 <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070bc:	2200      	movs	r2, #0
 80070be:	9203      	str	r2, [sp, #12]
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	6959      	ldr	r1, [r3, #20]
 80070c4:	9103      	str	r1, [sp, #12]
 80070c6:	6999      	ldr	r1, [r3, #24]
 80070c8:	9103      	str	r1, [sp, #12]
 80070ca:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070cc:	6819      	ldr	r1, [r3, #0]
 80070ce:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80070d2:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070d4:	9700      	str	r7, [sp, #0]
 80070d6:	4633      	mov	r3, r6
 80070d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070dc:	4620      	mov	r0, r4
 80070de:	f7ff fe6d 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 80070e2:	b920      	cbnz	r0, 80070ee <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 80070ea:	6113      	str	r3, [r2, #16]
 80070ec:	e7b4      	b.n	8007058 <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80070f6:	d002      	beq.n	80070fe <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070fc:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_TIMEOUT;
 80070fe:	2003      	movs	r0, #3
 8007100:	e7b2      	b.n	8007068 <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 8007102:	2001      	movs	r0, #1
 8007104:	e7b0      	b.n	8007068 <I2C_MasterRequestRead+0x78>
 8007106:	bf00      	nop
 8007108:	00010002 	.word	0x00010002
 800710c:	00010008 	.word	0x00010008

08007110 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4604      	mov	r4, r0
 8007114:	460d      	mov	r5, r1
 8007116:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007120:	d121      	bne.n	8007166 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff fe22 	bl	8006d6c <I2C_IsAcknowledgeFailed>
 8007128:	b9f8      	cbnz	r0, 800716a <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800712a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800712e:	d0f3      	beq.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007130:	f7ff f830 	bl	8006194 <HAL_GetTick>
 8007134:	1b80      	subs	r0, r0, r6
 8007136:	42a8      	cmp	r0, r5
 8007138:	d801      	bhi.n	800713e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800713a:	2d00      	cmp	r5, #0
 800713c:	d1ec      	bne.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007146:	d1e7      	bne.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007148:	2300      	movs	r3, #0
 800714a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800714c:	2220      	movs	r2, #32
 800714e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007152:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007156:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007158:	f042 0220 	orr.w	r2, r2, #32
 800715c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800715e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8007162:	2001      	movs	r0, #1
 8007164:	e000      	b.n	8007168 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8007166:	2000      	movs	r0, #0
}
 8007168:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800716a:	2001      	movs	r0, #1
 800716c:	e7fc      	b.n	8007168 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

0800716e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800716e:	b570      	push	{r4, r5, r6, lr}
 8007170:	4604      	mov	r4, r0
 8007172:	460d      	mov	r5, r1
 8007174:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f013 0f04 	tst.w	r3, #4
 800717e:	d121      	bne.n	80071c4 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007180:	4620      	mov	r0, r4
 8007182:	f7ff fdf3 	bl	8006d6c <I2C_IsAcknowledgeFailed>
 8007186:	b9f8      	cbnz	r0, 80071c8 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8007188:	f1b5 3fff 	cmp.w	r5, #4294967295
 800718c:	d0f3      	beq.n	8007176 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7ff f801 	bl	8006194 <HAL_GetTick>
 8007192:	1b80      	subs	r0, r0, r6
 8007194:	42a8      	cmp	r0, r5
 8007196:	d801      	bhi.n	800719c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8007198:	2d00      	cmp	r5, #0
 800719a:	d1ec      	bne.n	8007176 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f013 0f04 	tst.w	r3, #4
 80071a4:	d1e7      	bne.n	8007176 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071a6:	2300      	movs	r3, #0
 80071a8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071aa:	2220      	movs	r2, #32
 80071ac:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80071b6:	f042 0220 	orr.w	r2, r2, #32
 80071ba:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80071bc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80071c0:	2001      	movs	r0, #1
 80071c2:	e000      	b.n	80071c6 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80071c4:	2000      	movs	r0, #0
}
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80071c8:	2001      	movs	r0, #1
 80071ca:	e7fc      	b.n	80071c6 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080071cc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4604      	mov	r4, r0
 80071d0:	460d      	mov	r5, r1
 80071d2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071d4:	e014      	b.n	8007200 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d6:	f06f 0210 	mvn.w	r2, #16
 80071da:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80071dc:	2300      	movs	r3, #0
 80071de:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071e0:	2220      	movs	r2, #32
 80071e2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071ea:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80071ec:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80071ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80071f2:	2001      	movs	r0, #1
 80071f4:	e025      	b.n	8007242 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80071fe:	d010      	beq.n	8007222 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	6958      	ldr	r0, [r3, #20]
 8007204:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8007208:	d11a      	bne.n	8007240 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800720a:	6958      	ldr	r0, [r3, #20]
 800720c:	f010 0f10 	tst.w	r0, #16
 8007210:	d1e1      	bne.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007212:	f7fe ffbf 	bl	8006194 <HAL_GetTick>
 8007216:	1b80      	subs	r0, r0, r6
 8007218:	42a8      	cmp	r0, r5
 800721a:	d8ec      	bhi.n	80071f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 800721c:	2d00      	cmp	r5, #0
 800721e:	d1ef      	bne.n	8007200 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8007220:	e7e9      	b.n	80071f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007222:	2300      	movs	r3, #0
 8007224:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007226:	2220      	movs	r2, #32
 8007228:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800722c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007230:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007232:	f042 0220 	orr.w	r2, r2, #32
 8007236:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8007238:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 800723c:	2001      	movs	r0, #1
 800723e:	e000      	b.n	8007242 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 8007240:	2000      	movs	r0, #0
}
 8007242:	bd70      	pop	{r4, r5, r6, pc}

08007244 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8007244:	2800      	cmp	r0, #0
 8007246:	f000 80cc 	beq.w	80073e2 <HAL_I2C_Init+0x19e>
{
 800724a:	b570      	push	{r4, r5, r6, lr}
 800724c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800724e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007252:	2b00      	cmp	r3, #0
 8007254:	d077      	beq.n	8007346 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007256:	2324      	movs	r3, #36	@ 0x24
 8007258:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800725c:	6822      	ldr	r2, [r4, #0]
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	6813      	ldr	r3, [r2, #0]
 800726a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800726e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007270:	6822      	ldr	r2, [r4, #0]
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007278:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800727a:	f001 fde3 	bl	8008e44 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800727e:	6862      	ldr	r2, [r4, #4]
 8007280:	4b5a      	ldr	r3, [pc, #360]	@ (80073ec <HAL_I2C_Init+0x1a8>)
 8007282:	429a      	cmp	r2, r3
 8007284:	d864      	bhi.n	8007350 <HAL_I2C_Init+0x10c>
 8007286:	4b5a      	ldr	r3, [pc, #360]	@ (80073f0 <HAL_I2C_Init+0x1ac>)
 8007288:	4298      	cmp	r0, r3
 800728a:	bf8c      	ite	hi
 800728c:	2300      	movhi	r3, #0
 800728e:	2301      	movls	r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	f040 80a8 	bne.w	80073e6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8007296:	4957      	ldr	r1, [pc, #348]	@ (80073f4 <HAL_I2C_Init+0x1b0>)
 8007298:	fba1 3100 	umull	r3, r1, r1, r0
 800729c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	686a      	ldr	r2, [r5, #4]
 80072a2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80072a6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80072aa:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072ac:	6821      	ldr	r1, [r4, #0]
 80072ae:	6a0a      	ldr	r2, [r1, #32]
 80072b0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80072b4:	6866      	ldr	r6, [r4, #4]
 80072b6:	4d4d      	ldr	r5, [pc, #308]	@ (80073ec <HAL_I2C_Init+0x1a8>)
 80072b8:	42ae      	cmp	r6, r5
 80072ba:	d84f      	bhi.n	800735c <HAL_I2C_Init+0x118>
 80072bc:	3301      	adds	r3, #1
 80072be:	4313      	orrs	r3, r2
 80072c0:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	69ca      	ldr	r2, [r1, #28]
 80072c6:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80072ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80072ce:	6865      	ldr	r5, [r4, #4]
 80072d0:	4b46      	ldr	r3, [pc, #280]	@ (80073ec <HAL_I2C_Init+0x1a8>)
 80072d2:	429d      	cmp	r5, r3
 80072d4:	d84c      	bhi.n	8007370 <HAL_I2C_Init+0x12c>
 80072d6:	1e43      	subs	r3, r0, #1
 80072d8:	006d      	lsls	r5, r5, #1
 80072da:	fbb3 f3f5 	udiv	r3, r3, r5
 80072de:	3301      	adds	r3, #1
 80072e0:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80072e4:	4203      	tst	r3, r0
 80072e6:	d078      	beq.n	80073da <HAL_I2C_Init+0x196>
 80072e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ec:	431a      	orrs	r2, r3
 80072ee:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80072f0:	6821      	ldr	r1, [r4, #0]
 80072f2:	680b      	ldr	r3, [r1, #0]
 80072f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80072f8:	69e2      	ldr	r2, [r4, #28]
 80072fa:	6a20      	ldr	r0, [r4, #32]
 80072fc:	4302      	orrs	r2, r0
 80072fe:	4313      	orrs	r3, r2
 8007300:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007302:	6821      	ldr	r1, [r4, #0]
 8007304:	688b      	ldr	r3, [r1, #8]
 8007306:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800730a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800730e:	6922      	ldr	r2, [r4, #16]
 8007310:	68e0      	ldr	r0, [r4, #12]
 8007312:	4302      	orrs	r2, r0
 8007314:	4313      	orrs	r3, r2
 8007316:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007318:	6821      	ldr	r1, [r4, #0]
 800731a:	68cb      	ldr	r3, [r1, #12]
 800731c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007320:	6962      	ldr	r2, [r4, #20]
 8007322:	69a0      	ldr	r0, [r4, #24]
 8007324:	4302      	orrs	r2, r0
 8007326:	4313      	orrs	r3, r2
 8007328:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	6813      	ldr	r3, [r2, #0]
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007334:	2000      	movs	r0, #0
 8007336:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007338:	2320      	movs	r3, #32
 800733a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800733e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007340:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8007344:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007346:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800734a:	f001 f919 	bl	8008580 <HAL_I2C_MspInit>
 800734e:	e782      	b.n	8007256 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007350:	4b29      	ldr	r3, [pc, #164]	@ (80073f8 <HAL_I2C_Init+0x1b4>)
 8007352:	4298      	cmp	r0, r3
 8007354:	bf8c      	ite	hi
 8007356:	2300      	movhi	r3, #0
 8007358:	2301      	movls	r3, #1
 800735a:	e799      	b.n	8007290 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800735c:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8007360:	fb05 f303 	mul.w	r3, r5, r3
 8007364:	4d25      	ldr	r5, [pc, #148]	@ (80073fc <HAL_I2C_Init+0x1b8>)
 8007366:	fba5 5303 	umull	r5, r3, r5, r3
 800736a:	099b      	lsrs	r3, r3, #6
 800736c:	3301      	adds	r3, #1
 800736e:	e7a6      	b.n	80072be <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007370:	68a6      	ldr	r6, [r4, #8]
 8007372:	b9be      	cbnz	r6, 80073a4 <HAL_I2C_Init+0x160>
 8007374:	1e43      	subs	r3, r0, #1
 8007376:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800737a:	fbb3 f3fc 	udiv	r3, r3, ip
 800737e:	3301      	adds	r3, #1
 8007380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007384:	fab3 f383 	clz	r3, r3
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	bb43      	cbnz	r3, 80073de <HAL_I2C_Init+0x19a>
 800738c:	b9c6      	cbnz	r6, 80073c0 <HAL_I2C_Init+0x17c>
 800738e:	1e43      	subs	r3, r0, #1
 8007390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007394:	fbb3 f3f5 	udiv	r3, r3, r5
 8007398:	3301      	adds	r3, #1
 800739a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800739e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a2:	e7a3      	b.n	80072ec <HAL_I2C_Init+0xa8>
 80073a4:	1e43      	subs	r3, r0, #1
 80073a6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80073aa:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80073ae:	fbb3 f3fc 	udiv	r3, r3, ip
 80073b2:	3301      	adds	r3, #1
 80073b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b8:	fab3 f383 	clz	r3, r3
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	e7e4      	b.n	800738a <HAL_I2C_Init+0x146>
 80073c0:	1e43      	subs	r3, r0, #1
 80073c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80073c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80073ca:	fbb3 f3f5 	udiv	r3, r3, r5
 80073ce:	3301      	adds	r3, #1
 80073d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073d8:	e788      	b.n	80072ec <HAL_I2C_Init+0xa8>
 80073da:	2304      	movs	r3, #4
 80073dc:	e786      	b.n	80072ec <HAL_I2C_Init+0xa8>
 80073de:	2301      	movs	r3, #1
 80073e0:	e784      	b.n	80072ec <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80073e2:	2001      	movs	r0, #1
}
 80073e4:	4770      	bx	lr
    return HAL_ERROR;
 80073e6:	2001      	movs	r0, #1
 80073e8:	e7ac      	b.n	8007344 <HAL_I2C_Init+0x100>
 80073ea:	bf00      	nop
 80073ec:	000186a0 	.word	0x000186a0
 80073f0:	001e847f 	.word	0x001e847f
 80073f4:	431bde83 	.word	0x431bde83
 80073f8:	003d08ff 	.word	0x003d08ff
 80073fc:	10624dd3 	.word	0x10624dd3

08007400 <HAL_I2C_Master_Transmit>:
{
 8007400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007404:	b085      	sub	sp, #20
 8007406:	4604      	mov	r4, r0
 8007408:	460f      	mov	r7, r1
 800740a:	4691      	mov	r9, r2
 800740c:	4698      	mov	r8, r3
 800740e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8007410:	f7fe fec0 	bl	8006194 <HAL_GetTick>
 8007414:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007416:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800741a:	b2c0      	uxtb	r0, r0
 800741c:	2820      	cmp	r0, #32
 800741e:	d004      	beq.n	800742a <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8007420:	2702      	movs	r7, #2
}
 8007422:	4638      	mov	r0, r7
 8007424:	b005      	add	sp, #20
 8007426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800742a:	9500      	str	r5, [sp, #0]
 800742c:	2319      	movs	r3, #25
 800742e:	2201      	movs	r2, #1
 8007430:	494f      	ldr	r1, [pc, #316]	@ (8007570 <HAL_I2C_Master_Transmit+0x170>)
 8007432:	4620      	mov	r0, r4
 8007434:	f7ff fcc2 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 8007438:	2800      	cmp	r0, #0
 800743a:	f040 8092 	bne.w	8007562 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 800743e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8007442:	2b01      	cmp	r3, #1
 8007444:	f000 808f 	beq.w	8007566 <HAL_I2C_Master_Transmit+0x166>
 8007448:	2301      	movs	r3, #1
 800744a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	f012 0f01 	tst.w	r2, #1
 8007456:	d103      	bne.n	8007460 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f042 0201 	orr.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	6813      	ldr	r3, [r2, #0]
 8007464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007468:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800746a:	2321      	movs	r3, #33	@ 0x21
 800746c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007470:	2310      	movs	r3, #16
 8007472:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007476:	2300      	movs	r3, #0
 8007478:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800747a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800747e:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007482:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007484:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007486:	4b3b      	ldr	r3, [pc, #236]	@ (8007574 <HAL_I2C_Master_Transmit+0x174>)
 8007488:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800748a:	462b      	mov	r3, r5
 800748c:	4632      	mov	r2, r6
 800748e:	4639      	mov	r1, r7
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff fd53 	bl	8006f3c <I2C_MasterRequestWrite>
 8007496:	4607      	mov	r7, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d166      	bne.n	800756a <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800749c:	2300      	movs	r3, #0
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	9203      	str	r2, [sp, #12]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	9303      	str	r3, [sp, #12]
 80074aa:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80074ac:	e011      	b.n	80074d2 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d001      	beq.n	80074b8 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80074b4:	2701      	movs	r7, #1
 80074b6:	e7b4      	b.n	8007422 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	6813      	ldr	r3, [r2, #0]
 80074bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e7f7      	b.n	80074b4 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074c4:	462a      	mov	r2, r5
 80074c6:	4631      	mov	r1, r6
 80074c8:	4620      	mov	r0, r4
 80074ca:	f7ff fe50 	bl	800716e <I2C_WaitOnBTFFlagUntilTimeout>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d12e      	bne.n	8007530 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80074d2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d036      	beq.n	8007546 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074d8:	462a      	mov	r2, r5
 80074da:	4631      	mov	r1, r6
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff fe17 	bl	8007110 <I2C_WaitOnTXEFlagUntilTimeout>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d1e3      	bne.n	80074ae <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80074ee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80074f4:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80074f6:	b289      	uxth	r1, r1
 80074f8:	3901      	subs	r1, #1
 80074fa:	b289      	uxth	r1, r1
 80074fc:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80074fe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007500:	3b01      	subs	r3, #1
 8007502:	b29b      	uxth	r3, r3
 8007504:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	6951      	ldr	r1, [r2, #20]
 800750a:	f011 0f04 	tst.w	r1, #4
 800750e:	d0d9      	beq.n	80074c4 <HAL_I2C_Master_Transmit+0xc4>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d0d7      	beq.n	80074c4 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007514:	7843      	ldrb	r3, [r0, #1]
 8007516:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8007518:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800751a:	3301      	adds	r3, #1
 800751c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800751e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29b      	uxth	r3, r3
 8007526:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8007528:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800752a:	3b01      	subs	r3, #1
 800752c:	8523      	strh	r3, [r4, #40]	@ 0x28
 800752e:	e7c9      	b.n	80074c4 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007532:	2b04      	cmp	r3, #4
 8007534:	d001      	beq.n	800753a <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8007536:	2701      	movs	r7, #1
 8007538:	e773      	b.n	8007422 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	6813      	ldr	r3, [r2, #0]
 800753e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	e7f7      	b.n	8007536 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	6813      	ldr	r3, [r2, #0]
 800754a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800754e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007550:	2320      	movs	r3, #32
 8007552:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007556:	2300      	movs	r3, #0
 8007558:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 800755c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8007560:	e75f      	b.n	8007422 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8007562:	2702      	movs	r7, #2
 8007564:	e75d      	b.n	8007422 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8007566:	2702      	movs	r7, #2
 8007568:	e75b      	b.n	8007422 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 800756a:	2701      	movs	r7, #1
 800756c:	e759      	b.n	8007422 <HAL_I2C_Master_Transmit+0x22>
 800756e:	bf00      	nop
 8007570:	00100002 	.word	0x00100002
 8007574:	ffff0000 	.word	0xffff0000

08007578 <HAL_I2C_Master_Receive>:
{
 8007578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800757c:	b087      	sub	sp, #28
 800757e:	4604      	mov	r4, r0
 8007580:	460f      	mov	r7, r1
 8007582:	4691      	mov	r9, r2
 8007584:	4698      	mov	r8, r3
 8007586:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 8007588:	f7fe fe04 	bl	8006194 <HAL_GetTick>
 800758c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800758e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8007592:	b2c0      	uxtb	r0, r0
 8007594:	2820      	cmp	r0, #32
 8007596:	d004      	beq.n	80075a2 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8007598:	2702      	movs	r7, #2
}
 800759a:	4638      	mov	r0, r7
 800759c:	b007      	add	sp, #28
 800759e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075a2:	9500      	str	r5, [sp, #0]
 80075a4:	2319      	movs	r3, #25
 80075a6:	2201      	movs	r2, #1
 80075a8:	4989      	ldr	r1, [pc, #548]	@ (80077d0 <HAL_I2C_Master_Receive+0x258>)
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7ff fc06 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	f040 814f 	bne.w	8007854 <HAL_I2C_Master_Receive+0x2dc>
    __HAL_LOCK(hi2c);
 80075b6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	f000 814c 	beq.w	8007858 <HAL_I2C_Master_Receive+0x2e0>
 80075c0:	2301      	movs	r3, #1
 80075c2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	f012 0f01 	tst.w	r2, #1
 80075ce:	d103      	bne.n	80075d8 <HAL_I2C_Master_Receive+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	f042 0201 	orr.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	6813      	ldr	r3, [r2, #0]
 80075dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075e0:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80075e2:	2322      	movs	r3, #34	@ 0x22
 80075e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80075e8:	2310      	movs	r3, #16
 80075ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80075f2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80075f6:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075fc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075fe:	4b75      	ldr	r3, [pc, #468]	@ (80077d4 <HAL_I2C_Master_Receive+0x25c>)
 8007600:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007602:	462b      	mov	r3, r5
 8007604:	4632      	mov	r2, r6
 8007606:	4639      	mov	r1, r7
 8007608:	4620      	mov	r0, r4
 800760a:	f7ff fcf1 	bl	8006ff0 <I2C_MasterRequestRead>
 800760e:	4607      	mov	r7, r0
 8007610:	2800      	cmp	r0, #0
 8007612:	f040 8123 	bne.w	800785c <HAL_I2C_Master_Receive+0x2e4>
    if (hi2c->XferSize == 0U)
 8007616:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007618:	b95b      	cbnz	r3, 8007632 <HAL_I2C_Master_Receive+0xba>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800761a:	9302      	str	r3, [sp, #8]
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	9202      	str	r2, [sp, #8]
 8007622:	699a      	ldr	r2, [r3, #24]
 8007624:	9202      	str	r2, [sp, #8]
 8007626:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	e07a      	b.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
    else if (hi2c->XferSize == 1U)
 8007632:	2b01      	cmp	r3, #1
 8007634:	d00f      	beq.n	8007656 <HAL_I2C_Master_Receive+0xde>
    else if (hi2c->XferSize == 2U)
 8007636:	2b02      	cmp	r3, #2
 8007638:	d01f      	beq.n	800767a <HAL_I2C_Master_Receive+0x102>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	6813      	ldr	r3, [r2, #0]
 800763e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007642:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007644:	2300      	movs	r3, #0
 8007646:	9305      	str	r3, [sp, #20]
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	9205      	str	r2, [sp, #20]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	9305      	str	r3, [sp, #20]
 8007652:	9b05      	ldr	r3, [sp, #20]
 8007654:	e068      	b.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	6813      	ldr	r3, [r2, #0]
 800765a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800765e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007660:	2300      	movs	r3, #0
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	9203      	str	r2, [sp, #12]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	9203      	str	r2, [sp, #12]
 800766e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e056      	b.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	6813      	ldr	r3, [r2, #0]
 800767e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007682:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007684:	6822      	ldr	r2, [r4, #0]
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800768c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768e:	2300      	movs	r3, #0
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	9204      	str	r2, [sp, #16]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	e043      	b.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076a0:	462a      	mov	r2, r5
 80076a2:	4631      	mov	r1, r6
 80076a4:	4620      	mov	r0, r4
 80076a6:	f7ff fd91 	bl	80071cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f040 80d8 	bne.w	8007860 <HAL_I2C_Master_Receive+0x2e8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80076b6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80076b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80076ba:	3301      	adds	r3, #1
 80076bc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80076be:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80076c0:	3b01      	subs	r3, #1
 80076c2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80076c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80076ce:	e02b      	b.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076d0:	9500      	str	r5, [sp, #0]
 80076d2:	4633      	mov	r3, r6
 80076d4:	2200      	movs	r2, #0
 80076d6:	4940      	ldr	r1, [pc, #256]	@ (80077d8 <HAL_I2C_Master_Receive+0x260>)
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff fb6f 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f040 80c0 	bne.w	8007864 <HAL_I2C_Master_Receive+0x2ec>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	6813      	ldr	r3, [r2, #0]
 80076e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076ec:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80076f4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80076f6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80076f8:	1c53      	adds	r3, r2, #1
 80076fa:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80076fc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80076fe:	3b01      	subs	r3, #1
 8007700:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8007702:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29b      	uxth	r3, r3
 800770a:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8007712:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007714:	3301      	adds	r3, #1
 8007716:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8007718:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800771a:	3b01      	subs	r3, #1
 800771c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800771e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29b      	uxth	r3, r3
 8007726:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007728:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800772a:	2900      	cmp	r1, #0
 800772c:	f000 8089 	beq.w	8007842 <HAL_I2C_Master_Receive+0x2ca>
      if (hi2c->XferSize <= 3U)
 8007730:	2903      	cmp	r1, #3
 8007732:	d853      	bhi.n	80077dc <HAL_I2C_Master_Receive+0x264>
        if (hi2c->XferSize == 1U)
 8007734:	2901      	cmp	r1, #1
 8007736:	d0b3      	beq.n	80076a0 <HAL_I2C_Master_Receive+0x128>
        else if (hi2c->XferSize == 2U)
 8007738:	2902      	cmp	r1, #2
 800773a:	d0c9      	beq.n	80076d0 <HAL_I2C_Master_Receive+0x158>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800773c:	9500      	str	r5, [sp, #0]
 800773e:	4633      	mov	r3, r6
 8007740:	2200      	movs	r2, #0
 8007742:	4925      	ldr	r1, [pc, #148]	@ (80077d8 <HAL_I2C_Master_Receive+0x260>)
 8007744:	4620      	mov	r0, r4
 8007746:	f7ff fb39 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 800774a:	2800      	cmp	r0, #0
 800774c:	f040 808c 	bne.w	8007868 <HAL_I2C_Master_Receive+0x2f0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	6813      	ldr	r3, [r2, #0]
 8007754:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007758:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007760:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007762:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007764:	3301      	adds	r3, #1
 8007766:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8007768:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800776a:	3b01      	subs	r3, #1
 800776c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800776e:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8007770:	b289      	uxth	r1, r1
 8007772:	3901      	subs	r1, #1
 8007774:	b289      	uxth	r1, r1
 8007776:	8561      	strh	r1, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007778:	9500      	str	r5, [sp, #0]
 800777a:	4633      	mov	r3, r6
 800777c:	2200      	movs	r2, #0
 800777e:	4916      	ldr	r1, [pc, #88]	@ (80077d8 <HAL_I2C_Master_Receive+0x260>)
 8007780:	4620      	mov	r0, r4
 8007782:	f7ff fb1b 	bl	8006dbc <I2C_WaitOnFlagUntilTimeout>
 8007786:	2800      	cmp	r0, #0
 8007788:	d170      	bne.n	800786c <HAL_I2C_Master_Receive+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	6813      	ldr	r3, [r2, #0]
 800778e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007792:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800779a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800779c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800779e:	1c53      	adds	r3, r2, #1
 80077a0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80077a2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80077a4:	3b01      	subs	r3, #1
 80077a6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80077a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80077b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80077ba:	3301      	adds	r3, #1
 80077bc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80077be:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80077c0:	3b01      	subs	r3, #1
 80077c2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80077c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80077ce:	e7ab      	b.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
 80077d0:	00100002 	.word	0x00100002
 80077d4:	ffff0000 	.word	0xffff0000
 80077d8:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077dc:	462a      	mov	r2, r5
 80077de:	4631      	mov	r1, r6
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7ff fcf3 	bl	80071cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d142      	bne.n	8007870 <HAL_I2C_Master_Receive+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80077f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80077f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80077f4:	3301      	adds	r3, #1
 80077f6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80077f8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80077fa:	3a01      	subs	r2, #1
 80077fc:	b292      	uxth	r2, r2
 80077fe:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8007800:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	6959      	ldr	r1, [r3, #20]
 800780e:	f011 0f04 	tst.w	r1, #4
 8007812:	d089      	beq.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
          if (hi2c->XferSize == 3U)
 8007814:	2a03      	cmp	r2, #3
 8007816:	d00f      	beq.n	8007838 <HAL_I2C_Master_Receive+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800781e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8007820:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007822:	3301      	adds	r3, #1
 8007824:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8007826:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007828:	3b01      	subs	r3, #1
 800782a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800782c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29b      	uxth	r3, r3
 8007834:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8007836:	e777      	b.n	8007728 <HAL_I2C_Master_Receive+0x1b0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e7ea      	b.n	8007818 <HAL_I2C_Master_Receive+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 8007842:	2320      	movs	r3, #32
 8007844:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007848:	2300      	movs	r3, #0
 800784a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 800784e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8007852:	e6a2      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8007854:	2702      	movs	r7, #2
 8007856:	e6a0      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8007858:	2702      	movs	r7, #2
 800785a:	e69e      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 800785c:	2701      	movs	r7, #1
 800785e:	e69c      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8007860:	2701      	movs	r7, #1
 8007862:	e69a      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8007864:	2701      	movs	r7, #1
 8007866:	e698      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8007868:	2701      	movs	r7, #1
 800786a:	e696      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 800786c:	2701      	movs	r7, #1
 800786e:	e694      	b.n	800759a <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 8007870:	2701      	movs	r7, #1
 8007872:	e692      	b.n	800759a <HAL_I2C_Master_Receive+0x22>

08007874 <HAL_I2C_MasterTxCpltCallback>:
}
 8007874:	4770      	bx	lr

08007876 <HAL_I2C_MasterRxCpltCallback>:
}
 8007876:	4770      	bx	lr

08007878 <HAL_I2C_SlaveTxCpltCallback>:
}
 8007878:	4770      	bx	lr

0800787a <I2C_SlaveTransmit_TXE>:
{
 800787a:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800787c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007880:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8007882:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	b183      	cbz	r3, 80078aa <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007888:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800788a:	6803      	ldr	r3, [r0, #0]
 800788c:	7809      	ldrb	r1, [r1, #0]
 800788e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8007890:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007892:	3301      	adds	r3, #1
 8007894:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8007896:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29b      	uxth	r3, r3
 800789e:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80078a0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	b90b      	cbnz	r3, 80078aa <I2C_SlaveTransmit_TXE+0x30>
 80078a6:	2a29      	cmp	r2, #41	@ 0x29
 80078a8:	d000      	beq.n	80078ac <I2C_SlaveTransmit_TXE+0x32>
}
 80078aa:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078ac:	6802      	ldr	r2, [r0, #0]
 80078ae:	6853      	ldr	r3, [r2, #4]
 80078b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078b4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078b6:	2321      	movs	r3, #33	@ 0x21
 80078b8:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078ba:	2328      	movs	r3, #40	@ 0x28
 80078bc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078c0:	f7ff ffda 	bl	8007878 <HAL_I2C_SlaveTxCpltCallback>
}
 80078c4:	e7f1      	b.n	80078aa <I2C_SlaveTransmit_TXE+0x30>

080078c6 <HAL_I2C_SlaveRxCpltCallback>:
}
 80078c6:	4770      	bx	lr

080078c8 <I2C_SlaveReceive_RXNE>:
{
 80078c8:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80078ce:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80078d0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	b183      	cbz	r3, 80078f8 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d6:	6803      	ldr	r3, [r0, #0]
 80078d8:	6919      	ldr	r1, [r3, #16]
 80078da:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80078dc:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80078de:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80078e0:	3301      	adds	r3, #1
 80078e2:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 80078e4:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078ee:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	b90b      	cbnz	r3, 80078f8 <I2C_SlaveReceive_RXNE+0x30>
 80078f4:	2a2a      	cmp	r2, #42	@ 0x2a
 80078f6:	d000      	beq.n	80078fa <I2C_SlaveReceive_RXNE+0x32>
}
 80078f8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078fa:	6802      	ldr	r2, [r0, #0]
 80078fc:	6853      	ldr	r3, [r2, #4]
 80078fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007902:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007904:	2322      	movs	r3, #34	@ 0x22
 8007906:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007908:	2328      	movs	r3, #40	@ 0x28
 800790a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800790e:	f7ff ffda 	bl	80078c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007912:	e7f1      	b.n	80078f8 <I2C_SlaveReceive_RXNE+0x30>

08007914 <HAL_I2C_AddrCallback>:
}
 8007914:	4770      	bx	lr

08007916 <I2C_Slave_ADDR>:
{
 8007916:	b500      	push	{lr}
 8007918:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800791a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800791e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007922:	2b28      	cmp	r3, #40	@ 0x28
 8007924:	d00c      	beq.n	8007940 <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007926:	2300      	movs	r3, #0
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	6802      	ldr	r2, [r0, #0]
 800792c:	6951      	ldr	r1, [r2, #20]
 800792e:	9101      	str	r1, [sp, #4]
 8007930:	6992      	ldr	r2, [r2, #24]
 8007932:	9201      	str	r2, [sp, #4]
 8007934:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8007936:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
}
 800793a:	b003      	add	sp, #12
 800793c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007940:	6802      	ldr	r2, [r0, #0]
 8007942:	6853      	ldr	r3, [r2, #4]
 8007944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007948:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800794a:	f011 0f04 	tst.w	r1, #4
 800794e:	d00b      	beq.n	8007968 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007950:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007952:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8007956:	d109      	bne.n	800796c <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007958:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800795a:	2100      	movs	r1, #0
 800795c:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007960:	4619      	mov	r1, r3
 8007962:	f7ff ffd7 	bl	8007914 <HAL_I2C_AddrCallback>
 8007966:	e7e8      	b.n	800793a <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007968:	2301      	movs	r3, #1
 800796a:	e7f2      	b.n	8007952 <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800796c:	8b02      	ldrh	r2, [r0, #24]
 800796e:	e7f4      	b.n	800795a <I2C_Slave_ADDR+0x44>

08007970 <HAL_I2C_ListenCpltCallback>:
}
 8007970:	4770      	bx	lr
	...

08007974 <I2C_Slave_AF>:
{
 8007974:	b510      	push	{r4, lr}
 8007976:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007978:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800797c:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800797e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007980:	2a08      	cmp	r2, #8
 8007982:	d001      	beq.n	8007988 <I2C_Slave_AF+0x14>
 8007984:	2a20      	cmp	r2, #32
 8007986:	d101      	bne.n	800798c <I2C_Slave_AF+0x18>
 8007988:	2b28      	cmp	r3, #40	@ 0x28
 800798a:	d006      	beq.n	800799a <I2C_Slave_AF+0x26>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800798c:	2b21      	cmp	r3, #33	@ 0x21
 800798e:	d01f      	beq.n	80079d0 <I2C_Slave_AF+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007996:	615a      	str	r2, [r3, #20]
}
 8007998:	bd10      	pop	{r4, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800799a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a10 <I2C_Slave_AF+0x9c>)
 800799c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	6853      	ldr	r3, [r2, #4]
 80079a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80079a6:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079ae:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b0:	6822      	ldr	r2, [r4, #0]
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079b8:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079be:	2220      	movs	r2, #32
 80079c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079c4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7ff ffd1 	bl	8007970 <HAL_I2C_ListenCpltCallback>
 80079ce:	e7e3      	b.n	8007998 <I2C_Slave_AF+0x24>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a10 <I2C_Slave_AF+0x9c>)
 80079d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079d4:	2321      	movs	r3, #33	@ 0x21
 80079d6:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079d8:	2320      	movs	r3, #32
 80079da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079de:	2300      	movs	r3, #0
 80079e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079e4:	6822      	ldr	r2, [r4, #0]
 80079e6:	6853      	ldr	r3, [r2, #4]
 80079e8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80079ec:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f6:	6822      	ldr	r2, [r4, #0]
 80079f8:	6813      	ldr	r3, [r2, #0]
 80079fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079fe:	6013      	str	r3, [r2, #0]
    I2C_Flush_DR(hi2c);
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7fe ffe5 	bl	80069d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a06:	4620      	mov	r0, r4
 8007a08:	f7ff ff36 	bl	8007878 <HAL_I2C_SlaveTxCpltCallback>
 8007a0c:	e7c4      	b.n	8007998 <I2C_Slave_AF+0x24>
 8007a0e:	bf00      	nop
 8007a10:	ffff0000 	.word	0xffff0000

08007a14 <HAL_I2C_MemTxCpltCallback>:
}
 8007a14:	4770      	bx	lr

08007a16 <I2C_MasterTransmit_BTF>:
{
 8007a16:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a18:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a1a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b21      	cmp	r3, #33	@ 0x21
 8007a22:	d000      	beq.n	8007a26 <I2C_MasterTransmit_BTF+0x10>
}
 8007a24:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8007a26:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	b163      	cbz	r3, 8007a46 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a2c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8007a2e:	6803      	ldr	r3, [r0, #0]
 8007a30:	7812      	ldrb	r2, [r2, #0]
 8007a32:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007a34:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007a36:	3301      	adds	r3, #1
 8007a38:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8007a3a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8007a44:	e7ee      	b.n	8007a24 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a46:	2a08      	cmp	r2, #8
 8007a48:	d004      	beq.n	8007a54 <I2C_MasterTransmit_BTF+0x3e>
 8007a4a:	2a20      	cmp	r2, #32
 8007a4c:	d002      	beq.n	8007a54 <I2C_MasterTransmit_BTF+0x3e>
 8007a4e:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8007a52:	d119      	bne.n	8007a88 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a54:	6802      	ldr	r2, [r0, #0]
 8007a56:	6853      	ldr	r3, [r2, #4]
 8007a58:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007a5c:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a5e:	6802      	ldr	r2, [r0, #0]
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a66:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007a6c:	2320      	movs	r3, #32
 8007a6e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a72:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b40      	cmp	r3, #64	@ 0x40
 8007a7a:	d015      	beq.n	8007aa8 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a82:	f7ff fef7 	bl	8007874 <HAL_I2C_MasterTxCpltCallback>
}
 8007a86:	e7cd      	b.n	8007a24 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a88:	6802      	ldr	r2, [r0, #0]
 8007a8a:	6853      	ldr	r3, [r2, #4]
 8007a8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007a90:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a92:	2311      	movs	r3, #17
 8007a94:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007a9c:	2320      	movs	r3, #32
 8007a9e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007aa2:	f7ff fee7 	bl	8007874 <HAL_I2C_MasterTxCpltCallback>
 8007aa6:	e7bd      	b.n	8007a24 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007aae:	f7ff ffb1 	bl	8007a14 <HAL_I2C_MemTxCpltCallback>
 8007ab2:	e7b7      	b.n	8007a24 <I2C_MasterTransmit_BTF+0xe>

08007ab4 <I2C_MemoryTransmit_TXE_BTF>:
{
 8007ab4:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ab6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
  if (hi2c->EventCount == 0U)
 8007aba:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007abc:	b99a      	cbnz	r2, 8007ae6 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007abe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d008      	beq.n	8007ad6 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007ac4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8007ac6:	6802      	ldr	r2, [r0, #0]
 8007ac8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007acc:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8007ace:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8007ad4:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007ad6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8007ad8:	6802      	ldr	r2, [r0, #0]
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8007ade:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007ae0:	3302      	adds	r3, #2
 8007ae2:	6503      	str	r3, [r0, #80]	@ 0x50
 8007ae4:	e7f6      	b.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8007ae6:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8007ae8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007aea:	2a01      	cmp	r2, #1
 8007aec:	d023      	beq.n	8007b36 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8007aee:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007af0:	2a02      	cmp	r2, #2
 8007af2:	d13e      	bne.n	8007b72 <I2C_MemoryTransmit_TXE_BTF+0xbe>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007af4:	2b22      	cmp	r3, #34	@ 0x22
 8007af6:	d026      	beq.n	8007b46 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007af8:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8007afa:	b292      	uxth	r2, r2
 8007afc:	b10a      	cbz	r2, 8007b02 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8007afe:	2b21      	cmp	r3, #33	@ 0x21
 8007b00:	d02a      	beq.n	8007b58 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b02:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8007b04:	b292      	uxth	r2, r2
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	d1e4      	bne.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8007b0a:	2b21      	cmp	r3, #33	@ 0x21
 8007b0c:	d1e2      	bne.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b0e:	6802      	ldr	r2, [r0, #0]
 8007b10:	6853      	ldr	r3, [r2, #4]
 8007b12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007b16:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b18:	6802      	ldr	r2, [r0, #0]
 8007b1a:	6813      	ldr	r3, [r2, #0]
 8007b1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b20:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b26:	2220      	movs	r2, #32
 8007b28:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007b30:	f7ff ff70 	bl	8007a14 <HAL_I2C_MemTxCpltCallback>
 8007b34:	e7ce      	b.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b36:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8007b38:	6802      	ldr	r2, [r0, #0]
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8007b3e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007b40:	3301      	adds	r3, #1
 8007b42:	6503      	str	r3, [r0, #80]	@ 0x50
 8007b44:	e7c6      	b.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007b46:	6802      	ldr	r2, [r0, #0]
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b4e:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8007b50:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007b52:	3301      	adds	r3, #1
 8007b54:	6503      	str	r3, [r0, #80]	@ 0x50
 8007b56:	e7bd      	b.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b58:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8007b5a:	6803      	ldr	r3, [r0, #0]
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007b60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007b62:	3301      	adds	r3, #1
 8007b64:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8007b66:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8007b70:	e7b0      	b.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>
    I2C_Flush_DR(hi2c);
 8007b72:	f7fe ff2d 	bl	80069d0 <I2C_Flush_DR>
}
 8007b76:	e7ad      	b.n	8007ad4 <I2C_MemoryTransmit_TXE_BTF+0x20>

08007b78 <I2C_MasterTransmit_TXE>:
{
 8007b78:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b7a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007b7e:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b80:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 8007b84:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b86:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b88:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8007b8a:	2900      	cmp	r1, #0
 8007b8c:	d13b      	bne.n	8007c06 <I2C_MasterTransmit_TXE+0x8e>
 8007b8e:	2b21      	cmp	r3, #33	@ 0x21
 8007b90:	d002      	beq.n	8007b98 <I2C_MasterTransmit_TXE+0x20>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007b92:	2a40      	cmp	r2, #64	@ 0x40
 8007b94:	d042      	beq.n	8007c1c <I2C_MasterTransmit_TXE+0xa4>
}
 8007b96:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b98:	2c08      	cmp	r4, #8
 8007b9a:	d004      	beq.n	8007ba6 <I2C_MasterTransmit_TXE+0x2e>
 8007b9c:	2c20      	cmp	r4, #32
 8007b9e:	d002      	beq.n	8007ba6 <I2C_MasterTransmit_TXE+0x2e>
 8007ba0:	f514 3f80 	cmn.w	r4, #65536	@ 0x10000
 8007ba4:	d119      	bne.n	8007bda <I2C_MasterTransmit_TXE+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ba6:	6802      	ldr	r2, [r0, #0]
 8007ba8:	6853      	ldr	r3, [r2, #4]
 8007baa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007bae:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb0:	6802      	ldr	r2, [r0, #0]
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bb8:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bbe:	2320      	movs	r3, #32
 8007bc0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bc4:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b40      	cmp	r3, #64	@ 0x40
 8007bcc:	d015      	beq.n	8007bfa <I2C_MasterTransmit_TXE+0x82>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bd4:	f7ff fe4e 	bl	8007874 <HAL_I2C_MasterTxCpltCallback>
 8007bd8:	e7dd      	b.n	8007b96 <I2C_MasterTransmit_TXE+0x1e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bda:	6802      	ldr	r2, [r0, #0]
 8007bdc:	6853      	ldr	r3, [r2, #4]
 8007bde:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007be2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007be4:	2311      	movs	r3, #17
 8007be6:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007bee:	2320      	movs	r3, #32
 8007bf0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bf4:	f7ff fe3e 	bl	8007874 <HAL_I2C_MasterTxCpltCallback>
 8007bf8:	e7cd      	b.n	8007b96 <I2C_MasterTransmit_TXE+0x1e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007c00:	f7ff ff08 	bl	8007a14 <HAL_I2C_MemTxCpltCallback>
 8007c04:	e7c7      	b.n	8007b96 <I2C_MasterTransmit_TXE+0x1e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007c06:	2b21      	cmp	r3, #33	@ 0x21
 8007c08:	d1c3      	bne.n	8007b92 <I2C_MasterTransmit_TXE+0x1a>
    if (hi2c->XferCount == 0U)
 8007c0a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	b943      	cbnz	r3, 8007c22 <I2C_MasterTransmit_TXE+0xaa>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c10:	6802      	ldr	r2, [r0, #0]
 8007c12:	6853      	ldr	r3, [r2, #4]
 8007c14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c18:	6053      	str	r3, [r2, #4]
 8007c1a:	e7bc      	b.n	8007b96 <I2C_MasterTransmit_TXE+0x1e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007c1c:	2b22      	cmp	r3, #34	@ 0x22
 8007c1e:	d1ba      	bne.n	8007b96 <I2C_MasterTransmit_TXE+0x1e>
 8007c20:	e7f3      	b.n	8007c0a <I2C_MasterTransmit_TXE+0x92>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c22:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b40      	cmp	r3, #64	@ 0x40
 8007c2a:	d00c      	beq.n	8007c46 <I2C_MasterTransmit_TXE+0xce>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c2c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8007c2e:	6803      	ldr	r3, [r0, #0]
 8007c30:	7812      	ldrb	r2, [r2, #0]
 8007c32:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007c34:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c36:	3301      	adds	r3, #1
 8007c38:	6243      	str	r3, [r0, #36]	@ 0x24
        hi2c->XferCount--;
 8007c3a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 8007c44:	e7a7      	b.n	8007b96 <I2C_MasterTransmit_TXE+0x1e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c46:	f7ff ff35 	bl	8007ab4 <I2C_MemoryTransmit_TXE_BTF>
 8007c4a:	e7a4      	b.n	8007b96 <I2C_MasterTransmit_TXE+0x1e>

08007c4c <HAL_I2C_MemRxCpltCallback>:
}
 8007c4c:	4770      	bx	lr

08007c4e <I2C_MasterReceive_BTF>:
{
 8007c4e:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c50:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8007c52:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d014      	beq.n	8007c84 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8007c5a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d022      	beq.n	8007ca8 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8007c62:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d039      	beq.n	8007cde <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c6a:	6803      	ldr	r3, [r0, #0]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c72:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c74:	3301      	adds	r3, #1
 8007c76:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8007c78:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 8007c82:	e010      	b.n	8007ca6 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c84:	6802      	ldr	r2, [r0, #0]
 8007c86:	6853      	ldr	r3, [r2, #4]
 8007c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c8c:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c8e:	6803      	ldr	r3, [r0, #0]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c96:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007c98:	3301      	adds	r3, #1
 8007c9a:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8007c9c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 8007ca6:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ca8:	6801      	ldr	r1, [r0, #0]
 8007caa:	684b      	ldr	r3, [r1, #4]
 8007cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cb0:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007cb2:	2a04      	cmp	r2, #4
 8007cb4:	d006      	beq.n	8007cc4 <I2C_MasterReceive_BTF+0x76>
 8007cb6:	2a02      	cmp	r2, #2
 8007cb8:	d004      	beq.n	8007cc4 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cba:	6802      	ldr	r2, [r0, #0]
 8007cbc:	6813      	ldr	r3, [r2, #0]
 8007cbe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cc2:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc4:	6803      	ldr	r3, [r0, #0]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007cca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ccc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007cce:	3301      	adds	r3, #1
 8007cd0:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8007cd2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8007cdc:	e7e3      	b.n	8007ca6 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007cde:	1e53      	subs	r3, r2, #1
 8007ce0:	2b0f      	cmp	r3, #15
 8007ce2:	d842      	bhi.n	8007d6a <I2C_MasterReceive_BTF+0x11c>
 8007ce4:	e8df f003 	tbb	[pc, r3]
 8007ce8:	3b413b08 	.word	0x3b413b08
 8007cec:	41414141 	.word	0x41414141
 8007cf0:	41414141 	.word	0x41414141
 8007cf4:	08414141 	.word	0x08414141
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf8:	6801      	ldr	r1, [r0, #0]
 8007cfa:	680b      	ldr	r3, [r1, #0]
 8007cfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d00:	600b      	str	r3, [r1, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d02:	6803      	ldr	r3, [r0, #0]
 8007d04:	6919      	ldr	r1, [r3, #16]
 8007d06:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007d08:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8007d0a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8007d0c:	1c4b      	adds	r3, r1, #1
 8007d0e:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8007d10:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	8543      	strh	r3, [r0, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d1a:	6803      	ldr	r3, [r0, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 8007d20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007d22:	3301      	adds	r3, #1
 8007d24:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8007d26:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	8543      	strh	r3, [r0, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007d30:	6801      	ldr	r1, [r0, #0]
 8007d32:	684b      	ldr	r3, [r1, #4]
 8007d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d38:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d3a:	2320      	movs	r3, #32
 8007d3c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d40:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b40      	cmp	r3, #64	@ 0x40
 8007d48:	d015      	beq.n	8007d76 <I2C_MasterReceive_BTF+0x128>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007d50:	2a08      	cmp	r2, #8
 8007d52:	d017      	beq.n	8007d84 <I2C_MasterReceive_BTF+0x136>
 8007d54:	2a20      	cmp	r2, #32
 8007d56:	d015      	beq.n	8007d84 <I2C_MasterReceive_BTF+0x136>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007d58:	2312      	movs	r3, #18
 8007d5a:	6303      	str	r3, [r0, #48]	@ 0x30
 8007d5c:	e014      	b.n	8007d88 <I2C_MasterReceive_BTF+0x13a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5e:	6801      	ldr	r1, [r0, #0]
 8007d60:	680b      	ldr	r3, [r1, #0]
 8007d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d66:	600b      	str	r3, [r1, #0]
 8007d68:	e7cb      	b.n	8007d02 <I2C_MasterReceive_BTF+0xb4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d6a:	6801      	ldr	r1, [r0, #0]
 8007d6c:	680b      	ldr	r3, [r1, #0]
 8007d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d72:	600b      	str	r3, [r1, #0]
 8007d74:	e7c5      	b.n	8007d02 <I2C_MasterReceive_BTF+0xb4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d7c:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007d7e:	f7ff ff65 	bl	8007c4c <HAL_I2C_MemRxCpltCallback>
 8007d82:	e790      	b.n	8007ca6 <I2C_MasterReceive_BTF+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d84:	2300      	movs	r3, #0
 8007d86:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d88:	f7ff fd75 	bl	8007876 <HAL_I2C_MasterRxCpltCallback>
 8007d8c:	e78b      	b.n	8007ca6 <I2C_MasterReceive_BTF+0x58>

08007d8e <HAL_I2C_ErrorCallback>:
}
 8007d8e:	4770      	bx	lr

08007d90 <I2C_MasterReceive_RXNE>:
{
 8007d90:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d92:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b22      	cmp	r3, #34	@ 0x22
 8007d9a:	d000      	beq.n	8007d9e <I2C_MasterReceive_RXNE+0xe>
}
 8007d9c:	bd38      	pop	{r3, r4, r5, pc}
 8007d9e:	4604      	mov	r4, r0
    CurrentXferOptions = hi2c->XferOptions;
 8007da0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8007da2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007da4:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d915      	bls.n	8007dd6 <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007daa:	6803      	ldr	r3, [r0, #0]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007db0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007db2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007db4:	3301      	adds	r3, #1
 8007db6:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8007db8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	8543      	strh	r3, [r0, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8007dc2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d1e8      	bne.n	8007d9c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dca:	6802      	ldr	r2, [r0, #0]
 8007dcc:	6853      	ldr	r3, [r2, #4]
 8007dce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dd2:	6053      	str	r3, [r2, #4]
 8007dd4:	e7e2      	b.n	8007d9c <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007dd6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8007dd8:	2a02      	cmp	r2, #2
 8007dda:	d001      	beq.n	8007de0 <I2C_MasterReceive_RXNE+0x50>
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d905      	bls.n	8007dec <I2C_MasterReceive_RXNE+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	6853      	ldr	r3, [r2, #4]
 8007de4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007de8:	6053      	str	r3, [r2, #4]
}
 8007dea:	e7d7      	b.n	8007d9c <I2C_MasterReceive_RXNE+0xc>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007dec:	f7fe ff9a 	bl	8006d24 <I2C_WaitOnSTOPRequestThroughIT>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d135      	bne.n	8007e60 <I2C_MasterReceive_RXNE+0xd0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007df4:	6822      	ldr	r2, [r4, #0]
 8007df6:	6813      	ldr	r3, [r2, #0]
 8007df8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dfc:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	6853      	ldr	r3, [r2, #4]
 8007e02:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007e06:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e0e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e12:	3301      	adds	r3, #1
 8007e14:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8007e16:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e20:	2320      	movs	r3, #32
 8007e22:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e26:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b40      	cmp	r3, #64	@ 0x40
 8007e2e:	d009      	beq.n	8007e44 <I2C_MasterReceive_RXNE+0xb4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007e36:	2d08      	cmp	r5, #8
 8007e38:	d00c      	beq.n	8007e54 <I2C_MasterReceive_RXNE+0xc4>
 8007e3a:	2d20      	cmp	r5, #32
 8007e3c:	d00a      	beq.n	8007e54 <I2C_MasterReceive_RXNE+0xc4>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e3e:	2312      	movs	r3, #18
 8007e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e42:	e009      	b.n	8007e58 <I2C_MasterReceive_RXNE+0xc8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007e4a:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f7ff fefd 	bl	8007c4c <HAL_I2C_MemRxCpltCallback>
 8007e52:	e7a3      	b.n	8007d9c <I2C_MasterReceive_RXNE+0xc>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7ff fd0c 	bl	8007876 <HAL_I2C_MasterRxCpltCallback>
 8007e5e:	e79d      	b.n	8007d9c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e60:	6822      	ldr	r2, [r4, #0]
 8007e62:	6853      	ldr	r3, [r2, #4]
 8007e64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007e68:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e74:	3301      	adds	r3, #1
 8007e76:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8007e78:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e82:	2320      	movs	r3, #32
 8007e84:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f7ff ff7d 	bl	8007d8e <HAL_I2C_ErrorCallback>
 8007e94:	e782      	b.n	8007d9c <I2C_MasterReceive_RXNE+0xc>

08007e96 <HAL_I2C_AbortCpltCallback>:
}
 8007e96:	4770      	bx	lr

08007e98 <I2C_DMAAbort>:
{
 8007e98:	b500      	push	{lr}
 8007e9a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ea0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ea2:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8007ea6:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ea8:	4b32      	ldr	r3, [pc, #200]	@ (8007f74 <I2C_DMAAbort+0xdc>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	08db      	lsrs	r3, r3, #3
 8007eae:	4932      	ldr	r1, [pc, #200]	@ (8007f78 <I2C_DMAAbort+0xe0>)
 8007eb0:	fba1 1303 	umull	r1, r3, r1, r3
 8007eb4:	0a1b      	lsrs	r3, r3, #8
 8007eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007eba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ebe:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	b143      	cbz	r3, 8007ed6 <I2C_DMAAbort+0x3e>
    count--;
 8007ec4:	9b01      	ldr	r3, [sp, #4]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007eca:	6803      	ldr	r3, [r0, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8007ed2:	d1f5      	bne.n	8007ec0 <I2C_DMAAbort+0x28>
 8007ed4:	e003      	b.n	8007ede <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ed6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007ed8:	f043 0320 	orr.w	r3, r3, #32
 8007edc:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 8007ede:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007ee0:	b10b      	cbz	r3, 8007ee6 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  if (hi2c->hdmarx != NULL)
 8007ee6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007ee8:	b10b      	cbz	r3, 8007eee <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007eea:	2100      	movs	r1, #0
 8007eec:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eee:	6801      	ldr	r1, [r0, #0]
 8007ef0:	680b      	ldr	r3, [r1, #0]
 8007ef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ef6:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8007efc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007efe:	b10b      	cbz	r3, 8007f04 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f00:	2100      	movs	r1, #0
 8007f02:	6519      	str	r1, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8007f04:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007f06:	b10b      	cbz	r3, 8007f0c <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f08:	2100      	movs	r1, #0
 8007f0a:	6519      	str	r1, [r3, #80]	@ 0x50
  __HAL_I2C_DISABLE(hi2c);
 8007f0c:	6801      	ldr	r1, [r0, #0]
 8007f0e:	680b      	ldr	r3, [r1, #0]
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f16:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b60      	cmp	r3, #96	@ 0x60
 8007f1e:	d00e      	beq.n	8007f3e <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f20:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8007f24:	2a28      	cmp	r2, #40	@ 0x28
 8007f26:	d014      	beq.n	8007f52 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007f34:	f7ff ff2b 	bl	8007d8e <HAL_I2C_ErrorCallback>
}
 8007f38:	b003      	add	sp, #12
 8007f3a:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f3e:	2320      	movs	r3, #32
 8007f40:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f4a:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f4c:	f7ff ffa3 	bl	8007e96 <HAL_I2C_AbortCpltCallback>
 8007f50:	e7f2      	b.n	8007f38 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8007f52:	6802      	ldr	r2, [r0, #0]
 8007f54:	6813      	ldr	r3, [r2, #0]
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f5c:	6802      	ldr	r2, [r0, #0]
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f64:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f6a:	2328      	movs	r3, #40	@ 0x28
 8007f6c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
 8007f70:	e7e0      	b.n	8007f34 <I2C_DMAAbort+0x9c>
 8007f72:	bf00      	nop
 8007f74:	20000138 	.word	0x20000138
 8007f78:	14f8b589 	.word	0x14f8b589

08007f7c <I2C_ITError>:
{
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f80:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007f84:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007f86:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 8007f8a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f8c:	2a10      	cmp	r2, #16
 8007f8e:	d036      	beq.n	8007ffe <I2C_ITError+0x82>
 8007f90:	2a40      	cmp	r2, #64	@ 0x40
 8007f92:	d034      	beq.n	8007ffe <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f94:	f003 0228 	and.w	r2, r3, #40	@ 0x28
 8007f98:	2a28      	cmp	r2, #40	@ 0x28
 8007f9a:	d038      	beq.n	800800e <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f9c:	6822      	ldr	r2, [r4, #0]
 8007f9e:	6852      	ldr	r2, [r2, #4]
 8007fa0:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007fa4:	d107      	bne.n	8007fb6 <I2C_ITError+0x3a>
 8007fa6:	2b60      	cmp	r3, #96	@ 0x60
 8007fa8:	d005      	beq.n	8007fb6 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8007faa:	2320      	movs	r3, #32
 8007fac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6323      	str	r3, [r4, #48]	@ 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007fc2:	d048      	beq.n	8008056 <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fca:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007fcc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007fce:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d020      	beq.n	800801a <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007fd8:	4b44      	ldr	r3, [pc, #272]	@ (80080ec <I2C_ITError+0x170>)
 8007fda:	6513      	str	r3, [r2, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007fdc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007fde:	f7fe faee 	bl	80065be <HAL_DMA_Abort_IT>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d049      	beq.n	800807a <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	6813      	ldr	r3, [r2, #0]
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8007ff0:	2320      	movs	r3, #32
 8007ff2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ff6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007ff8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007ffa:	4798      	blx	r3
 8007ffc:	e03d      	b.n	800807a <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ffe:	2b22      	cmp	r3, #34	@ 0x22
 8008000:	d1c8      	bne.n	8007f94 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008002:	6821      	ldr	r1, [r4, #0]
 8008004:	680a      	ldr	r2, [r1, #0]
 8008006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800800a:	600a      	str	r2, [r1, #0]
 800800c:	e7c2      	b.n	8007f94 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 800800e:	2300      	movs	r3, #0
 8008010:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008012:	2328      	movs	r3, #40	@ 0x28
 8008014:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 8008018:	e7cf      	b.n	8007fba <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800801a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800801c:	4a33      	ldr	r2, [pc, #204]	@ (80080ec <I2C_ITError+0x170>)
 800801e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008020:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8008022:	f7fe facc 	bl	80065be <HAL_DMA_Abort_IT>
 8008026:	b340      	cbz	r0, 800807a <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008030:	d005      	beq.n	800803e <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008032:	691a      	ldr	r2, [r3, #16]
 8008034:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008036:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008038:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800803a:	3301      	adds	r3, #1
 800803c:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 800803e:	6822      	ldr	r2, [r4, #0]
 8008040:	6813      	ldr	r3, [r2, #0]
 8008042:	f023 0301 	bic.w	r3, r3, #1
 8008046:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8008048:	2320      	movs	r3, #32
 800804a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800804e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8008050:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008052:	4798      	blx	r3
 8008054:	e011      	b.n	800807a <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008056:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	2a60      	cmp	r2, #96	@ 0x60
 800805e:	d01f      	beq.n	80080a0 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008060:	695a      	ldr	r2, [r3, #20]
 8008062:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008066:	d005      	beq.n	8008074 <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800806c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800806e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008070:	3301      	adds	r3, #1
 8008072:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fe8a 	bl	8007d8e <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800807a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800807c:	f013 0f0f 	tst.w	r3, #15
 8008080:	d004      	beq.n	800808c <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	6853      	ldr	r3, [r2, #4]
 8008086:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800808a:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800808c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8008090:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008092:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008094:	f012 0f04 	tst.w	r2, #4
 8008098:	d001      	beq.n	800809e <I2C_ITError+0x122>
 800809a:	2b28      	cmp	r3, #40	@ 0x28
 800809c:	d018      	beq.n	80080d0 <I2C_ITError+0x154>
}
 800809e:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80080a0:	2220      	movs	r2, #32
 80080a2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080a6:	2200      	movs	r2, #0
 80080a8:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080aa:	695a      	ldr	r2, [r3, #20]
 80080ac:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80080b0:	d005      	beq.n	80080be <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080b6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80080b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080ba:	3301      	adds	r3, #1
 80080bc:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	6813      	ldr	r3, [r2, #0]
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7ff fee4 	bl	8007e96 <HAL_I2C_AbortCpltCallback>
 80080ce:	e7d4      	b.n	800807a <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080d0:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <I2C_ITError+0x174>)
 80080d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080d8:	2220      	movs	r2, #32
 80080da:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff fc44 	bl	8007970 <HAL_I2C_ListenCpltCallback>
}
 80080e8:	e7d9      	b.n	800809e <I2C_ITError+0x122>
 80080ea:	bf00      	nop
 80080ec:	08007e99 	.word	0x08007e99
 80080f0:	ffff0000 	.word	0xffff0000

080080f4 <I2C_Slave_STOPF>:
{
 80080f4:	b530      	push	{r4, r5, lr}
 80080f6:	b083      	sub	sp, #12
 80080f8:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80080fa:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 80080fe:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008100:	6802      	ldr	r2, [r0, #0]
 8008102:	6853      	ldr	r3, [r2, #4]
 8008104:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008108:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800810a:	2300      	movs	r3, #0
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	6803      	ldr	r3, [r0, #0]
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	9201      	str	r2, [sp, #4]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800811e:	6802      	ldr	r2, [r0, #0]
 8008120:	6813      	ldr	r3, [r2, #0]
 8008122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008126:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008128:	6803      	ldr	r3, [r0, #0]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8008130:	d038      	beq.n	80081a4 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008132:	2d22      	cmp	r5, #34	@ 0x22
 8008134:	d021      	beq.n	800817a <I2C_Slave_STOPF+0x86>
 8008136:	2d2a      	cmp	r5, #42	@ 0x2a
 8008138:	d01f      	beq.n	800817a <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800813a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800813c:	6812      	ldr	r2, [r2, #0]
 800813e:	6852      	ldr	r2, [r2, #4]
 8008140:	b292      	uxth	r2, r2
 8008142:	8542      	strh	r2, [r0, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8008144:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8008146:	b292      	uxth	r2, r2
 8008148:	b11a      	cbz	r2, 8008152 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800814a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800814c:	f042 0204 	orr.w	r2, r2, #4
 8008150:	6402      	str	r2, [r0, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008158:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800815a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800815c:	f7fe fb30 	bl	80067c0 <HAL_DMA_GetState>
 8008160:	2801      	cmp	r0, #1
 8008162:	d01f      	beq.n	80081a4 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008166:	4a44      	ldr	r2, [pc, #272]	@ (8008278 <I2C_Slave_STOPF+0x184>)
 8008168:	651a      	str	r2, [r3, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800816a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800816c:	f7fe fa27 	bl	80065be <HAL_DMA_Abort_IT>
 8008170:	b1c0      	cbz	r0, 80081a4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008172:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008174:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008176:	4798      	blx	r3
 8008178:	e014      	b.n	80081a4 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800817a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	6852      	ldr	r2, [r2, #4]
 8008180:	b292      	uxth	r2, r2
 8008182:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8008184:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008186:	b292      	uxth	r2, r2
 8008188:	b11a      	cbz	r2, 8008192 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800818a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800818c:	f042 0204 	orr.w	r2, r2, #4
 8008190:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008198:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800819a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800819c:	f7fe fb10 	bl	80067c0 <HAL_DMA_GetState>
 80081a0:	2801      	cmp	r0, #1
 80081a2:	d142      	bne.n	800822a <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 80081a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	b333      	cbz	r3, 80081f8 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	f012 0f04 	tst.w	r2, #4
 80081b2:	d00a      	beq.n	80081ca <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081b8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80081ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081bc:	3301      	adds	r3, #1
 80081be:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80081c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	695a      	ldr	r2, [r3, #20]
 80081ce:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80081d2:	d00a      	beq.n	80081ea <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081d8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80081da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081dc:	3301      	adds	r3, #1
 80081de:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80081e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80081ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	b11b      	cbz	r3, 80081f8 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081f2:	f043 0304 	orr.w	r3, r3, #4
 80081f6:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081fa:	bb13      	cbnz	r3, 8008242 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081fc:	2d2a      	cmp	r5, #42	@ 0x2a
 80081fe:	d025      	beq.n	800824c <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008200:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b28      	cmp	r3, #40	@ 0x28
 8008208:	d029      	beq.n	800825e <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800820a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800820c:	2b22      	cmp	r3, #34	@ 0x22
 800820e:	d001      	beq.n	8008214 <I2C_Slave_STOPF+0x120>
 8008210:	2d22      	cmp	r5, #34	@ 0x22
 8008212:	d119      	bne.n	8008248 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008214:	2300      	movs	r3, #0
 8008216:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008218:	2220      	movs	r2, #32
 800821a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800821e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008222:	4620      	mov	r0, r4
 8008224:	f7ff fb4f 	bl	80078c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008228:	e00e      	b.n	8008248 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800822a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800822c:	4a12      	ldr	r2, [pc, #72]	@ (8008278 <I2C_Slave_STOPF+0x184>)
 800822e:	651a      	str	r2, [r3, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008230:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8008232:	f7fe f9c4 	bl	80065be <HAL_DMA_Abort_IT>
 8008236:	2800      	cmp	r0, #0
 8008238:	d0b4      	beq.n	80081a4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800823a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800823c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800823e:	4798      	blx	r3
 8008240:	e7b0      	b.n	80081a4 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff fe9a 	bl	8007f7c <I2C_ITError>
}
 8008248:	b003      	add	sp, #12
 800824a:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 800824c:	2300      	movs	r3, #0
 800824e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008250:	2328      	movs	r3, #40	@ 0x28
 8008252:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008256:	4620      	mov	r0, r4
 8008258:	f7ff fb35 	bl	80078c6 <HAL_I2C_SlaveRxCpltCallback>
 800825c:	e7d0      	b.n	8008200 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800825e:	4b07      	ldr	r3, [pc, #28]	@ (800827c <I2C_Slave_STOPF+0x188>)
 8008260:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008262:	2300      	movs	r3, #0
 8008264:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008266:	2220      	movs	r2, #32
 8008268:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800826c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008270:	4620      	mov	r0, r4
 8008272:	f7ff fb7d 	bl	8007970 <HAL_I2C_ListenCpltCallback>
 8008276:	e7e7      	b.n	8008248 <I2C_Slave_STOPF+0x154>
 8008278:	08007e99 	.word	0x08007e99
 800827c:	ffff0000 	.word	0xffff0000

08008280 <HAL_I2C_EV_IRQHandler>:
{
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008284:	6802      	ldr	r2, [r0, #0]
 8008286:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008288:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800828a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800828e:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008290:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8008294:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008296:	2b10      	cmp	r3, #16
 8008298:	d013      	beq.n	80082c2 <HAL_I2C_EV_IRQHandler+0x42>
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d011      	beq.n	80082c2 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800829e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d07a      	beq.n	800839a <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80082a4:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 80082a6:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082a8:	f013 0f02 	tst.w	r3, #2
 80082ac:	d078      	beq.n	80083a0 <HAL_I2C_EV_IRQHandler+0x120>
 80082ae:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80082b2:	d075      	beq.n	80083a0 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80082b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082b6:	b103      	cbz	r3, 80082ba <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80082b8:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80082ba:	4620      	mov	r0, r4
 80082bc:	f7ff fb2b 	bl	8007916 <I2C_Slave_ADDR>
}
 80082c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80082c2:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80082c6:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80082c8:	f011 0701 	ands.w	r7, r1, #1
 80082cc:	d105      	bne.n	80082da <HAL_I2C_EV_IRQHandler+0x5a>
 80082ce:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 80082d2:	d0f5      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
 80082d4:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 80082d8:	d0f2      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082da:	b117      	cbz	r7, 80082e2 <HAL_I2C_EV_IRQHandler+0x62>
 80082dc:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80082e0:	d129      	bne.n	8008336 <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082e2:	f011 0f08 	tst.w	r1, #8
 80082e6:	d002      	beq.n	80082ee <HAL_I2C_EV_IRQHandler+0x6e>
 80082e8:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80082ec:	d12a      	bne.n	8008344 <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082ee:	f011 0f02 	tst.w	r1, #2
 80082f2:	d002      	beq.n	80082fa <HAL_I2C_EV_IRQHandler+0x7a>
 80082f4:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80082f8:	d128      	bne.n	800834c <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80082fa:	f01c 0f04 	tst.w	ip, #4
 80082fe:	d031      	beq.n	8008364 <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008300:	6852      	ldr	r2, [r2, #4]
 8008302:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8008306:	d1db      	bne.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008308:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800830c:	d005      	beq.n	800831a <HAL_I2C_EV_IRQHandler+0x9a>
 800830e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8008312:	d002      	beq.n	800831a <HAL_I2C_EV_IRQHandler+0x9a>
 8008314:	f011 0f04 	tst.w	r1, #4
 8008318:	d01c      	beq.n	8008354 <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800831a:	f011 0f04 	tst.w	r1, #4
 800831e:	d0cf      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
 8008320:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8008324:	d0cc      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008326:	2821      	cmp	r0, #33	@ 0x21
 8008328:	d018      	beq.n	800835c <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800832a:	2b40      	cmp	r3, #64	@ 0x40
 800832c:	d1c8      	bne.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff fbc0 	bl	8007ab4 <I2C_MemoryTransmit_TXE_BTF>
 8008334:	e7c4      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8008336:	4620      	mov	r0, r4
 8008338:	f7fe fd31 	bl	8006d9e <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 800833c:	4620      	mov	r0, r4
 800833e:	f7fe fb4f 	bl	80069e0 <I2C_Master_SB>
 8008342:	e7bd      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8008344:	4620      	mov	r0, r4
 8008346:	f7fe fb9f 	bl	8006a88 <I2C_Master_ADD10>
 800834a:	e7b9      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 800834c:	4620      	mov	r0, r4
 800834e:	f7fe fbb1 	bl	8006ab4 <I2C_Master_ADDR>
 8008352:	e7b5      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8008354:	4620      	mov	r0, r4
 8008356:	f7ff fc0f 	bl	8007b78 <I2C_MasterTransmit_TXE>
 800835a:	e7b1      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 800835c:	4620      	mov	r0, r4
 800835e:	f7ff fb5a 	bl	8007a16 <I2C_MasterTransmit_BTF>
 8008362:	e7ad      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008364:	6853      	ldr	r3, [r2, #4]
 8008366:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800836a:	d1a9      	bne.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800836c:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8008370:	d005      	beq.n	800837e <HAL_I2C_EV_IRQHandler+0xfe>
 8008372:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8008376:	d002      	beq.n	800837e <HAL_I2C_EV_IRQHandler+0xfe>
 8008378:	f011 0f04 	tst.w	r1, #4
 800837c:	d009      	beq.n	8008392 <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800837e:	f011 0f04 	tst.w	r1, #4
 8008382:	d09d      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
 8008384:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8008388:	d09a      	beq.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff fc5f 	bl	8007c4e <I2C_MasterReceive_BTF>
 8008390:	e796      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff fcfc 	bl	8007d90 <I2C_MasterReceive_RXNE>
 8008398:	e792      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800839a:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800839c:	6953      	ldr	r3, [r2, #20]
 800839e:	e783      	b.n	80082a8 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083a0:	f013 0f10 	tst.w	r3, #16
 80083a4:	d002      	beq.n	80083ac <HAL_I2C_EV_IRQHandler+0x12c>
 80083a6:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80083aa:	d118      	bne.n	80083de <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083ac:	2821      	cmp	r0, #33	@ 0x21
 80083ae:	d01a      	beq.n	80083e6 <HAL_I2C_EV_IRQHandler+0x166>
 80083b0:	2829      	cmp	r0, #41	@ 0x29
 80083b2:	d018      	beq.n	80083e6 <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083b4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80083b8:	d005      	beq.n	80083c6 <HAL_I2C_EV_IRQHandler+0x146>
 80083ba:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 80083be:	d002      	beq.n	80083c6 <HAL_I2C_EV_IRQHandler+0x146>
 80083c0:	f013 0f04 	tst.w	r3, #4
 80083c4:	d028      	beq.n	8008418 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083c6:	f013 0f04 	tst.w	r3, #4
 80083ca:	f43f af79 	beq.w	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
 80083ce:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80083d2:	f43f af75 	beq.w	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 80083d6:	4620      	mov	r0, r4
 80083d8:	f7fe fc94 	bl	8006d04 <I2C_SlaveReceive_BTF>
      }
 80083dc:	e770      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 80083de:	4620      	mov	r0, r4
 80083e0:	f7ff fe88 	bl	80080f4 <I2C_Slave_STOPF>
 80083e4:	e76c      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083ea:	d005      	beq.n	80083f8 <HAL_I2C_EV_IRQHandler+0x178>
 80083ec:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 80083f0:	d002      	beq.n	80083f8 <HAL_I2C_EV_IRQHandler+0x178>
 80083f2:	f013 0f04 	tst.w	r3, #4
 80083f6:	d00b      	beq.n	8008410 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083f8:	f013 0f04 	tst.w	r3, #4
 80083fc:	f43f af60 	beq.w	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
 8008400:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8008404:	f43f af5c 	beq.w	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8008408:	4620      	mov	r0, r4
 800840a:	f7fe fc6b 	bl	8006ce4 <I2C_SlaveTransmit_BTF>
 800840e:	e757      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8008410:	4620      	mov	r0, r4
 8008412:	f7ff fa32 	bl	800787a <I2C_SlaveTransmit_TXE>
 8008416:	e753      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8008418:	4620      	mov	r0, r4
 800841a:	f7ff fa55 	bl	80078c8 <I2C_SlaveReceive_RXNE>
 800841e:	e74f      	b.n	80082c0 <HAL_I2C_EV_IRQHandler+0x40>

08008420 <HAL_I2C_ER_IRQHandler>:
{
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008424:	6803      	ldr	r3, [r0, #0]
 8008426:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008428:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800842a:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 800842e:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008430:	f3c5 2600 	ubfx	r6, r5, #8, #1
 8008434:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8008438:	d008      	beq.n	800844c <HAL_I2C_ER_IRQHandler+0x2c>
 800843a:	f3c7 2600 	ubfx	r6, r7, #8, #1
 800843e:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8008442:	d003      	beq.n	800844c <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008444:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8008448:	6159      	str	r1, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 800844a:	2601      	movs	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800844c:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8008450:	d008      	beq.n	8008464 <HAL_I2C_ER_IRQHandler+0x44>
 8008452:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8008456:	d005      	beq.n	8008464 <HAL_I2C_ER_IRQHandler+0x44>
    error |= HAL_I2C_ERROR_ARLO;
 8008458:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	f46f 7100 	mvn.w	r1, #512	@ 0x200
 8008462:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008464:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8008468:	d019      	beq.n	800849e <HAL_I2C_ER_IRQHandler+0x7e>
 800846a:	f417 7f80 	tst.w	r7, #256	@ 0x100
 800846e:	d016      	beq.n	800849e <HAL_I2C_ER_IRQHandler+0x7e>
    tmp2 = hi2c->XferCount;
 8008470:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008472:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8008474:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8008478:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 800847a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800847c:	2a20      	cmp	r2, #32
 800847e:	d01b      	beq.n	80084b8 <HAL_I2C_ER_IRQHandler+0x98>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
 8008486:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8008488:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800848c:	2a10      	cmp	r2, #16
 800848e:	d001      	beq.n	8008494 <HAL_I2C_ER_IRQHandler+0x74>
 8008490:	2a40      	cmp	r2, #64	@ 0x40
 8008492:	d104      	bne.n	800849e <HAL_I2C_ER_IRQHandler+0x7e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008494:	6822      	ldr	r2, [r4, #0]
 8008496:	6813      	ldr	r3, [r2, #0]
 8008498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800849c:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800849e:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 80084a2:	d017      	beq.n	80084d4 <HAL_I2C_ER_IRQHandler+0xb4>
 80084a4:	f417 7f80 	tst.w	r7, #256	@ 0x100
 80084a8:	d014      	beq.n	80084d4 <HAL_I2C_ER_IRQHandler+0xb4>
    error |= HAL_I2C_ERROR_OVR;
 80084aa:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80084b4:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 80084b6:	e00e      	b.n	80084d6 <HAL_I2C_ER_IRQHandler+0xb6>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80084b8:	2900      	cmp	r1, #0
 80084ba:	d1e1      	bne.n	8008480 <HAL_I2C_ER_IRQHandler+0x60>
 80084bc:	2b21      	cmp	r3, #33	@ 0x21
 80084be:	d005      	beq.n	80084cc <HAL_I2C_ER_IRQHandler+0xac>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80084c0:	2b29      	cmp	r3, #41	@ 0x29
 80084c2:	d003      	beq.n	80084cc <HAL_I2C_ER_IRQHandler+0xac>
 80084c4:	2b28      	cmp	r3, #40	@ 0x28
 80084c6:	d1db      	bne.n	8008480 <HAL_I2C_ER_IRQHandler+0x60>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80084c8:	2821      	cmp	r0, #33	@ 0x21
 80084ca:	d1d9      	bne.n	8008480 <HAL_I2C_ER_IRQHandler+0x60>
      I2C_Slave_AF(hi2c);
 80084cc:	4620      	mov	r0, r4
 80084ce:	f7ff fa51 	bl	8007974 <I2C_Slave_AF>
 80084d2:	e7e4      	b.n	800849e <HAL_I2C_ER_IRQHandler+0x7e>
  if (error != HAL_I2C_ERROR_NONE)
 80084d4:	b12e      	cbz	r6, 80084e2 <HAL_I2C_ER_IRQHandler+0xc2>
    hi2c->ErrorCode |= error;
 80084d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084d8:	4333      	orrs	r3, r6
 80084da:	6423      	str	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 80084dc:	4620      	mov	r0, r4
 80084de:	f7ff fd4d 	bl	8007f7c <I2C_ITError>
}
 80084e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084e4 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80084e4:	b340      	cbz	r0, 8008538 <HAL_IWDG_Init+0x54>
{
 80084e6:	b538      	push	{r3, r4, r5, lr}
 80084e8:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80084ea:	6803      	ldr	r3, [r0, #0]
 80084ec:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80084f0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80084f2:	6803      	ldr	r3, [r0, #0]
 80084f4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80084f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80084fa:	6803      	ldr	r3, [r0, #0]
 80084fc:	6842      	ldr	r2, [r0, #4]
 80084fe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008500:	6803      	ldr	r3, [r0, #0]
 8008502:	6882      	ldr	r2, [r0, #8]
 8008504:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008506:	f7fd fe45 	bl	8006194 <HAL_GetTick>
 800850a:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	f012 0f03 	tst.w	r2, #3
 8008514:	d00b      	beq.n	800852e <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008516:	f7fd fe3d 	bl	8006194 <HAL_GetTick>
 800851a:	1b40      	subs	r0, r0, r5
 800851c:	2831      	cmp	r0, #49	@ 0x31
 800851e:	d9f5      	bls.n	800850c <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f013 0f03 	tst.w	r3, #3
 8008528:	d0f0      	beq.n	800850c <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 800852a:	2003      	movs	r0, #3
 800852c:	e003      	b.n	8008536 <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800852e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008532:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008534:	2000      	movs	r0, #0
}
 8008536:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008538:	2001      	movs	r0, #1
}
 800853a:	4770      	bx	lr

0800853c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800853c:	6803      	ldr	r3, [r0, #0]
 800853e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8008542:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8008544:	2000      	movs	r0, #0
 8008546:	4770      	bx	lr

08008548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008548:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800854a:	2100      	movs	r1, #0
 800854c:	9100      	str	r1, [sp, #0]
 800854e:	4b0b      	ldr	r3, [pc, #44]	@ (800857c <HAL_MspInit+0x34>)
 8008550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008552:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008556:	645a      	str	r2, [r3, #68]	@ 0x44
 8008558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800855a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800855e:	9200      	str	r2, [sp, #0]
 8008560:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008562:	9101      	str	r1, [sp, #4]
 8008564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008566:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800856a:	641a      	str	r2, [r3, #64]	@ 0x40
 800856c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008576:	b002      	add	sp, #8
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800

08008580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008580:	b530      	push	{r4, r5, lr}
 8008582:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008584:	2300      	movs	r3, #0
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	9304      	str	r3, [sp, #16]
 800858a:	9305      	str	r3, [sp, #20]
 800858c:	9306      	str	r3, [sp, #24]
 800858e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8008590:	6802      	ldr	r2, [r0, #0]
 8008592:	4b1d      	ldr	r3, [pc, #116]	@ (8008608 <HAL_I2C_MspInit+0x88>)
 8008594:	429a      	cmp	r2, r3
 8008596:	d001      	beq.n	800859c <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008598:	b009      	add	sp, #36	@ 0x24
 800859a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800859c:	2400      	movs	r4, #0
 800859e:	9401      	str	r4, [sp, #4]
 80085a0:	4d1a      	ldr	r5, [pc, #104]	@ (800860c <HAL_I2C_MspInit+0x8c>)
 80085a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80085a4:	f043 0302 	orr.w	r3, r3, #2
 80085a8:	632b      	str	r3, [r5, #48]	@ 0x30
 80085aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085b4:	23c0      	movs	r3, #192	@ 0xc0
 80085b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085b8:	2312      	movs	r3, #18
 80085ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085bc:	2301      	movs	r3, #1
 80085be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085c0:	2303      	movs	r3, #3
 80085c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80085c4:	2304      	movs	r3, #4
 80085c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085c8:	a903      	add	r1, sp, #12
 80085ca:	4811      	ldr	r0, [pc, #68]	@ (8008610 <HAL_I2C_MspInit+0x90>)
 80085cc:	f7fe f8fc 	bl	80067c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80085d0:	9402      	str	r4, [sp, #8]
 80085d2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80085d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80085d8:	642b      	str	r3, [r5, #64]	@ 0x40
 80085da:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80085dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80085e4:	4622      	mov	r2, r4
 80085e6:	4621      	mov	r1, r4
 80085e8:	201f      	movs	r0, #31
 80085ea:	f7fd fe5b 	bl	80062a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80085ee:	201f      	movs	r0, #31
 80085f0:	f7fd fe68 	bl	80062c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80085f4:	4622      	mov	r2, r4
 80085f6:	4621      	mov	r1, r4
 80085f8:	2020      	movs	r0, #32
 80085fa:	f7fd fe53 	bl	80062a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80085fe:	2020      	movs	r0, #32
 8008600:	f7fd fe60 	bl	80062c4 <HAL_NVIC_EnableIRQ>
}
 8008604:	e7c8      	b.n	8008598 <HAL_I2C_MspInit+0x18>
 8008606:	bf00      	nop
 8008608:	40005400 	.word	0x40005400
 800860c:	40023800 	.word	0x40023800
 8008610:	40020400 	.word	0x40020400

08008614 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008614:	b510      	push	{r4, lr}
 8008616:	b096      	sub	sp, #88	@ 0x58
 8008618:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800861a:	2258      	movs	r2, #88	@ 0x58
 800861c:	2100      	movs	r1, #0
 800861e:	4668      	mov	r0, sp
 8008620:	f003 fc53 	bl	800beca <memset>
  if(hrtc->Instance==RTC)
 8008624:	6822      	ldr	r2, [r4, #0]
 8008626:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <HAL_RTC_MspInit+0x40>)
 8008628:	429a      	cmp	r2, r3
 800862a:	d001      	beq.n	8008630 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800862c:	b016      	add	sp, #88	@ 0x58
 800862e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008630:	2308      	movs	r3, #8
 8008632:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008638:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800863a:	4668      	mov	r0, sp
 800863c:	f000 fc22 	bl	8008e84 <HAL_RCCEx_PeriphCLKConfig>
 8008640:	b920      	cbnz	r0, 800864c <HAL_RTC_MspInit+0x38>
    __HAL_RCC_RTC_ENABLE();
 8008642:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <HAL_RTC_MspInit+0x44>)
 8008644:	2201      	movs	r2, #1
 8008646:	f8c3 2e3c 	str.w	r2, [r3, #3644]	@ 0xe3c
}
 800864a:	e7ef      	b.n	800862c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800864c:	f7fc fdd0 	bl	80051f0 <Error_Handler>
 8008650:	e7f7      	b.n	8008642 <HAL_RTC_MspInit+0x2e>
 8008652:	bf00      	nop
 8008654:	40002800 	.word	0x40002800
 8008658:	42470000 	.word	0x42470000

0800865c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800865c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800865e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008660:	2300      	movs	r3, #0
 8008662:	9305      	str	r3, [sp, #20]
 8008664:	9306      	str	r3, [sp, #24]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	9308      	str	r3, [sp, #32]
 800866a:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hspi->Instance==SPI1)
 800866c:	6803      	ldr	r3, [r0, #0]
 800866e:	4a3f      	ldr	r2, [pc, #252]	@ (800876c <HAL_SPI_MspInit+0x110>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8008674:	4a3e      	ldr	r2, [pc, #248]	@ (8008770 <HAL_SPI_MspInit+0x114>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d03f      	beq.n	80086fa <HAL_SPI_MspInit+0x9e>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800867a:	b00b      	add	sp, #44	@ 0x2c
 800867c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867e:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008680:	2500      	movs	r5, #0
 8008682:	9500      	str	r5, [sp, #0]
 8008684:	4b3b      	ldr	r3, [pc, #236]	@ (8008774 <HAL_SPI_MspInit+0x118>)
 8008686:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008688:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800868c:	645a      	str	r2, [r3, #68]	@ 0x44
 800868e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008690:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008694:	9200      	str	r2, [sp, #0]
 8008696:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008698:	9501      	str	r5, [sp, #4]
 800869a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800869c:	f042 0201 	orr.w	r2, r2, #1
 80086a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80086a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80086ac:	23b0      	movs	r3, #176	@ 0xb0
 80086ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b0:	2302      	movs	r3, #2
 80086b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086b4:	2303      	movs	r3, #3
 80086b6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80086b8:	2305      	movs	r3, #5
 80086ba:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086bc:	a905      	add	r1, sp, #20
 80086be:	482e      	ldr	r0, [pc, #184]	@ (8008778 <HAL_SPI_MspInit+0x11c>)
 80086c0:	f7fe f882 	bl	80067c8 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80086c4:	482d      	ldr	r0, [pc, #180]	@ (800877c <HAL_SPI_MspInit+0x120>)
 80086c6:	4b2e      	ldr	r3, [pc, #184]	@ (8008780 <HAL_SPI_MspInit+0x124>)
 80086c8:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80086ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80086ce:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80086d0:	2340      	movs	r3, #64	@ 0x40
 80086d2:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80086d4:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80086d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086da:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80086dc:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80086de:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80086e0:	61c5      	str	r5, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80086e2:	6205      	str	r5, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80086e4:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80086e6:	f7fd fe85 	bl	80063f4 <HAL_DMA_Init>
 80086ea:	b918      	cbnz	r0, 80086f4 <HAL_SPI_MspInit+0x98>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80086ec:	4b23      	ldr	r3, [pc, #140]	@ (800877c <HAL_SPI_MspInit+0x120>)
 80086ee:	64a3      	str	r3, [r4, #72]	@ 0x48
 80086f0:	639c      	str	r4, [r3, #56]	@ 0x38
 80086f2:	e7c2      	b.n	800867a <HAL_SPI_MspInit+0x1e>
      Error_Handler();
 80086f4:	f7fc fd7c 	bl	80051f0 <Error_Handler>
 80086f8:	e7f8      	b.n	80086ec <HAL_SPI_MspInit+0x90>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80086fa:	2400      	movs	r4, #0
 80086fc:	9402      	str	r4, [sp, #8]
 80086fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008774 <HAL_SPI_MspInit+0x118>)
 8008700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008706:	641a      	str	r2, [r3, #64]	@ 0x40
 8008708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800870a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800870e:	9202      	str	r2, [sp, #8]
 8008710:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008712:	9403      	str	r4, [sp, #12]
 8008714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008716:	f042 0204 	orr.w	r2, r2, #4
 800871a:	631a      	str	r2, [r3, #48]	@ 0x30
 800871c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800871e:	f002 0204 	and.w	r2, r2, #4
 8008722:	9203      	str	r2, [sp, #12]
 8008724:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008726:	9404      	str	r4, [sp, #16]
 8008728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800872a:	f042 0202 	orr.w	r2, r2, #2
 800872e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	9304      	str	r3, [sp, #16]
 8008738:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800873a:	230c      	movs	r3, #12
 800873c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800873e:	2702      	movs	r7, #2
 8008740:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008742:	2603      	movs	r6, #3
 8008744:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008746:	2505      	movs	r5, #5
 8008748:	9509      	str	r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800874a:	a905      	add	r1, sp, #20
 800874c:	480d      	ldr	r0, [pc, #52]	@ (8008784 <HAL_SPI_MspInit+0x128>)
 800874e:	f7fe f83b 	bl	80067c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008756:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008758:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800875a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800875c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800875e:	9509      	str	r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008760:	a905      	add	r1, sp, #20
 8008762:	4809      	ldr	r0, [pc, #36]	@ (8008788 <HAL_SPI_MspInit+0x12c>)
 8008764:	f7fe f830 	bl	80067c8 <HAL_GPIO_Init>
}
 8008768:	e787      	b.n	800867a <HAL_SPI_MspInit+0x1e>
 800876a:	bf00      	nop
 800876c:	40013000 	.word	0x40013000
 8008770:	40003800 	.word	0x40003800
 8008774:	40023800 	.word	0x40023800
 8008778:	40020000 	.word	0x40020000
 800877c:	2001d160 	.word	0x2001d160
 8008780:	40026440 	.word	0x40026440
 8008784:	40020800 	.word	0x40020800
 8008788:	40020400 	.word	0x40020400

0800878c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800878c:	b530      	push	{r4, r5, lr}
 800878e:	b091      	sub	sp, #68	@ 0x44
 8008790:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008792:	2300      	movs	r3, #0
 8008794:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008796:	930c      	str	r3, [sp, #48]	@ 0x30
 8008798:	930d      	str	r3, [sp, #52]	@ 0x34
 800879a:	930e      	str	r3, [sp, #56]	@ 0x38
 800879c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if(huart->Instance==UART4)
 800879e:	6803      	ldr	r3, [r0, #0]
 80087a0:	4a98      	ldr	r2, [pc, #608]	@ (8008a04 <HAL_UART_MspInit+0x278>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d010      	beq.n	80087c8 <HAL_UART_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 80087a6:	4a98      	ldr	r2, [pc, #608]	@ (8008a08 <HAL_UART_MspInit+0x27c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d06b      	beq.n	8008884 <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80087ac:	4a97      	ldr	r2, [pc, #604]	@ (8008a0c <HAL_UART_MspInit+0x280>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	f000 80c8 	beq.w	8008944 <HAL_UART_MspInit+0x1b8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80087b4:	4a96      	ldr	r2, [pc, #600]	@ (8008a10 <HAL_UART_MspInit+0x284>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	f000 814c 	beq.w	8008a54 <HAL_UART_MspInit+0x2c8>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80087bc:	4a95      	ldr	r2, [pc, #596]	@ (8008a14 <HAL_UART_MspInit+0x288>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	f000 81a8 	beq.w	8008b14 <HAL_UART_MspInit+0x388>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80087c4:	b011      	add	sp, #68	@ 0x44
 80087c6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 80087c8:	2500      	movs	r5, #0
 80087ca:	9501      	str	r5, [sp, #4]
 80087cc:	4b92      	ldr	r3, [pc, #584]	@ (8008a18 <HAL_UART_MspInit+0x28c>)
 80087ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087d0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80087d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80087d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087d8:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80087dc:	9201      	str	r2, [sp, #4]
 80087de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087e0:	9502      	str	r5, [sp, #8]
 80087e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087e4:	f042 0201 	orr.w	r2, r2, #1
 80087e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80087ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80087f4:	2303      	movs	r3, #3
 80087f6:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f8:	2202      	movs	r2, #2
 80087fa:	920c      	str	r2, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087fc:	930e      	str	r3, [sp, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80087fe:	2308      	movs	r3, #8
 8008800:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008802:	a90b      	add	r1, sp, #44	@ 0x2c
 8008804:	4885      	ldr	r0, [pc, #532]	@ (8008a1c <HAL_UART_MspInit+0x290>)
 8008806:	f7fd ffdf 	bl	80067c8 <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800880a:	4885      	ldr	r0, [pc, #532]	@ (8008a20 <HAL_UART_MspInit+0x294>)
 800880c:	4b85      	ldr	r3, [pc, #532]	@ (8008a24 <HAL_UART_MspInit+0x298>)
 800880e:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8008810:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008814:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008816:	2340      	movs	r3, #64	@ 0x40
 8008818:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800881a:	60c5      	str	r5, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800881c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008820:	6103      	str	r3, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008822:	6145      	str	r5, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008824:	6185      	str	r5, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8008826:	61c5      	str	r5, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008828:	6205      	str	r5, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800882a:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800882c:	f7fd fde2 	bl	80063f4 <HAL_DMA_Init>
 8008830:	bb10      	cbnz	r0, 8008878 <HAL_UART_MspInit+0xec>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8008832:	4b7b      	ldr	r3, [pc, #492]	@ (8008a20 <HAL_UART_MspInit+0x294>)
 8008834:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008836:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8008838:	487b      	ldr	r0, [pc, #492]	@ (8008a28 <HAL_UART_MspInit+0x29c>)
 800883a:	4b7c      	ldr	r3, [pc, #496]	@ (8008a2c <HAL_UART_MspInit+0x2a0>)
 800883c:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800883e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008842:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008844:	2300      	movs	r3, #0
 8008846:	6083      	str	r3, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008848:	60c3      	str	r3, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800884a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800884e:	6102      	str	r2, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008850:	6143      	str	r3, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008852:	6183      	str	r3, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8008854:	61c3      	str	r3, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008856:	6203      	str	r3, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008858:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800885a:	f7fd fdcb 	bl	80063f4 <HAL_DMA_Init>
 800885e:	b970      	cbnz	r0, 800887e <HAL_UART_MspInit+0xf2>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8008860:	4b71      	ldr	r3, [pc, #452]	@ (8008a28 <HAL_UART_MspInit+0x29c>)
 8008862:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008864:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8008866:	2200      	movs	r2, #0
 8008868:	4611      	mov	r1, r2
 800886a:	2034      	movs	r0, #52	@ 0x34
 800886c:	f7fd fd1a 	bl	80062a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008870:	2034      	movs	r0, #52	@ 0x34
 8008872:	f7fd fd27 	bl	80062c4 <HAL_NVIC_EnableIRQ>
 8008876:	e7a5      	b.n	80087c4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8008878:	f7fc fcba 	bl	80051f0 <Error_Handler>
 800887c:	e7d9      	b.n	8008832 <HAL_UART_MspInit+0xa6>
      Error_Handler();
 800887e:	f7fc fcb7 	bl	80051f0 <Error_Handler>
 8008882:	e7ed      	b.n	8008860 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008884:	2500      	movs	r5, #0
 8008886:	9503      	str	r5, [sp, #12]
 8008888:	4b63      	ldr	r3, [pc, #396]	@ (8008a18 <HAL_UART_MspInit+0x28c>)
 800888a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800888c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008890:	641a      	str	r2, [r3, #64]	@ 0x40
 8008892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008894:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8008898:	9203      	str	r2, [sp, #12]
 800889a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800889c:	9504      	str	r5, [sp, #16]
 800889e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088a0:	f042 0202 	orr.w	r2, r2, #2
 80088a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80088b0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80088b4:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b6:	2302      	movs	r3, #2
 80088b8:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ba:	2303      	movs	r3, #3
 80088bc:	930e      	str	r3, [sp, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 80088be:	230b      	movs	r3, #11
 80088c0:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088c2:	a90b      	add	r1, sp, #44	@ 0x2c
 80088c4:	485a      	ldr	r0, [pc, #360]	@ (8008a30 <HAL_UART_MspInit+0x2a4>)
 80088c6:	f7fd ff7f 	bl	80067c8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80088ca:	485a      	ldr	r0, [pc, #360]	@ (8008a34 <HAL_UART_MspInit+0x2a8>)
 80088cc:	4b5a      	ldr	r3, [pc, #360]	@ (8008a38 <HAL_UART_MspInit+0x2ac>)
 80088ce:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80088d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088d4:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088d6:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088d8:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80088da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088de:	6103      	str	r3, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80088e0:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80088e2:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80088e4:	61c5      	str	r5, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80088e6:	6205      	str	r5, [r0, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80088e8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80088ea:	f7fd fd83 	bl	80063f4 <HAL_DMA_Init>
 80088ee:	bb18      	cbnz	r0, 8008938 <HAL_UART_MspInit+0x1ac>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80088f0:	4b50      	ldr	r3, [pc, #320]	@ (8008a34 <HAL_UART_MspInit+0x2a8>)
 80088f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80088f4:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80088f6:	4851      	ldr	r0, [pc, #324]	@ (8008a3c <HAL_UART_MspInit+0x2b0>)
 80088f8:	4b51      	ldr	r3, [pc, #324]	@ (8008a40 <HAL_UART_MspInit+0x2b4>)
 80088fa:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_8;
 80088fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008900:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008902:	2340      	movs	r3, #64	@ 0x40
 8008904:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008906:	2300      	movs	r3, #0
 8008908:	60c3      	str	r3, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800890a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800890e:	6102      	str	r2, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008910:	6143      	str	r3, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008912:	6183      	str	r3, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8008914:	61c3      	str	r3, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008916:	6203      	str	r3, [r0, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008918:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800891a:	f7fd fd6b 	bl	80063f4 <HAL_DMA_Init>
 800891e:	b970      	cbnz	r0, 800893e <HAL_UART_MspInit+0x1b2>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8008920:	4b46      	ldr	r3, [pc, #280]	@ (8008a3c <HAL_UART_MspInit+0x2b0>)
 8008922:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008924:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8008926:	2200      	movs	r2, #0
 8008928:	4611      	mov	r1, r2
 800892a:	2035      	movs	r0, #53	@ 0x35
 800892c:	f7fd fcba 	bl	80062a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8008930:	2035      	movs	r0, #53	@ 0x35
 8008932:	f7fd fcc7 	bl	80062c4 <HAL_NVIC_EnableIRQ>
 8008936:	e745      	b.n	80087c4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8008938:	f7fc fc5a 	bl	80051f0 <Error_Handler>
 800893c:	e7d8      	b.n	80088f0 <HAL_UART_MspInit+0x164>
      Error_Handler();
 800893e:	f7fc fc57 	bl	80051f0 <Error_Handler>
 8008942:	e7ed      	b.n	8008920 <HAL_UART_MspInit+0x194>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008944:	2500      	movs	r5, #0
 8008946:	9505      	str	r5, [sp, #20]
 8008948:	4b33      	ldr	r3, [pc, #204]	@ (8008a18 <HAL_UART_MspInit+0x28c>)
 800894a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800894c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008950:	641a      	str	r2, [r3, #64]	@ 0x40
 8008952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008954:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8008958:	9205      	str	r2, [sp, #20]
 800895a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800895c:	9506      	str	r5, [sp, #24]
 800895e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008960:	f042 0201 	orr.w	r2, r2, #1
 8008964:	631a      	str	r2, [r3, #48]	@ 0x30
 8008966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	9306      	str	r3, [sp, #24]
 800896e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008970:	230c      	movs	r3, #12
 8008972:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008974:	2302      	movs	r3, #2
 8008976:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008978:	2303      	movs	r3, #3
 800897a:	930e      	str	r3, [sp, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800897c:	2307      	movs	r3, #7
 800897e:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008980:	a90b      	add	r1, sp, #44	@ 0x2c
 8008982:	4826      	ldr	r0, [pc, #152]	@ (8008a1c <HAL_UART_MspInit+0x290>)
 8008984:	f7fd ff20 	bl	80067c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008988:	482e      	ldr	r0, [pc, #184]	@ (8008a44 <HAL_UART_MspInit+0x2b8>)
 800898a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a48 <HAL_UART_MspInit+0x2bc>)
 800898c:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800898e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008992:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008994:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008996:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800899c:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800899e:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089a0:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80089a2:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80089a4:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089a6:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80089a8:	f7fd fd24 	bl	80063f4 <HAL_DMA_Init>
 80089ac:	bb18      	cbnz	r0, 80089f6 <HAL_UART_MspInit+0x26a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80089ae:	4b25      	ldr	r3, [pc, #148]	@ (8008a44 <HAL_UART_MspInit+0x2b8>)
 80089b0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80089b2:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80089b4:	4825      	ldr	r0, [pc, #148]	@ (8008a4c <HAL_UART_MspInit+0x2c0>)
 80089b6:	4b26      	ldr	r3, [pc, #152]	@ (8008a50 <HAL_UART_MspInit+0x2c4>)
 80089b8:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80089ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80089be:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089c0:	2340      	movs	r3, #64	@ 0x40
 80089c2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089cc:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089ce:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089d0:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80089d2:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80089d4:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089d6:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80089d8:	f7fd fd0c 	bl	80063f4 <HAL_DMA_Init>
 80089dc:	b970      	cbnz	r0, 80089fc <HAL_UART_MspInit+0x270>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80089de:	4b1b      	ldr	r3, [pc, #108]	@ (8008a4c <HAL_UART_MspInit+0x2c0>)
 80089e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80089e2:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80089e4:	2200      	movs	r2, #0
 80089e6:	4611      	mov	r1, r2
 80089e8:	2026      	movs	r0, #38	@ 0x26
 80089ea:	f7fd fc5b 	bl	80062a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80089ee:	2026      	movs	r0, #38	@ 0x26
 80089f0:	f7fd fc68 	bl	80062c4 <HAL_NVIC_EnableIRQ>
 80089f4:	e6e6      	b.n	80087c4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80089f6:	f7fc fbfb 	bl	80051f0 <Error_Handler>
 80089fa:	e7d8      	b.n	80089ae <HAL_UART_MspInit+0x222>
      Error_Handler();
 80089fc:	f7fc fbf8 	bl	80051f0 <Error_Handler>
 8008a00:	e7ed      	b.n	80089de <HAL_UART_MspInit+0x252>
 8008a02:	bf00      	nop
 8008a04:	40004c00 	.word	0x40004c00
 8008a08:	40005000 	.word	0x40005000
 8008a0c:	40004400 	.word	0x40004400
 8008a10:	40004800 	.word	0x40004800
 8008a14:	40011400 	.word	0x40011400
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	40020000 	.word	0x40020000
 8008a20:	2001ce64 	.word	0x2001ce64
 8008a24:	40026070 	.word	0x40026070
 8008a28:	2001ce04 	.word	0x2001ce04
 8008a2c:	40026040 	.word	0x40026040
 8008a30:	40020400 	.word	0x40020400
 8008a34:	2001cda4 	.word	0x2001cda4
 8008a38:	40026010 	.word	0x40026010
 8008a3c:	2001cd44 	.word	0x2001cd44
 8008a40:	400260b8 	.word	0x400260b8
 8008a44:	2001cce4 	.word	0x2001cce4
 8008a48:	40026088 	.word	0x40026088
 8008a4c:	2001cc84 	.word	0x2001cc84
 8008a50:	400260a0 	.word	0x400260a0
    __HAL_RCC_USART3_CLK_ENABLE();
 8008a54:	2500      	movs	r5, #0
 8008a56:	9507      	str	r5, [sp, #28]
 8008a58:	4b5e      	ldr	r3, [pc, #376]	@ (8008bd4 <HAL_UART_MspInit+0x448>)
 8008a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a5c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a60:	641a      	str	r2, [r3, #64]	@ 0x40
 8008a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a64:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8008a68:	9207      	str	r2, [sp, #28]
 8008a6a:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a6c:	9508      	str	r5, [sp, #32]
 8008a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a70:	f042 0204 	orr.w	r2, r2, #4
 8008a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	9308      	str	r3, [sp, #32]
 8008a7e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8008a80:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8008a84:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a86:	2302      	movs	r3, #2
 8008a88:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	930e      	str	r3, [sp, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008a8e:	2307      	movs	r3, #7
 8008a90:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a92:	a90b      	add	r1, sp, #44	@ 0x2c
 8008a94:	4850      	ldr	r0, [pc, #320]	@ (8008bd8 <HAL_UART_MspInit+0x44c>)
 8008a96:	f7fd fe97 	bl	80067c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8008a9a:	4850      	ldr	r0, [pc, #320]	@ (8008bdc <HAL_UART_MspInit+0x450>)
 8008a9c:	4b50      	ldr	r3, [pc, #320]	@ (8008be0 <HAL_UART_MspInit+0x454>)
 8008a9e:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8008aa0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008aa4:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008aa6:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008aa8:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008aae:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ab0:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ab2:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8008ab4:	61c5      	str	r5, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008ab6:	6205      	str	r5, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ab8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008aba:	f7fd fc9b 	bl	80063f4 <HAL_DMA_Init>
 8008abe:	bb18      	cbnz	r0, 8008b08 <HAL_UART_MspInit+0x37c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8008ac0:	4b46      	ldr	r3, [pc, #280]	@ (8008bdc <HAL_UART_MspInit+0x450>)
 8008ac2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008ac4:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8008ac6:	4847      	ldr	r0, [pc, #284]	@ (8008be4 <HAL_UART_MspInit+0x458>)
 8008ac8:	4b47      	ldr	r3, [pc, #284]	@ (8008be8 <HAL_UART_MspInit+0x45c>)
 8008aca:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8008acc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ad0:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008ad2:	2340      	movs	r3, #64	@ 0x40
 8008ad4:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008ade:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ae0:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ae2:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8008ae4:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008ae6:	6203      	str	r3, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ae8:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8008aea:	f7fd fc83 	bl	80063f4 <HAL_DMA_Init>
 8008aee:	b970      	cbnz	r0, 8008b0e <HAL_UART_MspInit+0x382>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8008af0:	4b3c      	ldr	r3, [pc, #240]	@ (8008be4 <HAL_UART_MspInit+0x458>)
 8008af2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008af4:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008af6:	2200      	movs	r2, #0
 8008af8:	4611      	mov	r1, r2
 8008afa:	2027      	movs	r0, #39	@ 0x27
 8008afc:	f7fd fbd2 	bl	80062a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008b00:	2027      	movs	r0, #39	@ 0x27
 8008b02:	f7fd fbdf 	bl	80062c4 <HAL_NVIC_EnableIRQ>
 8008b06:	e65d      	b.n	80087c4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8008b08:	f7fc fb72 	bl	80051f0 <Error_Handler>
 8008b0c:	e7d8      	b.n	8008ac0 <HAL_UART_MspInit+0x334>
      Error_Handler();
 8008b0e:	f7fc fb6f 	bl	80051f0 <Error_Handler>
 8008b12:	e7ed      	b.n	8008af0 <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008b14:	2500      	movs	r5, #0
 8008b16:	9509      	str	r5, [sp, #36]	@ 0x24
 8008b18:	4b2e      	ldr	r3, [pc, #184]	@ (8008bd4 <HAL_UART_MspInit+0x448>)
 8008b1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b1c:	f042 0220 	orr.w	r2, r2, #32
 8008b20:	645a      	str	r2, [r3, #68]	@ 0x44
 8008b22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b24:	f002 0220 	and.w	r2, r2, #32
 8008b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008b2c:	950a      	str	r5, [sp, #40]	@ 0x28
 8008b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b30:	f042 0204 	orr.w	r2, r2, #4
 8008b34:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008b40:	23c0      	movs	r3, #192	@ 0xc0
 8008b42:	930b      	str	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b44:	2302      	movs	r3, #2
 8008b46:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	930e      	str	r3, [sp, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	930f      	str	r3, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b50:	a90b      	add	r1, sp, #44	@ 0x2c
 8008b52:	4821      	ldr	r0, [pc, #132]	@ (8008bd8 <HAL_UART_MspInit+0x44c>)
 8008b54:	f7fd fe38 	bl	80067c8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8008b58:	4824      	ldr	r0, [pc, #144]	@ (8008bec <HAL_UART_MspInit+0x460>)
 8008b5a:	4b25      	ldr	r3, [pc, #148]	@ (8008bf0 <HAL_UART_MspInit+0x464>)
 8008b5c:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8008b5e:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
 8008b62:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b64:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b66:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b6c:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b6e:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b70:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8008b72:	61c5      	str	r5, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008b74:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b76:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8008b78:	f7fd fc3c 	bl	80063f4 <HAL_DMA_Init>
 8008b7c:	bb18      	cbnz	r0, 8008bc6 <HAL_UART_MspInit+0x43a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8008b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bec <HAL_UART_MspInit+0x460>)
 8008b80:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008b82:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8008b84:	481b      	ldr	r0, [pc, #108]	@ (8008bf4 <HAL_UART_MspInit+0x468>)
 8008b86:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf8 <HAL_UART_MspInit+0x46c>)
 8008b88:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8008b8a:	f04f 6320 	mov.w	r3, #167772160	@ 0xa000000
 8008b8e:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b90:	2340      	movs	r3, #64	@ 0x40
 8008b92:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b9c:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b9e:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ba0:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8008ba2:	61c3      	str	r3, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008ba4:	6203      	str	r3, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ba6:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8008ba8:	f7fd fc24 	bl	80063f4 <HAL_DMA_Init>
 8008bac:	b970      	cbnz	r0, 8008bcc <HAL_UART_MspInit+0x440>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8008bae:	4b11      	ldr	r3, [pc, #68]	@ (8008bf4 <HAL_UART_MspInit+0x468>)
 8008bb0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008bb2:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	2047      	movs	r0, #71	@ 0x47
 8008bba:	f7fd fb73 	bl	80062a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8008bbe:	2047      	movs	r0, #71	@ 0x47
 8008bc0:	f7fd fb80 	bl	80062c4 <HAL_NVIC_EnableIRQ>
}
 8008bc4:	e5fe      	b.n	80087c4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8008bc6:	f7fc fb13 	bl	80051f0 <Error_Handler>
 8008bca:	e7d8      	b.n	8008b7e <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8008bcc:	f7fc fb10 	bl	80051f0 <Error_Handler>
 8008bd0:	e7ed      	b.n	8008bae <HAL_UART_MspInit+0x422>
 8008bd2:	bf00      	nop
 8008bd4:	40023800 	.word	0x40023800
 8008bd8:	40020800 	.word	0x40020800
 8008bdc:	2001cc24 	.word	0x2001cc24
 8008be0:	40026028 	.word	0x40026028
 8008be4:	2001cbc4 	.word	0x2001cbc4
 8008be8:	40026058 	.word	0x40026058
 8008bec:	2001cb64 	.word	0x2001cb64
 8008bf0:	40026428 	.word	0x40026428
 8008bf4:	2001cb04 	.word	0x2001cb04
 8008bf8:	400264a0 	.word	0x400264a0

08008bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bfc:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bfe:	4b33      	ldr	r3, [pc, #204]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f003 030c 	and.w	r3, r3, #12
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d05b      	beq.n	8008cc2 <HAL_RCC_GetSysClockFreq+0xc6>
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d15b      	bne.n	8008cc6 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8008c1c:	d02c      	beq.n	8008c78 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c20:	6858      	ldr	r0, [r3, #4]
 8008c22:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008c26:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8008c2a:	ebbc 0c00 	subs.w	ip, ip, r0
 8008c2e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8008c32:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8008c36:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8008c3a:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8008c3e:	ebb1 010c 	subs.w	r1, r1, ip
 8008c42:	eb63 030e 	sbc.w	r3, r3, lr
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c4c:	00c9      	lsls	r1, r1, #3
 8008c4e:	eb11 0c00 	adds.w	ip, r1, r0
 8008c52:	f143 0300 	adc.w	r3, r3, #0
 8008c56:	0259      	lsls	r1, r3, #9
 8008c58:	2300      	movs	r3, #0
 8008c5a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8008c5e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8008c62:	f7f8 f819 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008c66:	4b19      	ldr	r3, [pc, #100]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008c6e:	3301      	adds	r3, #1
 8008c70:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8008c72:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008c76:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c78:	4b14      	ldr	r3, [pc, #80]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c7a:	6858      	ldr	r0, [r3, #4]
 8008c7c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008c80:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8008c84:	ebbc 0c00 	subs.w	ip, ip, r0
 8008c88:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8008c8c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8008c90:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8008c94:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8008c98:	ebb1 010c 	subs.w	r1, r1, ip
 8008c9c:	eb63 030e 	sbc.w	r3, r3, lr
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ca6:	00c9      	lsls	r1, r1, #3
 8008ca8:	eb11 0c00 	adds.w	ip, r1, r0
 8008cac:	f143 0300 	adc.w	r3, r3, #0
 8008cb0:	0299      	lsls	r1, r3, #10
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8008cb8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8008cbc:	f7f7 ffec 	bl	8000c98 <__aeabi_uldivmod>
 8008cc0:	e7d1      	b.n	8008c66 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8008cc2:	4803      	ldr	r0, [pc, #12]	@ (8008cd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008cc4:	e7d7      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cc6:	4803      	ldr	r0, [pc, #12]	@ (8008cd4 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8008cc8:	e7d5      	b.n	8008c76 <HAL_RCC_GetSysClockFreq+0x7a>
 8008cca:	bf00      	nop
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	007a1200 	.word	0x007a1200
 8008cd4:	00f42400 	.word	0x00f42400

08008cd8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	f000 809b 	beq.w	8008e14 <HAL_RCC_ClockConfig+0x13c>
{
 8008cde:	b570      	push	{r4, r5, r6, lr}
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8008e24 <HAL_RCC_ClockConfig+0x14c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	428b      	cmp	r3, r1
 8008cee:	d208      	bcs.n	8008d02 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cf0:	b2cb      	uxtb	r3, r1
 8008cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8008e24 <HAL_RCC_ClockConfig+0x14c>)
 8008cf4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	428b      	cmp	r3, r1
 8008cfe:	f040 808b 	bne.w	8008e18 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f013 0f02 	tst.w	r3, #2
 8008d08:	d017      	beq.n	8008d3a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d0a:	f013 0f04 	tst.w	r3, #4
 8008d0e:	d004      	beq.n	8008d1a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d10:	4a45      	ldr	r2, [pc, #276]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d12:	6893      	ldr	r3, [r2, #8]
 8008d14:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008d18:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	f013 0f08 	tst.w	r3, #8
 8008d20:	d004      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d22:	4a41      	ldr	r2, [pc, #260]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d24:	6893      	ldr	r3, [r2, #8]
 8008d26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008d2a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d2e:	6893      	ldr	r3, [r2, #8]
 8008d30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d34:	68a1      	ldr	r1, [r4, #8]
 8008d36:	430b      	orrs	r3, r1
 8008d38:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f013 0f01 	tst.w	r3, #1
 8008d40:	d032      	beq.n	8008da8 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d021      	beq.n	8008d8c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d48:	1e9a      	subs	r2, r3, #2
 8008d4a:	2a01      	cmp	r2, #1
 8008d4c:	d925      	bls.n	8008d9a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d4e:	4a36      	ldr	r2, [pc, #216]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	f012 0f02 	tst.w	r2, #2
 8008d56:	d061      	beq.n	8008e1c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d58:	4933      	ldr	r1, [pc, #204]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d5a:	688a      	ldr	r2, [r1, #8]
 8008d5c:	f022 0203 	bic.w	r2, r2, #3
 8008d60:	4313      	orrs	r3, r2
 8008d62:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008d64:	f7fd fa16 	bl	8006194 <HAL_GetTick>
 8008d68:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 030c 	and.w	r3, r3, #12
 8008d72:	6862      	ldr	r2, [r4, #4]
 8008d74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008d78:	d016      	beq.n	8008da8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d7a:	f7fd fa0b 	bl	8006194 <HAL_GetTick>
 8008d7e:	1b80      	subs	r0, r0, r6
 8008d80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008d84:	4298      	cmp	r0, r3
 8008d86:	d9f0      	bls.n	8008d6a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8008d88:	2003      	movs	r0, #3
 8008d8a:	e042      	b.n	8008e12 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d8c:	4a26      	ldr	r2, [pc, #152]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8008d94:	d1e0      	bne.n	8008d58 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8008d96:	2001      	movs	r0, #1
 8008d98:	e03b      	b.n	8008e12 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d9a:	4a23      	ldr	r2, [pc, #140]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8008da2:	d1d9      	bne.n	8008d58 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8008da4:	2001      	movs	r0, #1
 8008da6:	e034      	b.n	8008e12 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008da8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e24 <HAL_RCC_ClockConfig+0x14c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	d907      	bls.n	8008dc4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008db4:	b2ea      	uxtb	r2, r5
 8008db6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e24 <HAL_RCC_ClockConfig+0x14c>)
 8008db8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	d12d      	bne.n	8008e20 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	f013 0f04 	tst.w	r3, #4
 8008dca:	d006      	beq.n	8008dda <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dcc:	4a16      	ldr	r2, [pc, #88]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008dce:	6893      	ldr	r3, [r2, #8]
 8008dd0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8008dd4:	68e1      	ldr	r1, [r4, #12]
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	f013 0f08 	tst.w	r3, #8
 8008de0:	d007      	beq.n	8008df2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008de2:	4a11      	ldr	r2, [pc, #68]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008de4:	6893      	ldr	r3, [r2, #8]
 8008de6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008dea:	6921      	ldr	r1, [r4, #16]
 8008dec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008df0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008df2:	f7ff ff03 	bl	8008bfc <HAL_RCC_GetSysClockFreq>
 8008df6:	4b0c      	ldr	r3, [pc, #48]	@ (8008e28 <HAL_RCC_ClockConfig+0x150>)
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8008e2c <HAL_RCC_ClockConfig+0x154>)
 8008e00:	5cd3      	ldrb	r3, [r2, r3]
 8008e02:	40d8      	lsrs	r0, r3
 8008e04:	4b0a      	ldr	r3, [pc, #40]	@ (8008e30 <HAL_RCC_ClockConfig+0x158>)
 8008e06:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8008e08:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <HAL_RCC_ClockConfig+0x15c>)
 8008e0a:	6818      	ldr	r0, [r3, #0]
 8008e0c:	f7fd f976 	bl	80060fc <HAL_InitTick>
  return HAL_OK;
 8008e10:	2000      	movs	r0, #0
}
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008e14:	2001      	movs	r0, #1
}
 8008e16:	4770      	bx	lr
      return HAL_ERROR;
 8008e18:	2001      	movs	r0, #1
 8008e1a:	e7fa      	b.n	8008e12 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	e7f8      	b.n	8008e12 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8008e20:	2001      	movs	r0, #1
 8008e22:	e7f6      	b.n	8008e12 <HAL_RCC_ClockConfig+0x13a>
 8008e24:	40023c00 	.word	0x40023c00
 8008e28:	40023800 	.word	0x40023800
 8008e2c:	08022dbc 	.word	0x08022dbc
 8008e30:	20000138 	.word	0x20000138
 8008e34:	20000134 	.word	0x20000134

08008e38 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8008e38:	4b01      	ldr	r3, [pc, #4]	@ (8008e40 <HAL_RCC_GetHCLKFreq+0x8>)
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20000138 	.word	0x20000138

08008e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e44:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e46:	f7ff fff7 	bl	8008e38 <HAL_RCC_GetHCLKFreq>
 8008e4a:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8008e52:	4a03      	ldr	r2, [pc, #12]	@ (8008e60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008e54:	5cd3      	ldrb	r3, [r2, r3]
}
 8008e56:	40d8      	lsrs	r0, r3
 8008e58:	bd08      	pop	{r3, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	08022db4 	.word	0x08022db4

08008e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e66:	f7ff ffe7 	bl	8008e38 <HAL_RCC_GetHCLKFreq>
 8008e6a:	4b04      	ldr	r3, [pc, #16]	@ (8008e7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8008e72:	4a03      	ldr	r2, [pc, #12]	@ (8008e80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008e74:	5cd3      	ldrb	r3, [r2, r3]
}
 8008e76:	40d8      	lsrs	r0, r3
 8008e78:	bd08      	pop	{r3, pc}
 8008e7a:	bf00      	nop
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	08022db4 	.word	0x08022db4

08008e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008e8a:	6805      	ldr	r5, [r0, #0]
 8008e8c:	f015 0501 	ands.w	r5, r5, #1
 8008e90:	d00d      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008e92:	4aa8      	ldr	r2, [pc, #672]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008e94:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008e98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008e9c:	69c1      	ldr	r1, [r0, #28]
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008ea4:	69c3      	ldr	r3, [r0, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80bf 	beq.w	800902a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  uint32_t plli2sused = 0U;
 8008eac:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	f013 0f02 	tst.w	r3, #2
 8008eb4:	d00b      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008eb6:	4a9f      	ldr	r2, [pc, #636]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008eb8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008ebc:	f023 53c0 	bic.w	r3, r3, #402653184	@ 0x18000000
 8008ec0:	6a21      	ldr	r1, [r4, #32]
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008ec8:	6a23      	ldr	r3, [r4, #32]
 8008eca:	b903      	cbnz	r3, 8008ece <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 8008ecc:	2501      	movs	r5, #1
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8008ed4:	d00f      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8008ed6:	4a97      	ldr	r2, [pc, #604]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008ed8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008edc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008ee0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8008ee8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008eea:	b903      	cbnz	r3, 8008eee <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      plli2sused = 1U;
 8008eec:	2501      	movs	r5, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8008eee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ef2:	f000 809c 	beq.w	800902e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8008efc:	d00f      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8008efe:	4a8d      	ldr	r2, [pc, #564]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008f00:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008f04:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008f08:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8008f10:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008f12:	b903      	cbnz	r3, 8008f16 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      plli2sused = 1U;
 8008f14:	2501      	movs	r5, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8008f16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f1a:	f000 8094 	beq.w	8009046 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	f013 0f08 	tst.w	r3, #8
 8008f24:	f040 809b 	bne.w	800905e <HAL_RCCEx_PeriphCLKConfig+0x1da>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	f013 0f04 	tst.w	r3, #4
 8008f2e:	d004      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f30:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8008f34:	4b80      	ldr	r3, [pc, #512]	@ (8009138 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008f36:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	f013 0f10 	tst.w	r3, #16
 8008f40:	d008      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008f42:	4a7c      	ldr	r2, [pc, #496]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008f44:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8008f48:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8008f4c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	f013 0f20 	tst.w	r3, #32
 8008f5a:	d00d      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f5c:	4a75      	ldr	r2, [pc, #468]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008f5e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8008f62:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8008f66:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008f68:	430b      	orrs	r3, r1
 8008f6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8008f6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f74:	f000 80dc 	beq.w	8009130 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008f7e:	d008      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008f80:	4a6c      	ldr	r2, [pc, #432]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008f82:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8008f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f8a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008f92:	2d00      	cmp	r5, #0
 8008f94:	f040 80d6 	bne.w	8009144 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	2b80      	cmp	r3, #128	@ 0x80
 8008f9c:	f000 80d2 	beq.w	8009144 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008fa6:	d008      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fa8:	4a62      	ldr	r2, [pc, #392]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008faa:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008fae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fb4:	430b      	orrs	r3, r1
 8008fb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8008fc0:	d008      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008fc4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008fc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008fce:	430b      	orrs	r3, r1
 8008fd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8008fda:	d008      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008fdc:	4a55      	ldr	r2, [pc, #340]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008fde:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008fe2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fe6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008fe8:	430b      	orrs	r3, r1
 8008fea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8008ff4:	d008      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8008ff6:	4a4f      	ldr	r2, [pc, #316]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008ff8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8008ffc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009000:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8009002:	430b      	orrs	r3, r1
 8009004:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800900e:	f000 811e 	beq.w	800924e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009012:	4a48      	ldr	r2, [pc, #288]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8009014:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8009018:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800901c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800901e:	430b      	orrs	r3, r1
 8009020:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009024:	2000      	movs	r0, #0
}
 8009026:	b002      	add	sp, #8
 8009028:	bd70      	pop	{r4, r5, r6, pc}
      plli2sused = 1U;
 800902a:	2501      	movs	r5, #1
 800902c:	e73f      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x2a>
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800902e:	4941      	ldr	r1, [pc, #260]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8009030:	f8d1 308c 	ldr.w	r3, [r1, #140]	@ 0x8c
 8009034:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8009038:	6962      	ldr	r2, [r4, #20]
 800903a:	3a01      	subs	r2, #1
 800903c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8009044:	e757      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8009046:	493b      	ldr	r1, [pc, #236]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8009048:	f8d1 308c 	ldr.w	r3, [r1, #140]	@ 0x8c
 800904c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8009050:	6962      	ldr	r2, [r4, #20]
 8009052:	3a01      	subs	r2, #1
 8009054:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009058:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 800905c:	e75f      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_PWR_CLK_ENABLE();
 800905e:	2300      	movs	r3, #0
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	4b34      	ldr	r3, [pc, #208]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8009064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009066:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800906a:	641a      	str	r2, [r3, #64]	@ 0x40
 800906c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8009076:	4a31      	ldr	r2, [pc, #196]	@ (800913c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8009078:	6813      	ldr	r3, [r2, #0]
 800907a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800907e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009080:	f7fd f888 	bl	8006194 <HAL_GetTick>
 8009084:	4606      	mov	r6, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009086:	4b2d      	ldr	r3, [pc, #180]	@ (800913c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800908e:	d106      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x21a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009090:	f7fd f880 	bl	8006194 <HAL_GetTick>
 8009094:	1b80      	subs	r0, r0, r6
 8009096:	2802      	cmp	r0, #2
 8009098:	d9f5      	bls.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x202>
        return HAL_TIMEOUT;
 800909a:	2003      	movs	r0, #3
 800909c:	e7c3      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800909e:	4b25      	ldr	r3, [pc, #148]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80090a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80090a2:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80090a6:	d014      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80090a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80090aa:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d00f      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090b2:	4b20      	ldr	r3, [pc, #128]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80090b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80090b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80090ba:	4921      	ldr	r1, [pc, #132]	@ (8009140 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090bc:	2001      	movs	r0, #1
 80090be:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090c2:	2000      	movs	r0, #0
 80090c4:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 80090c8:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80090ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090cc:	f013 0f01 	tst.w	r3, #1
 80090d0:	d112      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80090d4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80090d8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80090dc:	d01d      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80090de:	4a15      	ldr	r2, [pc, #84]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80090e0:	6893      	ldr	r3, [r2, #8]
 80090e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80090e6:	6093      	str	r3, [r2, #8]
 80090e8:	4912      	ldr	r1, [pc, #72]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80090ea:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80090ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80090ee:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80090f2:	4313      	orrs	r3, r2
 80090f4:	670b      	str	r3, [r1, #112]	@ 0x70
 80090f6:	e717      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 80090f8:	f7fd f84c 	bl	8006194 <HAL_GetTick>
 80090fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8009100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009102:	f013 0f02 	tst.w	r3, #2
 8009106:	d1e4      	bne.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009108:	f7fd f844 	bl	8006194 <HAL_GetTick>
 800910c:	1b80      	subs	r0, r0, r6
 800910e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009112:	4298      	cmp	r0, r3
 8009114:	d9f3      	bls.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
            return HAL_TIMEOUT;
 8009116:	2003      	movs	r0, #3
 8009118:	e785      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800911a:	4906      	ldr	r1, [pc, #24]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800911c:	688a      	ldr	r2, [r1, #8]
 800911e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8009122:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800912a:	4313      	orrs	r3, r2
 800912c:	608b      	str	r3, [r1, #8]
 800912e:	e7db      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      plli2sused = 1U;
 8009130:	2501      	movs	r5, #1
 8009132:	e721      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009134:	40023800 	.word	0x40023800
 8009138:	42471000 	.word	0x42471000
 800913c:	40007000 	.word	0x40007000
 8009140:	42470000 	.word	0x42470000
    __HAL_RCC_PLLI2S_DISABLE();
 8009144:	4b43      	ldr	r3, [pc, #268]	@ (8009254 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8009146:	2200      	movs	r2, #0
 8009148:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800914a:	f7fd f823 	bl	8006194 <HAL_GetTick>
 800914e:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009150:	4b41      	ldr	r3, [pc, #260]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009158:	d006      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800915a:	f7fd f81b 	bl	8006194 <HAL_GetTick>
 800915e:	1b40      	subs	r0, r0, r5
 8009160:	2802      	cmp	r0, #2
 8009162:	d9f5      	bls.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        return HAL_TIMEOUT;
 8009164:	2003      	movs	r0, #3
 8009166:	e75e      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8009168:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800916a:	4b3c      	ldr	r3, [pc, #240]	@ (800925c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 800916c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	f013 0f01 	tst.w	r3, #1
 8009176:	d001      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009178:	69e2      	ldr	r2, [r4, #28]
 800917a:	b1a2      	cbz	r2, 80091a6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800917c:	f013 0f02 	tst.w	r3, #2
 8009180:	d001      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x302>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8009182:	6a22      	ldr	r2, [r4, #32]
 8009184:	b17a      	cbz	r2, 80091a6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8009186:	f013 0f20 	tst.w	r3, #32
 800918a:	d003      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x310>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800918c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800918e:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8009192:	d008      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8009194:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009198:	d012      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800919a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800919c:	b983      	cbnz	r3, 80091c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800919e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80091a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091a4:	d10c      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80091a6:	6863      	ldr	r3, [r4, #4]
 80091a8:	68a2      	ldr	r2, [r4, #8]
 80091aa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80091ae:	68e2      	ldr	r2, [r4, #12]
 80091b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80091b4:	6922      	ldr	r2, [r4, #16]
 80091b6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80091ba:	4a27      	ldr	r2, [pc, #156]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80091bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA)
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80091c6:	d001      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x348>
         && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80091c8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80091ca:	b122      	cbz	r2, 80091d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80091cc:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80091d0:	d019      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x382>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80091d2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80091d4:	b9bb      	cbnz	r3, 8009206 <HAL_RCCEx_PeriphCLKConfig+0x382>
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80091d6:	4a20      	ldr	r2, [pc, #128]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80091d8:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq,
 80091dc:	6863      	ldr	r3, [r4, #4]
 80091de:	68a0      	ldr	r0, [r4, #8]
 80091e0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80091e4:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80091e8:	430b      	orrs	r3, r1
 80091ea:	6921      	ldr	r1, [r4, #16]
 80091ec:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80091f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80091f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80091f8:	f023 031f 	bic.w	r3, r3, #31
 80091fc:	69a1      	ldr	r1, [r4, #24]
 80091fe:	3901      	subs	r1, #1
 8009200:	430b      	orrs	r3, r1
 8009202:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800920c:	d00c      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800920e:	6863      	ldr	r3, [r4, #4]
 8009210:	68a2      	ldr	r2, [r4, #8]
 8009212:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009216:	68e2      	ldr	r2, [r4, #12]
 8009218:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800921c:	6922      	ldr	r2, [r4, #16]
 800921e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8009222:	4a0d      	ldr	r2, [pc, #52]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8009224:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8009228:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800922a:	2201      	movs	r2, #1
 800922c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 800922e:	f7fc ffb1 	bl	8006194 <HAL_GetTick>
 8009232:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009234:	4b08      	ldr	r3, [pc, #32]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800923c:	f47f aeb0 	bne.w	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009240:	f7fc ffa8 	bl	8006194 <HAL_GetTick>
 8009244:	1b40      	subs	r0, r0, r5
 8009246:	2802      	cmp	r0, #2
 8009248:	d9f4      	bls.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        return HAL_TIMEOUT;
 800924a:	2003      	movs	r0, #3
 800924c:	e6eb      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  return HAL_OK;
 800924e:	2000      	movs	r0, #0
 8009250:	e6e9      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8009252:	bf00      	nop
 8009254:	42470000 	.word	0x42470000
 8009258:	40023800 	.word	0x40023800
 800925c:	42471000 	.word	0x42471000

08009260 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009260:	2800      	cmp	r0, #0
 8009262:	f000 81e9 	beq.w	8009638 <HAL_RCC_OscConfig+0x3d8>
{
 8009266:	b570      	push	{r4, r5, r6, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800926c:	6803      	ldr	r3, [r0, #0]
 800926e:	f013 0f01 	tst.w	r3, #1
 8009272:	d03b      	beq.n	80092ec <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009274:	4b9f      	ldr	r3, [pc, #636]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f003 030c 	and.w	r3, r3, #12
 800927c:	2b04      	cmp	r3, #4
 800927e:	d02c      	beq.n	80092da <HAL_RCC_OscConfig+0x7a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009280:	4b9c      	ldr	r3, [pc, #624]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 030c 	and.w	r3, r3, #12
        || \
 8009288:	2b08      	cmp	r3, #8
 800928a:	d021      	beq.n	80092d0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800928c:	6863      	ldr	r3, [r4, #4]
 800928e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009292:	d04f      	beq.n	8009334 <HAL_RCC_OscConfig+0xd4>
 8009294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009298:	d052      	beq.n	8009340 <HAL_RCC_OscConfig+0xe0>
 800929a:	4b96      	ldr	r3, [pc, #600]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80092aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092ac:	6863      	ldr	r3, [r4, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d050      	beq.n	8009354 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b2:	f7fc ff6f 	bl	8006194 <HAL_GetTick>
 80092b6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092b8:	4b8e      	ldr	r3, [pc, #568]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80092c0:	d114      	bne.n	80092ec <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092c2:	f7fc ff67 	bl	8006194 <HAL_GetTick>
 80092c6:	1b40      	subs	r0, r0, r5
 80092c8:	2864      	cmp	r0, #100	@ 0x64
 80092ca:	d9f5      	bls.n	80092b8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80092cc:	2003      	movs	r0, #3
 80092ce:	e1ba      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092d0:	4b88      	ldr	r3, [pc, #544]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80092d8:	d0d8      	beq.n	800928c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092da:	4b86      	ldr	r3, [pc, #536]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80092e2:	d003      	beq.n	80092ec <HAL_RCC_OscConfig+0x8c>
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 81a8 	beq.w	800963c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	f013 0f02 	tst.w	r3, #2
 80092f2:	d054      	beq.n	800939e <HAL_RCC_OscConfig+0x13e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80092f4:	4b7f      	ldr	r3, [pc, #508]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f013 0f0c 	tst.w	r3, #12
 80092fc:	d03e      	beq.n	800937c <HAL_RCC_OscConfig+0x11c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092fe:	4b7d      	ldr	r3, [pc, #500]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f003 030c 	and.w	r3, r3, #12
        || \
 8009306:	2b08      	cmp	r3, #8
 8009308:	d033      	beq.n	8009372 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800930a:	68e3      	ldr	r3, [r4, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d068      	beq.n	80093e2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009310:	4b79      	ldr	r3, [pc, #484]	@ (80094f8 <HAL_RCC_OscConfig+0x298>)
 8009312:	2201      	movs	r2, #1
 8009314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009316:	f7fc ff3d 	bl	8006194 <HAL_GetTick>
 800931a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800931c:	4b75      	ldr	r3, [pc, #468]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f013 0f02 	tst.w	r3, #2
 8009324:	d154      	bne.n	80093d0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009326:	f7fc ff35 	bl	8006194 <HAL_GetTick>
 800932a:	1b40      	subs	r0, r0, r5
 800932c:	2802      	cmp	r0, #2
 800932e:	d9f5      	bls.n	800931c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8009330:	2003      	movs	r0, #3
 8009332:	e188      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009334:	4a6f      	ldr	r2, [pc, #444]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	e7b5      	b.n	80092ac <HAL_RCC_OscConfig+0x4c>
 8009340:	4b6c      	ldr	r3, [pc, #432]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e7ab      	b.n	80092ac <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8009354:	f7fc ff1e 	bl	8006194 <HAL_GetTick>
 8009358:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800935a:	4b66      	ldr	r3, [pc, #408]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009362:	d0c3      	beq.n	80092ec <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009364:	f7fc ff16 	bl	8006194 <HAL_GetTick>
 8009368:	1b40      	subs	r0, r0, r5
 800936a:	2864      	cmp	r0, #100	@ 0x64
 800936c:	d9f5      	bls.n	800935a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800936e:	2003      	movs	r0, #3
 8009370:	e169      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009372:	4b60      	ldr	r3, [pc, #384]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800937a:	d1c6      	bne.n	800930a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800937c:	4b5d      	ldr	r3, [pc, #372]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f013 0f02 	tst.w	r3, #2
 8009384:	d003      	beq.n	800938e <HAL_RCC_OscConfig+0x12e>
 8009386:	68e3      	ldr	r3, [r4, #12]
 8009388:	2b01      	cmp	r3, #1
 800938a:	f040 8159 	bne.w	8009640 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800938e:	4a59      	ldr	r2, [pc, #356]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009390:	6813      	ldr	r3, [r2, #0]
 8009392:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009396:	6921      	ldr	r1, [r4, #16]
 8009398:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800939c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	f013 0f08 	tst.w	r3, #8
 80093a4:	d042      	beq.n	800942c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80093a6:	6963      	ldr	r3, [r4, #20]
 80093a8:	b36b      	cbz	r3, 8009406 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093aa:	4b53      	ldr	r3, [pc, #332]	@ (80094f8 <HAL_RCC_OscConfig+0x298>)
 80093ac:	2201      	movs	r2, #1
 80093ae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b2:	f7fc feef 	bl	8006194 <HAL_GetTick>
 80093b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093b8:	4b4e      	ldr	r3, [pc, #312]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80093ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093bc:	f013 0f02 	tst.w	r3, #2
 80093c0:	d134      	bne.n	800942c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093c2:	f7fc fee7 	bl	8006194 <HAL_GetTick>
 80093c6:	1b40      	subs	r0, r0, r5
 80093c8:	2802      	cmp	r0, #2
 80093ca:	d9f5      	bls.n	80093b8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80093cc:	2003      	movs	r0, #3
 80093ce:	e13a      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093d0:	4a48      	ldr	r2, [pc, #288]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80093d8:	6921      	ldr	r1, [r4, #16]
 80093da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	e7dd      	b.n	800939e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80093e2:	4b45      	ldr	r3, [pc, #276]	@ (80094f8 <HAL_RCC_OscConfig+0x298>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80093e8:	f7fc fed4 	bl	8006194 <HAL_GetTick>
 80093ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ee:	4b41      	ldr	r3, [pc, #260]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f013 0f02 	tst.w	r3, #2
 80093f6:	d0d2      	beq.n	800939e <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093f8:	f7fc fecc 	bl	8006194 <HAL_GetTick>
 80093fc:	1b40      	subs	r0, r0, r5
 80093fe:	2802      	cmp	r0, #2
 8009400:	d9f5      	bls.n	80093ee <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8009402:	2003      	movs	r0, #3
 8009404:	e11f      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009406:	4b3c      	ldr	r3, [pc, #240]	@ (80094f8 <HAL_RCC_OscConfig+0x298>)
 8009408:	2200      	movs	r2, #0
 800940a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940e:	f7fc fec1 	bl	8006194 <HAL_GetTick>
 8009412:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009414:	4b37      	ldr	r3, [pc, #220]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009418:	f013 0f02 	tst.w	r3, #2
 800941c:	d006      	beq.n	800942c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800941e:	f7fc feb9 	bl	8006194 <HAL_GetTick>
 8009422:	1b40      	subs	r0, r0, r5
 8009424:	2802      	cmp	r0, #2
 8009426:	d9f5      	bls.n	8009414 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8009428:	2003      	movs	r0, #3
 800942a:	e10c      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	f013 0f04 	tst.w	r3, #4
 8009432:	d077      	beq.n	8009524 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009434:	4b2f      	ldr	r3, [pc, #188]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009438:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800943c:	d133      	bne.n	80094a6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800943e:	2300      	movs	r3, #0
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	4b2c      	ldr	r3, [pc, #176]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 8009444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009446:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800944a:	641a      	str	r2, [r3, #64]	@ 0x40
 800944c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009452:	9301      	str	r3, [sp, #4]
 8009454:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009456:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009458:	4b28      	ldr	r3, [pc, #160]	@ (80094fc <HAL_RCC_OscConfig+0x29c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009460:	d023      	beq.n	80094aa <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d034      	beq.n	80094d2 <HAL_RCC_OscConfig+0x272>
 8009468:	2b05      	cmp	r3, #5
 800946a:	d038      	beq.n	80094de <HAL_RCC_OscConfig+0x27e>
 800946c:	4b21      	ldr	r3, [pc, #132]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 800946e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	671a      	str	r2, [r3, #112]	@ 0x70
 8009476:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009478:	f022 0204 	bic.w	r2, r2, #4
 800947c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800947e:	68a3      	ldr	r3, [r4, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d03d      	beq.n	8009500 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009484:	f7fc fe86 	bl	8006194 <HAL_GetTick>
 8009488:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800948a:	4b1a      	ldr	r3, [pc, #104]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 800948c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948e:	f013 0f02 	tst.w	r3, #2
 8009492:	d146      	bne.n	8009522 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009494:	f7fc fe7e 	bl	8006194 <HAL_GetTick>
 8009498:	1b80      	subs	r0, r0, r6
 800949a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800949e:	4298      	cmp	r0, r3
 80094a0:	d9f3      	bls.n	800948a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80094a2:	2003      	movs	r0, #3
 80094a4:	e0cf      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
    FlagStatus       pwrclkchanged = RESET;
 80094a6:	2500      	movs	r5, #0
 80094a8:	e7d6      	b.n	8009458 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094aa:	4a14      	ldr	r2, [pc, #80]	@ (80094fc <HAL_RCC_OscConfig+0x29c>)
 80094ac:	6813      	ldr	r3, [r2, #0]
 80094ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80094b4:	f7fc fe6e 	bl	8006194 <HAL_GetTick>
 80094b8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ba:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <HAL_RCC_OscConfig+0x29c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80094c2:	d1ce      	bne.n	8009462 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c4:	f7fc fe66 	bl	8006194 <HAL_GetTick>
 80094c8:	1b80      	subs	r0, r0, r6
 80094ca:	2802      	cmp	r0, #2
 80094cc:	d9f5      	bls.n	80094ba <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80094ce:	2003      	movs	r0, #3
 80094d0:	e0b9      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094d2:	4a08      	ldr	r2, [pc, #32]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80094d4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80094d6:	f043 0301 	orr.w	r3, r3, #1
 80094da:	6713      	str	r3, [r2, #112]	@ 0x70
 80094dc:	e7cf      	b.n	800947e <HAL_RCC_OscConfig+0x21e>
 80094de:	4b05      	ldr	r3, [pc, #20]	@ (80094f4 <HAL_RCC_OscConfig+0x294>)
 80094e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80094e2:	f042 0204 	orr.w	r2, r2, #4
 80094e6:	671a      	str	r2, [r3, #112]	@ 0x70
 80094e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80094ea:	f042 0201 	orr.w	r2, r2, #1
 80094ee:	671a      	str	r2, [r3, #112]	@ 0x70
 80094f0:	e7c5      	b.n	800947e <HAL_RCC_OscConfig+0x21e>
 80094f2:	bf00      	nop
 80094f4:	40023800 	.word	0x40023800
 80094f8:	42470000 	.word	0x42470000
 80094fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009500:	f7fc fe48 	bl	8006194 <HAL_GetTick>
 8009504:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009506:	4b58      	ldr	r3, [pc, #352]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 8009508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800950a:	f013 0f02 	tst.w	r3, #2
 800950e:	d008      	beq.n	8009522 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009510:	f7fc fe40 	bl	8006194 <HAL_GetTick>
 8009514:	1b80      	subs	r0, r0, r6
 8009516:	f241 3388 	movw	r3, #5000	@ 0x1388
 800951a:	4298      	cmp	r0, r3
 800951c:	d9f3      	bls.n	8009506 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800951e:	2003      	movs	r0, #3
 8009520:	e091      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009522:	b9ed      	cbnz	r5, 8009560 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009524:	69a3      	ldr	r3, [r4, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 808c 	beq.w	8009644 <HAL_RCC_OscConfig+0x3e4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800952c:	4a4e      	ldr	r2, [pc, #312]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 800952e:	6892      	ldr	r2, [r2, #8]
 8009530:	f002 020c 	and.w	r2, r2, #12
 8009534:	2a08      	cmp	r2, #8
 8009536:	d054      	beq.n	80095e2 <HAL_RCC_OscConfig+0x382>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009538:	2b02      	cmp	r3, #2
 800953a:	d017      	beq.n	800956c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800953c:	4b4b      	ldr	r3, [pc, #300]	@ (800966c <HAL_RCC_OscConfig+0x40c>)
 800953e:	2200      	movs	r2, #0
 8009540:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009542:	f7fc fe27 	bl	8006194 <HAL_GetTick>
 8009546:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009548:	4b47      	ldr	r3, [pc, #284]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009550:	d045      	beq.n	80095de <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009552:	f7fc fe1f 	bl	8006194 <HAL_GetTick>
 8009556:	1b00      	subs	r0, r0, r4
 8009558:	2802      	cmp	r0, #2
 800955a:	d9f5      	bls.n	8009548 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800955c:	2003      	movs	r0, #3
 800955e:	e072      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009560:	4a41      	ldr	r2, [pc, #260]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 8009562:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8009564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009568:	6413      	str	r3, [r2, #64]	@ 0x40
 800956a:	e7db      	b.n	8009524 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800956c:	4b3f      	ldr	r3, [pc, #252]	@ (800966c <HAL_RCC_OscConfig+0x40c>)
 800956e:	2200      	movs	r2, #0
 8009570:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8009572:	f7fc fe0f 	bl	8006194 <HAL_GetTick>
 8009576:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009578:	4b3b      	ldr	r3, [pc, #236]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8009580:	d006      	beq.n	8009590 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009582:	f7fc fe07 	bl	8006194 <HAL_GetTick>
 8009586:	1b40      	subs	r0, r0, r5
 8009588:	2802      	cmp	r0, #2
 800958a:	d9f5      	bls.n	8009578 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800958c:	2003      	movs	r0, #3
 800958e:	e05a      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009590:	69e3      	ldr	r3, [r4, #28]
 8009592:	6a22      	ldr	r2, [r4, #32]
 8009594:	4313      	orrs	r3, r2
 8009596:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009598:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800959c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800959e:	0852      	lsrs	r2, r2, #1
 80095a0:	3a01      	subs	r2, #1
 80095a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80095a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80095ac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80095ae:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80095b2:	4a2d      	ldr	r2, [pc, #180]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 80095b4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80095b6:	4b2d      	ldr	r3, [pc, #180]	@ (800966c <HAL_RCC_OscConfig+0x40c>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80095bc:	f7fc fdea 	bl	8006194 <HAL_GetTick>
 80095c0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095c2:	4b29      	ldr	r3, [pc, #164]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80095ca:	d106      	bne.n	80095da <HAL_RCC_OscConfig+0x37a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095cc:	f7fc fde2 	bl	8006194 <HAL_GetTick>
 80095d0:	1b00      	subs	r0, r0, r4
 80095d2:	2802      	cmp	r0, #2
 80095d4:	d9f5      	bls.n	80095c2 <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 80095d6:	2003      	movs	r0, #3
 80095d8:	e035      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80095da:	2000      	movs	r0, #0
 80095dc:	e033      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
 80095de:	2000      	movs	r0, #0
 80095e0:	e031      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d031      	beq.n	800964a <HAL_RCC_OscConfig+0x3ea>
        pll_config = RCC->PLLCFGR;
 80095e6:	4b20      	ldr	r3, [pc, #128]	@ (8009668 <HAL_RCC_OscConfig+0x408>)
 80095e8:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ea:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80095ee:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095f0:	4291      	cmp	r1, r2
 80095f2:	d12c      	bne.n	800964e <HAL_RCC_OscConfig+0x3ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095f4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80095f8:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095fa:	428a      	cmp	r2, r1
 80095fc:	d129      	bne.n	8009652 <HAL_RCC_OscConfig+0x3f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009600:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8009604:	401a      	ands	r2, r3
 8009606:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800960a:	d124      	bne.n	8009656 <HAL_RCC_OscConfig+0x3f6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800960c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8009610:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009612:	0852      	lsrs	r2, r2, #1
 8009614:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009616:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800961a:	d11e      	bne.n	800965a <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800961c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009620:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009622:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8009626:	d11a      	bne.n	800965e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009628:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800962c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800962e:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8009632:	d116      	bne.n	8009662 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8009634:	2000      	movs	r0, #0
 8009636:	e006      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
    return HAL_ERROR;
 8009638:	2001      	movs	r0, #1
}
 800963a:	4770      	bx	lr
        return HAL_ERROR;
 800963c:	2001      	movs	r0, #1
 800963e:	e002      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
        return HAL_ERROR;
 8009640:	2001      	movs	r0, #1
 8009642:	e000      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
  return HAL_OK;
 8009644:	2000      	movs	r0, #0
}
 8009646:	b002      	add	sp, #8
 8009648:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800964a:	2001      	movs	r0, #1
 800964c:	e7fb      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
          return HAL_ERROR;
 800964e:	2001      	movs	r0, #1
 8009650:	e7f9      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
 8009652:	2001      	movs	r0, #1
 8009654:	e7f7      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
 8009656:	2001      	movs	r0, #1
 8009658:	e7f5      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
 800965a:	2001      	movs	r0, #1
 800965c:	e7f3      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
 800965e:	2001      	movs	r0, #1
 8009660:	e7f1      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
 8009662:	2001      	movs	r0, #1
 8009664:	e7ef      	b.n	8009646 <HAL_RCC_OscConfig+0x3e6>
 8009666:	bf00      	nop
 8009668:	40023800 	.word	0x40023800
 800966c:	42470000 	.word	0x42470000

08009670 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009674:	6803      	ldr	r3, [r0, #0]
 8009676:	4a0a      	ldr	r2, [pc, #40]	@ (80096a0 <HAL_RTC_WaitForSynchro+0x30>)
 8009678:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800967a:	f7fc fd8b 	bl	8006194 <HAL_GetTick>
 800967e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f013 0f20 	tst.w	r3, #32
 8009688:	d107      	bne.n	800969a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800968a:	f7fc fd83 	bl	8006194 <HAL_GetTick>
 800968e:	1b40      	subs	r0, r0, r5
 8009690:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009694:	d9f4      	bls.n	8009680 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 8009696:	2003      	movs	r0, #3
 8009698:	e000      	b.n	800969c <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 800969a:	2000      	movs	r0, #0
}
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	00013f5f 	.word	0x00013f5f

080096a4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80096a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80096a6:	6803      	ldr	r3, [r0, #0]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80096ae:	d002      	beq.n	80096b6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80096b0:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 80096b2:	4628      	mov	r0, r5
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	4604      	mov	r4, r0
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80096be:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80096c0:	f7fc fd68 	bl	8006194 <HAL_GetTick>
 80096c4:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80096d0:	d1ef      	bne.n	80096b2 <RTC_EnterInitMode+0xe>
 80096d2:	2d00      	cmp	r5, #0
 80096d4:	d1ed      	bne.n	80096b2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096d6:	f7fc fd5d 	bl	8006194 <HAL_GetTick>
 80096da:	1b83      	subs	r3, r0, r6
 80096dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096e0:	d9f2      	bls.n	80096c8 <RTC_EnterInitMode+0x24>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80096e2:	2304      	movs	r3, #4
 80096e4:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 80096e6:	2501      	movs	r5, #1
 80096e8:	e7ee      	b.n	80096c8 <RTC_EnterInitMode+0x24>

080096ea <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80096ea:	6802      	ldr	r2, [r0, #0]
 80096ec:	68d3      	ldr	r3, [r2, #12]
 80096ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096f2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80096f4:	6803      	ldr	r3, [r0, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f013 0f20 	tst.w	r3, #32
 80096fc:	d001      	beq.n	8009702 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80096fe:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8009700:	4770      	bx	lr
{
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009706:	f7ff ffb3 	bl	8009670 <HAL_RTC_WaitForSynchro>
 800970a:	b110      	cbz	r0, 8009712 <RTC_ExitInitMode+0x28>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800970c:	2304      	movs	r3, #4
 800970e:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8009710:	2001      	movs	r0, #1
}
 8009712:	bd10      	pop	{r4, pc}

08009714 <HAL_RTC_Init>:
  if (hrtc == NULL)
 8009714:	2800      	cmp	r0, #0
 8009716:	d04a      	beq.n	80097ae <HAL_RTC_Init+0x9a>
{
 8009718:	b510      	push	{r4, lr}
 800971a:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800971c:	7f43      	ldrb	r3, [r0, #29]
 800971e:	b153      	cbz	r3, 8009736 <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009720:	2302      	movs	r3, #2
 8009722:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	f012 0f10 	tst.w	r2, #16
 800972c:	d007      	beq.n	800973e <HAL_RTC_Init+0x2a>
    status = HAL_OK;
 800972e:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 8009730:	2301      	movs	r3, #1
 8009732:	7763      	strb	r3, [r4, #29]
}
 8009734:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8009736:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8009738:	f7fe ff6c 	bl	8008614 <HAL_RTC_MspInit>
 800973c:	e7f0      	b.n	8009720 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800973e:	22ca      	movs	r2, #202	@ 0xca
 8009740:	625a      	str	r2, [r3, #36]	@ 0x24
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	2253      	movs	r2, #83	@ 0x53
 8009746:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8009748:	4620      	mov	r0, r4
 800974a:	f7ff ffab 	bl	80096a4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800974e:	b128      	cbz	r0, 800975c <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	22ff      	movs	r2, #255	@ 0xff
 8009754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8009756:	2800      	cmp	r0, #0
 8009758:	d1ec      	bne.n	8009734 <HAL_RTC_Init+0x20>
 800975a:	e7e9      	b.n	8009730 <HAL_RTC_Init+0x1c>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800975c:	6822      	ldr	r2, [r4, #0]
 800975e:	6893      	ldr	r3, [r2, #8]
 8009760:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009768:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800976a:	6821      	ldr	r1, [r4, #0]
 800976c:	688a      	ldr	r2, [r1, #8]
 800976e:	6863      	ldr	r3, [r4, #4]
 8009770:	6920      	ldr	r0, [r4, #16]
 8009772:	4303      	orrs	r3, r0
 8009774:	6960      	ldr	r0, [r4, #20]
 8009776:	4303      	orrs	r3, r0
 8009778:	4313      	orrs	r3, r2
 800977a:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	68e2      	ldr	r2, [r4, #12]
 8009780:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	6913      	ldr	r3, [r2, #16]
 8009786:	68a1      	ldr	r1, [r4, #8]
 8009788:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800978c:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800978e:	4620      	mov	r0, r4
 8009790:	f7ff ffab 	bl	80096ea <RTC_ExitInitMode>
    if (status == HAL_OK)
 8009794:	2800      	cmp	r0, #0
 8009796:	d1db      	bne.n	8009750 <HAL_RTC_Init+0x3c>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009798:	6822      	ldr	r2, [r4, #0]
 800979a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800979c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097a0:	6413      	str	r3, [r2, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80097a6:	69a1      	ldr	r1, [r4, #24]
 80097a8:	430b      	orrs	r3, r1
 80097aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80097ac:	e7d0      	b.n	8009750 <HAL_RTC_Init+0x3c>
    return HAL_ERROR;
 80097ae:	2001      	movs	r0, #1
}
 80097b0:	4770      	bx	lr

080097b2 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 80097b2:	2300      	movs	r3, #0

  while (number >= 10U)
 80097b4:	e002      	b.n	80097bc <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80097b6:	3301      	adds	r3, #1
    number -= 10U;
 80097b8:	380a      	subs	r0, #10
 80097ba:	b2c0      	uxtb	r0, r0
  while (number >= 10U)
 80097bc:	2809      	cmp	r0, #9
 80097be:	d8fa      	bhi.n	80097b6 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	b2db      	uxtb	r3, r3
}
 80097c4:	4318      	orrs	r0, r3
 80097c6:	4770      	bx	lr

080097c8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80097c8:	7f03      	ldrb	r3, [r0, #28]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d05a      	beq.n	8009884 <HAL_RTC_SetTime+0xbc>
{
 80097ce:	b570      	push	{r4, r5, r6, lr}
 80097d0:	4604      	mov	r4, r0
 80097d2:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 80097d4:	2301      	movs	r3, #1
 80097d6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80097d8:	2302      	movs	r3, #2
 80097da:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 80097dc:	bb32      	cbnz	r2, 800982c <HAL_RTC_SetTime+0x64>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097de:	6803      	ldr	r3, [r0, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80097e6:	d101      	bne.n	80097ec <HAL_RTC_SetTime+0x24>
      sTime->TimeFormat = 0x00U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097ec:	7830      	ldrb	r0, [r6, #0]
 80097ee:	f7ff ffe0 	bl	80097b2 <RTC_ByteToBcd2>
 80097f2:	0405      	lsls	r5, r0, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097f4:	7870      	ldrb	r0, [r6, #1]
 80097f6:	f7ff ffdc 	bl	80097b2 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80097fa:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80097fe:	78b0      	ldrb	r0, [r6, #2]
 8009800:	f7ff ffd7 	bl	80097b2 <RTC_ByteToBcd2>
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009804:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009806:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009808:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	22ca      	movs	r2, #202	@ 0xca
 8009810:	625a      	str	r2, [r3, #36]	@ 0x24
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	2253      	movs	r2, #83	@ 0x53
 8009816:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8009818:	4620      	mov	r0, r4
 800981a:	f7ff ff43 	bl	80096a4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800981e:	b1b8      	cbz	r0, 8009850 <HAL_RTC_SetTime+0x88>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	22ff      	movs	r2, #255	@ 0xff
 8009824:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8009826:	2300      	movs	r3, #0
 8009828:	7723      	strb	r3, [r4, #28]
}
 800982a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800982c:	6803      	ldr	r3, [r0, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009834:	d101      	bne.n	800983a <HAL_RTC_SetTime+0x72>
      sTime->TimeFormat = 0x00U;
 8009836:	2300      	movs	r3, #0
 8009838:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800983a:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800983c:	7875      	ldrb	r5, [r6, #1]
 800983e:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009840:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sTime->Seconds)                       | \
 8009844:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009846:	431d      	orrs	r5, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009848:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800984a:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
 800984e:	e7dd      	b.n	800980c <HAL_RTC_SetTime+0x44>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	f005 357f 	and.w	r5, r5, #2139062143	@ 0x7f7f7f7f
 8009856:	f025 45fe 	bic.w	r5, r5, #2130706432	@ 0x7f000000
 800985a:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	6893      	ldr	r3, [r2, #8]
 8009860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009864:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009866:	6821      	ldr	r1, [r4, #0]
 8009868:	688b      	ldr	r3, [r1, #8]
 800986a:	68f2      	ldr	r2, [r6, #12]
 800986c:	6930      	ldr	r0, [r6, #16]
 800986e:	4302      	orrs	r2, r0
 8009870:	4313      	orrs	r3, r2
 8009872:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 8009874:	4620      	mov	r0, r4
 8009876:	f7ff ff38 	bl	80096ea <RTC_ExitInitMode>
  if (status == HAL_OK)
 800987a:	2800      	cmp	r0, #0
 800987c:	d1d0      	bne.n	8009820 <HAL_RTC_SetTime+0x58>
    hrtc->State = HAL_RTC_STATE_READY;
 800987e:	2301      	movs	r3, #1
 8009880:	7763      	strb	r3, [r4, #29]
 8009882:	e7cd      	b.n	8009820 <HAL_RTC_SetTime+0x58>
  __HAL_LOCK(hrtc);
 8009884:	2002      	movs	r0, #2
}
 8009886:	4770      	bx	lr

08009888 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8009888:	7f03      	ldrb	r3, [r0, #28]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d048      	beq.n	8009920 <HAL_RTC_SetDate+0x98>
{
 800988e:	b570      	push	{r4, r5, r6, lr}
 8009890:	4604      	mov	r4, r0
 8009892:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8009894:	2301      	movs	r3, #1
 8009896:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009898:	2302      	movs	r3, #2
 800989a:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800989c:	b1ca      	cbz	r2, 80098d2 <HAL_RTC_SetDate+0x4a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800989e:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80098a0:	784d      	ldrb	r5, [r1, #1]
 80098a2:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80098a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  ((uint32_t) sDate->Date)                      | \
 80098a8:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80098aa:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80098ac:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80098ae:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	22ca      	movs	r2, #202	@ 0xca
 80098b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	2253      	movs	r2, #83	@ 0x53
 80098bc:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80098be:	4620      	mov	r0, r4
 80098c0:	f7ff fef0 	bl	80096a4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80098c4:	b1f0      	cbz	r0, 8009904 <HAL_RTC_SetDate+0x7c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	22ff      	movs	r2, #255	@ 0xff
 80098ca:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80098cc:	2300      	movs	r3, #0
 80098ce:	7723      	strb	r3, [r4, #28]
}
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80098d2:	784b      	ldrb	r3, [r1, #1]
 80098d4:	f013 0f10 	tst.w	r3, #16
 80098d8:	d003      	beq.n	80098e2 <HAL_RTC_SetDate+0x5a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80098da:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80098de:	330a      	adds	r3, #10
 80098e0:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80098e2:	78f0      	ldrb	r0, [r6, #3]
 80098e4:	f7ff ff65 	bl	80097b2 <RTC_ByteToBcd2>
 80098e8:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098ea:	7870      	ldrb	r0, [r6, #1]
 80098ec:	f7ff ff61 	bl	80097b2 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80098f0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80098f4:	78b0      	ldrb	r0, [r6, #2]
 80098f6:	f7ff ff5c 	bl	80097b2 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098fa:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80098fc:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80098fe:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 8009902:	e7d6      	b.n	80098b2 <HAL_RTC_SetDate+0x2a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 800990a:	f025 05c0 	bic.w	r5, r5, #192	@ 0xc0
 800990e:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8009910:	4620      	mov	r0, r4
 8009912:	f7ff feea 	bl	80096ea <RTC_ExitInitMode>
  if (status == HAL_OK)
 8009916:	2800      	cmp	r0, #0
 8009918:	d1d5      	bne.n	80098c6 <HAL_RTC_SetDate+0x3e>
    hrtc->State = HAL_RTC_STATE_READY;
 800991a:	2301      	movs	r3, #1
 800991c:	7763      	strb	r3, [r4, #29]
 800991e:	e7d2      	b.n	80098c6 <HAL_RTC_SetDate+0x3e>
  __HAL_LOCK(hrtc);
 8009920:	2002      	movs	r0, #2
}
 8009922:	4770      	bx	lr

08009924 <HAL_RTC_SetAlarm>:
{
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8009926:	7f03      	ldrb	r3, [r0, #28]
 8009928:	2b01      	cmp	r3, #1
 800992a:	f000 80b5 	beq.w	8009a98 <HAL_RTC_SetAlarm+0x174>
 800992e:	4604      	mov	r4, r0
 8009930:	460e      	mov	r6, r1
 8009932:	2301      	movs	r3, #1
 8009934:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009936:	2302      	movs	r3, #2
 8009938:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 800993a:	2a00      	cmp	r2, #0
 800993c:	d153      	bne.n	80099e6 <HAL_RTC_SetAlarm+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800993e:	6803      	ldr	r3, [r0, #0]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009946:	d101      	bne.n	800994c <HAL_RTC_SetAlarm+0x28>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009948:	2300      	movs	r3, #0
 800994a:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800994c:	7830      	ldrb	r0, [r6, #0]
 800994e:	f7ff ff30 	bl	80097b2 <RTC_ByteToBcd2>
 8009952:	0405      	lsls	r5, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009954:	7870      	ldrb	r0, [r6, #1]
 8009956:	f7ff ff2c 	bl	80097b2 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800995a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800995e:	78b0      	ldrb	r0, [r6, #2]
 8009960:	f7ff ff27 	bl	80097b2 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009964:	4305      	orrs	r5, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009966:	78f3      	ldrb	r3, [r6, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009968:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800996c:	f896 0020 	ldrb.w	r0, [r6, #32]
 8009970:	f7ff ff1f 	bl	80097b2 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009974:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009978:	69f3      	ldr	r3, [r6, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800997a:	431d      	orrs	r5, r3
              ((uint32_t)sAlarm->AlarmMask));
 800997c:	6973      	ldr	r3, [r6, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800997e:	431d      	orrs	r5, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009980:	6877      	ldr	r7, [r6, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009982:	69b3      	ldr	r3, [r6, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009984:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	22ca      	movs	r2, #202	@ 0xca
 800998a:	625a      	str	r2, [r3, #36]	@ 0x24
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	2253      	movs	r2, #83	@ 0x53
 8009990:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009992:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8009994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009998:	d03f      	beq.n	8009a1a <HAL_RTC_SetAlarm+0xf6>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800999a:	6822      	ldr	r2, [r4, #0]
 800999c:	6893      	ldr	r3, [r2, #8]
 800999e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099a2:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	6893      	ldr	r3, [r2, #8]
 80099a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80099ac:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80099ae:	6822      	ldr	r2, [r4, #0]
 80099b0:	68d3      	ldr	r3, [r2, #12]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f463 7320 	orn	r3, r3, #640	@ 0x280
 80099b8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80099ba:	f7fc fbeb 	bl	8006194 <HAL_GetTick>
 80099be:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	f012 0f02 	tst.w	r2, #2
 80099c8:	d156      	bne.n	8009a78 <HAL_RTC_SetAlarm+0x154>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099ca:	f7fc fbe3 	bl	8006194 <HAL_GetTick>
 80099ce:	1b80      	subs	r0, r0, r6
 80099d0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80099d4:	d9f4      	bls.n	80099c0 <HAL_RTC_SetAlarm+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	22ff      	movs	r2, #255	@ 0xff
 80099da:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099dc:	2003      	movs	r0, #3
 80099de:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80099e0:	2300      	movs	r3, #0
 80099e2:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 80099e4:	e057      	b.n	8009a96 <HAL_RTC_SetAlarm+0x172>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80099e6:	6803      	ldr	r3, [r0, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80099ee:	d101      	bne.n	80099f4 <HAL_RTC_SetAlarm+0xd0>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80099f4:	7833      	ldrb	r3, [r6, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80099f6:	7875      	ldrb	r5, [r6, #1]
 80099f8:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80099fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80099fe:	78b3      	ldrb	r3, [r6, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009a00:	431d      	orrs	r5, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009a02:	78f3      	ldrb	r3, [r6, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009a04:	ea45 5583 	orr.w	r5, r5, r3, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009a08:	f896 3020 	ldrb.w	r3, [r6, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009a0c:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009a10:	69f3      	ldr	r3, [r6, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009a12:	431d      	orrs	r5, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009a14:	6973      	ldr	r3, [r6, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009a16:	431d      	orrs	r5, r3
 8009a18:	e7b2      	b.n	8009980 <HAL_RTC_SetAlarm+0x5c>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	6893      	ldr	r3, [r2, #8]
 8009a1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a22:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009a24:	6822      	ldr	r2, [r4, #0]
 8009a26:	6893      	ldr	r3, [r2, #8]
 8009a28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a2c:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009a2e:	6822      	ldr	r2, [r4, #0]
 8009a30:	68d3      	ldr	r3, [r2, #12]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	f463 73c0 	orn	r3, r3, #384	@ 0x180
 8009a38:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8009a3a:	f7fc fbab 	bl	8006194 <HAL_GetTick>
 8009a3e:	4606      	mov	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	f012 0f01 	tst.w	r2, #1
 8009a48:	d10d      	bne.n	8009a66 <HAL_RTC_SetAlarm+0x142>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a4a:	f7fc fba3 	bl	8006194 <HAL_GetTick>
 8009a4e:	1b80      	subs	r0, r0, r6
 8009a50:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009a54:	d9f4      	bls.n	8009a40 <HAL_RTC_SetAlarm+0x11c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	22ff      	movs	r2, #255	@ 0xff
 8009a5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a5c:	2003      	movs	r0, #3
 8009a5e:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8009a60:	2300      	movs	r3, #0
 8009a62:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8009a64:	e017      	b.n	8009a96 <HAL_RTC_SetAlarm+0x172>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009a66:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	645f      	str	r7, [r3, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009a6c:	6822      	ldr	r2, [r4, #0]
 8009a6e:	6893      	ldr	r3, [r2, #8]
 8009a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a74:	6093      	str	r3, [r2, #8]
 8009a76:	e007      	b.n	8009a88 <HAL_RTC_SetAlarm+0x164>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009a78:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	649f      	str	r7, [r3, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009a7e:	6822      	ldr	r2, [r4, #0]
 8009a80:	6893      	ldr	r3, [r2, #8]
 8009a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a86:	6093      	str	r3, [r2, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	22ff      	movs	r2, #255	@ 0xff
 8009a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);
 8009a92:	2000      	movs	r0, #0
 8009a94:	7720      	strb	r0, [r4, #28]
}
 8009a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8009a98:	2002      	movs	r0, #2
 8009a9a:	e7fc      	b.n	8009a96 <HAL_RTC_SetAlarm+0x172>

08009a9c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8009a9c:	0903      	lsrs	r3, r0, #4
 8009a9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009aa2:	f000 000f 	and.w	r0, r0, #15
 8009aa6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8009aaa:	b2c0      	uxtb	r0, r0
 8009aac:	4770      	bx	lr

08009aae <HAL_RTC_GetTime>:
{
 8009aae:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009ab0:	6803      	ldr	r3, [r0, #0]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab4:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009ab6:	6803      	ldr	r3, [r0, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009abe:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009ac0:	6803      	ldr	r3, [r0, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009ac4:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8009ac8:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009aca:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8009ace:	704e      	strb	r6, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009ad0:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
 8009ad4:	708d      	strb	r5, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009ad6:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8009ada:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8009adc:	b95a      	cbnz	r2, 8009af6 <HAL_RTC_GetTime+0x48>
 8009ade:	460c      	mov	r4, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009ae0:	f7ff ffdc 	bl	8009a9c <RTC_Bcd2ToByte>
 8009ae4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7ff ffd8 	bl	8009a9c <RTC_Bcd2ToByte>
 8009aec:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009aee:	4628      	mov	r0, r5
 8009af0:	f7ff ffd4 	bl	8009a9c <RTC_Bcd2ToByte>
 8009af4:	70a0      	strb	r0, [r4, #2]
}
 8009af6:	2000      	movs	r0, #0
 8009af8:	bd70      	pop	{r4, r5, r6, pc}

08009afa <HAL_RTC_GetDate>:
{
 8009afa:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009afc:	6803      	ldr	r3, [r0, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b00:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009b04:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b06:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8009b0a:	704e      	strb	r6, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b0c:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 8009b10:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009b12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009b16:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8009b18:	b95a      	cbnz	r2, 8009b32 <HAL_RTC_GetDate+0x38>
 8009b1a:	460c      	mov	r4, r1
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009b1c:	f7ff ffbe 	bl	8009a9c <RTC_Bcd2ToByte>
 8009b20:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff ffba 	bl	8009a9c <RTC_Bcd2ToByte>
 8009b28:	7060      	strb	r0, [r4, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f7ff ffb6 	bl	8009a9c <RTC_Bcd2ToByte>
 8009b30:	70a0      	strb	r0, [r4, #2]
}
 8009b32:	2000      	movs	r0, #0
 8009b34:	bd70      	pop	{r4, r5, r6, pc}

08009b36 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009b3a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8009b3e:	4770      	bx	lr

08009b40 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009b40:	6803      	ldr	r3, [r0, #0]
 8009b42:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009b44:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8009b48:	4770      	bx	lr
	...

08009b4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	4605      	mov	r5, r0
 8009b54:	4688      	mov	r8, r1
 8009b56:	4617      	mov	r7, r2
 8009b58:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b5a:	f7fc fb1b 	bl	8006194 <HAL_GetTick>
 8009b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b60:	1a1b      	subs	r3, r3, r0
 8009b62:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8009b66:	f7fc fb15 	bl	8006194 <HAL_GetTick>
 8009b6a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b6c:	4b28      	ldr	r3, [pc, #160]	@ (8009c10 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8009b74:	fb09 f303 	mul.w	r3, r9, r3
 8009b78:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	689c      	ldr	r4, [r3, #8]
 8009b7e:	ea38 0404 	bics.w	r4, r8, r4
 8009b82:	bf0c      	ite	eq
 8009b84:	2301      	moveq	r3, #1
 8009b86:	2300      	movne	r3, #0
 8009b88:	42bb      	cmp	r3, r7
 8009b8a:	d03d      	beq.n	8009c08 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b8c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009b90:	d0f3      	beq.n	8009b7a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b92:	f7fc faff 	bl	8006194 <HAL_GetTick>
 8009b96:	eba0 000a 	sub.w	r0, r0, sl
 8009b9a:	4548      	cmp	r0, r9
 8009b9c:	d207      	bcs.n	8009bae <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b9e:	9a01      	ldr	r2, [sp, #4]
 8009ba0:	b102      	cbz	r2, 8009ba4 <SPI_WaitFlagStateUntilTimeout+0x58>
 8009ba2:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	4691      	mov	r9, r2
 8009bac:	e7e5      	b.n	8009b7a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bae:	682a      	ldr	r2, [r5, #0]
 8009bb0:	6853      	ldr	r3, [r2, #4]
 8009bb2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8009bb6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bb8:	686b      	ldr	r3, [r5, #4]
 8009bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bbe:	d00b      	beq.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bc0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bc6:	d014      	beq.n	8009bf2 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009bd4:	2003      	movs	r0, #3
 8009bd6:	e018      	b.n	8009c0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bd8:	68ab      	ldr	r3, [r5, #8]
 8009bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bde:	d002      	beq.n	8009be6 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009be4:	d1ec      	bne.n	8009bc0 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8009be6:	682a      	ldr	r2, [r5, #0]
 8009be8:	6813      	ldr	r3, [r2, #0]
 8009bea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	e7e6      	b.n	8009bc0 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8009bf2:	682a      	ldr	r2, [r5, #0]
 8009bf4:	6813      	ldr	r3, [r2, #0]
 8009bf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	682a      	ldr	r2, [r5, #0]
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	e7df      	b.n	8009bc8 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8009c08:	2000      	movs	r0, #0
}
 8009c0a:	b002      	add	sp, #8
 8009c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c10:	20000138 	.word	0x20000138

08009c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	4604      	mov	r4, r0
 8009c1a:	460d      	mov	r5, r1
 8009c1c:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009c1e:	9200      	str	r2, [sp, #0]
 8009c20:	460b      	mov	r3, r1
 8009c22:	2201      	movs	r2, #1
 8009c24:	2102      	movs	r1, #2
 8009c26:	f7ff ff91 	bl	8009b4c <SPI_WaitFlagStateUntilTimeout>
 8009c2a:	b9d0      	cbnz	r0, 8009c62 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c2c:	4b17      	ldr	r3, [pc, #92]	@ (8009c8c <SPI_EndRxTxTransaction+0x78>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a17      	ldr	r2, [pc, #92]	@ (8009c90 <SPI_EndRxTxTransaction+0x7c>)
 8009c32:	fba2 2303 	umull	r2, r3, r2, r3
 8009c36:	0d5b      	lsrs	r3, r3, #21
 8009c38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c3c:	fb02 f303 	mul.w	r3, r2, r3
 8009c40:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c42:	6863      	ldr	r3, [r4, #4]
 8009c44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c48:	d011      	beq.n	8009c6e <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	b13b      	cbz	r3, 8009c5e <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c5c:	d1f5      	bne.n	8009c4a <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8009c5e:	b004      	add	sp, #16
 8009c60:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009c64:	f043 0320 	orr.w	r3, r3, #32
 8009c68:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009c6a:	2003      	movs	r0, #3
 8009c6c:	e7f7      	b.n	8009c5e <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c6e:	9600      	str	r6, [sp, #0]
 8009c70:	462b      	mov	r3, r5
 8009c72:	2200      	movs	r2, #0
 8009c74:	2180      	movs	r1, #128	@ 0x80
 8009c76:	4620      	mov	r0, r4
 8009c78:	f7ff ff68 	bl	8009b4c <SPI_WaitFlagStateUntilTimeout>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d0ee      	beq.n	8009c5e <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009c82:	f043 0320 	orr.w	r3, r3, #32
 8009c86:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009c88:	2003      	movs	r0, #3
 8009c8a:	e7e8      	b.n	8009c5e <SPI_EndRxTxTransaction+0x4a>
 8009c8c:	20000138 	.word	0x20000138
 8009c90:	165e9f81 	.word	0x165e9f81

08009c94 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d05a      	beq.n	8009d4e <HAL_SPI_Init+0xba>
{
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c9c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009c9e:	b933      	cbnz	r3, 8009cae <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ca0:	6843      	ldr	r3, [r0, #4]
 8009ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ca6:	d005      	beq.n	8009cb4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	61c3      	str	r3, [r0, #28]
 8009cac:	e002      	b.n	8009cb4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009cb2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cb8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d040      	beq.n	8009d42 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8009cc6:	6822      	ldr	r2, [r4, #0]
 8009cc8:	6813      	ldr	r3, [r2, #0]
 8009cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cce:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8009cd6:	68a2      	ldr	r2, [r4, #8]
 8009cd8:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	68e2      	ldr	r2, [r4, #12]
 8009ce0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	6922      	ldr	r2, [r4, #16]
 8009ce8:	f002 0202 	and.w	r2, r2, #2
 8009cec:	4313      	orrs	r3, r2
 8009cee:	6962      	ldr	r2, [r4, #20]
 8009cf0:	f002 0201 	and.w	r2, r2, #1
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	69a2      	ldr	r2, [r4, #24]
 8009cf8:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	69e2      	ldr	r2, [r4, #28]
 8009d00:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009d04:	4313      	orrs	r3, r2
 8009d06:	6a22      	ldr	r2, [r4, #32]
 8009d08:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009d10:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009d14:	6821      	ldr	r1, [r4, #0]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d1a:	8b63      	ldrh	r3, [r4, #26]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009d22:	f002 0210 	and.w	r2, r2, #16
 8009d26:	6821      	ldr	r1, [r4, #0]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d2c:	6822      	ldr	r2, [r4, #0]
 8009d2e:	69d3      	ldr	r3, [r2, #28]
 8009d30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d34:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d36:	2000      	movs	r0, #0
 8009d38:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8009d40:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8009d42:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7fe fc88 	bl	800865c <HAL_SPI_MspInit>
 8009d4c:	e7b8      	b.n	8009cc0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8009d4e:	2001      	movs	r0, #1
}
 8009d50:	4770      	bx	lr

08009d52 <HAL_SPI_Transmit>:
{
 8009d52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d56:	b083      	sub	sp, #12
 8009d58:	4604      	mov	r4, r0
 8009d5a:	4689      	mov	r9, r1
 8009d5c:	4690      	mov	r8, r2
 8009d5e:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8009d60:	f7fc fa18 	bl	8006194 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009d64:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8009d68:	b2f6      	uxtb	r6, r6
 8009d6a:	2e01      	cmp	r6, #1
 8009d6c:	f040 80cc 	bne.w	8009f08 <HAL_SPI_Transmit+0x1b6>
 8009d70:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8009d72:	f1b9 0f00 	cmp.w	r9, #0
 8009d76:	f000 80c8 	beq.w	8009f0a <HAL_SPI_Transmit+0x1b8>
 8009d7a:	f1b8 0f00 	cmp.w	r8, #0
 8009d7e:	f000 80c4 	beq.w	8009f0a <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8009d82:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	f000 80c3 	beq.w	8009f12 <HAL_SPI_Transmit+0x1c0>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d92:	2303      	movs	r3, #3
 8009d94:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d9c:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009da0:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009da4:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009da8:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009daa:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009dac:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009dae:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009db0:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009db8:	d01e      	beq.n	8009df8 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8009dc2:	d103      	bne.n	8009dcc <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dca:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009dcc:	68e3      	ldr	r3, [r4, #12]
 8009dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dd2:	d01c      	beq.n	8009e0e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dd4:	6863      	ldr	r3, [r4, #4]
 8009dd6:	b113      	cbz	r3, 8009dde <HAL_SPI_Transmit+0x8c>
 8009dd8:	f1b8 0f01 	cmp.w	r8, #1
 8009ddc:	d15f      	bne.n	8009e9e <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dde:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009de6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009de8:	3301      	adds	r3, #1
 8009dea:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8009dec:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8009df6:	e052      	b.n	8009e9e <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8009df8:	6822      	ldr	r2, [r4, #0]
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e00:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	6813      	ldr	r3, [r2, #0]
 8009e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	e7d5      	b.n	8009dba <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	b113      	cbz	r3, 8009e18 <HAL_SPI_Transmit+0xc6>
 8009e12:	f1b8 0f01 	cmp.w	r8, #1
 8009e16:	d115      	bne.n	8009e44 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	8812      	ldrh	r2, [r2, #0]
 8009e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009e22:	3302      	adds	r3, #2
 8009e24:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e26:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8009e30:	e008      	b.n	8009e44 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e32:	f7fc f9af 	bl	8006194 <HAL_GetTick>
 8009e36:	1bc0      	subs	r0, r0, r7
 8009e38:	42a8      	cmp	r0, r5
 8009e3a:	d302      	bcc.n	8009e42 <HAL_SPI_Transmit+0xf0>
 8009e3c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009e40:	d115      	bne.n	8009e6e <HAL_SPI_Transmit+0x11c>
 8009e42:	b1a5      	cbz	r5, 8009e6e <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8009e44:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d042      	beq.n	8009ed2 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e4c:	6823      	ldr	r3, [r4, #0]
 8009e4e:	689a      	ldr	r2, [r3, #8]
 8009e50:	f012 0f02 	tst.w	r2, #2
 8009e54:	d0ed      	beq.n	8009e32 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009e58:	8812      	ldrh	r2, [r2, #0]
 8009e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009e5e:	3302      	adds	r3, #2
 8009e60:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8009e62:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	3b01      	subs	r3, #1
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8009e6c:	e7ea      	b.n	8009e44 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009e74:	2300      	movs	r3, #0
 8009e76:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009e7a:	2603      	movs	r6, #3
 8009e7c:	e045      	b.n	8009f0a <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e7e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009e86:	3301      	adds	r3, #1
 8009e88:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8009e8a:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8009e8e:	fa1f fc8c 	uxth.w	ip, ip
 8009e92:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e96:	fa1f fc8c 	uxth.w	ip, ip
 8009e9a:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8009e9e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	b1b3      	cbz	r3, 8009ed2 <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	f012 0f02 	tst.w	r2, #2
 8009eac:	d1e7      	bne.n	8009e7e <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eae:	f7fc f971 	bl	8006194 <HAL_GetTick>
 8009eb2:	1bc0      	subs	r0, r0, r7
 8009eb4:	42a8      	cmp	r0, r5
 8009eb6:	d302      	bcc.n	8009ebe <HAL_SPI_Transmit+0x16c>
 8009eb8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009ebc:	d101      	bne.n	8009ec2 <HAL_SPI_Transmit+0x170>
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	d1ed      	bne.n	8009e9e <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009ece:	2603      	movs	r6, #3
 8009ed0:	e01b      	b.n	8009f0a <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ed2:	463a      	mov	r2, r7
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7ff fe9c 	bl	8009c14 <SPI_EndRxTxTransaction>
 8009edc:	b108      	cbz	r0, 8009ee2 <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ede:	2320      	movs	r3, #32
 8009ee0:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ee2:	68a3      	ldr	r3, [r4, #8]
 8009ee4:	b933      	cbnz	r3, 8009ef4 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	9201      	str	r2, [sp, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009efa:	2300      	movs	r3, #0
 8009efc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009f02:	b913      	cbnz	r3, 8009f0a <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 8009f04:	2600      	movs	r6, #0
 8009f06:	e000      	b.n	8009f0a <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8009f08:	2602      	movs	r6, #2
}
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	b003      	add	sp, #12
 8009f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8009f12:	2602      	movs	r6, #2
 8009f14:	e7f9      	b.n	8009f0a <HAL_SPI_Transmit+0x1b8>

08009f16 <HAL_SPI_TransmitReceive>:
{
 8009f16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	4688      	mov	r8, r1
 8009f20:	4691      	mov	r9, r2
 8009f22:	461f      	mov	r7, r3
 8009f24:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8009f26:	f7fc f935 	bl	8006194 <HAL_GetTick>
 8009f2a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8009f2c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8009f30:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8009f32:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d00a      	beq.n	8009f4e <HAL_SPI_TransmitReceive+0x38>
 8009f38:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8009f3c:	f040 8105 	bne.w	800a14a <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f40:	68a2      	ldr	r2, [r4, #8]
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	f040 8105 	bne.w	800a152 <HAL_SPI_TransmitReceive+0x23c>
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	f040 8104 	bne.w	800a156 <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f4e:	f1b8 0f00 	cmp.w	r8, #0
 8009f52:	f000 8102 	beq.w	800a15a <HAL_SPI_TransmitReceive+0x244>
 8009f56:	f1b9 0f00 	cmp.w	r9, #0
 8009f5a:	f000 8100 	beq.w	800a15e <HAL_SPI_TransmitReceive+0x248>
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	f000 80ff 	beq.w	800a162 <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 8009f64:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	f000 80fc 	beq.w	800a166 <HAL_SPI_TransmitReceive+0x250>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f74:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d002      	beq.n	8009f84 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f7e:	2305      	movs	r3, #5
 8009f80:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f88:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009f8c:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009f8e:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009f90:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009f94:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009f96:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8009f98:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009f9a:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8009fa4:	d103      	bne.n	8009fae <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fac:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009fae:	68e3      	ldr	r3, [r4, #12]
 8009fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fb4:	d011      	beq.n	8009fda <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fb6:	6863      	ldr	r3, [r4, #4]
 8009fb8:	b10b      	cbz	r3, 8009fbe <HAL_SPI_TransmitReceive+0xa8>
 8009fba:	2f01      	cmp	r7, #1
 8009fbc:	d10b      	bne.n	8009fd6 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009fbe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	7812      	ldrb	r2, [r2, #0]
 8009fc4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009fc8:	3301      	adds	r3, #1
 8009fca:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8009fcc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8009fd6:	2701      	movs	r7, #1
 8009fd8:	e071      	b.n	800a0be <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fda:	6863      	ldr	r3, [r4, #4]
 8009fdc:	b10b      	cbz	r3, 8009fe2 <HAL_SPI_TransmitReceive+0xcc>
 8009fde:	2f01      	cmp	r7, #1
 8009fe0:	d10b      	bne.n	8009ffa <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009fe2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	8812      	ldrh	r2, [r2, #0]
 8009fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009fec:	3302      	adds	r3, #2
 8009fee:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8009ff0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8009ffa:	2701      	movs	r7, #1
 8009ffc:	e01b      	b.n	800a036 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	f012 0f01 	tst.w	r2, #1
 800a006:	d00e      	beq.n	800a026 <HAL_SPI_TransmitReceive+0x110>
 800a008:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800a00a:	b292      	uxth	r2, r2
 800a00c:	b15a      	cbz	r2, 800a026 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a012:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a014:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a016:	3302      	adds	r3, #2
 800a018:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800a01a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	3b01      	subs	r3, #1
 800a020:	b29b      	uxth	r3, r3
 800a022:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800a024:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a026:	f7fc f8b5 	bl	8006194 <HAL_GetTick>
 800a02a:	1b80      	subs	r0, r0, r6
 800a02c:	42a8      	cmp	r0, r5
 800a02e:	d302      	bcc.n	800a036 <HAL_SPI_TransmitReceive+0x120>
 800a030:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a034:	d11e      	bne.n	800a074 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a036:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800a038:	b29b      	uxth	r3, r3
 800a03a:	b91b      	cbnz	r3, 800a044 <HAL_SPI_TransmitReceive+0x12e>
 800a03c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d062      	beq.n	800a10a <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	f012 0f02 	tst.w	r2, #2
 800a04c:	d0d7      	beq.n	8009ffe <HAL_SPI_TransmitReceive+0xe8>
 800a04e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800a050:	b292      	uxth	r2, r2
 800a052:	2a00      	cmp	r2, #0
 800a054:	d0d3      	beq.n	8009ffe <HAL_SPI_TransmitReceive+0xe8>
 800a056:	2f00      	cmp	r7, #0
 800a058:	d0d1      	beq.n	8009ffe <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a05a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a05c:	8812      	ldrh	r2, [r2, #0]
 800a05e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a060:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a062:	3302      	adds	r3, #2
 800a064:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800a066:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800a070:	2700      	movs	r7, #0
 800a072:	e7c4      	b.n	8009ffe <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 800a074:	2301      	movs	r3, #1
 800a076:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a07a:	2300      	movs	r3, #0
 800a07c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a080:	2003      	movs	r0, #3
 800a082:	e063      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	f012 0f01 	tst.w	r2, #1
 800a08c:	d00e      	beq.n	800a0ac <HAL_SPI_TransmitReceive+0x196>
 800a08e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800a090:	b292      	uxth	r2, r2
 800a092:	b15a      	cbz	r2, 800a0ac <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a098:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a09a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a09c:	3301      	adds	r3, #1
 800a09e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800a0a0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800a0aa:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a0ac:	f7fc f872 	bl	8006194 <HAL_GetTick>
 800a0b0:	1b83      	subs	r3, r0, r6
 800a0b2:	42ab      	cmp	r3, r5
 800a0b4:	d302      	bcc.n	800a0bc <HAL_SPI_TransmitReceive+0x1a6>
 800a0b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a0ba:	d11e      	bne.n	800a0fa <HAL_SPI_TransmitReceive+0x1e4>
 800a0bc:	b1ed      	cbz	r5, 800a0fa <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0be:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	b913      	cbnz	r3, 800a0ca <HAL_SPI_TransmitReceive+0x1b4>
 800a0c4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	b1fb      	cbz	r3, 800a10a <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	f012 0f02 	tst.w	r2, #2
 800a0d2:	d0d7      	beq.n	800a084 <HAL_SPI_TransmitReceive+0x16e>
 800a0d4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800a0d6:	b292      	uxth	r2, r2
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	d0d3      	beq.n	800a084 <HAL_SPI_TransmitReceive+0x16e>
 800a0dc:	2f00      	cmp	r7, #0
 800a0de:	d0d1      	beq.n	800a084 <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a0e0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a0e2:	7812      	ldrb	r2, [r2, #0]
 800a0e4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800a0e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800a0ec:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800a0f6:	2700      	movs	r7, #0
 800a0f8:	e7c4      	b.n	800a084 <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a100:	2300      	movs	r3, #0
 800a102:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a106:	2003      	movs	r0, #3
 800a108:	e020      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a10a:	4632      	mov	r2, r6
 800a10c:	4629      	mov	r1, r5
 800a10e:	4620      	mov	r0, r4
 800a110:	f7ff fd80 	bl	8009c14 <SPI_EndRxTxTransaction>
 800a114:	b990      	cbnz	r0, 800a13c <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a116:	68a3      	ldr	r3, [r4, #8]
 800a118:	b933      	cbnz	r3, 800a128 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	68da      	ldr	r2, [r3, #12]
 800a120:	9201      	str	r2, [sp, #4]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800a128:	2301      	movs	r3, #1
 800a12a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a12e:	2300      	movs	r3, #0
 800a130:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a134:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a136:	b14b      	cbz	r3, 800a14c <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 800a138:	2001      	movs	r0, #1
 800a13a:	e007      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a13c:	2320      	movs	r3, #32
 800a13e:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a140:	2300      	movs	r3, #0
 800a142:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800a146:	2001      	movs	r0, #1
 800a148:	e000      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 800a14a:	2002      	movs	r0, #2
}
 800a14c:	b003      	add	sp, #12
 800a14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800a152:	2002      	movs	r0, #2
 800a154:	e7fa      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
 800a156:	2002      	movs	r0, #2
 800a158:	e7f8      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 800a15a:	2001      	movs	r0, #1
 800a15c:	e7f6      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
 800a15e:	2001      	movs	r0, #1
 800a160:	e7f4      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
 800a162:	2001      	movs	r0, #1
 800a164:	e7f2      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 800a166:	2002      	movs	r0, #2
 800a168:	e7f0      	b.n	800a14c <HAL_SPI_TransmitReceive+0x236>
	...

0800a16c <HAL_SPI_Transmit_DMA>:
{
 800a16c:	b538      	push	{r3, r4, r5, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 800a16e:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 800a172:	b2ed      	uxtb	r5, r5
 800a174:	2d01      	cmp	r5, #1
 800a176:	d15d      	bne.n	800a234 <HAL_SPI_Transmit_DMA+0xc8>
 800a178:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 800a17a:	2900      	cmp	r1, #0
 800a17c:	d05b      	beq.n	800a236 <HAL_SPI_Transmit_DMA+0xca>
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d059      	beq.n	800a236 <HAL_SPI_Transmit_DMA+0xca>
  __HAL_LOCK(hspi);
 800a182:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800a186:	2b01      	cmp	r3, #1
 800a188:	d057      	beq.n	800a23a <HAL_SPI_Transmit_DMA+0xce>
 800a18a:	2301      	movs	r3, #1
 800a18c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a190:	2303      	movs	r3, #3
 800a192:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a196:	2300      	movs	r3, #0
 800a198:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a19a:	6301      	str	r1, [r0, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a19c:	8682      	strh	r2, [r0, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a19e:	86c2      	strh	r2, [r0, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a1a0:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800a1a2:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a1a4:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a1a6:	8783      	strh	r3, [r0, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a1a8:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1aa:	6883      	ldr	r3, [r0, #8]
 800a1ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1b0:	d02d      	beq.n	800a20e <HAL_SPI_Transmit_DMA+0xa2>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a1b2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a1b4:	4a22      	ldr	r2, [pc, #136]	@ (800a240 <HAL_SPI_Transmit_DMA+0xd4>)
 800a1b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a1b8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a1ba:	4a22      	ldr	r2, [pc, #136]	@ (800a244 <HAL_SPI_Transmit_DMA+0xd8>)
 800a1bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a1be:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a1c0:	4a21      	ldr	r2, [pc, #132]	@ (800a248 <HAL_SPI_Transmit_DMA+0xdc>)
 800a1c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 800a1c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a1ca:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800a1cc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	320c      	adds	r2, #12
 800a1d2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a1d4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800a1d6:	f7fc f973 	bl	80064c0 <HAL_DMA_Start_IT>
 800a1da:	4601      	mov	r1, r0
 800a1dc:	bb10      	cbnz	r0, 800a224 <HAL_SPI_Transmit_DMA+0xb8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800a1e6:	d103      	bne.n	800a1f0 <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1ee:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a1f6:	6822      	ldr	r2, [r4, #0]
 800a1f8:	6853      	ldr	r3, [r2, #4]
 800a1fa:	f043 0320 	orr.w	r3, r3, #32
 800a1fe:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a200:	6822      	ldr	r2, [r4, #0]
 800a202:	6853      	ldr	r3, [r2, #4]
 800a204:	f043 0302 	orr.w	r3, r3, #2
 800a208:	6053      	str	r3, [r2, #4]
  return HAL_OK;
 800a20a:	460d      	mov	r5, r1
 800a20c:	e013      	b.n	800a236 <HAL_SPI_Transmit_DMA+0xca>
    __HAL_SPI_DISABLE(hspi);
 800a20e:	6802      	ldr	r2, [r0, #0]
 800a210:	6813      	ldr	r3, [r2, #0]
 800a212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a216:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800a218:	6802      	ldr	r2, [r0, #0]
 800a21a:	6813      	ldr	r3, [r2, #0]
 800a21c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	e7c6      	b.n	800a1b2 <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a224:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a226:	f043 0310 	orr.w	r3, r3, #16
 800a22a:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a22c:	2300      	movs	r3, #0
 800a22e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800a232:	e000      	b.n	800a236 <HAL_SPI_Transmit_DMA+0xca>
    return HAL_BUSY;
 800a234:	2502      	movs	r5, #2
}
 800a236:	4628      	mov	r0, r5
 800a238:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 800a23a:	2502      	movs	r5, #2
 800a23c:	e7fb      	b.n	800a236 <HAL_SPI_Transmit_DMA+0xca>
 800a23e:	bf00      	nop
 800a240:	0800a24f 	.word	0x0800a24f
 800a244:	0800a27d 	.word	0x0800a27d
 800a248:	0800a25b 	.word	0x0800a25b

0800a24c <HAL_SPI_TxHalfCpltCallback>:
}
 800a24c:	4770      	bx	lr

0800a24e <SPI_DMAHalfTransmitCplt>:
{
 800a24e:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a250:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800a252:	f7ff fffb 	bl	800a24c <HAL_SPI_TxHalfCpltCallback>
}
 800a256:	bd08      	pop	{r3, pc}

0800a258 <HAL_SPI_ErrorCallback>:
}
 800a258:	4770      	bx	lr

0800a25a <SPI_DMAError>:
{
 800a25a:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a25c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a25e:	6802      	ldr	r2, [r0, #0]
 800a260:	6853      	ldr	r3, [r2, #4]
 800a262:	f023 0303 	bic.w	r3, r3, #3
 800a266:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a268:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a26a:	f043 0310 	orr.w	r3, r3, #16
 800a26e:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a270:	2301      	movs	r3, #1
 800a272:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  HAL_SPI_ErrorCallback(hspi);
 800a276:	f7ff ffef 	bl	800a258 <HAL_SPI_ErrorCallback>
}
 800a27a:	bd08      	pop	{r3, pc}

0800a27c <SPI_DMATransmitCplt>:
{
 800a27c:	b530      	push	{r4, r5, lr}
 800a27e:	b083      	sub	sp, #12
 800a280:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a282:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  tickstart = HAL_GetTick();
 800a284:	f7fb ff86 	bl	8006194 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a290:	d123      	bne.n	800a2da <SPI_DMATransmitCplt+0x5e>
 800a292:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a294:	6821      	ldr	r1, [r4, #0]
 800a296:	684b      	ldr	r3, [r1, #4]
 800a298:	f023 0320 	bic.w	r3, r3, #32
 800a29c:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a29e:	6821      	ldr	r1, [r4, #0]
 800a2a0:	684b      	ldr	r3, [r1, #4]
 800a2a2:	f023 0302 	bic.w	r3, r3, #2
 800a2a6:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a2a8:	2164      	movs	r1, #100	@ 0x64
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f7ff fcb2 	bl	8009c14 <SPI_EndRxTxTransaction>
 800a2b0:	b118      	cbz	r0, 800a2ba <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a2b4:	f043 0320 	orr.w	r3, r3, #32
 800a2b8:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2ba:	68a3      	ldr	r3, [r4, #8]
 800a2bc:	b933      	cbnz	r3, 800a2cc <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	6823      	ldr	r3, [r4, #0]
 800a2c2:	68da      	ldr	r2, [r3, #12]
 800a2c4:	9201      	str	r2, [sp, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	86e3      	strh	r3, [r4, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a2d8:	b923      	cbnz	r3, 800a2e4 <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7fb fe32 	bl	8005f44 <HAL_SPI_TxCpltCallback>
}
 800a2e0:	b003      	add	sp, #12
 800a2e2:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f7ff ffb7 	bl	800a258 <HAL_SPI_ErrorCallback>
      return;
 800a2ea:	e7f9      	b.n	800a2e0 <SPI_DMATransmitCplt+0x64>

0800a2ec <HAL_SPI_GetState>:
  return hspi->State;
 800a2ec:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
}
 800a2f0:	4770      	bx	lr

0800a2f2 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a2f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	f102 030c 	add.w	r3, r2, #12
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	320c      	adds	r2, #12
 800a302:	e842 3100 	strex	r1, r3, [r2]
 800a306:	2900      	cmp	r1, #0
 800a308:	d1f3      	bne.n	800a2f2 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a30a:	2320      	movs	r3, #32
 800a30c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 800a310:	4770      	bx	lr

0800a312 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a312:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	f102 030c 	add.w	r3, r2, #12
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	320c      	adds	r2, #12
 800a322:	e842 3100 	strex	r1, r3, [r2]
 800a326:	2900      	cmp	r1, #0
 800a328:	d1f3      	bne.n	800a312 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	f102 0314 	add.w	r3, r2, #20
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	3214      	adds	r2, #20
 800a33a:	e842 3100 	strex	r1, r3, [r2]
 800a33e:	2900      	cmp	r1, #0
 800a340:	d1f3      	bne.n	800a32a <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a342:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a344:	2b01      	cmp	r3, #1
 800a346:	d005      	beq.n	800a354 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a348:	2320      	movs	r3, #32
 800a34a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a34e:	2300      	movs	r3, #0
 800a350:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800a352:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a354:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	f102 030c 	add.w	r3, r2, #12
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	320c      	adds	r2, #12
 800a364:	e842 3100 	strex	r1, r3, [r2]
 800a368:	2900      	cmp	r1, #0
 800a36a:	d1f3      	bne.n	800a354 <UART_EndRxTransfer+0x42>
 800a36c:	e7ec      	b.n	800a348 <UART_EndRxTransfer+0x36>

0800a36e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a36e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b21      	cmp	r3, #33	@ 0x21
 800a376:	d001      	beq.n	800a37c <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800a378:	2002      	movs	r0, #2
  }
}
 800a37a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a37c:	6883      	ldr	r3, [r0, #8]
 800a37e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a382:	d017      	beq.n	800a3b4 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a384:	6a03      	ldr	r3, [r0, #32]
 800a386:	1c5a      	adds	r2, r3, #1
 800a388:	6202      	str	r2, [r0, #32]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	6803      	ldr	r3, [r0, #0]
 800a38e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800a390:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800a392:	b29b      	uxth	r3, r3
 800a394:	3b01      	subs	r3, #1
 800a396:	b29b      	uxth	r3, r3
 800a398:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800a39a:	b94b      	cbnz	r3, 800a3b0 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a39c:	6802      	ldr	r2, [r0, #0]
 800a39e:	68d3      	ldr	r3, [r2, #12]
 800a3a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3a4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3a6:	6802      	ldr	r2, [r0, #0]
 800a3a8:	68d3      	ldr	r3, [r2, #12]
 800a3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ae:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b4:	6903      	ldr	r3, [r0, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e4      	bne.n	800a384 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a3ba:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	6802      	ldr	r2, [r0, #0]
 800a3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3c4:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800a3c6:	6a03      	ldr	r3, [r0, #32]
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	6203      	str	r3, [r0, #32]
 800a3cc:	e7e0      	b.n	800a390 <UART_Transmit_IT+0x22>
	...

0800a3d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3d4:	6802      	ldr	r2, [r0, #0]
 800a3d6:	6913      	ldr	r3, [r2, #16]
 800a3d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a3dc:	68c1      	ldr	r1, [r0, #12]
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3e2:	6883      	ldr	r3, [r0, #8]
 800a3e4:	6902      	ldr	r2, [r0, #16]
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	6943      	ldr	r3, [r0, #20]
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	69c3      	ldr	r3, [r0, #28]
 800a3ee:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800a3f0:	6801      	ldr	r1, [r0, #0]
 800a3f2:	68cb      	ldr	r3, [r1, #12]
 800a3f4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800a3f8:	f023 030c 	bic.w	r3, r3, #12
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a400:	6802      	ldr	r2, [r0, #0]
 800a402:	6953      	ldr	r3, [r2, #20]
 800a404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a408:	6981      	ldr	r1, [r0, #24]
 800a40a:	430b      	orrs	r3, r1
 800a40c:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a40e:	6803      	ldr	r3, [r0, #0]
 800a410:	4a35      	ldr	r2, [pc, #212]	@ (800a4e8 <UART_SetConfig+0x118>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00e      	beq.n	800a434 <UART_SetConfig+0x64>
 800a416:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00a      	beq.n	800a434 <UART_SetConfig+0x64>
 800a41e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a422:	4293      	cmp	r3, r2
 800a424:	d006      	beq.n	800a434 <UART_SetConfig+0x64>
 800a426:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d002      	beq.n	800a434 <UART_SetConfig+0x64>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a42e:	f7fe fd09 	bl	8008e44 <HAL_RCC_GetPCLK1Freq>
 800a432:	e001      	b.n	800a438 <UART_SetConfig+0x68>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a434:	f7fe fd16 	bl	8008e64 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a438:	69e3      	ldr	r3, [r4, #28]
 800a43a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a43e:	d029      	beq.n	800a494 <UART_SetConfig+0xc4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a440:	2100      	movs	r1, #0
 800a442:	1803      	adds	r3, r0, r0
 800a444:	4149      	adcs	r1, r1
 800a446:	181b      	adds	r3, r3, r0
 800a448:	f141 0100 	adc.w	r1, r1, #0
 800a44c:	00c9      	lsls	r1, r1, #3
 800a44e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	1818      	adds	r0, r3, r0
 800a456:	6863      	ldr	r3, [r4, #4]
 800a458:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a45c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 800a460:	f141 0100 	adc.w	r1, r1, #0
 800a464:	f7f6 fc18 	bl	8000c98 <__aeabi_uldivmod>
 800a468:	4a20      	ldr	r2, [pc, #128]	@ (800a4ec <UART_SetConfig+0x11c>)
 800a46a:	fba2 3100 	umull	r3, r1, r2, r0
 800a46e:	0949      	lsrs	r1, r1, #5
 800a470:	2364      	movs	r3, #100	@ 0x64
 800a472:	fb03 0311 	mls	r3, r3, r1, r0
 800a476:	011b      	lsls	r3, r3, #4
 800a478:	3332      	adds	r3, #50	@ 0x32
 800a47a:	fba2 2303 	umull	r2, r3, r2, r3
 800a47e:	095b      	lsrs	r3, r3, #5
 800a480:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a484:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	6821      	ldr	r1, [r4, #0]
 800a48e:	4413      	add	r3, r2
 800a490:	608b      	str	r3, [r1, #8]
  }
}
 800a492:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a494:	2300      	movs	r3, #0
 800a496:	1802      	adds	r2, r0, r0
 800a498:	eb43 0103 	adc.w	r1, r3, r3
 800a49c:	1812      	adds	r2, r2, r0
 800a49e:	f141 0100 	adc.w	r1, r1, #0
 800a4a2:	00c9      	lsls	r1, r1, #3
 800a4a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4a8:	00d2      	lsls	r2, r2, #3
 800a4aa:	1810      	adds	r0, r2, r0
 800a4ac:	f141 0100 	adc.w	r1, r1, #0
 800a4b0:	6862      	ldr	r2, [r4, #4]
 800a4b2:	1892      	adds	r2, r2, r2
 800a4b4:	415b      	adcs	r3, r3
 800a4b6:	f7f6 fbef 	bl	8000c98 <__aeabi_uldivmod>
 800a4ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a4ec <UART_SetConfig+0x11c>)
 800a4bc:	fba2 3100 	umull	r3, r1, r2, r0
 800a4c0:	0949      	lsrs	r1, r1, #5
 800a4c2:	2364      	movs	r3, #100	@ 0x64
 800a4c4:	fb03 0311 	mls	r3, r3, r1, r0
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	3332      	adds	r3, #50	@ 0x32
 800a4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d0:	095b      	lsrs	r3, r3, #5
 800a4d2:	005a      	lsls	r2, r3, #1
 800a4d4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 800a4d8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800a4dc:	f003 0307 	and.w	r3, r3, #7
 800a4e0:	6821      	ldr	r1, [r4, #0]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	608b      	str	r3, [r1, #8]
 800a4e6:	e7d4      	b.n	800a492 <UART_SetConfig+0xc2>
 800a4e8:	40011000 	.word	0x40011000
 800a4ec:	51eb851f 	.word	0x51eb851f

0800a4f0 <HAL_UART_Init>:
  if (huart == NULL)
 800a4f0:	b360      	cbz	r0, 800a54c <HAL_UART_Init+0x5c>
{
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a4f6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800a4fa:	b313      	cbz	r3, 800a542 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800a4fc:	2324      	movs	r3, #36	@ 0x24
 800a4fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800a502:	6822      	ldr	r2, [r4, #0]
 800a504:	68d3      	ldr	r3, [r2, #12]
 800a506:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a50a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800a50c:	4620      	mov	r0, r4
 800a50e:	f7ff ff5f 	bl	800a3d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a512:	6822      	ldr	r2, [r4, #0]
 800a514:	6913      	ldr	r3, [r2, #16]
 800a516:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800a51a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a51c:	6822      	ldr	r2, [r4, #0]
 800a51e:	6953      	ldr	r3, [r2, #20]
 800a520:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800a524:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800a526:	6822      	ldr	r2, [r4, #0]
 800a528:	68d3      	ldr	r3, [r2, #12]
 800a52a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a52e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a530:	2000      	movs	r0, #0
 800a532:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a534:	2320      	movs	r3, #32
 800a536:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a53a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a53e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800a540:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a542:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800a546:	f7fe f921 	bl	800878c <HAL_UART_MspInit>
 800a54a:	e7d7      	b.n	800a4fc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800a54c:	2001      	movs	r0, #1
}
 800a54e:	4770      	bx	lr

0800a550 <HAL_UART_Transmit_DMA>:
{
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800a554:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800a558:	b2d2      	uxtb	r2, r2
 800a55a:	2a20      	cmp	r2, #32
 800a55c:	d12f      	bne.n	800a5be <HAL_UART_Transmit_DMA+0x6e>
 800a55e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800a560:	2900      	cmp	r1, #0
 800a562:	d02e      	beq.n	800a5c2 <HAL_UART_Transmit_DMA+0x72>
 800a564:	b90b      	cbnz	r3, 800a56a <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 800a566:	2001      	movs	r0, #1
}
 800a568:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 800a56a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800a56c:	8483      	strh	r3, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a56e:	84c3      	strh	r3, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a570:	2200      	movs	r2, #0
 800a572:	6442      	str	r2, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a574:	2021      	movs	r0, #33	@ 0x21
 800a576:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a57a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a57c:	4d12      	ldr	r5, [pc, #72]	@ (800a5c8 <HAL_UART_Transmit_DMA+0x78>)
 800a57e:	63c5      	str	r5, [r0, #60]	@ 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a580:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a582:	4d12      	ldr	r5, [pc, #72]	@ (800a5cc <HAL_UART_Transmit_DMA+0x7c>)
 800a584:	6405      	str	r5, [r0, #64]	@ 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a586:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a588:	4d11      	ldr	r5, [pc, #68]	@ (800a5d0 <HAL_UART_Transmit_DMA+0x80>)
 800a58a:	64c5      	str	r5, [r0, #76]	@ 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 800a58c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a58e:	6502      	str	r2, [r0, #80]	@ 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a590:	6822      	ldr	r2, [r4, #0]
 800a592:	3204      	adds	r2, #4
 800a594:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800a596:	f7fb ff93 	bl	80064c0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a5a0:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	f102 0314 	add.w	r3, r2, #20
 800a5a8:	e853 3f00 	ldrex	r3, [r3]
 800a5ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b0:	3214      	adds	r2, #20
 800a5b2:	e842 3100 	strex	r1, r3, [r2]
 800a5b6:	2900      	cmp	r1, #0
 800a5b8:	d1f3      	bne.n	800a5a2 <HAL_UART_Transmit_DMA+0x52>
    return HAL_OK;
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e7d4      	b.n	800a568 <HAL_UART_Transmit_DMA+0x18>
    return HAL_BUSY;
 800a5be:	2002      	movs	r0, #2
 800a5c0:	e7d2      	b.n	800a568 <HAL_UART_Transmit_DMA+0x18>
      return HAL_ERROR;
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	e7d0      	b.n	800a568 <HAL_UART_Transmit_DMA+0x18>
 800a5c6:	bf00      	nop
 800a5c8:	0800a5d7 	.word	0x0800a5d7
 800a5cc:	0800a63f 	.word	0x0800a63f
 800a5d0:	0800a64d 	.word	0x0800a64d

0800a5d4 <HAL_UART_TxCpltCallback>:
}
 800a5d4:	4770      	bx	lr

0800a5d6 <UART_DMATransmitCplt>:
{
 800a5d6:	b508      	push	{r3, lr}
 800a5d8:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5da:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800a5e4:	d11a      	bne.n	800a61c <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	f102 0314 	add.w	r3, r2, #20
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f8:	3214      	adds	r2, #20
 800a5fa:	e842 3100 	strex	r1, r3, [r2]
 800a5fe:	2900      	cmp	r1, #0
 800a600:	d1f3      	bne.n	800a5ea <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a602:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	f102 030c 	add.w	r3, r2, #12
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	320c      	adds	r2, #12
 800a612:	e842 3100 	strex	r1, r3, [r2]
 800a616:	2900      	cmp	r1, #0
 800a618:	d1f3      	bne.n	800a602 <UART_DMATransmitCplt+0x2c>
}
 800a61a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a61c:	f7ff ffda 	bl	800a5d4 <HAL_UART_TxCpltCallback>
}
 800a620:	e7fb      	b.n	800a61a <UART_DMATransmitCplt+0x44>

0800a622 <UART_EndTransmit_IT>:
{
 800a622:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a624:	6801      	ldr	r1, [r0, #0]
 800a626:	68ca      	ldr	r2, [r1, #12]
 800a628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a62c:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a62e:	2220      	movs	r2, #32
 800a630:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800a634:	f7ff ffce 	bl	800a5d4 <HAL_UART_TxCpltCallback>
}
 800a638:	2000      	movs	r0, #0
 800a63a:	bd08      	pop	{r3, pc}

0800a63c <HAL_UART_TxHalfCpltCallback>:
}
 800a63c:	4770      	bx	lr

0800a63e <UART_DMATxHalfCplt>:
{
 800a63e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800a640:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800a642:	f7ff fffb 	bl	800a63c <HAL_UART_TxHalfCpltCallback>
}
 800a646:	bd08      	pop	{r3, pc}

0800a648 <HAL_UART_RxHalfCpltCallback>:
}
 800a648:	4770      	bx	lr

0800a64a <HAL_UART_ErrorCallback>:
}
 800a64a:	4770      	bx	lr

0800a64c <UART_DMAError>:
{
 800a64c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a64e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a654:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b21      	cmp	r3, #33	@ 0x21
 800a65c:	d010      	beq.n	800a680 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	695a      	ldr	r2, [r3, #20]
 800a662:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a666:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b22      	cmp	r3, #34	@ 0x22
 800a66e:	d011      	beq.n	800a694 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a670:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a672:	f043 0310 	orr.w	r3, r3, #16
 800a676:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 800a678:	4620      	mov	r0, r4
 800a67a:	f7ff ffe6 	bl	800a64a <HAL_UART_ErrorCallback>
}
 800a67e:	bd10      	pop	{r4, pc}
 800a680:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a684:	2a00      	cmp	r2, #0
 800a686:	d0ea      	beq.n	800a65e <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 800a688:	2300      	movs	r3, #0
 800a68a:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7ff fe30 	bl	800a2f2 <UART_EndTxTransfer>
 800a692:	e7e4      	b.n	800a65e <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a694:	2a00      	cmp	r2, #0
 800a696:	d0eb      	beq.n	800a670 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800a698:	2300      	movs	r3, #0
 800a69a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff fe38 	bl	800a312 <UART_EndRxTransfer>
 800a6a2:	e7e5      	b.n	800a670 <UART_DMAError+0x24>

0800a6a4 <UART_DMAAbortOnError>:
{
 800a6a4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6a6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a6ac:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800a6ae:	f7ff ffcc 	bl	800a64a <HAL_UART_ErrorCallback>
}
 800a6b2:	bd08      	pop	{r3, pc}

0800a6b4 <HAL_UARTEx_RxEventCallback>:
}
 800a6b4:	4770      	bx	lr

0800a6b6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6b6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b22      	cmp	r3, #34	@ 0x22
 800a6be:	d169      	bne.n	800a794 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6c0:	6883      	ldr	r3, [r0, #8]
 800a6c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6c6:	d04f      	beq.n	800a768 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6c8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6ce:	d004      	beq.n	800a6da <UART_Receive_IT+0x24>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d156      	bne.n	800a782 <UART_Receive_IT+0xcc>
 800a6d4:	6903      	ldr	r3, [r0, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d153      	bne.n	800a782 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6da:	6803      	ldr	r3, [r0, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800a6e0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800a6e6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d151      	bne.n	800a798 <UART_Receive_IT+0xe2>
{
 800a6f4:	b500      	push	{lr}
 800a6f6:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6f8:	6802      	ldr	r2, [r0, #0]
 800a6fa:	68d3      	ldr	r3, [r2, #12]
 800a6fc:	f023 0320 	bic.w	r3, r3, #32
 800a700:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a702:	6802      	ldr	r2, [r0, #0]
 800a704:	68d3      	ldr	r3, [r2, #12]
 800a706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a70a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a70c:	6802      	ldr	r2, [r0, #0]
 800a70e:	6953      	ldr	r3, [r2, #20]
 800a710:	f023 0301 	bic.w	r3, r3, #1
 800a714:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800a716:	2320      	movs	r3, #32
 800a718:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a71c:	2300      	movs	r3, #0
 800a71e:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a720:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a722:	2b01      	cmp	r3, #1
 800a724:	d133      	bne.n	800a78e <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a726:	2300      	movs	r3, #0
 800a728:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a72a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	f102 030c 	add.w	r3, r2, #12
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	320c      	adds	r2, #12
 800a73a:	e842 3100 	strex	r1, r3, [r2]
 800a73e:	2900      	cmp	r1, #0
 800a740:	d1f3      	bne.n	800a72a <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a742:	6803      	ldr	r3, [r0, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	f012 0f10 	tst.w	r2, #16
 800a74a:	d006      	beq.n	800a75a <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a74c:	2200      	movs	r2, #0
 800a74e:	9201      	str	r2, [sp, #4]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	9201      	str	r2, [sp, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a75a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a75c:	f7ff ffaa 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800a760:	2000      	movs	r0, #0
}
 800a762:	b003      	add	sp, #12
 800a764:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a768:	6902      	ldr	r2, [r0, #16]
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	d1ac      	bne.n	800a6c8 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a76e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a770:	6803      	ldr	r3, [r0, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a778:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800a77a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800a77c:	3302      	adds	r3, #2
 800a77e:	6283      	str	r3, [r0, #40]	@ 0x28
 800a780:	e7b1      	b.n	800a6e6 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a782:	6803      	ldr	r3, [r0, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a78a:	7013      	strb	r3, [r2, #0]
 800a78c:	e7a8      	b.n	800a6e0 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800a78e:	f7fa fb63 	bl	8004e58 <HAL_UART_RxCpltCallback>
 800a792:	e7e5      	b.n	800a760 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 800a794:	2002      	movs	r0, #2
 800a796:	4770      	bx	lr
    return HAL_OK;
 800a798:	2000      	movs	r0, #0
}
 800a79a:	4770      	bx	lr

0800a79c <HAL_UART_IRQHandler>:
{
 800a79c:	b510      	push	{r4, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7a2:	6802      	ldr	r2, [r0, #0]
 800a7a4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7a6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7a8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800a7aa:	f013 0f0f 	tst.w	r3, #15
 800a7ae:	d109      	bne.n	800a7c4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7b0:	f013 0f20 	tst.w	r3, #32
 800a7b4:	d00c      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x34>
 800a7b6:	f010 0f20 	tst.w	r0, #32
 800a7ba:	d009      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f7ff ff7a 	bl	800a6b6 <UART_Receive_IT>
      return;
 800a7c2:	e016      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a7c4:	f011 0101 	ands.w	r1, r1, #1
 800a7c8:	d115      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a7ca:	f410 7f90 	tst.w	r0, #288	@ 0x120
 800a7ce:	d112      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a7d2:	2901      	cmp	r1, #1
 800a7d4:	d079      	beq.n	800a8ca <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a7d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7da:	d003      	beq.n	800a7e4 <HAL_UART_IRQHandler+0x48>
 800a7dc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800a7e0:	f040 8114 	bne.w	800aa0c <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a7e4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a7e8:	d003      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x56>
 800a7ea:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800a7ee:	f040 8111 	bne.w	800aa14 <HAL_UART_IRQHandler+0x278>
}
 800a7f2:	b002      	add	sp, #8
 800a7f4:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a7f6:	f013 0f01 	tst.w	r3, #1
 800a7fa:	d006      	beq.n	800a80a <HAL_UART_IRQHandler+0x6e>
 800a7fc:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800a800:	d003      	beq.n	800a80a <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a802:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a804:	f042 0201 	orr.w	r2, r2, #1
 800a808:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a80a:	f013 0f04 	tst.w	r3, #4
 800a80e:	d004      	beq.n	800a81a <HAL_UART_IRQHandler+0x7e>
 800a810:	b119      	cbz	r1, 800a81a <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a812:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a814:	f042 0202 	orr.w	r2, r2, #2
 800a818:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a81a:	f013 0f02 	tst.w	r3, #2
 800a81e:	d004      	beq.n	800a82a <HAL_UART_IRQHandler+0x8e>
 800a820:	b119      	cbz	r1, 800a82a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a822:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a824:	f042 0204 	orr.w	r2, r2, #4
 800a828:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a82a:	f013 0f08 	tst.w	r3, #8
 800a82e:	d007      	beq.n	800a840 <HAL_UART_IRQHandler+0xa4>
 800a830:	f010 0f20 	tst.w	r0, #32
 800a834:	d100      	bne.n	800a838 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a836:	b119      	cbz	r1, 800a840 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a838:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a83a:	f042 0208 	orr.w	r2, r2, #8
 800a83e:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a840:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a842:	2a00      	cmp	r2, #0
 800a844:	d0d5      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a846:	f013 0f20 	tst.w	r3, #32
 800a84a:	d002      	beq.n	800a852 <HAL_UART_IRQHandler+0xb6>
 800a84c:	f010 0f20 	tst.w	r0, #32
 800a850:	d129      	bne.n	800a8a6 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a85a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a85c:	f012 0f08 	tst.w	r2, #8
 800a860:	d100      	bne.n	800a864 <HAL_UART_IRQHandler+0xc8>
 800a862:	b363      	cbz	r3, 800a8be <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 800a864:	4620      	mov	r0, r4
 800a866:	f7ff fd54 	bl	800a312 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a872:	d020      	beq.n	800a8b6 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a874:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a876:	f102 0314 	add.w	r3, r2, #20
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a882:	3214      	adds	r2, #20
 800a884:	e842 3100 	strex	r1, r3, [r2]
 800a888:	2900      	cmp	r1, #0
 800a88a:	d1f3      	bne.n	800a874 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 800a88c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a88e:	b173      	cbz	r3, 800a8ae <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a890:	4a62      	ldr	r2, [pc, #392]	@ (800aa1c <HAL_UART_IRQHandler+0x280>)
 800a892:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a894:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a896:	f7fb fe92 	bl	80065be <HAL_DMA_Abort_IT>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	d0a9      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a89e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a8a0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800a8a2:	4798      	blx	r3
 800a8a4:	e7a5      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff ff05 	bl	800a6b6 <UART_Receive_IT>
 800a8ac:	e7d1      	b.n	800a852 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f7ff fecb 	bl	800a64a <HAL_UART_ErrorCallback>
 800a8b4:	e79d      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f7ff fec7 	bl	800a64a <HAL_UART_ErrorCallback>
 800a8bc:	e799      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7ff fec3 	bl	800a64a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 800a8c8:	e793      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8ca:	f013 0f10 	tst.w	r3, #16
 800a8ce:	d082      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8d0:	f010 0f10 	tst.w	r0, #16
 800a8d4:	f43f af7f 	beq.w	800a7d6 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	6813      	ldr	r3, [r2, #0]
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	6853      	ldr	r3, [r2, #4]
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e6:	6953      	ldr	r3, [r2, #20]
 800a8e8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a8ec:	d052      	beq.n	800a994 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8ee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a8f0:	6813      	ldr	r3, [r2, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f43f af7b 	beq.w	800a7f2 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8fc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a8fe:	4299      	cmp	r1, r3
 800a900:	f67f af77 	bls.w	800a7f2 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 800a904:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a906:	69d3      	ldr	r3, [r2, #28]
 800a908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a90c:	d037      	beq.n	800a97e <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a90e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a910:	f102 030c 	add.w	r3, r2, #12
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	320c      	adds	r2, #12
 800a91e:	e842 3100 	strex	r1, r3, [r2]
 800a922:	2900      	cmp	r1, #0
 800a924:	d1f3      	bne.n	800a90e <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a926:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	f102 0314 	add.w	r3, r2, #20
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	3214      	adds	r2, #20
 800a936:	e842 3100 	strex	r1, r3, [r2]
 800a93a:	2900      	cmp	r1, #0
 800a93c:	d1f3      	bne.n	800a926 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a93e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a940:	f102 0314 	add.w	r3, r2, #20
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	3214      	adds	r2, #20
 800a94e:	e842 3100 	strex	r1, r3, [r2]
 800a952:	2900      	cmp	r1, #0
 800a954:	d1f3      	bne.n	800a93e <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 800a956:	2320      	movs	r3, #32
 800a958:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95c:	2300      	movs	r3, #0
 800a95e:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a960:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a962:	f102 030c 	add.w	r3, r2, #12
 800a966:	e853 3f00 	ldrex	r3, [r3]
 800a96a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	320c      	adds	r2, #12
 800a970:	e842 3100 	strex	r1, r3, [r2]
 800a974:	2900      	cmp	r1, #0
 800a976:	d1f3      	bne.n	800a960 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a978:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a97a:	f7fb fdd6 	bl	800652a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a97e:	2302      	movs	r3, #2
 800a980:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a982:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a984:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800a986:	b29b      	uxth	r3, r3
 800a988:	1ac9      	subs	r1, r1, r3
 800a98a:	b289      	uxth	r1, r1
 800a98c:	4620      	mov	r0, r4
 800a98e:	f7ff fe91 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
      return;
 800a992:	e72e      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a994:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a996:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800a998:	b29b      	uxth	r3, r3
 800a99a:	1ac9      	subs	r1, r1, r3
 800a99c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800a99e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f43f af25 	beq.w	800a7f2 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 800a9a8:	2900      	cmp	r1, #0
 800a9aa:	f43f af22 	beq.w	800a7f2 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	f102 030c 	add.w	r3, r2, #12
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	320c      	adds	r2, #12
 800a9be:	e842 3000 	strex	r0, r3, [r2]
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d1f3      	bne.n	800a9ae <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c8:	f102 0314 	add.w	r3, r2, #20
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	3214      	adds	r2, #20
 800a9d6:	e842 3000 	strex	r0, r3, [r2]
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d1f3      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 800a9de:	2320      	movs	r3, #32
 800a9e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	f102 030c 	add.w	r3, r2, #12
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	320c      	adds	r2, #12
 800a9f8:	e842 3000 	strex	r0, r3, [r2]
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d1f3      	bne.n	800a9e8 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa00:	2302      	movs	r3, #2
 800aa02:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa04:	4620      	mov	r0, r4
 800aa06:	f7ff fe55 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
      return;
 800aa0a:	e6f2      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff fcae 	bl	800a36e <UART_Transmit_IT>
    return;
 800aa12:	e6ee      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 800aa14:	4620      	mov	r0, r4
 800aa16:	f7ff fe04 	bl	800a622 <UART_EndTransmit_IT>
    return;
 800aa1a:	e6ea      	b.n	800a7f2 <HAL_UART_IRQHandler+0x56>
 800aa1c:	0800a6a5 	.word	0x0800a6a5

0800aa20 <UART_DMARxHalfCplt>:
{
 800aa20:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa22:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aa24:	2301      	movs	r3, #1
 800aa26:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d002      	beq.n	800aa34 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa2e:	f7ff fe0b 	bl	800a648 <HAL_UART_RxHalfCpltCallback>
}
 800aa32:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa34:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800aa36:	0849      	lsrs	r1, r1, #1
 800aa38:	f7ff fe3c 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
 800aa3c:	e7f9      	b.n	800aa32 <UART_DMARxHalfCplt+0x12>

0800aa3e <UART_DMAReceiveCplt>:
{
 800aa3e:	b508      	push	{r3, lr}
 800aa40:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa42:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800aa4c:	d12b      	bne.n	800aaa6 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	f102 030c 	add.w	r3, r2, #12
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	320c      	adds	r2, #12
 800aa62:	e842 3100 	strex	r1, r3, [r2]
 800aa66:	2900      	cmp	r1, #0
 800aa68:	d1f3      	bne.n	800aa52 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6c:	f102 0314 	add.w	r3, r2, #20
 800aa70:	e853 3f00 	ldrex	r3, [r3]
 800aa74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	3214      	adds	r2, #20
 800aa7a:	e842 3100 	strex	r1, r3, [r2]
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	d1f3      	bne.n	800aa6a <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa84:	f102 0314 	add.w	r3, r2, #20
 800aa88:	e853 3f00 	ldrex	r3, [r3]
 800aa8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa90:	3214      	adds	r2, #20
 800aa92:	e842 3100 	strex	r1, r3, [r2]
 800aa96:	2900      	cmp	r1, #0
 800aa98:	d1f3      	bne.n	800aa82 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800aa9a:	2320      	movs	r3, #32
 800aa9c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d007      	beq.n	800aab6 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaaa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d00f      	beq.n	800aad0 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 800aab0:	f7fa f9d2 	bl	8004e58 <HAL_UART_RxCpltCallback>
}
 800aab4:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	f102 030c 	add.w	r3, r2, #12
 800aabc:	e853 3f00 	ldrex	r3, [r3]
 800aac0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	320c      	adds	r2, #12
 800aac6:	e842 3100 	strex	r1, r3, [r2]
 800aaca:	2900      	cmp	r1, #0
 800aacc:	d1f3      	bne.n	800aab6 <UART_DMAReceiveCplt+0x78>
 800aace:	e7ea      	b.n	800aaa6 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aad0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800aad2:	f7ff fdef 	bl	800a6b4 <HAL_UARTEx_RxEventCallback>
 800aad6:	e7ed      	b.n	800aab4 <UART_DMAReceiveCplt+0x76>

0800aad8 <UART_Start_Receive_DMA>:
{
 800aad8:	b530      	push	{r4, r5, lr}
 800aada:	b083      	sub	sp, #12
 800aadc:	4604      	mov	r4, r0
 800aade:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800aae0:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aae2:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae4:	2500      	movs	r5, #0
 800aae6:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aae8:	2222      	movs	r2, #34	@ 0x22
 800aaea:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aaee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aaf0:	481f      	ldr	r0, [pc, #124]	@ (800ab70 <UART_Start_Receive_DMA+0x98>)
 800aaf2:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aaf4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800aaf6:	481f      	ldr	r0, [pc, #124]	@ (800ab74 <UART_Start_Receive_DMA+0x9c>)
 800aaf8:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aafa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800aafc:	481e      	ldr	r0, [pc, #120]	@ (800ab78 <UART_Start_Receive_DMA+0xa0>)
 800aafe:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 800ab00:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ab02:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ab04:	6820      	ldr	r0, [r4, #0]
 800ab06:	460a      	mov	r2, r1
 800ab08:	1d01      	adds	r1, r0, #4
 800ab0a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800ab0c:	f7fb fcd8 	bl	80064c0 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ab10:	9501      	str	r5, [sp, #4]
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	9201      	str	r2, [sp, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	9301      	str	r3, [sp, #4]
 800ab1c:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	b15b      	cbz	r3, 800ab3a <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab24:	f102 030c 	add.w	r3, r2, #12
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	320c      	adds	r2, #12
 800ab32:	e842 3100 	strex	r1, r3, [r2]
 800ab36:	2900      	cmp	r1, #0
 800ab38:	d1f3      	bne.n	800ab22 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	f102 0314 	add.w	r3, r2, #20
 800ab40:	e853 3f00 	ldrex	r3, [r3]
 800ab44:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	3214      	adds	r2, #20
 800ab4a:	e842 3100 	strex	r1, r3, [r2]
 800ab4e:	2900      	cmp	r1, #0
 800ab50:	d1f3      	bne.n	800ab3a <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab52:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab54:	f102 0314 	add.w	r3, r2, #20
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab60:	3214      	adds	r2, #20
 800ab62:	e842 3100 	strex	r1, r3, [r2]
 800ab66:	2900      	cmp	r1, #0
 800ab68:	d1f3      	bne.n	800ab52 <UART_Start_Receive_DMA+0x7a>
}
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	b003      	add	sp, #12
 800ab6e:	bd30      	pop	{r4, r5, pc}
 800ab70:	0800aa3f 	.word	0x0800aa3f
 800ab74:	0800aa21 	.word	0x0800aa21
 800ab78:	0800a64d 	.word	0x0800a64d

0800ab7c <HAL_UART_Receive_DMA>:
{
 800ab7c:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab7e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	d108      	bne.n	800ab9a <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 800ab88:	b149      	cbz	r1, 800ab9e <HAL_UART_Receive_DMA+0x22>
 800ab8a:	b90a      	cbnz	r2, 800ab90 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 800ab8c:	2001      	movs	r0, #1
}
 800ab8e:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab90:	2300      	movs	r3, #0
 800ab92:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab94:	f7ff ffa0 	bl	800aad8 <UART_Start_Receive_DMA>
 800ab98:	e7f9      	b.n	800ab8e <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 800ab9a:	2002      	movs	r0, #2
 800ab9c:	e7f7      	b.n	800ab8e <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 800ab9e:	2001      	movs	r0, #1
 800aba0:	e7f5      	b.n	800ab8e <HAL_UART_Receive_DMA+0x12>
	...

0800aba4 <SDTimer_Handler>:
extern UART_HandleTypeDef huart6;
/* USER CODE BEGIN EV */

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 800aba4:	4b08      	ldr	r3, [pc, #32]	@ (800abc8 <SDTimer_Handler+0x24>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	b123      	cbz	r3, 800abb4 <SDTimer_Handler+0x10>
    Timer1--;
 800abaa:	4a07      	ldr	r2, [pc, #28]	@ (800abc8 <SDTimer_Handler+0x24>)
 800abac:	7813      	ldrb	r3, [r2, #0]
 800abae:	3b01      	subs	r3, #1
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 800abb4:	4b05      	ldr	r3, [pc, #20]	@ (800abcc <SDTimer_Handler+0x28>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	b123      	cbz	r3, 800abc4 <SDTimer_Handler+0x20>
    Timer2--;
 800abba:	4a04      	ldr	r2, [pc, #16]	@ (800abcc <SDTimer_Handler+0x28>)
 800abbc:	7813      	ldrb	r3, [r2, #0]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	7013      	strb	r3, [r2, #0]
}
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	2001d21d 	.word	0x2001d21d
 800abcc:	2001d21c 	.word	0x2001d21c

0800abd0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800abd0:	e7fe      	b.n	800abd0 <NMI_Handler>

0800abd2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800abd2:	e7fe      	b.n	800abd2 <HardFault_Handler>

0800abd4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800abd4:	e7fe      	b.n	800abd4 <MemManage_Handler>

0800abd6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800abd6:	e7fe      	b.n	800abd6 <BusFault_Handler>

0800abd8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800abd8:	e7fe      	b.n	800abd8 <UsageFault_Handler>

0800abda <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800abda:	4770      	bx	lr

0800abdc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800abdc:	4770      	bx	lr

0800abde <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800abde:	4770      	bx	lr

0800abe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800abe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800abe2:	4a09      	ldr	r2, [pc, #36]	@ (800ac08 <SysTick_Handler+0x28>)
 800abe4:	7813      	ldrb	r3, [r2, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	7013      	strb	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 800abec:	7813      	ldrb	r3, [r2, #0]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b09      	cmp	r3, #9
 800abf2:	d802      	bhi.n	800abfa <SysTick_Handler+0x1a>
	  {
	    FatFsCnt = 0;
	    SDTimer_Handler();
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800abf4:	f7fb fac2 	bl	800617c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800abf8:	bd08      	pop	{r3, pc}
	    FatFsCnt = 0;
 800abfa:	4613      	mov	r3, r2
 800abfc:	2200      	movs	r2, #0
 800abfe:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800ac00:	f7ff ffd0 	bl	800aba4 <SDTimer_Handler>
 800ac04:	e7f6      	b.n	800abf4 <SysTick_Handler+0x14>
 800ac06:	bf00      	nop
 800ac08:	2001d21e 	.word	0x2001d21e

0800ac0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800ac0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800ac0e:	4802      	ldr	r0, [pc, #8]	@ (800ac18 <DMA1_Stream0_IRQHandler+0xc>)
 800ac10:	f7fb fce8 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800ac14:	bd08      	pop	{r3, pc}
 800ac16:	bf00      	nop
 800ac18:	2001cda4 	.word	0x2001cda4

0800ac1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800ac1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800ac1e:	4802      	ldr	r0, [pc, #8]	@ (800ac28 <DMA1_Stream1_IRQHandler+0xc>)
 800ac20:	f7fb fce0 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800ac24:	bd08      	pop	{r3, pc}
 800ac26:	bf00      	nop
 800ac28:	2001cc24 	.word	0x2001cc24

0800ac2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800ac2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800ac2e:	4802      	ldr	r0, [pc, #8]	@ (800ac38 <DMA1_Stream2_IRQHandler+0xc>)
 800ac30:	f7fb fcd8 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800ac34:	bd08      	pop	{r3, pc}
 800ac36:	bf00      	nop
 800ac38:	2001ce04 	.word	0x2001ce04

0800ac3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800ac3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800ac3e:	4802      	ldr	r0, [pc, #8]	@ (800ac48 <DMA1_Stream3_IRQHandler+0xc>)
 800ac40:	f7fb fcd0 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800ac44:	bd08      	pop	{r3, pc}
 800ac46:	bf00      	nop
 800ac48:	2001cbc4 	.word	0x2001cbc4

0800ac4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ac4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ac4e:	4802      	ldr	r0, [pc, #8]	@ (800ac58 <DMA1_Stream4_IRQHandler+0xc>)
 800ac50:	f7fb fcc8 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ac54:	bd08      	pop	{r3, pc}
 800ac56:	bf00      	nop
 800ac58:	2001ce64 	.word	0x2001ce64

0800ac5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800ac5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800ac5e:	4802      	ldr	r0, [pc, #8]	@ (800ac68 <DMA1_Stream5_IRQHandler+0xc>)
 800ac60:	f7fb fcc0 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800ac64:	bd08      	pop	{r3, pc}
 800ac66:	bf00      	nop
 800ac68:	2001cce4 	.word	0x2001cce4

0800ac6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800ac6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800ac6e:	4802      	ldr	r0, [pc, #8]	@ (800ac78 <DMA1_Stream6_IRQHandler+0xc>)
 800ac70:	f7fb fcb8 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800ac74:	bd08      	pop	{r3, pc}
 800ac76:	bf00      	nop
 800ac78:	2001cc84 	.word	0x2001cc84

0800ac7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ac7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_INT_Pin);
 800ac7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ac82:	f7fb fe97 	bl	80069b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800ac86:	bd08      	pop	{r3, pc}

0800ac88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800ac88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800ac8a:	4802      	ldr	r0, [pc, #8]	@ (800ac94 <I2C1_EV_IRQHandler+0xc>)
 800ac8c:	f7fd faf8 	bl	8008280 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800ac90:	bd08      	pop	{r3, pc}
 800ac92:	bf00      	nop
 800ac94:	2001d108 	.word	0x2001d108

0800ac98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800ac98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800ac9a:	4802      	ldr	r0, [pc, #8]	@ (800aca4 <I2C1_ER_IRQHandler+0xc>)
 800ac9c:	f7fd fbc0 	bl	8008420 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800aca0:	bd08      	pop	{r3, pc}
 800aca2:	bf00      	nop
 800aca4:	2001d108 	.word	0x2001d108

0800aca8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800aca8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800acaa:	4802      	ldr	r0, [pc, #8]	@ (800acb4 <USART2_IRQHandler+0xc>)
 800acac:	f7ff fd76 	bl	800a79c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800acb0:	bd08      	pop	{r3, pc}
 800acb2:	bf00      	nop
 800acb4:	2001cf54 	.word	0x2001cf54

0800acb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800acb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800acba:	4802      	ldr	r0, [pc, #8]	@ (800acc4 <USART3_IRQHandler+0xc>)
 800acbc:	f7ff fd6e 	bl	800a79c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800acc0:	bd08      	pop	{r3, pc}
 800acc2:	bf00      	nop
 800acc4:	2001cf0c 	.word	0x2001cf0c

0800acc8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800acc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800acca:	4802      	ldr	r0, [pc, #8]	@ (800acd4 <DMA1_Stream7_IRQHandler+0xc>)
 800accc:	f7fb fc8a 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800acd0:	bd08      	pop	{r3, pc}
 800acd2:	bf00      	nop
 800acd4:	2001cd44 	.word	0x2001cd44

0800acd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800acd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800acda:	4802      	ldr	r0, [pc, #8]	@ (800ace4 <UART4_IRQHandler+0xc>)
 800acdc:	f7ff fd5e 	bl	800a79c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ace0:	bd08      	pop	{r3, pc}
 800ace2:	bf00      	nop
 800ace4:	2001cfe4 	.word	0x2001cfe4

0800ace8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800ace8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800acea:	4802      	ldr	r0, [pc, #8]	@ (800acf4 <UART5_IRQHandler+0xc>)
 800acec:	f7ff fd56 	bl	800a79c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800acf0:	bd08      	pop	{r3, pc}
 800acf2:	bf00      	nop
 800acf4:	2001cf9c 	.word	0x2001cf9c

0800acf8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800acf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800acfa:	4802      	ldr	r0, [pc, #8]	@ (800ad04 <DMA2_Stream1_IRQHandler+0xc>)
 800acfc:	f7fb fc72 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800ad00:	bd08      	pop	{r3, pc}
 800ad02:	bf00      	nop
 800ad04:	2001cb64 	.word	0x2001cb64

0800ad08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ad08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800ad0a:	4802      	ldr	r0, [pc, #8]	@ (800ad14 <DMA2_Stream2_IRQHandler+0xc>)
 800ad0c:	f7fb fc6a 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ad10:	bd08      	pop	{r3, pc}
 800ad12:	bf00      	nop
 800ad14:	2001d160 	.word	0x2001d160

0800ad18 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800ad18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800ad1a:	4802      	ldr	r0, [pc, #8]	@ (800ad24 <DMA2_Stream6_IRQHandler+0xc>)
 800ad1c:	f7fb fc62 	bl	80065e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800ad20:	bd08      	pop	{r3, pc}
 800ad22:	bf00      	nop
 800ad24:	2001cb04 	.word	0x2001cb04

0800ad28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800ad28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800ad2a:	4802      	ldr	r0, [pc, #8]	@ (800ad34 <USART6_IRQHandler+0xc>)
 800ad2c:	f7ff fd36 	bl	800a79c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800ad30:	bd08      	pop	{r3, pc}
 800ad32:	bf00      	nop
 800ad34:	2001cec4 	.word	0x2001cec4

0800ad38 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800ad38:	2001      	movs	r0, #1
 800ad3a:	4770      	bx	lr

0800ad3c <_kill>:

int _kill(int pid, int sig)
{
 800ad3c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ad3e:	f001 f93b 	bl	800bfb8 <__errno>
 800ad42:	2316      	movs	r3, #22
 800ad44:	6003      	str	r3, [r0, #0]
  return -1;
}
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	bd08      	pop	{r3, pc}

0800ad4c <_exit>:

void _exit (int status)
{
 800ad4c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800ad4e:	f04f 31ff 	mov.w	r1, #4294967295
 800ad52:	f7ff fff3 	bl	800ad3c <_kill>
  while (1) {}    /* Make sure we hang here */
 800ad56:	e7fe      	b.n	800ad56 <_exit+0xa>

0800ad58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad5e:	2500      	movs	r5, #0
 800ad60:	e006      	b.n	800ad70 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800ad62:	f3af 8000 	nop.w
 800ad66:	4621      	mov	r1, r4
 800ad68:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad6c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800ad6e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad70:	42b5      	cmp	r5, r6
 800ad72:	dbf6      	blt.n	800ad62 <_read+0xa>
  }

  return len;
}
 800ad74:	4630      	mov	r0, r6
 800ad76:	bd70      	pop	{r4, r5, r6, pc}

0800ad78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad7e:	2500      	movs	r5, #0
 800ad80:	e004      	b.n	800ad8c <_write+0x14>
  {
    __io_putchar(*ptr++);
 800ad82:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ad86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad8a:	3501      	adds	r5, #1
 800ad8c:	42b5      	cmp	r5, r6
 800ad8e:	dbf8      	blt.n	800ad82 <_write+0xa>
  }
  return len;
}
 800ad90:	4630      	mov	r0, r6
 800ad92:	bd70      	pop	{r4, r5, r6, pc}

0800ad94 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	4770      	bx	lr

0800ad9a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800ad9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad9e:	604b      	str	r3, [r1, #4]
  return 0;
}
 800ada0:	2000      	movs	r0, #0
 800ada2:	4770      	bx	lr

0800ada4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800ada4:	2001      	movs	r0, #1
 800ada6:	4770      	bx	lr

0800ada8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800ada8:	2000      	movs	r0, #0
 800adaa:	4770      	bx	lr

0800adac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800adac:	b510      	push	{r4, lr}
 800adae:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800adb0:	4a0c      	ldr	r2, [pc, #48]	@ (800ade4 <_sbrk+0x38>)
 800adb2:	490d      	ldr	r1, [pc, #52]	@ (800ade8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800adb4:	480d      	ldr	r0, [pc, #52]	@ (800adec <_sbrk+0x40>)
 800adb6:	6800      	ldr	r0, [r0, #0]
 800adb8:	b140      	cbz	r0, 800adcc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800adba:	480c      	ldr	r0, [pc, #48]	@ (800adec <_sbrk+0x40>)
 800adbc:	6800      	ldr	r0, [r0, #0]
 800adbe:	4403      	add	r3, r0
 800adc0:	1a52      	subs	r2, r2, r1
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d806      	bhi.n	800add4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800adc6:	4a09      	ldr	r2, [pc, #36]	@ (800adec <_sbrk+0x40>)
 800adc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800adca:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800adcc:	4807      	ldr	r0, [pc, #28]	@ (800adec <_sbrk+0x40>)
 800adce:	4c08      	ldr	r4, [pc, #32]	@ (800adf0 <_sbrk+0x44>)
 800add0:	6004      	str	r4, [r0, #0]
 800add2:	e7f2      	b.n	800adba <_sbrk+0xe>
    errno = ENOMEM;
 800add4:	f001 f8f0 	bl	800bfb8 <__errno>
 800add8:	230c      	movs	r3, #12
 800adda:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800addc:	f04f 30ff 	mov.w	r0, #4294967295
 800ade0:	e7f3      	b.n	800adca <_sbrk+0x1e>
 800ade2:	bf00      	nop
 800ade4:	20050000 	.word	0x20050000
 800ade8:	00000400 	.word	0x00000400
 800adec:	2001d220 	.word	0x2001d220
 800adf0:	2001d370 	.word	0x2001d370

0800adf4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800adf4:	4a03      	ldr	r2, [pc, #12]	@ (800ae04 <SystemInit+0x10>)
 800adf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800adfa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800adfe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ae02:	4770      	bx	lr
 800ae04:	e000ed00 	.word	0xe000ed00

0800ae08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ae08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800ae0a:	f7f6 fcb3 	bl	8001774 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800ae0e:	bd08      	pop	{r3, pc}

0800ae10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ae10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800ae12:	f7f6 fd71 	bl	80018f8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800ae16:	bd08      	pop	{r3, pc}

0800ae18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ae18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800ae1a:	f7f6 fd77 	bl	800190c <SD_disk_read>
  /* USER CODE END READ */
}
 800ae1e:	bd08      	pop	{r3, pc}

0800ae20 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ae20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800ae22:	f7f6 fdbf 	bl	80019a4 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800ae26:	bd08      	pop	{r3, pc}

0800ae28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ae28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800ae2a:	f7f6 fe1d 	bl	8001a68 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800ae2e:	bd08      	pop	{r3, pc}

0800ae30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800ae30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ae68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ae34:	f7ff ffde 	bl	800adf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ae38:	480c      	ldr	r0, [pc, #48]	@ (800ae6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ae3a:	490d      	ldr	r1, [pc, #52]	@ (800ae70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ae3c:	4a0d      	ldr	r2, [pc, #52]	@ (800ae74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ae3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ae40:	e002      	b.n	800ae48 <LoopCopyDataInit>

0800ae42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ae42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ae44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ae46:	3304      	adds	r3, #4

0800ae48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ae48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ae4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae4c:	d3f9      	bcc.n	800ae42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ae78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ae50:	4c0a      	ldr	r4, [pc, #40]	@ (800ae7c <LoopFillZerobss+0x22>)
  movs r3, #0
 800ae52:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ae54:	e001      	b.n	800ae5a <LoopFillZerobss>

0800ae56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ae56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ae58:	3204      	adds	r2, #4

0800ae5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ae5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae5c:	d3fb      	bcc.n	800ae56 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800ae5e:	f001 f8b1 	bl	800bfc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ae62:	f7fa fc1f 	bl	80056a4 <main>
  bx  lr    
 800ae66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800ae68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800ae6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae70:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 800ae74:	08023510 	.word	0x08023510
  ldr r2, =_sbss
 800ae78:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 800ae7c:	2001d370 	.word	0x2001d370

0800ae80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ae80:	e7fe      	b.n	800ae80 <ADC_IRQHandler>

0800ae82 <atof>:
 800ae82:	2100      	movs	r1, #0
 800ae84:	f000 be1c 	b.w	800bac0 <strtod>

0800ae88 <__itoa>:
 800ae88:	1e93      	subs	r3, r2, #2
 800ae8a:	2b22      	cmp	r3, #34	@ 0x22
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	460c      	mov	r4, r1
 800ae90:	d904      	bls.n	800ae9c <__itoa+0x14>
 800ae92:	2300      	movs	r3, #0
 800ae94:	700b      	strb	r3, [r1, #0]
 800ae96:	461c      	mov	r4, r3
 800ae98:	4620      	mov	r0, r4
 800ae9a:	bd10      	pop	{r4, pc}
 800ae9c:	2a0a      	cmp	r2, #10
 800ae9e:	d109      	bne.n	800aeb4 <__itoa+0x2c>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	da07      	bge.n	800aeb4 <__itoa+0x2c>
 800aea4:	232d      	movs	r3, #45	@ 0x2d
 800aea6:	700b      	strb	r3, [r1, #0]
 800aea8:	4240      	negs	r0, r0
 800aeaa:	2101      	movs	r1, #1
 800aeac:	4421      	add	r1, r4
 800aeae:	f000 fe13 	bl	800bad8 <__utoa>
 800aeb2:	e7f1      	b.n	800ae98 <__itoa+0x10>
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	e7f9      	b.n	800aeac <__itoa+0x24>

0800aeb8 <itoa>:
 800aeb8:	f7ff bfe6 	b.w	800ae88 <__itoa>

0800aebc <sulp>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	4604      	mov	r4, r0
 800aec0:	460d      	mov	r5, r1
 800aec2:	ec45 4b10 	vmov	d0, r4, r5
 800aec6:	4616      	mov	r6, r2
 800aec8:	f002 f86a 	bl	800cfa0 <__ulp>
 800aecc:	ec51 0b10 	vmov	r0, r1, d0
 800aed0:	b17e      	cbz	r6, 800aef2 <sulp+0x36>
 800aed2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aed6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	dd09      	ble.n	800aef2 <sulp+0x36>
 800aede:	051b      	lsls	r3, r3, #20
 800aee0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aee4:	2400      	movs	r4, #0
 800aee6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aeea:	4622      	mov	r2, r4
 800aeec:	462b      	mov	r3, r5
 800aeee:	f7f5 fb8b 	bl	8000608 <__aeabi_dmul>
 800aef2:	ec41 0b10 	vmov	d0, r0, r1
 800aef6:	bd70      	pop	{r4, r5, r6, pc}

0800aef8 <_strtod_l>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	b09f      	sub	sp, #124	@ 0x7c
 800aefe:	460c      	mov	r4, r1
 800af00:	9217      	str	r2, [sp, #92]	@ 0x5c
 800af02:	2200      	movs	r2, #0
 800af04:	921a      	str	r2, [sp, #104]	@ 0x68
 800af06:	9005      	str	r0, [sp, #20]
 800af08:	f04f 0a00 	mov.w	sl, #0
 800af0c:	f04f 0b00 	mov.w	fp, #0
 800af10:	460a      	mov	r2, r1
 800af12:	9219      	str	r2, [sp, #100]	@ 0x64
 800af14:	7811      	ldrb	r1, [r2, #0]
 800af16:	292b      	cmp	r1, #43	@ 0x2b
 800af18:	d04a      	beq.n	800afb0 <_strtod_l+0xb8>
 800af1a:	d838      	bhi.n	800af8e <_strtod_l+0x96>
 800af1c:	290d      	cmp	r1, #13
 800af1e:	d832      	bhi.n	800af86 <_strtod_l+0x8e>
 800af20:	2908      	cmp	r1, #8
 800af22:	d832      	bhi.n	800af8a <_strtod_l+0x92>
 800af24:	2900      	cmp	r1, #0
 800af26:	d03b      	beq.n	800afa0 <_strtod_l+0xa8>
 800af28:	2200      	movs	r2, #0
 800af2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800af2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800af2e:	782a      	ldrb	r2, [r5, #0]
 800af30:	2a30      	cmp	r2, #48	@ 0x30
 800af32:	f040 80b2 	bne.w	800b09a <_strtod_l+0x1a2>
 800af36:	786a      	ldrb	r2, [r5, #1]
 800af38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af3c:	2a58      	cmp	r2, #88	@ 0x58
 800af3e:	d16e      	bne.n	800b01e <_strtod_l+0x126>
 800af40:	9302      	str	r3, [sp, #8]
 800af42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	ab1a      	add	r3, sp, #104	@ 0x68
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	4a8f      	ldr	r2, [pc, #572]	@ (800b188 <_strtod_l+0x290>)
 800af4c:	9805      	ldr	r0, [sp, #20]
 800af4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800af50:	a919      	add	r1, sp, #100	@ 0x64
 800af52:	f001 f927 	bl	800c1a4 <__gethex>
 800af56:	f010 060f 	ands.w	r6, r0, #15
 800af5a:	4604      	mov	r4, r0
 800af5c:	d005      	beq.n	800af6a <_strtod_l+0x72>
 800af5e:	2e06      	cmp	r6, #6
 800af60:	d128      	bne.n	800afb4 <_strtod_l+0xbc>
 800af62:	3501      	adds	r5, #1
 800af64:	2300      	movs	r3, #0
 800af66:	9519      	str	r5, [sp, #100]	@ 0x64
 800af68:	930e      	str	r3, [sp, #56]	@ 0x38
 800af6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 858e 	bne.w	800ba8e <_strtod_l+0xb96>
 800af72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af74:	b1cb      	cbz	r3, 800afaa <_strtod_l+0xb2>
 800af76:	4652      	mov	r2, sl
 800af78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800af7c:	ec43 2b10 	vmov	d0, r2, r3
 800af80:	b01f      	add	sp, #124	@ 0x7c
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	2920      	cmp	r1, #32
 800af88:	d1ce      	bne.n	800af28 <_strtod_l+0x30>
 800af8a:	3201      	adds	r2, #1
 800af8c:	e7c1      	b.n	800af12 <_strtod_l+0x1a>
 800af8e:	292d      	cmp	r1, #45	@ 0x2d
 800af90:	d1ca      	bne.n	800af28 <_strtod_l+0x30>
 800af92:	2101      	movs	r1, #1
 800af94:	910e      	str	r1, [sp, #56]	@ 0x38
 800af96:	1c51      	adds	r1, r2, #1
 800af98:	9119      	str	r1, [sp, #100]	@ 0x64
 800af9a:	7852      	ldrb	r2, [r2, #1]
 800af9c:	2a00      	cmp	r2, #0
 800af9e:	d1c5      	bne.n	800af2c <_strtod_l+0x34>
 800afa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800afa2:	9419      	str	r4, [sp, #100]	@ 0x64
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f040 8570 	bne.w	800ba8a <_strtod_l+0xb92>
 800afaa:	4652      	mov	r2, sl
 800afac:	465b      	mov	r3, fp
 800afae:	e7e5      	b.n	800af7c <_strtod_l+0x84>
 800afb0:	2100      	movs	r1, #0
 800afb2:	e7ef      	b.n	800af94 <_strtod_l+0x9c>
 800afb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800afb6:	b13a      	cbz	r2, 800afc8 <_strtod_l+0xd0>
 800afb8:	2135      	movs	r1, #53	@ 0x35
 800afba:	a81c      	add	r0, sp, #112	@ 0x70
 800afbc:	f002 f908 	bl	800d1d0 <__copybits>
 800afc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afc2:	9805      	ldr	r0, [sp, #20]
 800afc4:	f001 fcc0 	bl	800c948 <_Bfree>
 800afc8:	3e01      	subs	r6, #1
 800afca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800afcc:	2e04      	cmp	r6, #4
 800afce:	d806      	bhi.n	800afde <_strtod_l+0xe6>
 800afd0:	e8df f006 	tbb	[pc, r6]
 800afd4:	201d0314 	.word	0x201d0314
 800afd8:	14          	.byte	0x14
 800afd9:	00          	.byte	0x00
 800afda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800afde:	05e1      	lsls	r1, r4, #23
 800afe0:	bf48      	it	mi
 800afe2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800afe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afea:	0d1b      	lsrs	r3, r3, #20
 800afec:	051b      	lsls	r3, r3, #20
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1bb      	bne.n	800af6a <_strtod_l+0x72>
 800aff2:	f000 ffe1 	bl	800bfb8 <__errno>
 800aff6:	2322      	movs	r3, #34	@ 0x22
 800aff8:	6003      	str	r3, [r0, #0]
 800affa:	e7b6      	b.n	800af6a <_strtod_l+0x72>
 800affc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b000:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b004:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b008:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b00c:	e7e7      	b.n	800afde <_strtod_l+0xe6>
 800b00e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b190 <_strtod_l+0x298>
 800b012:	e7e4      	b.n	800afde <_strtod_l+0xe6>
 800b014:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b018:	f04f 3aff 	mov.w	sl, #4294967295
 800b01c:	e7df      	b.n	800afde <_strtod_l+0xe6>
 800b01e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b020:	1c5a      	adds	r2, r3, #1
 800b022:	9219      	str	r2, [sp, #100]	@ 0x64
 800b024:	785b      	ldrb	r3, [r3, #1]
 800b026:	2b30      	cmp	r3, #48	@ 0x30
 800b028:	d0f9      	beq.n	800b01e <_strtod_l+0x126>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d09d      	beq.n	800af6a <_strtod_l+0x72>
 800b02e:	2301      	movs	r3, #1
 800b030:	2700      	movs	r7, #0
 800b032:	9308      	str	r3, [sp, #32]
 800b034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b036:	930c      	str	r3, [sp, #48]	@ 0x30
 800b038:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b03a:	46b9      	mov	r9, r7
 800b03c:	220a      	movs	r2, #10
 800b03e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b040:	7805      	ldrb	r5, [r0, #0]
 800b042:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b046:	b2d9      	uxtb	r1, r3
 800b048:	2909      	cmp	r1, #9
 800b04a:	d928      	bls.n	800b09e <_strtod_l+0x1a6>
 800b04c:	494f      	ldr	r1, [pc, #316]	@ (800b18c <_strtod_l+0x294>)
 800b04e:	2201      	movs	r2, #1
 800b050:	f000 ff43 	bl	800beda <strncmp>
 800b054:	2800      	cmp	r0, #0
 800b056:	d032      	beq.n	800b0be <_strtod_l+0x1c6>
 800b058:	2000      	movs	r0, #0
 800b05a:	462a      	mov	r2, r5
 800b05c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b05e:	464d      	mov	r5, r9
 800b060:	4603      	mov	r3, r0
 800b062:	2a65      	cmp	r2, #101	@ 0x65
 800b064:	d001      	beq.n	800b06a <_strtod_l+0x172>
 800b066:	2a45      	cmp	r2, #69	@ 0x45
 800b068:	d114      	bne.n	800b094 <_strtod_l+0x19c>
 800b06a:	b91d      	cbnz	r5, 800b074 <_strtod_l+0x17c>
 800b06c:	9a08      	ldr	r2, [sp, #32]
 800b06e:	4302      	orrs	r2, r0
 800b070:	d096      	beq.n	800afa0 <_strtod_l+0xa8>
 800b072:	2500      	movs	r5, #0
 800b074:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b076:	1c62      	adds	r2, r4, #1
 800b078:	9219      	str	r2, [sp, #100]	@ 0x64
 800b07a:	7862      	ldrb	r2, [r4, #1]
 800b07c:	2a2b      	cmp	r2, #43	@ 0x2b
 800b07e:	d07a      	beq.n	800b176 <_strtod_l+0x27e>
 800b080:	2a2d      	cmp	r2, #45	@ 0x2d
 800b082:	d07e      	beq.n	800b182 <_strtod_l+0x28a>
 800b084:	f04f 0c00 	mov.w	ip, #0
 800b088:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b08c:	2909      	cmp	r1, #9
 800b08e:	f240 8085 	bls.w	800b19c <_strtod_l+0x2a4>
 800b092:	9419      	str	r4, [sp, #100]	@ 0x64
 800b094:	f04f 0800 	mov.w	r8, #0
 800b098:	e0a5      	b.n	800b1e6 <_strtod_l+0x2ee>
 800b09a:	2300      	movs	r3, #0
 800b09c:	e7c8      	b.n	800b030 <_strtod_l+0x138>
 800b09e:	f1b9 0f08 	cmp.w	r9, #8
 800b0a2:	bfd8      	it	le
 800b0a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b0a6:	f100 0001 	add.w	r0, r0, #1
 800b0aa:	bfda      	itte	le
 800b0ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800b0b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b0b2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b0b6:	f109 0901 	add.w	r9, r9, #1
 800b0ba:	9019      	str	r0, [sp, #100]	@ 0x64
 800b0bc:	e7bf      	b.n	800b03e <_strtod_l+0x146>
 800b0be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0c4:	785a      	ldrb	r2, [r3, #1]
 800b0c6:	f1b9 0f00 	cmp.w	r9, #0
 800b0ca:	d03b      	beq.n	800b144 <_strtod_l+0x24c>
 800b0cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0ce:	464d      	mov	r5, r9
 800b0d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b0d4:	2b09      	cmp	r3, #9
 800b0d6:	d912      	bls.n	800b0fe <_strtod_l+0x206>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e7c2      	b.n	800b062 <_strtod_l+0x16a>
 800b0dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0e2:	785a      	ldrb	r2, [r3, #1]
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	2a30      	cmp	r2, #48	@ 0x30
 800b0e8:	d0f8      	beq.n	800b0dc <_strtod_l+0x1e4>
 800b0ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b0ee:	2b08      	cmp	r3, #8
 800b0f0:	f200 84d2 	bhi.w	800ba98 <_strtod_l+0xba0>
 800b0f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0f6:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	3a30      	subs	r2, #48	@ 0x30
 800b100:	f100 0301 	add.w	r3, r0, #1
 800b104:	d018      	beq.n	800b138 <_strtod_l+0x240>
 800b106:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b108:	4419      	add	r1, r3
 800b10a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b10c:	462e      	mov	r6, r5
 800b10e:	f04f 0e0a 	mov.w	lr, #10
 800b112:	1c71      	adds	r1, r6, #1
 800b114:	eba1 0c05 	sub.w	ip, r1, r5
 800b118:	4563      	cmp	r3, ip
 800b11a:	dc15      	bgt.n	800b148 <_strtod_l+0x250>
 800b11c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b120:	182b      	adds	r3, r5, r0
 800b122:	2b08      	cmp	r3, #8
 800b124:	f105 0501 	add.w	r5, r5, #1
 800b128:	4405      	add	r5, r0
 800b12a:	dc1a      	bgt.n	800b162 <_strtod_l+0x26a>
 800b12c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b12e:	230a      	movs	r3, #10
 800b130:	fb03 2301 	mla	r3, r3, r1, r2
 800b134:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b136:	2300      	movs	r3, #0
 800b138:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b13a:	1c51      	adds	r1, r2, #1
 800b13c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b13e:	7852      	ldrb	r2, [r2, #1]
 800b140:	4618      	mov	r0, r3
 800b142:	e7c5      	b.n	800b0d0 <_strtod_l+0x1d8>
 800b144:	4648      	mov	r0, r9
 800b146:	e7ce      	b.n	800b0e6 <_strtod_l+0x1ee>
 800b148:	2e08      	cmp	r6, #8
 800b14a:	dc05      	bgt.n	800b158 <_strtod_l+0x260>
 800b14c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b14e:	fb0e f606 	mul.w	r6, lr, r6
 800b152:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b154:	460e      	mov	r6, r1
 800b156:	e7dc      	b.n	800b112 <_strtod_l+0x21a>
 800b158:	2910      	cmp	r1, #16
 800b15a:	bfd8      	it	le
 800b15c:	fb0e f707 	mulle.w	r7, lr, r7
 800b160:	e7f8      	b.n	800b154 <_strtod_l+0x25c>
 800b162:	2b0f      	cmp	r3, #15
 800b164:	bfdc      	itt	le
 800b166:	230a      	movle	r3, #10
 800b168:	fb03 2707 	mlale	r7, r3, r7, r2
 800b16c:	e7e3      	b.n	800b136 <_strtod_l+0x23e>
 800b16e:	2300      	movs	r3, #0
 800b170:	930a      	str	r3, [sp, #40]	@ 0x28
 800b172:	2301      	movs	r3, #1
 800b174:	e77a      	b.n	800b06c <_strtod_l+0x174>
 800b176:	f04f 0c00 	mov.w	ip, #0
 800b17a:	1ca2      	adds	r2, r4, #2
 800b17c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b17e:	78a2      	ldrb	r2, [r4, #2]
 800b180:	e782      	b.n	800b088 <_strtod_l+0x190>
 800b182:	f04f 0c01 	mov.w	ip, #1
 800b186:	e7f8      	b.n	800b17a <_strtod_l+0x282>
 800b188:	08023064 	.word	0x08023064
 800b18c:	08022dcc 	.word	0x08022dcc
 800b190:	7ff00000 	.word	0x7ff00000
 800b194:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b196:	1c51      	adds	r1, r2, #1
 800b198:	9119      	str	r1, [sp, #100]	@ 0x64
 800b19a:	7852      	ldrb	r2, [r2, #1]
 800b19c:	2a30      	cmp	r2, #48	@ 0x30
 800b19e:	d0f9      	beq.n	800b194 <_strtod_l+0x29c>
 800b1a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b1a4:	2908      	cmp	r1, #8
 800b1a6:	f63f af75 	bhi.w	800b094 <_strtod_l+0x19c>
 800b1aa:	3a30      	subs	r2, #48	@ 0x30
 800b1ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b1b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b1b2:	f04f 080a 	mov.w	r8, #10
 800b1b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b1b8:	1c56      	adds	r6, r2, #1
 800b1ba:	9619      	str	r6, [sp, #100]	@ 0x64
 800b1bc:	7852      	ldrb	r2, [r2, #1]
 800b1be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b1c2:	f1be 0f09 	cmp.w	lr, #9
 800b1c6:	d939      	bls.n	800b23c <_strtod_l+0x344>
 800b1c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b1ca:	1a76      	subs	r6, r6, r1
 800b1cc:	2e08      	cmp	r6, #8
 800b1ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b1d2:	dc03      	bgt.n	800b1dc <_strtod_l+0x2e4>
 800b1d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1d6:	4588      	cmp	r8, r1
 800b1d8:	bfa8      	it	ge
 800b1da:	4688      	movge	r8, r1
 800b1dc:	f1bc 0f00 	cmp.w	ip, #0
 800b1e0:	d001      	beq.n	800b1e6 <_strtod_l+0x2ee>
 800b1e2:	f1c8 0800 	rsb	r8, r8, #0
 800b1e6:	2d00      	cmp	r5, #0
 800b1e8:	d14e      	bne.n	800b288 <_strtod_l+0x390>
 800b1ea:	9908      	ldr	r1, [sp, #32]
 800b1ec:	4301      	orrs	r1, r0
 800b1ee:	f47f aebc 	bne.w	800af6a <_strtod_l+0x72>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f47f aed4 	bne.w	800afa0 <_strtod_l+0xa8>
 800b1f8:	2a69      	cmp	r2, #105	@ 0x69
 800b1fa:	d028      	beq.n	800b24e <_strtod_l+0x356>
 800b1fc:	dc25      	bgt.n	800b24a <_strtod_l+0x352>
 800b1fe:	2a49      	cmp	r2, #73	@ 0x49
 800b200:	d025      	beq.n	800b24e <_strtod_l+0x356>
 800b202:	2a4e      	cmp	r2, #78	@ 0x4e
 800b204:	f47f aecc 	bne.w	800afa0 <_strtod_l+0xa8>
 800b208:	499a      	ldr	r1, [pc, #616]	@ (800b474 <_strtod_l+0x57c>)
 800b20a:	a819      	add	r0, sp, #100	@ 0x64
 800b20c:	f001 f9ec 	bl	800c5e8 <__match>
 800b210:	2800      	cmp	r0, #0
 800b212:	f43f aec5 	beq.w	800afa0 <_strtod_l+0xa8>
 800b216:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b28      	cmp	r3, #40	@ 0x28
 800b21c:	d12e      	bne.n	800b27c <_strtod_l+0x384>
 800b21e:	4996      	ldr	r1, [pc, #600]	@ (800b478 <_strtod_l+0x580>)
 800b220:	aa1c      	add	r2, sp, #112	@ 0x70
 800b222:	a819      	add	r0, sp, #100	@ 0x64
 800b224:	f001 f9f4 	bl	800c610 <__hexnan>
 800b228:	2805      	cmp	r0, #5
 800b22a:	d127      	bne.n	800b27c <_strtod_l+0x384>
 800b22c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b22e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b232:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b236:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b23a:	e696      	b.n	800af6a <_strtod_l+0x72>
 800b23c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b23e:	fb08 2101 	mla	r1, r8, r1, r2
 800b242:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b246:	9209      	str	r2, [sp, #36]	@ 0x24
 800b248:	e7b5      	b.n	800b1b6 <_strtod_l+0x2be>
 800b24a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b24c:	e7da      	b.n	800b204 <_strtod_l+0x30c>
 800b24e:	498b      	ldr	r1, [pc, #556]	@ (800b47c <_strtod_l+0x584>)
 800b250:	a819      	add	r0, sp, #100	@ 0x64
 800b252:	f001 f9c9 	bl	800c5e8 <__match>
 800b256:	2800      	cmp	r0, #0
 800b258:	f43f aea2 	beq.w	800afa0 <_strtod_l+0xa8>
 800b25c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b25e:	4988      	ldr	r1, [pc, #544]	@ (800b480 <_strtod_l+0x588>)
 800b260:	3b01      	subs	r3, #1
 800b262:	a819      	add	r0, sp, #100	@ 0x64
 800b264:	9319      	str	r3, [sp, #100]	@ 0x64
 800b266:	f001 f9bf 	bl	800c5e8 <__match>
 800b26a:	b910      	cbnz	r0, 800b272 <_strtod_l+0x37a>
 800b26c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b26e:	3301      	adds	r3, #1
 800b270:	9319      	str	r3, [sp, #100]	@ 0x64
 800b272:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b490 <_strtod_l+0x598>
 800b276:	f04f 0a00 	mov.w	sl, #0
 800b27a:	e676      	b.n	800af6a <_strtod_l+0x72>
 800b27c:	4881      	ldr	r0, [pc, #516]	@ (800b484 <_strtod_l+0x58c>)
 800b27e:	f000 fed7 	bl	800c030 <nan>
 800b282:	ec5b ab10 	vmov	sl, fp, d0
 800b286:	e670      	b.n	800af6a <_strtod_l+0x72>
 800b288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b28a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b28c:	eba8 0303 	sub.w	r3, r8, r3
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	bf08      	it	eq
 800b296:	46a9      	moveq	r9, r5
 800b298:	2d10      	cmp	r5, #16
 800b29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b29c:	462c      	mov	r4, r5
 800b29e:	bfa8      	it	ge
 800b2a0:	2410      	movge	r4, #16
 800b2a2:	f7f5 f937 	bl	8000514 <__aeabi_ui2d>
 800b2a6:	2d09      	cmp	r5, #9
 800b2a8:	4682      	mov	sl, r0
 800b2aa:	468b      	mov	fp, r1
 800b2ac:	dc13      	bgt.n	800b2d6 <_strtod_l+0x3de>
 800b2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f43f ae5a 	beq.w	800af6a <_strtod_l+0x72>
 800b2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b8:	dd78      	ble.n	800b3ac <_strtod_l+0x4b4>
 800b2ba:	2b16      	cmp	r3, #22
 800b2bc:	dc5f      	bgt.n	800b37e <_strtod_l+0x486>
 800b2be:	4972      	ldr	r1, [pc, #456]	@ (800b488 <_strtod_l+0x590>)
 800b2c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c8:	4652      	mov	r2, sl
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	f7f5 f99c 	bl	8000608 <__aeabi_dmul>
 800b2d0:	4682      	mov	sl, r0
 800b2d2:	468b      	mov	fp, r1
 800b2d4:	e649      	b.n	800af6a <_strtod_l+0x72>
 800b2d6:	4b6c      	ldr	r3, [pc, #432]	@ (800b488 <_strtod_l+0x590>)
 800b2d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b2e0:	f7f5 f992 	bl	8000608 <__aeabi_dmul>
 800b2e4:	4682      	mov	sl, r0
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	468b      	mov	fp, r1
 800b2ea:	f7f5 f913 	bl	8000514 <__aeabi_ui2d>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	4659      	mov	r1, fp
 800b2f6:	f7f4 ffd1 	bl	800029c <__adddf3>
 800b2fa:	2d0f      	cmp	r5, #15
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	468b      	mov	fp, r1
 800b300:	ddd5      	ble.n	800b2ae <_strtod_l+0x3b6>
 800b302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b304:	1b2c      	subs	r4, r5, r4
 800b306:	441c      	add	r4, r3
 800b308:	2c00      	cmp	r4, #0
 800b30a:	f340 8093 	ble.w	800b434 <_strtod_l+0x53c>
 800b30e:	f014 030f 	ands.w	r3, r4, #15
 800b312:	d00a      	beq.n	800b32a <_strtod_l+0x432>
 800b314:	495c      	ldr	r1, [pc, #368]	@ (800b488 <_strtod_l+0x590>)
 800b316:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b31a:	4652      	mov	r2, sl
 800b31c:	465b      	mov	r3, fp
 800b31e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b322:	f7f5 f971 	bl	8000608 <__aeabi_dmul>
 800b326:	4682      	mov	sl, r0
 800b328:	468b      	mov	fp, r1
 800b32a:	f034 040f 	bics.w	r4, r4, #15
 800b32e:	d073      	beq.n	800b418 <_strtod_l+0x520>
 800b330:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b334:	dd49      	ble.n	800b3ca <_strtod_l+0x4d2>
 800b336:	2400      	movs	r4, #0
 800b338:	46a0      	mov	r8, r4
 800b33a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b33c:	46a1      	mov	r9, r4
 800b33e:	9a05      	ldr	r2, [sp, #20]
 800b340:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b490 <_strtod_l+0x598>
 800b344:	2322      	movs	r3, #34	@ 0x22
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	f04f 0a00 	mov.w	sl, #0
 800b34c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f43f ae0b 	beq.w	800af6a <_strtod_l+0x72>
 800b354:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b356:	9805      	ldr	r0, [sp, #20]
 800b358:	f001 faf6 	bl	800c948 <_Bfree>
 800b35c:	9805      	ldr	r0, [sp, #20]
 800b35e:	4649      	mov	r1, r9
 800b360:	f001 faf2 	bl	800c948 <_Bfree>
 800b364:	9805      	ldr	r0, [sp, #20]
 800b366:	4641      	mov	r1, r8
 800b368:	f001 faee 	bl	800c948 <_Bfree>
 800b36c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b36e:	9805      	ldr	r0, [sp, #20]
 800b370:	f001 faea 	bl	800c948 <_Bfree>
 800b374:	9805      	ldr	r0, [sp, #20]
 800b376:	4621      	mov	r1, r4
 800b378:	f001 fae6 	bl	800c948 <_Bfree>
 800b37c:	e5f5      	b.n	800af6a <_strtod_l+0x72>
 800b37e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b380:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b384:	4293      	cmp	r3, r2
 800b386:	dbbc      	blt.n	800b302 <_strtod_l+0x40a>
 800b388:	4c3f      	ldr	r4, [pc, #252]	@ (800b488 <_strtod_l+0x590>)
 800b38a:	f1c5 050f 	rsb	r5, r5, #15
 800b38e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b392:	4652      	mov	r2, sl
 800b394:	465b      	mov	r3, fp
 800b396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b39a:	f7f5 f935 	bl	8000608 <__aeabi_dmul>
 800b39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a0:	1b5d      	subs	r5, r3, r5
 800b3a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b3a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b3aa:	e78f      	b.n	800b2cc <_strtod_l+0x3d4>
 800b3ac:	3316      	adds	r3, #22
 800b3ae:	dba8      	blt.n	800b302 <_strtod_l+0x40a>
 800b3b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3b2:	eba3 0808 	sub.w	r8, r3, r8
 800b3b6:	4b34      	ldr	r3, [pc, #208]	@ (800b488 <_strtod_l+0x590>)
 800b3b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b3bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	f7f5 fa4a 	bl	800085c <__aeabi_ddiv>
 800b3c8:	e782      	b.n	800b2d0 <_strtod_l+0x3d8>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	4f2f      	ldr	r7, [pc, #188]	@ (800b48c <_strtod_l+0x594>)
 800b3ce:	1124      	asrs	r4, r4, #4
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	4659      	mov	r1, fp
 800b3d4:	461e      	mov	r6, r3
 800b3d6:	2c01      	cmp	r4, #1
 800b3d8:	dc21      	bgt.n	800b41e <_strtod_l+0x526>
 800b3da:	b10b      	cbz	r3, 800b3e0 <_strtod_l+0x4e8>
 800b3dc:	4682      	mov	sl, r0
 800b3de:	468b      	mov	fp, r1
 800b3e0:	492a      	ldr	r1, [pc, #168]	@ (800b48c <_strtod_l+0x594>)
 800b3e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b3e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b3ea:	4652      	mov	r2, sl
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f2:	f7f5 f909 	bl	8000608 <__aeabi_dmul>
 800b3f6:	4b26      	ldr	r3, [pc, #152]	@ (800b490 <_strtod_l+0x598>)
 800b3f8:	460a      	mov	r2, r1
 800b3fa:	400b      	ands	r3, r1
 800b3fc:	4925      	ldr	r1, [pc, #148]	@ (800b494 <_strtod_l+0x59c>)
 800b3fe:	428b      	cmp	r3, r1
 800b400:	4682      	mov	sl, r0
 800b402:	d898      	bhi.n	800b336 <_strtod_l+0x43e>
 800b404:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b408:	428b      	cmp	r3, r1
 800b40a:	bf86      	itte	hi
 800b40c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b498 <_strtod_l+0x5a0>
 800b410:	f04f 3aff 	movhi.w	sl, #4294967295
 800b414:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b418:	2300      	movs	r3, #0
 800b41a:	9308      	str	r3, [sp, #32]
 800b41c:	e076      	b.n	800b50c <_strtod_l+0x614>
 800b41e:	07e2      	lsls	r2, r4, #31
 800b420:	d504      	bpl.n	800b42c <_strtod_l+0x534>
 800b422:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b426:	f7f5 f8ef 	bl	8000608 <__aeabi_dmul>
 800b42a:	2301      	movs	r3, #1
 800b42c:	3601      	adds	r6, #1
 800b42e:	1064      	asrs	r4, r4, #1
 800b430:	3708      	adds	r7, #8
 800b432:	e7d0      	b.n	800b3d6 <_strtod_l+0x4de>
 800b434:	d0f0      	beq.n	800b418 <_strtod_l+0x520>
 800b436:	4264      	negs	r4, r4
 800b438:	f014 020f 	ands.w	r2, r4, #15
 800b43c:	d00a      	beq.n	800b454 <_strtod_l+0x55c>
 800b43e:	4b12      	ldr	r3, [pc, #72]	@ (800b488 <_strtod_l+0x590>)
 800b440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b444:	4650      	mov	r0, sl
 800b446:	4659      	mov	r1, fp
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f5 fa06 	bl	800085c <__aeabi_ddiv>
 800b450:	4682      	mov	sl, r0
 800b452:	468b      	mov	fp, r1
 800b454:	1124      	asrs	r4, r4, #4
 800b456:	d0df      	beq.n	800b418 <_strtod_l+0x520>
 800b458:	2c1f      	cmp	r4, #31
 800b45a:	dd1f      	ble.n	800b49c <_strtod_l+0x5a4>
 800b45c:	2400      	movs	r4, #0
 800b45e:	46a0      	mov	r8, r4
 800b460:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b462:	46a1      	mov	r9, r4
 800b464:	9a05      	ldr	r2, [sp, #20]
 800b466:	2322      	movs	r3, #34	@ 0x22
 800b468:	f04f 0a00 	mov.w	sl, #0
 800b46c:	f04f 0b00 	mov.w	fp, #0
 800b470:	6013      	str	r3, [r2, #0]
 800b472:	e76b      	b.n	800b34c <_strtod_l+0x454>
 800b474:	08022dd1 	.word	0x08022dd1
 800b478:	08023050 	.word	0x08023050
 800b47c:	08022dce 	.word	0x08022dce
 800b480:	08022fc3 	.word	0x08022fc3
 800b484:	08022fbf 	.word	0x08022fbf
 800b488:	080230d8 	.word	0x080230d8
 800b48c:	080230b0 	.word	0x080230b0
 800b490:	7ff00000 	.word	0x7ff00000
 800b494:	7ca00000 	.word	0x7ca00000
 800b498:	7fefffff 	.word	0x7fefffff
 800b49c:	f014 0310 	ands.w	r3, r4, #16
 800b4a0:	bf18      	it	ne
 800b4a2:	236a      	movne	r3, #106	@ 0x6a
 800b4a4:	4ea9      	ldr	r6, [pc, #676]	@ (800b74c <_strtod_l+0x854>)
 800b4a6:	9308      	str	r3, [sp, #32]
 800b4a8:	4650      	mov	r0, sl
 800b4aa:	4659      	mov	r1, fp
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	07e7      	lsls	r7, r4, #31
 800b4b0:	d504      	bpl.n	800b4bc <_strtod_l+0x5c4>
 800b4b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4b6:	f7f5 f8a7 	bl	8000608 <__aeabi_dmul>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	1064      	asrs	r4, r4, #1
 800b4be:	f106 0608 	add.w	r6, r6, #8
 800b4c2:	d1f4      	bne.n	800b4ae <_strtod_l+0x5b6>
 800b4c4:	b10b      	cbz	r3, 800b4ca <_strtod_l+0x5d2>
 800b4c6:	4682      	mov	sl, r0
 800b4c8:	468b      	mov	fp, r1
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	b1b3      	cbz	r3, 800b4fc <_strtod_l+0x604>
 800b4ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b4d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	4659      	mov	r1, fp
 800b4da:	dd0f      	ble.n	800b4fc <_strtod_l+0x604>
 800b4dc:	2b1f      	cmp	r3, #31
 800b4de:	dd56      	ble.n	800b58e <_strtod_l+0x696>
 800b4e0:	2b34      	cmp	r3, #52	@ 0x34
 800b4e2:	bfde      	ittt	le
 800b4e4:	f04f 33ff 	movle.w	r3, #4294967295
 800b4e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b4ec:	4093      	lslle	r3, r2
 800b4ee:	f04f 0a00 	mov.w	sl, #0
 800b4f2:	bfcc      	ite	gt
 800b4f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b4f8:	ea03 0b01 	andle.w	fp, r3, r1
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	2300      	movs	r3, #0
 800b500:	4650      	mov	r0, sl
 800b502:	4659      	mov	r1, fp
 800b504:	f7f5 fae8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1a7      	bne.n	800b45c <_strtod_l+0x564>
 800b50c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b512:	9805      	ldr	r0, [sp, #20]
 800b514:	462b      	mov	r3, r5
 800b516:	464a      	mov	r2, r9
 800b518:	f001 fa7e 	bl	800ca18 <__s2b>
 800b51c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b51e:	2800      	cmp	r0, #0
 800b520:	f43f af09 	beq.w	800b336 <_strtod_l+0x43e>
 800b524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b526:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b528:	2a00      	cmp	r2, #0
 800b52a:	eba3 0308 	sub.w	r3, r3, r8
 800b52e:	bfa8      	it	ge
 800b530:	2300      	movge	r3, #0
 800b532:	9312      	str	r3, [sp, #72]	@ 0x48
 800b534:	2400      	movs	r4, #0
 800b536:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b53a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b53c:	46a0      	mov	r8, r4
 800b53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b540:	9805      	ldr	r0, [sp, #20]
 800b542:	6859      	ldr	r1, [r3, #4]
 800b544:	f001 f9c0 	bl	800c8c8 <_Balloc>
 800b548:	4681      	mov	r9, r0
 800b54a:	2800      	cmp	r0, #0
 800b54c:	f43f aef7 	beq.w	800b33e <_strtod_l+0x446>
 800b550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	3202      	adds	r2, #2
 800b556:	f103 010c 	add.w	r1, r3, #12
 800b55a:	0092      	lsls	r2, r2, #2
 800b55c:	300c      	adds	r0, #12
 800b55e:	f000 fd58 	bl	800c012 <memcpy>
 800b562:	ec4b ab10 	vmov	d0, sl, fp
 800b566:	9805      	ldr	r0, [sp, #20]
 800b568:	aa1c      	add	r2, sp, #112	@ 0x70
 800b56a:	a91b      	add	r1, sp, #108	@ 0x6c
 800b56c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b570:	f001 fd86 	bl	800d080 <__d2b>
 800b574:	901a      	str	r0, [sp, #104]	@ 0x68
 800b576:	2800      	cmp	r0, #0
 800b578:	f43f aee1 	beq.w	800b33e <_strtod_l+0x446>
 800b57c:	9805      	ldr	r0, [sp, #20]
 800b57e:	2101      	movs	r1, #1
 800b580:	f001 fae0 	bl	800cb44 <__i2b>
 800b584:	4680      	mov	r8, r0
 800b586:	b948      	cbnz	r0, 800b59c <_strtod_l+0x6a4>
 800b588:	f04f 0800 	mov.w	r8, #0
 800b58c:	e6d7      	b.n	800b33e <_strtod_l+0x446>
 800b58e:	f04f 32ff 	mov.w	r2, #4294967295
 800b592:	fa02 f303 	lsl.w	r3, r2, r3
 800b596:	ea03 0a0a 	and.w	sl, r3, sl
 800b59a:	e7af      	b.n	800b4fc <_strtod_l+0x604>
 800b59c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b59e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	bfab      	itete	ge
 800b5a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b5a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b5a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b5aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b5ac:	bfac      	ite	ge
 800b5ae:	18ef      	addge	r7, r5, r3
 800b5b0:	1b5e      	sublt	r6, r3, r5
 800b5b2:	9b08      	ldr	r3, [sp, #32]
 800b5b4:	1aed      	subs	r5, r5, r3
 800b5b6:	4415      	add	r5, r2
 800b5b8:	4b65      	ldr	r3, [pc, #404]	@ (800b750 <_strtod_l+0x858>)
 800b5ba:	3d01      	subs	r5, #1
 800b5bc:	429d      	cmp	r5, r3
 800b5be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b5c2:	da50      	bge.n	800b666 <_strtod_l+0x76e>
 800b5c4:	1b5b      	subs	r3, r3, r5
 800b5c6:	2b1f      	cmp	r3, #31
 800b5c8:	eba2 0203 	sub.w	r2, r2, r3
 800b5cc:	f04f 0101 	mov.w	r1, #1
 800b5d0:	dc3d      	bgt.n	800b64e <_strtod_l+0x756>
 800b5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5dc:	18bd      	adds	r5, r7, r2
 800b5de:	9b08      	ldr	r3, [sp, #32]
 800b5e0:	42af      	cmp	r7, r5
 800b5e2:	4416      	add	r6, r2
 800b5e4:	441e      	add	r6, r3
 800b5e6:	463b      	mov	r3, r7
 800b5e8:	bfa8      	it	ge
 800b5ea:	462b      	movge	r3, r5
 800b5ec:	42b3      	cmp	r3, r6
 800b5ee:	bfa8      	it	ge
 800b5f0:	4633      	movge	r3, r6
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bfc2      	ittt	gt
 800b5f6:	1aed      	subgt	r5, r5, r3
 800b5f8:	1af6      	subgt	r6, r6, r3
 800b5fa:	1aff      	subgt	r7, r7, r3
 800b5fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	dd16      	ble.n	800b630 <_strtod_l+0x738>
 800b602:	4641      	mov	r1, r8
 800b604:	9805      	ldr	r0, [sp, #20]
 800b606:	461a      	mov	r2, r3
 800b608:	f001 fb54 	bl	800ccb4 <__pow5mult>
 800b60c:	4680      	mov	r8, r0
 800b60e:	2800      	cmp	r0, #0
 800b610:	d0ba      	beq.n	800b588 <_strtod_l+0x690>
 800b612:	4601      	mov	r1, r0
 800b614:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b616:	9805      	ldr	r0, [sp, #20]
 800b618:	f001 faaa 	bl	800cb70 <__multiply>
 800b61c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f ae8d 	beq.w	800b33e <_strtod_l+0x446>
 800b624:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b626:	9805      	ldr	r0, [sp, #20]
 800b628:	f001 f98e 	bl	800c948 <_Bfree>
 800b62c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b62e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b630:	2d00      	cmp	r5, #0
 800b632:	dc1d      	bgt.n	800b670 <_strtod_l+0x778>
 800b634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b636:	2b00      	cmp	r3, #0
 800b638:	dd23      	ble.n	800b682 <_strtod_l+0x78a>
 800b63a:	4649      	mov	r1, r9
 800b63c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b63e:	9805      	ldr	r0, [sp, #20]
 800b640:	f001 fb38 	bl	800ccb4 <__pow5mult>
 800b644:	4681      	mov	r9, r0
 800b646:	b9e0      	cbnz	r0, 800b682 <_strtod_l+0x78a>
 800b648:	f04f 0900 	mov.w	r9, #0
 800b64c:	e677      	b.n	800b33e <_strtod_l+0x446>
 800b64e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b652:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b656:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b65a:	35e2      	adds	r5, #226	@ 0xe2
 800b65c:	fa01 f305 	lsl.w	r3, r1, r5
 800b660:	9310      	str	r3, [sp, #64]	@ 0x40
 800b662:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b664:	e7ba      	b.n	800b5dc <_strtod_l+0x6e4>
 800b666:	2300      	movs	r3, #0
 800b668:	9310      	str	r3, [sp, #64]	@ 0x40
 800b66a:	2301      	movs	r3, #1
 800b66c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b66e:	e7b5      	b.n	800b5dc <_strtod_l+0x6e4>
 800b670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b672:	9805      	ldr	r0, [sp, #20]
 800b674:	462a      	mov	r2, r5
 800b676:	f001 fb77 	bl	800cd68 <__lshift>
 800b67a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1d9      	bne.n	800b634 <_strtod_l+0x73c>
 800b680:	e65d      	b.n	800b33e <_strtod_l+0x446>
 800b682:	2e00      	cmp	r6, #0
 800b684:	dd07      	ble.n	800b696 <_strtod_l+0x79e>
 800b686:	4649      	mov	r1, r9
 800b688:	9805      	ldr	r0, [sp, #20]
 800b68a:	4632      	mov	r2, r6
 800b68c:	f001 fb6c 	bl	800cd68 <__lshift>
 800b690:	4681      	mov	r9, r0
 800b692:	2800      	cmp	r0, #0
 800b694:	d0d8      	beq.n	800b648 <_strtod_l+0x750>
 800b696:	2f00      	cmp	r7, #0
 800b698:	dd08      	ble.n	800b6ac <_strtod_l+0x7b4>
 800b69a:	4641      	mov	r1, r8
 800b69c:	9805      	ldr	r0, [sp, #20]
 800b69e:	463a      	mov	r2, r7
 800b6a0:	f001 fb62 	bl	800cd68 <__lshift>
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f43f ae49 	beq.w	800b33e <_strtod_l+0x446>
 800b6ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6ae:	9805      	ldr	r0, [sp, #20]
 800b6b0:	464a      	mov	r2, r9
 800b6b2:	f001 fbe1 	bl	800ce78 <__mdiff>
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f43f ae40 	beq.w	800b33e <_strtod_l+0x446>
 800b6be:	68c3      	ldr	r3, [r0, #12]
 800b6c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60c3      	str	r3, [r0, #12]
 800b6c6:	4641      	mov	r1, r8
 800b6c8:	f001 fbba 	bl	800ce40 <__mcmp>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	da45      	bge.n	800b75c <_strtod_l+0x864>
 800b6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6d2:	ea53 030a 	orrs.w	r3, r3, sl
 800b6d6:	d16b      	bne.n	800b7b0 <_strtod_l+0x8b8>
 800b6d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d167      	bne.n	800b7b0 <_strtod_l+0x8b8>
 800b6e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6e4:	0d1b      	lsrs	r3, r3, #20
 800b6e6:	051b      	lsls	r3, r3, #20
 800b6e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b6ec:	d960      	bls.n	800b7b0 <_strtod_l+0x8b8>
 800b6ee:	6963      	ldr	r3, [r4, #20]
 800b6f0:	b913      	cbnz	r3, 800b6f8 <_strtod_l+0x800>
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	dd5b      	ble.n	800b7b0 <_strtod_l+0x8b8>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	9805      	ldr	r0, [sp, #20]
 800b6fe:	f001 fb33 	bl	800cd68 <__lshift>
 800b702:	4641      	mov	r1, r8
 800b704:	4604      	mov	r4, r0
 800b706:	f001 fb9b 	bl	800ce40 <__mcmp>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	dd50      	ble.n	800b7b0 <_strtod_l+0x8b8>
 800b70e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b712:	9a08      	ldr	r2, [sp, #32]
 800b714:	0d1b      	lsrs	r3, r3, #20
 800b716:	051b      	lsls	r3, r3, #20
 800b718:	2a00      	cmp	r2, #0
 800b71a:	d06a      	beq.n	800b7f2 <_strtod_l+0x8fa>
 800b71c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b720:	d867      	bhi.n	800b7f2 <_strtod_l+0x8fa>
 800b722:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b726:	f67f ae9d 	bls.w	800b464 <_strtod_l+0x56c>
 800b72a:	4b0a      	ldr	r3, [pc, #40]	@ (800b754 <_strtod_l+0x85c>)
 800b72c:	4650      	mov	r0, sl
 800b72e:	4659      	mov	r1, fp
 800b730:	2200      	movs	r2, #0
 800b732:	f7f4 ff69 	bl	8000608 <__aeabi_dmul>
 800b736:	4b08      	ldr	r3, [pc, #32]	@ (800b758 <_strtod_l+0x860>)
 800b738:	400b      	ands	r3, r1
 800b73a:	4682      	mov	sl, r0
 800b73c:	468b      	mov	fp, r1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f47f ae08 	bne.w	800b354 <_strtod_l+0x45c>
 800b744:	9a05      	ldr	r2, [sp, #20]
 800b746:	2322      	movs	r3, #34	@ 0x22
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	e603      	b.n	800b354 <_strtod_l+0x45c>
 800b74c:	08023078 	.word	0x08023078
 800b750:	fffffc02 	.word	0xfffffc02
 800b754:	39500000 	.word	0x39500000
 800b758:	7ff00000 	.word	0x7ff00000
 800b75c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b760:	d165      	bne.n	800b82e <_strtod_l+0x936>
 800b762:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b768:	b35a      	cbz	r2, 800b7c2 <_strtod_l+0x8ca>
 800b76a:	4a9f      	ldr	r2, [pc, #636]	@ (800b9e8 <_strtod_l+0xaf0>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d12b      	bne.n	800b7c8 <_strtod_l+0x8d0>
 800b770:	9b08      	ldr	r3, [sp, #32]
 800b772:	4651      	mov	r1, sl
 800b774:	b303      	cbz	r3, 800b7b8 <_strtod_l+0x8c0>
 800b776:	4b9d      	ldr	r3, [pc, #628]	@ (800b9ec <_strtod_l+0xaf4>)
 800b778:	465a      	mov	r2, fp
 800b77a:	4013      	ands	r3, r2
 800b77c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b780:	f04f 32ff 	mov.w	r2, #4294967295
 800b784:	d81b      	bhi.n	800b7be <_strtod_l+0x8c6>
 800b786:	0d1b      	lsrs	r3, r3, #20
 800b788:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b78c:	fa02 f303 	lsl.w	r3, r2, r3
 800b790:	4299      	cmp	r1, r3
 800b792:	d119      	bne.n	800b7c8 <_strtod_l+0x8d0>
 800b794:	4b96      	ldr	r3, [pc, #600]	@ (800b9f0 <_strtod_l+0xaf8>)
 800b796:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b798:	429a      	cmp	r2, r3
 800b79a:	d102      	bne.n	800b7a2 <_strtod_l+0x8aa>
 800b79c:	3101      	adds	r1, #1
 800b79e:	f43f adce 	beq.w	800b33e <_strtod_l+0x446>
 800b7a2:	4b92      	ldr	r3, [pc, #584]	@ (800b9ec <_strtod_l+0xaf4>)
 800b7a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7a6:	401a      	ands	r2, r3
 800b7a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b7ac:	f04f 0a00 	mov.w	sl, #0
 800b7b0:	9b08      	ldr	r3, [sp, #32]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1b9      	bne.n	800b72a <_strtod_l+0x832>
 800b7b6:	e5cd      	b.n	800b354 <_strtod_l+0x45c>
 800b7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7bc:	e7e8      	b.n	800b790 <_strtod_l+0x898>
 800b7be:	4613      	mov	r3, r2
 800b7c0:	e7e6      	b.n	800b790 <_strtod_l+0x898>
 800b7c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b7c6:	d0a2      	beq.n	800b70e <_strtod_l+0x816>
 800b7c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7ca:	b1db      	cbz	r3, 800b804 <_strtod_l+0x90c>
 800b7cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7ce:	4213      	tst	r3, r2
 800b7d0:	d0ee      	beq.n	800b7b0 <_strtod_l+0x8b8>
 800b7d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7d4:	9a08      	ldr	r2, [sp, #32]
 800b7d6:	4650      	mov	r0, sl
 800b7d8:	4659      	mov	r1, fp
 800b7da:	b1bb      	cbz	r3, 800b80c <_strtod_l+0x914>
 800b7dc:	f7ff fb6e 	bl	800aebc <sulp>
 800b7e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7e4:	ec53 2b10 	vmov	r2, r3, d0
 800b7e8:	f7f4 fd58 	bl	800029c <__adddf3>
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	e7de      	b.n	800b7b0 <_strtod_l+0x8b8>
 800b7f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b7f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7fe:	f04f 3aff 	mov.w	sl, #4294967295
 800b802:	e7d5      	b.n	800b7b0 <_strtod_l+0x8b8>
 800b804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b806:	ea13 0f0a 	tst.w	r3, sl
 800b80a:	e7e1      	b.n	800b7d0 <_strtod_l+0x8d8>
 800b80c:	f7ff fb56 	bl	800aebc <sulp>
 800b810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b814:	ec53 2b10 	vmov	r2, r3, d0
 800b818:	f7f4 fd3e 	bl	8000298 <__aeabi_dsub>
 800b81c:	2200      	movs	r2, #0
 800b81e:	2300      	movs	r3, #0
 800b820:	4682      	mov	sl, r0
 800b822:	468b      	mov	fp, r1
 800b824:	f7f5 f958 	bl	8000ad8 <__aeabi_dcmpeq>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d0c1      	beq.n	800b7b0 <_strtod_l+0x8b8>
 800b82c:	e61a      	b.n	800b464 <_strtod_l+0x56c>
 800b82e:	4641      	mov	r1, r8
 800b830:	4620      	mov	r0, r4
 800b832:	f001 fc7d 	bl	800d130 <__ratio>
 800b836:	ec57 6b10 	vmov	r6, r7, d0
 800b83a:	2200      	movs	r2, #0
 800b83c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b840:	4630      	mov	r0, r6
 800b842:	4639      	mov	r1, r7
 800b844:	f7f5 f95c 	bl	8000b00 <__aeabi_dcmple>
 800b848:	2800      	cmp	r0, #0
 800b84a:	d06f      	beq.n	800b92c <_strtod_l+0xa34>
 800b84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d17a      	bne.n	800b948 <_strtod_l+0xa50>
 800b852:	f1ba 0f00 	cmp.w	sl, #0
 800b856:	d158      	bne.n	800b90a <_strtod_l+0xa12>
 800b858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b85a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d15a      	bne.n	800b918 <_strtod_l+0xa20>
 800b862:	4b64      	ldr	r3, [pc, #400]	@ (800b9f4 <_strtod_l+0xafc>)
 800b864:	2200      	movs	r2, #0
 800b866:	4630      	mov	r0, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	f7f5 f93f 	bl	8000aec <__aeabi_dcmplt>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d159      	bne.n	800b926 <_strtod_l+0xa2e>
 800b872:	4630      	mov	r0, r6
 800b874:	4639      	mov	r1, r7
 800b876:	4b60      	ldr	r3, [pc, #384]	@ (800b9f8 <_strtod_l+0xb00>)
 800b878:	2200      	movs	r2, #0
 800b87a:	f7f4 fec5 	bl	8000608 <__aeabi_dmul>
 800b87e:	4606      	mov	r6, r0
 800b880:	460f      	mov	r7, r1
 800b882:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b886:	9606      	str	r6, [sp, #24]
 800b888:	9307      	str	r3, [sp, #28]
 800b88a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b88e:	4d57      	ldr	r5, [pc, #348]	@ (800b9ec <_strtod_l+0xaf4>)
 800b890:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b896:	401d      	ands	r5, r3
 800b898:	4b58      	ldr	r3, [pc, #352]	@ (800b9fc <_strtod_l+0xb04>)
 800b89a:	429d      	cmp	r5, r3
 800b89c:	f040 80b2 	bne.w	800ba04 <_strtod_l+0xb0c>
 800b8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b8a6:	ec4b ab10 	vmov	d0, sl, fp
 800b8aa:	f001 fb79 	bl	800cfa0 <__ulp>
 800b8ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8b2:	ec51 0b10 	vmov	r0, r1, d0
 800b8b6:	f7f4 fea7 	bl	8000608 <__aeabi_dmul>
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	465b      	mov	r3, fp
 800b8be:	f7f4 fced 	bl	800029c <__adddf3>
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4949      	ldr	r1, [pc, #292]	@ (800b9ec <_strtod_l+0xaf4>)
 800b8c6:	4a4e      	ldr	r2, [pc, #312]	@ (800ba00 <_strtod_l+0xb08>)
 800b8c8:	4019      	ands	r1, r3
 800b8ca:	4291      	cmp	r1, r2
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	d942      	bls.n	800b956 <_strtod_l+0xa5e>
 800b8d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8d2:	4b47      	ldr	r3, [pc, #284]	@ (800b9f0 <_strtod_l+0xaf8>)
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d103      	bne.n	800b8e0 <_strtod_l+0x9e8>
 800b8d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8da:	3301      	adds	r3, #1
 800b8dc:	f43f ad2f 	beq.w	800b33e <_strtod_l+0x446>
 800b8e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b9f0 <_strtod_l+0xaf8>
 800b8e4:	f04f 3aff 	mov.w	sl, #4294967295
 800b8e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8ea:	9805      	ldr	r0, [sp, #20]
 800b8ec:	f001 f82c 	bl	800c948 <_Bfree>
 800b8f0:	9805      	ldr	r0, [sp, #20]
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	f001 f828 	bl	800c948 <_Bfree>
 800b8f8:	9805      	ldr	r0, [sp, #20]
 800b8fa:	4641      	mov	r1, r8
 800b8fc:	f001 f824 	bl	800c948 <_Bfree>
 800b900:	9805      	ldr	r0, [sp, #20]
 800b902:	4621      	mov	r1, r4
 800b904:	f001 f820 	bl	800c948 <_Bfree>
 800b908:	e619      	b.n	800b53e <_strtod_l+0x646>
 800b90a:	f1ba 0f01 	cmp.w	sl, #1
 800b90e:	d103      	bne.n	800b918 <_strtod_l+0xa20>
 800b910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b912:	2b00      	cmp	r3, #0
 800b914:	f43f ada6 	beq.w	800b464 <_strtod_l+0x56c>
 800b918:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b9c8 <_strtod_l+0xad0>
 800b91c:	4f35      	ldr	r7, [pc, #212]	@ (800b9f4 <_strtod_l+0xafc>)
 800b91e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b922:	2600      	movs	r6, #0
 800b924:	e7b1      	b.n	800b88a <_strtod_l+0x992>
 800b926:	4f34      	ldr	r7, [pc, #208]	@ (800b9f8 <_strtod_l+0xb00>)
 800b928:	2600      	movs	r6, #0
 800b92a:	e7aa      	b.n	800b882 <_strtod_l+0x98a>
 800b92c:	4b32      	ldr	r3, [pc, #200]	@ (800b9f8 <_strtod_l+0xb00>)
 800b92e:	4630      	mov	r0, r6
 800b930:	4639      	mov	r1, r7
 800b932:	2200      	movs	r2, #0
 800b934:	f7f4 fe68 	bl	8000608 <__aeabi_dmul>
 800b938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b93a:	4606      	mov	r6, r0
 800b93c:	460f      	mov	r7, r1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d09f      	beq.n	800b882 <_strtod_l+0x98a>
 800b942:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b946:	e7a0      	b.n	800b88a <_strtod_l+0x992>
 800b948:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b9d0 <_strtod_l+0xad8>
 800b94c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b950:	ec57 6b17 	vmov	r6, r7, d7
 800b954:	e799      	b.n	800b88a <_strtod_l+0x992>
 800b956:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b95a:	9b08      	ldr	r3, [sp, #32]
 800b95c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1c1      	bne.n	800b8e8 <_strtod_l+0x9f0>
 800b964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b968:	0d1b      	lsrs	r3, r3, #20
 800b96a:	051b      	lsls	r3, r3, #20
 800b96c:	429d      	cmp	r5, r3
 800b96e:	d1bb      	bne.n	800b8e8 <_strtod_l+0x9f0>
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f005 fce0 	bl	8011338 <__aeabi_d2lz>
 800b978:	f7f4 fe18 	bl	80005ac <__aeabi_l2d>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4630      	mov	r0, r6
 800b982:	4639      	mov	r1, r7
 800b984:	f7f4 fc88 	bl	8000298 <__aeabi_dsub>
 800b988:	460b      	mov	r3, r1
 800b98a:	4602      	mov	r2, r0
 800b98c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b990:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b996:	ea46 060a 	orr.w	r6, r6, sl
 800b99a:	431e      	orrs	r6, r3
 800b99c:	d06f      	beq.n	800ba7e <_strtod_l+0xb86>
 800b99e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b9d8 <_strtod_l+0xae0>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	f7f5 f8a2 	bl	8000aec <__aeabi_dcmplt>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	f47f acd3 	bne.w	800b354 <_strtod_l+0x45c>
 800b9ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800b9e0 <_strtod_l+0xae8>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9b8:	f7f5 f8b6 	bl	8000b28 <__aeabi_dcmpgt>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d093      	beq.n	800b8e8 <_strtod_l+0x9f0>
 800b9c0:	e4c8      	b.n	800b354 <_strtod_l+0x45c>
 800b9c2:	bf00      	nop
 800b9c4:	f3af 8000 	nop.w
 800b9c8:	00000000 	.word	0x00000000
 800b9cc:	bff00000 	.word	0xbff00000
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	3ff00000 	.word	0x3ff00000
 800b9d8:	94a03595 	.word	0x94a03595
 800b9dc:	3fdfffff 	.word	0x3fdfffff
 800b9e0:	35afe535 	.word	0x35afe535
 800b9e4:	3fe00000 	.word	0x3fe00000
 800b9e8:	000fffff 	.word	0x000fffff
 800b9ec:	7ff00000 	.word	0x7ff00000
 800b9f0:	7fefffff 	.word	0x7fefffff
 800b9f4:	3ff00000 	.word	0x3ff00000
 800b9f8:	3fe00000 	.word	0x3fe00000
 800b9fc:	7fe00000 	.word	0x7fe00000
 800ba00:	7c9fffff 	.word	0x7c9fffff
 800ba04:	9b08      	ldr	r3, [sp, #32]
 800ba06:	b323      	cbz	r3, 800ba52 <_strtod_l+0xb5a>
 800ba08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ba0c:	d821      	bhi.n	800ba52 <_strtod_l+0xb5a>
 800ba0e:	a328      	add	r3, pc, #160	@ (adr r3, 800bab0 <_strtod_l+0xbb8>)
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	4630      	mov	r0, r6
 800ba16:	4639      	mov	r1, r7
 800ba18:	f7f5 f872 	bl	8000b00 <__aeabi_dcmple>
 800ba1c:	b1a0      	cbz	r0, 800ba48 <_strtod_l+0xb50>
 800ba1e:	4639      	mov	r1, r7
 800ba20:	4630      	mov	r0, r6
 800ba22:	f7f5 f8c9 	bl	8000bb8 <__aeabi_d2uiz>
 800ba26:	2801      	cmp	r0, #1
 800ba28:	bf38      	it	cc
 800ba2a:	2001      	movcc	r0, #1
 800ba2c:	f7f4 fd72 	bl	8000514 <__aeabi_ui2d>
 800ba30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba32:	4606      	mov	r6, r0
 800ba34:	460f      	mov	r7, r1
 800ba36:	b9fb      	cbnz	r3, 800ba78 <_strtod_l+0xb80>
 800ba38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ba3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ba44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ba48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ba4e:	1b5b      	subs	r3, r3, r5
 800ba50:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ba56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ba5a:	f001 faa1 	bl	800cfa0 <__ulp>
 800ba5e:	4650      	mov	r0, sl
 800ba60:	ec53 2b10 	vmov	r2, r3, d0
 800ba64:	4659      	mov	r1, fp
 800ba66:	f7f4 fdcf 	bl	8000608 <__aeabi_dmul>
 800ba6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ba6e:	f7f4 fc15 	bl	800029c <__adddf3>
 800ba72:	4682      	mov	sl, r0
 800ba74:	468b      	mov	fp, r1
 800ba76:	e770      	b.n	800b95a <_strtod_l+0xa62>
 800ba78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ba7c:	e7e0      	b.n	800ba40 <_strtod_l+0xb48>
 800ba7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bab8 <_strtod_l+0xbc0>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f5 f832 	bl	8000aec <__aeabi_dcmplt>
 800ba88:	e798      	b.n	800b9bc <_strtod_l+0xac4>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ba90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba92:	6013      	str	r3, [r2, #0]
 800ba94:	f7ff ba6d 	b.w	800af72 <_strtod_l+0x7a>
 800ba98:	2a65      	cmp	r2, #101	@ 0x65
 800ba9a:	f43f ab68 	beq.w	800b16e <_strtod_l+0x276>
 800ba9e:	2a45      	cmp	r2, #69	@ 0x45
 800baa0:	f43f ab65 	beq.w	800b16e <_strtod_l+0x276>
 800baa4:	2301      	movs	r3, #1
 800baa6:	f7ff bba0 	b.w	800b1ea <_strtod_l+0x2f2>
 800baaa:	bf00      	nop
 800baac:	f3af 8000 	nop.w
 800bab0:	ffc00000 	.word	0xffc00000
 800bab4:	41dfffff 	.word	0x41dfffff
 800bab8:	94a03595 	.word	0x94a03595
 800babc:	3fcfffff 	.word	0x3fcfffff

0800bac0 <strtod>:
 800bac0:	460a      	mov	r2, r1
 800bac2:	4601      	mov	r1, r0
 800bac4:	4802      	ldr	r0, [pc, #8]	@ (800bad0 <strtod+0x10>)
 800bac6:	4b03      	ldr	r3, [pc, #12]	@ (800bad4 <strtod+0x14>)
 800bac8:	6800      	ldr	r0, [r0, #0]
 800baca:	f7ff ba15 	b.w	800aef8 <_strtod_l>
 800bace:	bf00      	nop
 800bad0:	200002c8 	.word	0x200002c8
 800bad4:	2000015c 	.word	0x2000015c

0800bad8 <__utoa>:
 800bad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bada:	4c1f      	ldr	r4, [pc, #124]	@ (800bb58 <__utoa+0x80>)
 800badc:	b08b      	sub	sp, #44	@ 0x2c
 800bade:	4605      	mov	r5, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	466e      	mov	r6, sp
 800bae4:	f104 0c20 	add.w	ip, r4, #32
 800bae8:	6820      	ldr	r0, [r4, #0]
 800baea:	6861      	ldr	r1, [r4, #4]
 800baec:	4637      	mov	r7, r6
 800baee:	c703      	stmia	r7!, {r0, r1}
 800baf0:	3408      	adds	r4, #8
 800baf2:	4564      	cmp	r4, ip
 800baf4:	463e      	mov	r6, r7
 800baf6:	d1f7      	bne.n	800bae8 <__utoa+0x10>
 800baf8:	7921      	ldrb	r1, [r4, #4]
 800bafa:	7139      	strb	r1, [r7, #4]
 800bafc:	1e91      	subs	r1, r2, #2
 800bafe:	6820      	ldr	r0, [r4, #0]
 800bb00:	6038      	str	r0, [r7, #0]
 800bb02:	2922      	cmp	r1, #34	@ 0x22
 800bb04:	f04f 0100 	mov.w	r1, #0
 800bb08:	d904      	bls.n	800bb14 <__utoa+0x3c>
 800bb0a:	7019      	strb	r1, [r3, #0]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4618      	mov	r0, r3
 800bb10:	b00b      	add	sp, #44	@ 0x2c
 800bb12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb14:	1e58      	subs	r0, r3, #1
 800bb16:	4684      	mov	ip, r0
 800bb18:	fbb5 f7f2 	udiv	r7, r5, r2
 800bb1c:	fb02 5617 	mls	r6, r2, r7, r5
 800bb20:	3628      	adds	r6, #40	@ 0x28
 800bb22:	446e      	add	r6, sp
 800bb24:	460c      	mov	r4, r1
 800bb26:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bb2a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bb2e:	462e      	mov	r6, r5
 800bb30:	42b2      	cmp	r2, r6
 800bb32:	f101 0101 	add.w	r1, r1, #1
 800bb36:	463d      	mov	r5, r7
 800bb38:	d9ee      	bls.n	800bb18 <__utoa+0x40>
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	545a      	strb	r2, [r3, r1]
 800bb3e:	1919      	adds	r1, r3, r4
 800bb40:	1aa5      	subs	r5, r4, r2
 800bb42:	42aa      	cmp	r2, r5
 800bb44:	dae3      	bge.n	800bb0e <__utoa+0x36>
 800bb46:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bb4a:	780e      	ldrb	r6, [r1, #0]
 800bb4c:	7006      	strb	r6, [r0, #0]
 800bb4e:	3201      	adds	r2, #1
 800bb50:	f801 5901 	strb.w	r5, [r1], #-1
 800bb54:	e7f4      	b.n	800bb40 <__utoa+0x68>
 800bb56:	bf00      	nop
 800bb58:	08022dd4 	.word	0x08022dd4

0800bb5c <gcvt>:
 800bb5c:	b530      	push	{r4, r5, lr}
 800bb5e:	ed2d 8b02 	vpush	{d8}
 800bb62:	eeb0 8a40 	vmov.f32	s16, s0
 800bb66:	eef0 8a60 	vmov.f32	s17, s1
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	b083      	sub	sp, #12
 800bb70:	4605      	mov	r5, r0
 800bb72:	2300      	movs	r3, #0
 800bb74:	ec51 0b10 	vmov	r0, r1, d0
 800bb78:	f7f4 ffb8 	bl	8000aec <__aeabi_dcmplt>
 800bb7c:	4622      	mov	r2, r4
 800bb7e:	b118      	cbz	r0, 800bb88 <gcvt+0x2c>
 800bb80:	232d      	movs	r3, #45	@ 0x2d
 800bb82:	f802 3b01 	strb.w	r3, [r2], #1
 800bb86:	3d01      	subs	r5, #1
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4809      	ldr	r0, [pc, #36]	@ (800bbb0 <gcvt+0x54>)
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	4629      	mov	r1, r5
 800bb90:	2367      	movs	r3, #103	@ 0x67
 800bb92:	eeb0 0a48 	vmov.f32	s0, s16
 800bb96:	eef0 0a68 	vmov.f32	s1, s17
 800bb9a:	6800      	ldr	r0, [r0, #0]
 800bb9c:	f001 fbdc 	bl	800d358 <_gcvt>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	bf18      	it	ne
 800bba4:	4620      	movne	r0, r4
 800bba6:	b003      	add	sp, #12
 800bba8:	ecbd 8b02 	vpop	{d8}
 800bbac:	bd30      	pop	{r4, r5, pc}
 800bbae:	bf00      	nop
 800bbb0:	200002c8 	.word	0x200002c8

0800bbb4 <std>:
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	b510      	push	{r4, lr}
 800bbb8:	4604      	mov	r4, r0
 800bbba:	e9c0 3300 	strd	r3, r3, [r0]
 800bbbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbc2:	6083      	str	r3, [r0, #8]
 800bbc4:	8181      	strh	r1, [r0, #12]
 800bbc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bbc8:	81c2      	strh	r2, [r0, #14]
 800bbca:	6183      	str	r3, [r0, #24]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	2208      	movs	r2, #8
 800bbd0:	305c      	adds	r0, #92	@ 0x5c
 800bbd2:	f000 f97a 	bl	800beca <memset>
 800bbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800bc0c <std+0x58>)
 800bbd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bbda:	4b0d      	ldr	r3, [pc, #52]	@ (800bc10 <std+0x5c>)
 800bbdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bbde:	4b0d      	ldr	r3, [pc, #52]	@ (800bc14 <std+0x60>)
 800bbe0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800bc18 <std+0x64>)
 800bbe4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bbe6:	4b0d      	ldr	r3, [pc, #52]	@ (800bc1c <std+0x68>)
 800bbe8:	6224      	str	r4, [r4, #32]
 800bbea:	429c      	cmp	r4, r3
 800bbec:	d006      	beq.n	800bbfc <std+0x48>
 800bbee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bbf2:	4294      	cmp	r4, r2
 800bbf4:	d002      	beq.n	800bbfc <std+0x48>
 800bbf6:	33d0      	adds	r3, #208	@ 0xd0
 800bbf8:	429c      	cmp	r4, r3
 800bbfa:	d105      	bne.n	800bc08 <std+0x54>
 800bbfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc04:	f000 ba02 	b.w	800c00c <__retarget_lock_init_recursive>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	bf00      	nop
 800bc0c:	0800be41 	.word	0x0800be41
 800bc10:	0800be67 	.word	0x0800be67
 800bc14:	0800be9f 	.word	0x0800be9f
 800bc18:	0800bec3 	.word	0x0800bec3
 800bc1c:	2001d224 	.word	0x2001d224

0800bc20 <stdio_exit_handler>:
 800bc20:	4a02      	ldr	r2, [pc, #8]	@ (800bc2c <stdio_exit_handler+0xc>)
 800bc22:	4903      	ldr	r1, [pc, #12]	@ (800bc30 <stdio_exit_handler+0x10>)
 800bc24:	4803      	ldr	r0, [pc, #12]	@ (800bc34 <stdio_exit_handler+0x14>)
 800bc26:	f000 b869 	b.w	800bcfc <_fwalk_sglue>
 800bc2a:	bf00      	nop
 800bc2c:	20000150 	.word	0x20000150
 800bc30:	0800e205 	.word	0x0800e205
 800bc34:	200002cc 	.word	0x200002cc

0800bc38 <cleanup_stdio>:
 800bc38:	6841      	ldr	r1, [r0, #4]
 800bc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc6c <cleanup_stdio+0x34>)
 800bc3c:	4299      	cmp	r1, r3
 800bc3e:	b510      	push	{r4, lr}
 800bc40:	4604      	mov	r4, r0
 800bc42:	d001      	beq.n	800bc48 <cleanup_stdio+0x10>
 800bc44:	f002 fade 	bl	800e204 <_fflush_r>
 800bc48:	68a1      	ldr	r1, [r4, #8]
 800bc4a:	4b09      	ldr	r3, [pc, #36]	@ (800bc70 <cleanup_stdio+0x38>)
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d002      	beq.n	800bc56 <cleanup_stdio+0x1e>
 800bc50:	4620      	mov	r0, r4
 800bc52:	f002 fad7 	bl	800e204 <_fflush_r>
 800bc56:	68e1      	ldr	r1, [r4, #12]
 800bc58:	4b06      	ldr	r3, [pc, #24]	@ (800bc74 <cleanup_stdio+0x3c>)
 800bc5a:	4299      	cmp	r1, r3
 800bc5c:	d004      	beq.n	800bc68 <cleanup_stdio+0x30>
 800bc5e:	4620      	mov	r0, r4
 800bc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc64:	f002 bace 	b.w	800e204 <_fflush_r>
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2001d224 	.word	0x2001d224
 800bc70:	2001d28c 	.word	0x2001d28c
 800bc74:	2001d2f4 	.word	0x2001d2f4

0800bc78 <global_stdio_init.part.0>:
 800bc78:	b510      	push	{r4, lr}
 800bc7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bca8 <global_stdio_init.part.0+0x30>)
 800bc7c:	4c0b      	ldr	r4, [pc, #44]	@ (800bcac <global_stdio_init.part.0+0x34>)
 800bc7e:	4a0c      	ldr	r2, [pc, #48]	@ (800bcb0 <global_stdio_init.part.0+0x38>)
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	4620      	mov	r0, r4
 800bc84:	2200      	movs	r2, #0
 800bc86:	2104      	movs	r1, #4
 800bc88:	f7ff ff94 	bl	800bbb4 <std>
 800bc8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc90:	2201      	movs	r2, #1
 800bc92:	2109      	movs	r1, #9
 800bc94:	f7ff ff8e 	bl	800bbb4 <std>
 800bc98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca2:	2112      	movs	r1, #18
 800bca4:	f7ff bf86 	b.w	800bbb4 <std>
 800bca8:	2001d35c 	.word	0x2001d35c
 800bcac:	2001d224 	.word	0x2001d224
 800bcb0:	0800bc21 	.word	0x0800bc21

0800bcb4 <__sfp_lock_acquire>:
 800bcb4:	4801      	ldr	r0, [pc, #4]	@ (800bcbc <__sfp_lock_acquire+0x8>)
 800bcb6:	f000 b9aa 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800bcba:	bf00      	nop
 800bcbc:	2001d365 	.word	0x2001d365

0800bcc0 <__sfp_lock_release>:
 800bcc0:	4801      	ldr	r0, [pc, #4]	@ (800bcc8 <__sfp_lock_release+0x8>)
 800bcc2:	f000 b9a5 	b.w	800c010 <__retarget_lock_release_recursive>
 800bcc6:	bf00      	nop
 800bcc8:	2001d365 	.word	0x2001d365

0800bccc <__sinit>:
 800bccc:	b510      	push	{r4, lr}
 800bcce:	4604      	mov	r4, r0
 800bcd0:	f7ff fff0 	bl	800bcb4 <__sfp_lock_acquire>
 800bcd4:	6a23      	ldr	r3, [r4, #32]
 800bcd6:	b11b      	cbz	r3, 800bce0 <__sinit+0x14>
 800bcd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcdc:	f7ff bff0 	b.w	800bcc0 <__sfp_lock_release>
 800bce0:	4b04      	ldr	r3, [pc, #16]	@ (800bcf4 <__sinit+0x28>)
 800bce2:	6223      	str	r3, [r4, #32]
 800bce4:	4b04      	ldr	r3, [pc, #16]	@ (800bcf8 <__sinit+0x2c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1f5      	bne.n	800bcd8 <__sinit+0xc>
 800bcec:	f7ff ffc4 	bl	800bc78 <global_stdio_init.part.0>
 800bcf0:	e7f2      	b.n	800bcd8 <__sinit+0xc>
 800bcf2:	bf00      	nop
 800bcf4:	0800bc39 	.word	0x0800bc39
 800bcf8:	2001d35c 	.word	0x2001d35c

0800bcfc <_fwalk_sglue>:
 800bcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd00:	4607      	mov	r7, r0
 800bd02:	4688      	mov	r8, r1
 800bd04:	4614      	mov	r4, r2
 800bd06:	2600      	movs	r6, #0
 800bd08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd0c:	f1b9 0901 	subs.w	r9, r9, #1
 800bd10:	d505      	bpl.n	800bd1e <_fwalk_sglue+0x22>
 800bd12:	6824      	ldr	r4, [r4, #0]
 800bd14:	2c00      	cmp	r4, #0
 800bd16:	d1f7      	bne.n	800bd08 <_fwalk_sglue+0xc>
 800bd18:	4630      	mov	r0, r6
 800bd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1e:	89ab      	ldrh	r3, [r5, #12]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d907      	bls.n	800bd34 <_fwalk_sglue+0x38>
 800bd24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	d003      	beq.n	800bd34 <_fwalk_sglue+0x38>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4638      	mov	r0, r7
 800bd30:	47c0      	blx	r8
 800bd32:	4306      	orrs	r6, r0
 800bd34:	3568      	adds	r5, #104	@ 0x68
 800bd36:	e7e9      	b.n	800bd0c <_fwalk_sglue+0x10>

0800bd38 <sniprintf>:
 800bd38:	b40c      	push	{r2, r3}
 800bd3a:	b530      	push	{r4, r5, lr}
 800bd3c:	4b18      	ldr	r3, [pc, #96]	@ (800bda0 <sniprintf+0x68>)
 800bd3e:	1e0c      	subs	r4, r1, #0
 800bd40:	681d      	ldr	r5, [r3, #0]
 800bd42:	b09d      	sub	sp, #116	@ 0x74
 800bd44:	da08      	bge.n	800bd58 <sniprintf+0x20>
 800bd46:	238b      	movs	r3, #139	@ 0x8b
 800bd48:	602b      	str	r3, [r5, #0]
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4e:	b01d      	add	sp, #116	@ 0x74
 800bd50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd54:	b002      	add	sp, #8
 800bd56:	4770      	bx	lr
 800bd58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bd5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd60:	f04f 0300 	mov.w	r3, #0
 800bd64:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bd66:	bf14      	ite	ne
 800bd68:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd6c:	4623      	moveq	r3, r4
 800bd6e:	9304      	str	r3, [sp, #16]
 800bd70:	9307      	str	r3, [sp, #28]
 800bd72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bd76:	9002      	str	r0, [sp, #8]
 800bd78:	9006      	str	r0, [sp, #24]
 800bd7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd7e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bd80:	ab21      	add	r3, sp, #132	@ 0x84
 800bd82:	a902      	add	r1, sp, #8
 800bd84:	4628      	mov	r0, r5
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	f001 fc12 	bl	800d5b0 <_svfiprintf_r>
 800bd8c:	1c43      	adds	r3, r0, #1
 800bd8e:	bfbc      	itt	lt
 800bd90:	238b      	movlt	r3, #139	@ 0x8b
 800bd92:	602b      	strlt	r3, [r5, #0]
 800bd94:	2c00      	cmp	r4, #0
 800bd96:	d0da      	beq.n	800bd4e <sniprintf+0x16>
 800bd98:	9b02      	ldr	r3, [sp, #8]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	e7d6      	b.n	800bd4e <sniprintf+0x16>
 800bda0:	200002c8 	.word	0x200002c8

0800bda4 <siprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b510      	push	{r4, lr}
 800bda8:	b09d      	sub	sp, #116	@ 0x74
 800bdaa:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bdac:	9002      	str	r0, [sp, #8]
 800bdae:	9006      	str	r0, [sp, #24]
 800bdb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bdb4:	480a      	ldr	r0, [pc, #40]	@ (800bde0 <siprintf+0x3c>)
 800bdb6:	9107      	str	r1, [sp, #28]
 800bdb8:	9104      	str	r1, [sp, #16]
 800bdba:	490a      	ldr	r1, [pc, #40]	@ (800bde4 <siprintf+0x40>)
 800bdbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc0:	9105      	str	r1, [sp, #20]
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	a902      	add	r1, sp, #8
 800bdc6:	6800      	ldr	r0, [r0, #0]
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bdcc:	f001 fbf0 	bl	800d5b0 <_svfiprintf_r>
 800bdd0:	9b02      	ldr	r3, [sp, #8]
 800bdd2:	701c      	strb	r4, [r3, #0]
 800bdd4:	b01d      	add	sp, #116	@ 0x74
 800bdd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdda:	b003      	add	sp, #12
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	200002c8 	.word	0x200002c8
 800bde4:	ffff0208 	.word	0xffff0208

0800bde8 <siscanf>:
 800bde8:	b40e      	push	{r1, r2, r3}
 800bdea:	b570      	push	{r4, r5, r6, lr}
 800bdec:	b09d      	sub	sp, #116	@ 0x74
 800bdee:	ac21      	add	r4, sp, #132	@ 0x84
 800bdf0:	2500      	movs	r5, #0
 800bdf2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bdf6:	f854 6b04 	ldr.w	r6, [r4], #4
 800bdfa:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bdfe:	951b      	str	r5, [sp, #108]	@ 0x6c
 800be00:	9002      	str	r0, [sp, #8]
 800be02:	9006      	str	r0, [sp, #24]
 800be04:	f7f4 f9ec 	bl	80001e0 <strlen>
 800be08:	4b0b      	ldr	r3, [pc, #44]	@ (800be38 <siscanf+0x50>)
 800be0a:	9003      	str	r0, [sp, #12]
 800be0c:	9007      	str	r0, [sp, #28]
 800be0e:	480b      	ldr	r0, [pc, #44]	@ (800be3c <siscanf+0x54>)
 800be10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be16:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be1a:	4632      	mov	r2, r6
 800be1c:	4623      	mov	r3, r4
 800be1e:	a902      	add	r1, sp, #8
 800be20:	6800      	ldr	r0, [r0, #0]
 800be22:	950f      	str	r5, [sp, #60]	@ 0x3c
 800be24:	9514      	str	r5, [sp, #80]	@ 0x50
 800be26:	9401      	str	r4, [sp, #4]
 800be28:	f001 fd18 	bl	800d85c <__ssvfiscanf_r>
 800be2c:	b01d      	add	sp, #116	@ 0x74
 800be2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be32:	b003      	add	sp, #12
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	0800be63 	.word	0x0800be63
 800be3c:	200002c8 	.word	0x200002c8

0800be40 <__sread>:
 800be40:	b510      	push	{r4, lr}
 800be42:	460c      	mov	r4, r1
 800be44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be48:	f000 f892 	bl	800bf70 <_read_r>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	bfab      	itete	ge
 800be50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be52:	89a3      	ldrhlt	r3, [r4, #12]
 800be54:	181b      	addge	r3, r3, r0
 800be56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be5a:	bfac      	ite	ge
 800be5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be5e:	81a3      	strhlt	r3, [r4, #12]
 800be60:	bd10      	pop	{r4, pc}

0800be62 <__seofread>:
 800be62:	2000      	movs	r0, #0
 800be64:	4770      	bx	lr

0800be66 <__swrite>:
 800be66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6a:	461f      	mov	r7, r3
 800be6c:	898b      	ldrh	r3, [r1, #12]
 800be6e:	05db      	lsls	r3, r3, #23
 800be70:	4605      	mov	r5, r0
 800be72:	460c      	mov	r4, r1
 800be74:	4616      	mov	r6, r2
 800be76:	d505      	bpl.n	800be84 <__swrite+0x1e>
 800be78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be7c:	2302      	movs	r3, #2
 800be7e:	2200      	movs	r2, #0
 800be80:	f000 f864 	bl	800bf4c <_lseek_r>
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	4632      	mov	r2, r6
 800be92:	463b      	mov	r3, r7
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be9a:	f000 b87b 	b.w	800bf94 <_write_r>

0800be9e <__sseek>:
 800be9e:	b510      	push	{r4, lr}
 800bea0:	460c      	mov	r4, r1
 800bea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea6:	f000 f851 	bl	800bf4c <_lseek_r>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	bf15      	itete	ne
 800beb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800beb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800beb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800beba:	81a3      	strheq	r3, [r4, #12]
 800bebc:	bf18      	it	ne
 800bebe:	81a3      	strhne	r3, [r4, #12]
 800bec0:	bd10      	pop	{r4, pc}

0800bec2 <__sclose>:
 800bec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec6:	f000 b831 	b.w	800bf2c <_close_r>

0800beca <memset>:
 800beca:	4402      	add	r2, r0
 800becc:	4603      	mov	r3, r0
 800bece:	4293      	cmp	r3, r2
 800bed0:	d100      	bne.n	800bed4 <memset+0xa>
 800bed2:	4770      	bx	lr
 800bed4:	f803 1b01 	strb.w	r1, [r3], #1
 800bed8:	e7f9      	b.n	800bece <memset+0x4>

0800beda <strncmp>:
 800beda:	b510      	push	{r4, lr}
 800bedc:	b16a      	cbz	r2, 800befa <strncmp+0x20>
 800bede:	3901      	subs	r1, #1
 800bee0:	1884      	adds	r4, r0, r2
 800bee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800beea:	429a      	cmp	r2, r3
 800beec:	d103      	bne.n	800bef6 <strncmp+0x1c>
 800beee:	42a0      	cmp	r0, r4
 800bef0:	d001      	beq.n	800bef6 <strncmp+0x1c>
 800bef2:	2a00      	cmp	r2, #0
 800bef4:	d1f5      	bne.n	800bee2 <strncmp+0x8>
 800bef6:	1ad0      	subs	r0, r2, r3
 800bef8:	bd10      	pop	{r4, pc}
 800befa:	4610      	mov	r0, r2
 800befc:	e7fc      	b.n	800bef8 <strncmp+0x1e>

0800befe <strstr>:
 800befe:	780a      	ldrb	r2, [r1, #0]
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	b96a      	cbnz	r2, 800bf20 <strstr+0x22>
 800bf04:	bd70      	pop	{r4, r5, r6, pc}
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d109      	bne.n	800bf1e <strstr+0x20>
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0f6      	beq.n	800bf04 <strstr+0x6>
 800bf16:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bf1a:	429e      	cmp	r6, r3
 800bf1c:	d0f7      	beq.n	800bf0e <strstr+0x10>
 800bf1e:	3001      	adds	r0, #1
 800bf20:	7803      	ldrb	r3, [r0, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d1ef      	bne.n	800bf06 <strstr+0x8>
 800bf26:	4618      	mov	r0, r3
 800bf28:	e7ec      	b.n	800bf04 <strstr+0x6>
	...

0800bf2c <_close_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d06      	ldr	r5, [pc, #24]	@ (800bf48 <_close_r+0x1c>)
 800bf30:	2300      	movs	r3, #0
 800bf32:	4604      	mov	r4, r0
 800bf34:	4608      	mov	r0, r1
 800bf36:	602b      	str	r3, [r5, #0]
 800bf38:	f7fe ff2c 	bl	800ad94 <_close>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	d102      	bne.n	800bf46 <_close_r+0x1a>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	b103      	cbz	r3, 800bf46 <_close_r+0x1a>
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	2001d360 	.word	0x2001d360

0800bf4c <_lseek_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4d07      	ldr	r5, [pc, #28]	@ (800bf6c <_lseek_r+0x20>)
 800bf50:	4604      	mov	r4, r0
 800bf52:	4608      	mov	r0, r1
 800bf54:	4611      	mov	r1, r2
 800bf56:	2200      	movs	r2, #0
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f7fe ff24 	bl	800ada8 <_lseek>
 800bf60:	1c43      	adds	r3, r0, #1
 800bf62:	d102      	bne.n	800bf6a <_lseek_r+0x1e>
 800bf64:	682b      	ldr	r3, [r5, #0]
 800bf66:	b103      	cbz	r3, 800bf6a <_lseek_r+0x1e>
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	2001d360 	.word	0x2001d360

0800bf70 <_read_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	4d07      	ldr	r5, [pc, #28]	@ (800bf90 <_read_r+0x20>)
 800bf74:	4604      	mov	r4, r0
 800bf76:	4608      	mov	r0, r1
 800bf78:	4611      	mov	r1, r2
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	602a      	str	r2, [r5, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f7fe feea 	bl	800ad58 <_read>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	d102      	bne.n	800bf8e <_read_r+0x1e>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	b103      	cbz	r3, 800bf8e <_read_r+0x1e>
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	bd38      	pop	{r3, r4, r5, pc}
 800bf90:	2001d360 	.word	0x2001d360

0800bf94 <_write_r>:
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4d07      	ldr	r5, [pc, #28]	@ (800bfb4 <_write_r+0x20>)
 800bf98:	4604      	mov	r4, r0
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f7fe fee8 	bl	800ad78 <_write>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_write_r+0x1e>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_write_r+0x1e>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	2001d360 	.word	0x2001d360

0800bfb8 <__errno>:
 800bfb8:	4b01      	ldr	r3, [pc, #4]	@ (800bfc0 <__errno+0x8>)
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	200002c8 	.word	0x200002c8

0800bfc4 <__libc_init_array>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	4d0d      	ldr	r5, [pc, #52]	@ (800bffc <__libc_init_array+0x38>)
 800bfc8:	4c0d      	ldr	r4, [pc, #52]	@ (800c000 <__libc_init_array+0x3c>)
 800bfca:	1b64      	subs	r4, r4, r5
 800bfcc:	10a4      	asrs	r4, r4, #2
 800bfce:	2600      	movs	r6, #0
 800bfd0:	42a6      	cmp	r6, r4
 800bfd2:	d109      	bne.n	800bfe8 <__libc_init_array+0x24>
 800bfd4:	4d0b      	ldr	r5, [pc, #44]	@ (800c004 <__libc_init_array+0x40>)
 800bfd6:	4c0c      	ldr	r4, [pc, #48]	@ (800c008 <__libc_init_array+0x44>)
 800bfd8:	f005 fb42 	bl	8011660 <_init>
 800bfdc:	1b64      	subs	r4, r4, r5
 800bfde:	10a4      	asrs	r4, r4, #2
 800bfe0:	2600      	movs	r6, #0
 800bfe2:	42a6      	cmp	r6, r4
 800bfe4:	d105      	bne.n	800bff2 <__libc_init_array+0x2e>
 800bfe6:	bd70      	pop	{r4, r5, r6, pc}
 800bfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfec:	4798      	blx	r3
 800bfee:	3601      	adds	r6, #1
 800bff0:	e7ee      	b.n	800bfd0 <__libc_init_array+0xc>
 800bff2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff6:	4798      	blx	r3
 800bff8:	3601      	adds	r6, #1
 800bffa:	e7f2      	b.n	800bfe2 <__libc_init_array+0x1e>
 800bffc:	08023508 	.word	0x08023508
 800c000:	08023508 	.word	0x08023508
 800c004:	08023508 	.word	0x08023508
 800c008:	0802350c 	.word	0x0802350c

0800c00c <__retarget_lock_init_recursive>:
 800c00c:	4770      	bx	lr

0800c00e <__retarget_lock_acquire_recursive>:
 800c00e:	4770      	bx	lr

0800c010 <__retarget_lock_release_recursive>:
 800c010:	4770      	bx	lr

0800c012 <memcpy>:
 800c012:	440a      	add	r2, r1
 800c014:	4291      	cmp	r1, r2
 800c016:	f100 33ff 	add.w	r3, r0, #4294967295
 800c01a:	d100      	bne.n	800c01e <memcpy+0xc>
 800c01c:	4770      	bx	lr
 800c01e:	b510      	push	{r4, lr}
 800c020:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c024:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c028:	4291      	cmp	r1, r2
 800c02a:	d1f9      	bne.n	800c020 <memcpy+0xe>
 800c02c:	bd10      	pop	{r4, pc}
	...

0800c030 <nan>:
 800c030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c038 <nan+0x8>
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	00000000 	.word	0x00000000
 800c03c:	7ff80000 	.word	0x7ff80000

0800c040 <_free_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4605      	mov	r5, r0
 800c044:	2900      	cmp	r1, #0
 800c046:	d041      	beq.n	800c0cc <_free_r+0x8c>
 800c048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c04c:	1f0c      	subs	r4, r1, #4
 800c04e:	2b00      	cmp	r3, #0
 800c050:	bfb8      	it	lt
 800c052:	18e4      	addlt	r4, r4, r3
 800c054:	f000 fc2c 	bl	800c8b0 <__malloc_lock>
 800c058:	4a1d      	ldr	r2, [pc, #116]	@ (800c0d0 <_free_r+0x90>)
 800c05a:	6813      	ldr	r3, [r2, #0]
 800c05c:	b933      	cbnz	r3, 800c06c <_free_r+0x2c>
 800c05e:	6063      	str	r3, [r4, #4]
 800c060:	6014      	str	r4, [r2, #0]
 800c062:	4628      	mov	r0, r5
 800c064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c068:	f000 bc28 	b.w	800c8bc <__malloc_unlock>
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	d908      	bls.n	800c082 <_free_r+0x42>
 800c070:	6820      	ldr	r0, [r4, #0]
 800c072:	1821      	adds	r1, r4, r0
 800c074:	428b      	cmp	r3, r1
 800c076:	bf01      	itttt	eq
 800c078:	6819      	ldreq	r1, [r3, #0]
 800c07a:	685b      	ldreq	r3, [r3, #4]
 800c07c:	1809      	addeq	r1, r1, r0
 800c07e:	6021      	streq	r1, [r4, #0]
 800c080:	e7ed      	b.n	800c05e <_free_r+0x1e>
 800c082:	461a      	mov	r2, r3
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	b10b      	cbz	r3, 800c08c <_free_r+0x4c>
 800c088:	42a3      	cmp	r3, r4
 800c08a:	d9fa      	bls.n	800c082 <_free_r+0x42>
 800c08c:	6811      	ldr	r1, [r2, #0]
 800c08e:	1850      	adds	r0, r2, r1
 800c090:	42a0      	cmp	r0, r4
 800c092:	d10b      	bne.n	800c0ac <_free_r+0x6c>
 800c094:	6820      	ldr	r0, [r4, #0]
 800c096:	4401      	add	r1, r0
 800c098:	1850      	adds	r0, r2, r1
 800c09a:	4283      	cmp	r3, r0
 800c09c:	6011      	str	r1, [r2, #0]
 800c09e:	d1e0      	bne.n	800c062 <_free_r+0x22>
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	6053      	str	r3, [r2, #4]
 800c0a6:	4408      	add	r0, r1
 800c0a8:	6010      	str	r0, [r2, #0]
 800c0aa:	e7da      	b.n	800c062 <_free_r+0x22>
 800c0ac:	d902      	bls.n	800c0b4 <_free_r+0x74>
 800c0ae:	230c      	movs	r3, #12
 800c0b0:	602b      	str	r3, [r5, #0]
 800c0b2:	e7d6      	b.n	800c062 <_free_r+0x22>
 800c0b4:	6820      	ldr	r0, [r4, #0]
 800c0b6:	1821      	adds	r1, r4, r0
 800c0b8:	428b      	cmp	r3, r1
 800c0ba:	bf04      	itt	eq
 800c0bc:	6819      	ldreq	r1, [r3, #0]
 800c0be:	685b      	ldreq	r3, [r3, #4]
 800c0c0:	6063      	str	r3, [r4, #4]
 800c0c2:	bf04      	itt	eq
 800c0c4:	1809      	addeq	r1, r1, r0
 800c0c6:	6021      	streq	r1, [r4, #0]
 800c0c8:	6054      	str	r4, [r2, #4]
 800c0ca:	e7ca      	b.n	800c062 <_free_r+0x22>
 800c0cc:	bd38      	pop	{r3, r4, r5, pc}
 800c0ce:	bf00      	nop
 800c0d0:	2001d36c 	.word	0x2001d36c

0800c0d4 <rshift>:
 800c0d4:	6903      	ldr	r3, [r0, #16]
 800c0d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0e2:	f100 0414 	add.w	r4, r0, #20
 800c0e6:	dd45      	ble.n	800c174 <rshift+0xa0>
 800c0e8:	f011 011f 	ands.w	r1, r1, #31
 800c0ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0f4:	d10c      	bne.n	800c110 <rshift+0x3c>
 800c0f6:	f100 0710 	add.w	r7, r0, #16
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	42b1      	cmp	r1, r6
 800c0fe:	d334      	bcc.n	800c16a <rshift+0x96>
 800c100:	1a9b      	subs	r3, r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	1eea      	subs	r2, r5, #3
 800c106:	4296      	cmp	r6, r2
 800c108:	bf38      	it	cc
 800c10a:	2300      	movcc	r3, #0
 800c10c:	4423      	add	r3, r4
 800c10e:	e015      	b.n	800c13c <rshift+0x68>
 800c110:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c114:	f1c1 0820 	rsb	r8, r1, #32
 800c118:	40cf      	lsrs	r7, r1
 800c11a:	f105 0e04 	add.w	lr, r5, #4
 800c11e:	46a1      	mov	r9, r4
 800c120:	4576      	cmp	r6, lr
 800c122:	46f4      	mov	ip, lr
 800c124:	d815      	bhi.n	800c152 <rshift+0x7e>
 800c126:	1a9a      	subs	r2, r3, r2
 800c128:	0092      	lsls	r2, r2, #2
 800c12a:	3a04      	subs	r2, #4
 800c12c:	3501      	adds	r5, #1
 800c12e:	42ae      	cmp	r6, r5
 800c130:	bf38      	it	cc
 800c132:	2200      	movcc	r2, #0
 800c134:	18a3      	adds	r3, r4, r2
 800c136:	50a7      	str	r7, [r4, r2]
 800c138:	b107      	cbz	r7, 800c13c <rshift+0x68>
 800c13a:	3304      	adds	r3, #4
 800c13c:	1b1a      	subs	r2, r3, r4
 800c13e:	42a3      	cmp	r3, r4
 800c140:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c144:	bf08      	it	eq
 800c146:	2300      	moveq	r3, #0
 800c148:	6102      	str	r2, [r0, #16]
 800c14a:	bf08      	it	eq
 800c14c:	6143      	streq	r3, [r0, #20]
 800c14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c152:	f8dc c000 	ldr.w	ip, [ip]
 800c156:	fa0c fc08 	lsl.w	ip, ip, r8
 800c15a:	ea4c 0707 	orr.w	r7, ip, r7
 800c15e:	f849 7b04 	str.w	r7, [r9], #4
 800c162:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c166:	40cf      	lsrs	r7, r1
 800c168:	e7da      	b.n	800c120 <rshift+0x4c>
 800c16a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c16e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c172:	e7c3      	b.n	800c0fc <rshift+0x28>
 800c174:	4623      	mov	r3, r4
 800c176:	e7e1      	b.n	800c13c <rshift+0x68>

0800c178 <__hexdig_fun>:
 800c178:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c17c:	2b09      	cmp	r3, #9
 800c17e:	d802      	bhi.n	800c186 <__hexdig_fun+0xe>
 800c180:	3820      	subs	r0, #32
 800c182:	b2c0      	uxtb	r0, r0
 800c184:	4770      	bx	lr
 800c186:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	d801      	bhi.n	800c192 <__hexdig_fun+0x1a>
 800c18e:	3847      	subs	r0, #71	@ 0x47
 800c190:	e7f7      	b.n	800c182 <__hexdig_fun+0xa>
 800c192:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c196:	2b05      	cmp	r3, #5
 800c198:	d801      	bhi.n	800c19e <__hexdig_fun+0x26>
 800c19a:	3827      	subs	r0, #39	@ 0x27
 800c19c:	e7f1      	b.n	800c182 <__hexdig_fun+0xa>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	4770      	bx	lr
	...

0800c1a4 <__gethex>:
 800c1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a8:	b085      	sub	sp, #20
 800c1aa:	468a      	mov	sl, r1
 800c1ac:	9302      	str	r3, [sp, #8]
 800c1ae:	680b      	ldr	r3, [r1, #0]
 800c1b0:	9001      	str	r0, [sp, #4]
 800c1b2:	4690      	mov	r8, r2
 800c1b4:	1c9c      	adds	r4, r3, #2
 800c1b6:	46a1      	mov	r9, r4
 800c1b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c1bc:	2830      	cmp	r0, #48	@ 0x30
 800c1be:	d0fa      	beq.n	800c1b6 <__gethex+0x12>
 800c1c0:	eba9 0303 	sub.w	r3, r9, r3
 800c1c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c1c8:	f7ff ffd6 	bl	800c178 <__hexdig_fun>
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d168      	bne.n	800c2a4 <__gethex+0x100>
 800c1d2:	49a0      	ldr	r1, [pc, #640]	@ (800c454 <__gethex+0x2b0>)
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	4648      	mov	r0, r9
 800c1d8:	f7ff fe7f 	bl	800beda <strncmp>
 800c1dc:	4607      	mov	r7, r0
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d167      	bne.n	800c2b2 <__gethex+0x10e>
 800c1e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c1e6:	4626      	mov	r6, r4
 800c1e8:	f7ff ffc6 	bl	800c178 <__hexdig_fun>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d062      	beq.n	800c2b6 <__gethex+0x112>
 800c1f0:	4623      	mov	r3, r4
 800c1f2:	7818      	ldrb	r0, [r3, #0]
 800c1f4:	2830      	cmp	r0, #48	@ 0x30
 800c1f6:	4699      	mov	r9, r3
 800c1f8:	f103 0301 	add.w	r3, r3, #1
 800c1fc:	d0f9      	beq.n	800c1f2 <__gethex+0x4e>
 800c1fe:	f7ff ffbb 	bl	800c178 <__hexdig_fun>
 800c202:	fab0 f580 	clz	r5, r0
 800c206:	096d      	lsrs	r5, r5, #5
 800c208:	f04f 0b01 	mov.w	fp, #1
 800c20c:	464a      	mov	r2, r9
 800c20e:	4616      	mov	r6, r2
 800c210:	3201      	adds	r2, #1
 800c212:	7830      	ldrb	r0, [r6, #0]
 800c214:	f7ff ffb0 	bl	800c178 <__hexdig_fun>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d1f8      	bne.n	800c20e <__gethex+0x6a>
 800c21c:	498d      	ldr	r1, [pc, #564]	@ (800c454 <__gethex+0x2b0>)
 800c21e:	2201      	movs	r2, #1
 800c220:	4630      	mov	r0, r6
 800c222:	f7ff fe5a 	bl	800beda <strncmp>
 800c226:	2800      	cmp	r0, #0
 800c228:	d13f      	bne.n	800c2aa <__gethex+0x106>
 800c22a:	b944      	cbnz	r4, 800c23e <__gethex+0x9a>
 800c22c:	1c74      	adds	r4, r6, #1
 800c22e:	4622      	mov	r2, r4
 800c230:	4616      	mov	r6, r2
 800c232:	3201      	adds	r2, #1
 800c234:	7830      	ldrb	r0, [r6, #0]
 800c236:	f7ff ff9f 	bl	800c178 <__hexdig_fun>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d1f8      	bne.n	800c230 <__gethex+0x8c>
 800c23e:	1ba4      	subs	r4, r4, r6
 800c240:	00a7      	lsls	r7, r4, #2
 800c242:	7833      	ldrb	r3, [r6, #0]
 800c244:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c248:	2b50      	cmp	r3, #80	@ 0x50
 800c24a:	d13e      	bne.n	800c2ca <__gethex+0x126>
 800c24c:	7873      	ldrb	r3, [r6, #1]
 800c24e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c250:	d033      	beq.n	800c2ba <__gethex+0x116>
 800c252:	2b2d      	cmp	r3, #45	@ 0x2d
 800c254:	d034      	beq.n	800c2c0 <__gethex+0x11c>
 800c256:	1c71      	adds	r1, r6, #1
 800c258:	2400      	movs	r4, #0
 800c25a:	7808      	ldrb	r0, [r1, #0]
 800c25c:	f7ff ff8c 	bl	800c178 <__hexdig_fun>
 800c260:	1e43      	subs	r3, r0, #1
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b18      	cmp	r3, #24
 800c266:	d830      	bhi.n	800c2ca <__gethex+0x126>
 800c268:	f1a0 0210 	sub.w	r2, r0, #16
 800c26c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c270:	f7ff ff82 	bl	800c178 <__hexdig_fun>
 800c274:	f100 3cff 	add.w	ip, r0, #4294967295
 800c278:	fa5f fc8c 	uxtb.w	ip, ip
 800c27c:	f1bc 0f18 	cmp.w	ip, #24
 800c280:	f04f 030a 	mov.w	r3, #10
 800c284:	d91e      	bls.n	800c2c4 <__gethex+0x120>
 800c286:	b104      	cbz	r4, 800c28a <__gethex+0xe6>
 800c288:	4252      	negs	r2, r2
 800c28a:	4417      	add	r7, r2
 800c28c:	f8ca 1000 	str.w	r1, [sl]
 800c290:	b1ed      	cbz	r5, 800c2ce <__gethex+0x12a>
 800c292:	f1bb 0f00 	cmp.w	fp, #0
 800c296:	bf0c      	ite	eq
 800c298:	2506      	moveq	r5, #6
 800c29a:	2500      	movne	r5, #0
 800c29c:	4628      	mov	r0, r5
 800c29e:	b005      	add	sp, #20
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	462c      	mov	r4, r5
 800c2a8:	e7b0      	b.n	800c20c <__gethex+0x68>
 800c2aa:	2c00      	cmp	r4, #0
 800c2ac:	d1c7      	bne.n	800c23e <__gethex+0x9a>
 800c2ae:	4627      	mov	r7, r4
 800c2b0:	e7c7      	b.n	800c242 <__gethex+0x9e>
 800c2b2:	464e      	mov	r6, r9
 800c2b4:	462f      	mov	r7, r5
 800c2b6:	2501      	movs	r5, #1
 800c2b8:	e7c3      	b.n	800c242 <__gethex+0x9e>
 800c2ba:	2400      	movs	r4, #0
 800c2bc:	1cb1      	adds	r1, r6, #2
 800c2be:	e7cc      	b.n	800c25a <__gethex+0xb6>
 800c2c0:	2401      	movs	r4, #1
 800c2c2:	e7fb      	b.n	800c2bc <__gethex+0x118>
 800c2c4:	fb03 0002 	mla	r0, r3, r2, r0
 800c2c8:	e7ce      	b.n	800c268 <__gethex+0xc4>
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	e7de      	b.n	800c28c <__gethex+0xe8>
 800c2ce:	eba6 0309 	sub.w	r3, r6, r9
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	2b07      	cmp	r3, #7
 800c2d8:	dc0a      	bgt.n	800c2f0 <__gethex+0x14c>
 800c2da:	9801      	ldr	r0, [sp, #4]
 800c2dc:	f000 faf4 	bl	800c8c8 <_Balloc>
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	b940      	cbnz	r0, 800c2f6 <__gethex+0x152>
 800c2e4:	4b5c      	ldr	r3, [pc, #368]	@ (800c458 <__gethex+0x2b4>)
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	21e4      	movs	r1, #228	@ 0xe4
 800c2ea:	485c      	ldr	r0, [pc, #368]	@ (800c45c <__gethex+0x2b8>)
 800c2ec:	f002 f858 	bl	800e3a0 <__assert_func>
 800c2f0:	3101      	adds	r1, #1
 800c2f2:	105b      	asrs	r3, r3, #1
 800c2f4:	e7ef      	b.n	800c2d6 <__gethex+0x132>
 800c2f6:	f100 0a14 	add.w	sl, r0, #20
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4655      	mov	r5, sl
 800c2fe:	469b      	mov	fp, r3
 800c300:	45b1      	cmp	r9, r6
 800c302:	d337      	bcc.n	800c374 <__gethex+0x1d0>
 800c304:	f845 bb04 	str.w	fp, [r5], #4
 800c308:	eba5 050a 	sub.w	r5, r5, sl
 800c30c:	10ad      	asrs	r5, r5, #2
 800c30e:	6125      	str	r5, [r4, #16]
 800c310:	4658      	mov	r0, fp
 800c312:	f000 fbcb 	bl	800caac <__hi0bits>
 800c316:	016d      	lsls	r5, r5, #5
 800c318:	f8d8 6000 	ldr.w	r6, [r8]
 800c31c:	1a2d      	subs	r5, r5, r0
 800c31e:	42b5      	cmp	r5, r6
 800c320:	dd54      	ble.n	800c3cc <__gethex+0x228>
 800c322:	1bad      	subs	r5, r5, r6
 800c324:	4629      	mov	r1, r5
 800c326:	4620      	mov	r0, r4
 800c328:	f000 ff75 	bl	800d216 <__any_on>
 800c32c:	4681      	mov	r9, r0
 800c32e:	b178      	cbz	r0, 800c350 <__gethex+0x1ac>
 800c330:	1e6b      	subs	r3, r5, #1
 800c332:	1159      	asrs	r1, r3, #5
 800c334:	f003 021f 	and.w	r2, r3, #31
 800c338:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c33c:	f04f 0901 	mov.w	r9, #1
 800c340:	fa09 f202 	lsl.w	r2, r9, r2
 800c344:	420a      	tst	r2, r1
 800c346:	d003      	beq.n	800c350 <__gethex+0x1ac>
 800c348:	454b      	cmp	r3, r9
 800c34a:	dc36      	bgt.n	800c3ba <__gethex+0x216>
 800c34c:	f04f 0902 	mov.w	r9, #2
 800c350:	4629      	mov	r1, r5
 800c352:	4620      	mov	r0, r4
 800c354:	f7ff febe 	bl	800c0d4 <rshift>
 800c358:	442f      	add	r7, r5
 800c35a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c35e:	42bb      	cmp	r3, r7
 800c360:	da42      	bge.n	800c3e8 <__gethex+0x244>
 800c362:	9801      	ldr	r0, [sp, #4]
 800c364:	4621      	mov	r1, r4
 800c366:	f000 faef 	bl	800c948 <_Bfree>
 800c36a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c36c:	2300      	movs	r3, #0
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	25a3      	movs	r5, #163	@ 0xa3
 800c372:	e793      	b.n	800c29c <__gethex+0xf8>
 800c374:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c378:	2a2e      	cmp	r2, #46	@ 0x2e
 800c37a:	d012      	beq.n	800c3a2 <__gethex+0x1fe>
 800c37c:	2b20      	cmp	r3, #32
 800c37e:	d104      	bne.n	800c38a <__gethex+0x1e6>
 800c380:	f845 bb04 	str.w	fp, [r5], #4
 800c384:	f04f 0b00 	mov.w	fp, #0
 800c388:	465b      	mov	r3, fp
 800c38a:	7830      	ldrb	r0, [r6, #0]
 800c38c:	9303      	str	r3, [sp, #12]
 800c38e:	f7ff fef3 	bl	800c178 <__hexdig_fun>
 800c392:	9b03      	ldr	r3, [sp, #12]
 800c394:	f000 000f 	and.w	r0, r0, #15
 800c398:	4098      	lsls	r0, r3
 800c39a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c39e:	3304      	adds	r3, #4
 800c3a0:	e7ae      	b.n	800c300 <__gethex+0x15c>
 800c3a2:	45b1      	cmp	r9, r6
 800c3a4:	d8ea      	bhi.n	800c37c <__gethex+0x1d8>
 800c3a6:	492b      	ldr	r1, [pc, #172]	@ (800c454 <__gethex+0x2b0>)
 800c3a8:	9303      	str	r3, [sp, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7ff fd94 	bl	800beda <strncmp>
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d1e1      	bne.n	800c37c <__gethex+0x1d8>
 800c3b8:	e7a2      	b.n	800c300 <__gethex+0x15c>
 800c3ba:	1ea9      	subs	r1, r5, #2
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 ff2a 	bl	800d216 <__any_on>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d0c2      	beq.n	800c34c <__gethex+0x1a8>
 800c3c6:	f04f 0903 	mov.w	r9, #3
 800c3ca:	e7c1      	b.n	800c350 <__gethex+0x1ac>
 800c3cc:	da09      	bge.n	800c3e2 <__gethex+0x23e>
 800c3ce:	1b75      	subs	r5, r6, r5
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	9801      	ldr	r0, [sp, #4]
 800c3d4:	462a      	mov	r2, r5
 800c3d6:	f000 fcc7 	bl	800cd68 <__lshift>
 800c3da:	1b7f      	subs	r7, r7, r5
 800c3dc:	4604      	mov	r4, r0
 800c3de:	f100 0a14 	add.w	sl, r0, #20
 800c3e2:	f04f 0900 	mov.w	r9, #0
 800c3e6:	e7b8      	b.n	800c35a <__gethex+0x1b6>
 800c3e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3ec:	42bd      	cmp	r5, r7
 800c3ee:	dd6f      	ble.n	800c4d0 <__gethex+0x32c>
 800c3f0:	1bed      	subs	r5, r5, r7
 800c3f2:	42ae      	cmp	r6, r5
 800c3f4:	dc34      	bgt.n	800c460 <__gethex+0x2bc>
 800c3f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d022      	beq.n	800c444 <__gethex+0x2a0>
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d024      	beq.n	800c44c <__gethex+0x2a8>
 800c402:	2b01      	cmp	r3, #1
 800c404:	d115      	bne.n	800c432 <__gethex+0x28e>
 800c406:	42ae      	cmp	r6, r5
 800c408:	d113      	bne.n	800c432 <__gethex+0x28e>
 800c40a:	2e01      	cmp	r6, #1
 800c40c:	d10b      	bne.n	800c426 <__gethex+0x282>
 800c40e:	9a02      	ldr	r2, [sp, #8]
 800c410:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	2301      	movs	r3, #1
 800c418:	6123      	str	r3, [r4, #16]
 800c41a:	f8ca 3000 	str.w	r3, [sl]
 800c41e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c420:	2562      	movs	r5, #98	@ 0x62
 800c422:	601c      	str	r4, [r3, #0]
 800c424:	e73a      	b.n	800c29c <__gethex+0xf8>
 800c426:	1e71      	subs	r1, r6, #1
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fef4 	bl	800d216 <__any_on>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d1ed      	bne.n	800c40e <__gethex+0x26a>
 800c432:	9801      	ldr	r0, [sp, #4]
 800c434:	4621      	mov	r1, r4
 800c436:	f000 fa87 	bl	800c948 <_Bfree>
 800c43a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c43c:	2300      	movs	r3, #0
 800c43e:	6013      	str	r3, [r2, #0]
 800c440:	2550      	movs	r5, #80	@ 0x50
 800c442:	e72b      	b.n	800c29c <__gethex+0xf8>
 800c444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1f3      	bne.n	800c432 <__gethex+0x28e>
 800c44a:	e7e0      	b.n	800c40e <__gethex+0x26a>
 800c44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1dd      	bne.n	800c40e <__gethex+0x26a>
 800c452:	e7ee      	b.n	800c432 <__gethex+0x28e>
 800c454:	08022dcc 	.word	0x08022dcc
 800c458:	08022e01 	.word	0x08022e01
 800c45c:	08022e12 	.word	0x08022e12
 800c460:	1e6f      	subs	r7, r5, #1
 800c462:	f1b9 0f00 	cmp.w	r9, #0
 800c466:	d130      	bne.n	800c4ca <__gethex+0x326>
 800c468:	b127      	cbz	r7, 800c474 <__gethex+0x2d0>
 800c46a:	4639      	mov	r1, r7
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fed2 	bl	800d216 <__any_on>
 800c472:	4681      	mov	r9, r0
 800c474:	117a      	asrs	r2, r7, #5
 800c476:	2301      	movs	r3, #1
 800c478:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c47c:	f007 071f 	and.w	r7, r7, #31
 800c480:	40bb      	lsls	r3, r7
 800c482:	4213      	tst	r3, r2
 800c484:	4629      	mov	r1, r5
 800c486:	4620      	mov	r0, r4
 800c488:	bf18      	it	ne
 800c48a:	f049 0902 	orrne.w	r9, r9, #2
 800c48e:	f7ff fe21 	bl	800c0d4 <rshift>
 800c492:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c496:	1b76      	subs	r6, r6, r5
 800c498:	2502      	movs	r5, #2
 800c49a:	f1b9 0f00 	cmp.w	r9, #0
 800c49e:	d047      	beq.n	800c530 <__gethex+0x38c>
 800c4a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d015      	beq.n	800c4d4 <__gethex+0x330>
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d017      	beq.n	800c4dc <__gethex+0x338>
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d109      	bne.n	800c4c4 <__gethex+0x320>
 800c4b0:	f019 0f02 	tst.w	r9, #2
 800c4b4:	d006      	beq.n	800c4c4 <__gethex+0x320>
 800c4b6:	f8da 3000 	ldr.w	r3, [sl]
 800c4ba:	ea49 0903 	orr.w	r9, r9, r3
 800c4be:	f019 0f01 	tst.w	r9, #1
 800c4c2:	d10e      	bne.n	800c4e2 <__gethex+0x33e>
 800c4c4:	f045 0510 	orr.w	r5, r5, #16
 800c4c8:	e032      	b.n	800c530 <__gethex+0x38c>
 800c4ca:	f04f 0901 	mov.w	r9, #1
 800c4ce:	e7d1      	b.n	800c474 <__gethex+0x2d0>
 800c4d0:	2501      	movs	r5, #1
 800c4d2:	e7e2      	b.n	800c49a <__gethex+0x2f6>
 800c4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4d6:	f1c3 0301 	rsb	r3, r3, #1
 800c4da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0f0      	beq.n	800c4c4 <__gethex+0x320>
 800c4e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4e6:	f104 0314 	add.w	r3, r4, #20
 800c4ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4f2:	f04f 0c00 	mov.w	ip, #0
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c500:	d01b      	beq.n	800c53a <__gethex+0x396>
 800c502:	3201      	adds	r2, #1
 800c504:	6002      	str	r2, [r0, #0]
 800c506:	2d02      	cmp	r5, #2
 800c508:	f104 0314 	add.w	r3, r4, #20
 800c50c:	d13c      	bne.n	800c588 <__gethex+0x3e4>
 800c50e:	f8d8 2000 	ldr.w	r2, [r8]
 800c512:	3a01      	subs	r2, #1
 800c514:	42b2      	cmp	r2, r6
 800c516:	d109      	bne.n	800c52c <__gethex+0x388>
 800c518:	1171      	asrs	r1, r6, #5
 800c51a:	2201      	movs	r2, #1
 800c51c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c520:	f006 061f 	and.w	r6, r6, #31
 800c524:	fa02 f606 	lsl.w	r6, r2, r6
 800c528:	421e      	tst	r6, r3
 800c52a:	d13a      	bne.n	800c5a2 <__gethex+0x3fe>
 800c52c:	f045 0520 	orr.w	r5, r5, #32
 800c530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c532:	601c      	str	r4, [r3, #0]
 800c534:	9b02      	ldr	r3, [sp, #8]
 800c536:	601f      	str	r7, [r3, #0]
 800c538:	e6b0      	b.n	800c29c <__gethex+0xf8>
 800c53a:	4299      	cmp	r1, r3
 800c53c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c540:	d8d9      	bhi.n	800c4f6 <__gethex+0x352>
 800c542:	68a3      	ldr	r3, [r4, #8]
 800c544:	459b      	cmp	fp, r3
 800c546:	db17      	blt.n	800c578 <__gethex+0x3d4>
 800c548:	6861      	ldr	r1, [r4, #4]
 800c54a:	9801      	ldr	r0, [sp, #4]
 800c54c:	3101      	adds	r1, #1
 800c54e:	f000 f9bb 	bl	800c8c8 <_Balloc>
 800c552:	4681      	mov	r9, r0
 800c554:	b918      	cbnz	r0, 800c55e <__gethex+0x3ba>
 800c556:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c0 <__gethex+0x41c>)
 800c558:	4602      	mov	r2, r0
 800c55a:	2184      	movs	r1, #132	@ 0x84
 800c55c:	e6c5      	b.n	800c2ea <__gethex+0x146>
 800c55e:	6922      	ldr	r2, [r4, #16]
 800c560:	3202      	adds	r2, #2
 800c562:	f104 010c 	add.w	r1, r4, #12
 800c566:	0092      	lsls	r2, r2, #2
 800c568:	300c      	adds	r0, #12
 800c56a:	f7ff fd52 	bl	800c012 <memcpy>
 800c56e:	4621      	mov	r1, r4
 800c570:	9801      	ldr	r0, [sp, #4]
 800c572:	f000 f9e9 	bl	800c948 <_Bfree>
 800c576:	464c      	mov	r4, r9
 800c578:	6923      	ldr	r3, [r4, #16]
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c580:	6122      	str	r2, [r4, #16]
 800c582:	2201      	movs	r2, #1
 800c584:	615a      	str	r2, [r3, #20]
 800c586:	e7be      	b.n	800c506 <__gethex+0x362>
 800c588:	6922      	ldr	r2, [r4, #16]
 800c58a:	455a      	cmp	r2, fp
 800c58c:	dd0b      	ble.n	800c5a6 <__gethex+0x402>
 800c58e:	2101      	movs	r1, #1
 800c590:	4620      	mov	r0, r4
 800c592:	f7ff fd9f 	bl	800c0d4 <rshift>
 800c596:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c59a:	3701      	adds	r7, #1
 800c59c:	42bb      	cmp	r3, r7
 800c59e:	f6ff aee0 	blt.w	800c362 <__gethex+0x1be>
 800c5a2:	2501      	movs	r5, #1
 800c5a4:	e7c2      	b.n	800c52c <__gethex+0x388>
 800c5a6:	f016 061f 	ands.w	r6, r6, #31
 800c5aa:	d0fa      	beq.n	800c5a2 <__gethex+0x3fe>
 800c5ac:	4453      	add	r3, sl
 800c5ae:	f1c6 0620 	rsb	r6, r6, #32
 800c5b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5b6:	f000 fa79 	bl	800caac <__hi0bits>
 800c5ba:	42b0      	cmp	r0, r6
 800c5bc:	dbe7      	blt.n	800c58e <__gethex+0x3ea>
 800c5be:	e7f0      	b.n	800c5a2 <__gethex+0x3fe>
 800c5c0:	08022e01 	.word	0x08022e01

0800c5c4 <L_shift>:
 800c5c4:	f1c2 0208 	rsb	r2, r2, #8
 800c5c8:	0092      	lsls	r2, r2, #2
 800c5ca:	b570      	push	{r4, r5, r6, lr}
 800c5cc:	f1c2 0620 	rsb	r6, r2, #32
 800c5d0:	6843      	ldr	r3, [r0, #4]
 800c5d2:	6804      	ldr	r4, [r0, #0]
 800c5d4:	fa03 f506 	lsl.w	r5, r3, r6
 800c5d8:	432c      	orrs	r4, r5
 800c5da:	40d3      	lsrs	r3, r2
 800c5dc:	6004      	str	r4, [r0, #0]
 800c5de:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5e2:	4288      	cmp	r0, r1
 800c5e4:	d3f4      	bcc.n	800c5d0 <L_shift+0xc>
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}

0800c5e8 <__match>:
 800c5e8:	b530      	push	{r4, r5, lr}
 800c5ea:	6803      	ldr	r3, [r0, #0]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f2:	b914      	cbnz	r4, 800c5fa <__match+0x12>
 800c5f4:	6003      	str	r3, [r0, #0]
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	bd30      	pop	{r4, r5, pc}
 800c5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c602:	2d19      	cmp	r5, #25
 800c604:	bf98      	it	ls
 800c606:	3220      	addls	r2, #32
 800c608:	42a2      	cmp	r2, r4
 800c60a:	d0f0      	beq.n	800c5ee <__match+0x6>
 800c60c:	2000      	movs	r0, #0
 800c60e:	e7f3      	b.n	800c5f8 <__match+0x10>

0800c610 <__hexnan>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	680b      	ldr	r3, [r1, #0]
 800c616:	6801      	ldr	r1, [r0, #0]
 800c618:	115e      	asrs	r6, r3, #5
 800c61a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c61e:	f013 031f 	ands.w	r3, r3, #31
 800c622:	b087      	sub	sp, #28
 800c624:	bf18      	it	ne
 800c626:	3604      	addne	r6, #4
 800c628:	2500      	movs	r5, #0
 800c62a:	1f37      	subs	r7, r6, #4
 800c62c:	4682      	mov	sl, r0
 800c62e:	4690      	mov	r8, r2
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	f846 5c04 	str.w	r5, [r6, #-4]
 800c636:	46b9      	mov	r9, r7
 800c638:	463c      	mov	r4, r7
 800c63a:	9502      	str	r5, [sp, #8]
 800c63c:	46ab      	mov	fp, r5
 800c63e:	784a      	ldrb	r2, [r1, #1]
 800c640:	1c4b      	adds	r3, r1, #1
 800c642:	9303      	str	r3, [sp, #12]
 800c644:	b342      	cbz	r2, 800c698 <__hexnan+0x88>
 800c646:	4610      	mov	r0, r2
 800c648:	9105      	str	r1, [sp, #20]
 800c64a:	9204      	str	r2, [sp, #16]
 800c64c:	f7ff fd94 	bl	800c178 <__hexdig_fun>
 800c650:	2800      	cmp	r0, #0
 800c652:	d151      	bne.n	800c6f8 <__hexnan+0xe8>
 800c654:	9a04      	ldr	r2, [sp, #16]
 800c656:	9905      	ldr	r1, [sp, #20]
 800c658:	2a20      	cmp	r2, #32
 800c65a:	d818      	bhi.n	800c68e <__hexnan+0x7e>
 800c65c:	9b02      	ldr	r3, [sp, #8]
 800c65e:	459b      	cmp	fp, r3
 800c660:	dd13      	ble.n	800c68a <__hexnan+0x7a>
 800c662:	454c      	cmp	r4, r9
 800c664:	d206      	bcs.n	800c674 <__hexnan+0x64>
 800c666:	2d07      	cmp	r5, #7
 800c668:	dc04      	bgt.n	800c674 <__hexnan+0x64>
 800c66a:	462a      	mov	r2, r5
 800c66c:	4649      	mov	r1, r9
 800c66e:	4620      	mov	r0, r4
 800c670:	f7ff ffa8 	bl	800c5c4 <L_shift>
 800c674:	4544      	cmp	r4, r8
 800c676:	d952      	bls.n	800c71e <__hexnan+0x10e>
 800c678:	2300      	movs	r3, #0
 800c67a:	f1a4 0904 	sub.w	r9, r4, #4
 800c67e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c682:	f8cd b008 	str.w	fp, [sp, #8]
 800c686:	464c      	mov	r4, r9
 800c688:	461d      	mov	r5, r3
 800c68a:	9903      	ldr	r1, [sp, #12]
 800c68c:	e7d7      	b.n	800c63e <__hexnan+0x2e>
 800c68e:	2a29      	cmp	r2, #41	@ 0x29
 800c690:	d157      	bne.n	800c742 <__hexnan+0x132>
 800c692:	3102      	adds	r1, #2
 800c694:	f8ca 1000 	str.w	r1, [sl]
 800c698:	f1bb 0f00 	cmp.w	fp, #0
 800c69c:	d051      	beq.n	800c742 <__hexnan+0x132>
 800c69e:	454c      	cmp	r4, r9
 800c6a0:	d206      	bcs.n	800c6b0 <__hexnan+0xa0>
 800c6a2:	2d07      	cmp	r5, #7
 800c6a4:	dc04      	bgt.n	800c6b0 <__hexnan+0xa0>
 800c6a6:	462a      	mov	r2, r5
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f7ff ff8a 	bl	800c5c4 <L_shift>
 800c6b0:	4544      	cmp	r4, r8
 800c6b2:	d936      	bls.n	800c722 <__hexnan+0x112>
 800c6b4:	f1a8 0204 	sub.w	r2, r8, #4
 800c6b8:	4623      	mov	r3, r4
 800c6ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6be:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6c2:	429f      	cmp	r7, r3
 800c6c4:	d2f9      	bcs.n	800c6ba <__hexnan+0xaa>
 800c6c6:	1b3b      	subs	r3, r7, r4
 800c6c8:	f023 0303 	bic.w	r3, r3, #3
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	3401      	adds	r4, #1
 800c6d0:	3e03      	subs	r6, #3
 800c6d2:	42b4      	cmp	r4, r6
 800c6d4:	bf88      	it	hi
 800c6d6:	2304      	movhi	r3, #4
 800c6d8:	4443      	add	r3, r8
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f843 2b04 	str.w	r2, [r3], #4
 800c6e0:	429f      	cmp	r7, r3
 800c6e2:	d2fb      	bcs.n	800c6dc <__hexnan+0xcc>
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	b91b      	cbnz	r3, 800c6f0 <__hexnan+0xe0>
 800c6e8:	4547      	cmp	r7, r8
 800c6ea:	d128      	bne.n	800c73e <__hexnan+0x12e>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	2005      	movs	r0, #5
 800c6f2:	b007      	add	sp, #28
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	3501      	adds	r5, #1
 800c6fa:	2d08      	cmp	r5, #8
 800c6fc:	f10b 0b01 	add.w	fp, fp, #1
 800c700:	dd06      	ble.n	800c710 <__hexnan+0x100>
 800c702:	4544      	cmp	r4, r8
 800c704:	d9c1      	bls.n	800c68a <__hexnan+0x7a>
 800c706:	2300      	movs	r3, #0
 800c708:	f844 3c04 	str.w	r3, [r4, #-4]
 800c70c:	2501      	movs	r5, #1
 800c70e:	3c04      	subs	r4, #4
 800c710:	6822      	ldr	r2, [r4, #0]
 800c712:	f000 000f 	and.w	r0, r0, #15
 800c716:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c71a:	6020      	str	r0, [r4, #0]
 800c71c:	e7b5      	b.n	800c68a <__hexnan+0x7a>
 800c71e:	2508      	movs	r5, #8
 800c720:	e7b3      	b.n	800c68a <__hexnan+0x7a>
 800c722:	9b01      	ldr	r3, [sp, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d0dd      	beq.n	800c6e4 <__hexnan+0xd4>
 800c728:	f1c3 0320 	rsb	r3, r3, #32
 800c72c:	f04f 32ff 	mov.w	r2, #4294967295
 800c730:	40da      	lsrs	r2, r3
 800c732:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c736:	4013      	ands	r3, r2
 800c738:	f846 3c04 	str.w	r3, [r6, #-4]
 800c73c:	e7d2      	b.n	800c6e4 <__hexnan+0xd4>
 800c73e:	3f04      	subs	r7, #4
 800c740:	e7d0      	b.n	800c6e4 <__hexnan+0xd4>
 800c742:	2004      	movs	r0, #4
 800c744:	e7d5      	b.n	800c6f2 <__hexnan+0xe2>
	...

0800c748 <sbrk_aligned>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	4e0f      	ldr	r6, [pc, #60]	@ (800c788 <sbrk_aligned+0x40>)
 800c74c:	460c      	mov	r4, r1
 800c74e:	6831      	ldr	r1, [r6, #0]
 800c750:	4605      	mov	r5, r0
 800c752:	b911      	cbnz	r1, 800c75a <sbrk_aligned+0x12>
 800c754:	f001 fe0c 	bl	800e370 <_sbrk_r>
 800c758:	6030      	str	r0, [r6, #0]
 800c75a:	4621      	mov	r1, r4
 800c75c:	4628      	mov	r0, r5
 800c75e:	f001 fe07 	bl	800e370 <_sbrk_r>
 800c762:	1c43      	adds	r3, r0, #1
 800c764:	d103      	bne.n	800c76e <sbrk_aligned+0x26>
 800c766:	f04f 34ff 	mov.w	r4, #4294967295
 800c76a:	4620      	mov	r0, r4
 800c76c:	bd70      	pop	{r4, r5, r6, pc}
 800c76e:	1cc4      	adds	r4, r0, #3
 800c770:	f024 0403 	bic.w	r4, r4, #3
 800c774:	42a0      	cmp	r0, r4
 800c776:	d0f8      	beq.n	800c76a <sbrk_aligned+0x22>
 800c778:	1a21      	subs	r1, r4, r0
 800c77a:	4628      	mov	r0, r5
 800c77c:	f001 fdf8 	bl	800e370 <_sbrk_r>
 800c780:	3001      	adds	r0, #1
 800c782:	d1f2      	bne.n	800c76a <sbrk_aligned+0x22>
 800c784:	e7ef      	b.n	800c766 <sbrk_aligned+0x1e>
 800c786:	bf00      	nop
 800c788:	2001d368 	.word	0x2001d368

0800c78c <_malloc_r>:
 800c78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c790:	1ccd      	adds	r5, r1, #3
 800c792:	f025 0503 	bic.w	r5, r5, #3
 800c796:	3508      	adds	r5, #8
 800c798:	2d0c      	cmp	r5, #12
 800c79a:	bf38      	it	cc
 800c79c:	250c      	movcc	r5, #12
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	db01      	blt.n	800c7a8 <_malloc_r+0x1c>
 800c7a4:	42a9      	cmp	r1, r5
 800c7a6:	d904      	bls.n	800c7b2 <_malloc_r+0x26>
 800c7a8:	230c      	movs	r3, #12
 800c7aa:	6033      	str	r3, [r6, #0]
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c888 <_malloc_r+0xfc>
 800c7b6:	f000 f87b 	bl	800c8b0 <__malloc_lock>
 800c7ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c7be:	461c      	mov	r4, r3
 800c7c0:	bb44      	cbnz	r4, 800c814 <_malloc_r+0x88>
 800c7c2:	4629      	mov	r1, r5
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f7ff ffbf 	bl	800c748 <sbrk_aligned>
 800c7ca:	1c43      	adds	r3, r0, #1
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	d158      	bne.n	800c882 <_malloc_r+0xf6>
 800c7d0:	f8d8 4000 	ldr.w	r4, [r8]
 800c7d4:	4627      	mov	r7, r4
 800c7d6:	2f00      	cmp	r7, #0
 800c7d8:	d143      	bne.n	800c862 <_malloc_r+0xd6>
 800c7da:	2c00      	cmp	r4, #0
 800c7dc:	d04b      	beq.n	800c876 <_malloc_r+0xea>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	eb04 0903 	add.w	r9, r4, r3
 800c7e8:	f001 fdc2 	bl	800e370 <_sbrk_r>
 800c7ec:	4581      	cmp	r9, r0
 800c7ee:	d142      	bne.n	800c876 <_malloc_r+0xea>
 800c7f0:	6821      	ldr	r1, [r4, #0]
 800c7f2:	1a6d      	subs	r5, r5, r1
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7ff ffa6 	bl	800c748 <sbrk_aligned>
 800c7fc:	3001      	adds	r0, #1
 800c7fe:	d03a      	beq.n	800c876 <_malloc_r+0xea>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	442b      	add	r3, r5
 800c804:	6023      	str	r3, [r4, #0]
 800c806:	f8d8 3000 	ldr.w	r3, [r8]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	bb62      	cbnz	r2, 800c868 <_malloc_r+0xdc>
 800c80e:	f8c8 7000 	str.w	r7, [r8]
 800c812:	e00f      	b.n	800c834 <_malloc_r+0xa8>
 800c814:	6822      	ldr	r2, [r4, #0]
 800c816:	1b52      	subs	r2, r2, r5
 800c818:	d420      	bmi.n	800c85c <_malloc_r+0xd0>
 800c81a:	2a0b      	cmp	r2, #11
 800c81c:	d917      	bls.n	800c84e <_malloc_r+0xc2>
 800c81e:	1961      	adds	r1, r4, r5
 800c820:	42a3      	cmp	r3, r4
 800c822:	6025      	str	r5, [r4, #0]
 800c824:	bf18      	it	ne
 800c826:	6059      	strne	r1, [r3, #4]
 800c828:	6863      	ldr	r3, [r4, #4]
 800c82a:	bf08      	it	eq
 800c82c:	f8c8 1000 	streq.w	r1, [r8]
 800c830:	5162      	str	r2, [r4, r5]
 800c832:	604b      	str	r3, [r1, #4]
 800c834:	4630      	mov	r0, r6
 800c836:	f000 f841 	bl	800c8bc <__malloc_unlock>
 800c83a:	f104 000b 	add.w	r0, r4, #11
 800c83e:	1d23      	adds	r3, r4, #4
 800c840:	f020 0007 	bic.w	r0, r0, #7
 800c844:	1ac2      	subs	r2, r0, r3
 800c846:	bf1c      	itt	ne
 800c848:	1a1b      	subne	r3, r3, r0
 800c84a:	50a3      	strne	r3, [r4, r2]
 800c84c:	e7af      	b.n	800c7ae <_malloc_r+0x22>
 800c84e:	6862      	ldr	r2, [r4, #4]
 800c850:	42a3      	cmp	r3, r4
 800c852:	bf0c      	ite	eq
 800c854:	f8c8 2000 	streq.w	r2, [r8]
 800c858:	605a      	strne	r2, [r3, #4]
 800c85a:	e7eb      	b.n	800c834 <_malloc_r+0xa8>
 800c85c:	4623      	mov	r3, r4
 800c85e:	6864      	ldr	r4, [r4, #4]
 800c860:	e7ae      	b.n	800c7c0 <_malloc_r+0x34>
 800c862:	463c      	mov	r4, r7
 800c864:	687f      	ldr	r7, [r7, #4]
 800c866:	e7b6      	b.n	800c7d6 <_malloc_r+0x4a>
 800c868:	461a      	mov	r2, r3
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	d1fb      	bne.n	800c868 <_malloc_r+0xdc>
 800c870:	2300      	movs	r3, #0
 800c872:	6053      	str	r3, [r2, #4]
 800c874:	e7de      	b.n	800c834 <_malloc_r+0xa8>
 800c876:	230c      	movs	r3, #12
 800c878:	6033      	str	r3, [r6, #0]
 800c87a:	4630      	mov	r0, r6
 800c87c:	f000 f81e 	bl	800c8bc <__malloc_unlock>
 800c880:	e794      	b.n	800c7ac <_malloc_r+0x20>
 800c882:	6005      	str	r5, [r0, #0]
 800c884:	e7d6      	b.n	800c834 <_malloc_r+0xa8>
 800c886:	bf00      	nop
 800c888:	2001d36c 	.word	0x2001d36c

0800c88c <__ascii_mbtowc>:
 800c88c:	b082      	sub	sp, #8
 800c88e:	b901      	cbnz	r1, 800c892 <__ascii_mbtowc+0x6>
 800c890:	a901      	add	r1, sp, #4
 800c892:	b142      	cbz	r2, 800c8a6 <__ascii_mbtowc+0x1a>
 800c894:	b14b      	cbz	r3, 800c8aa <__ascii_mbtowc+0x1e>
 800c896:	7813      	ldrb	r3, [r2, #0]
 800c898:	600b      	str	r3, [r1, #0]
 800c89a:	7812      	ldrb	r2, [r2, #0]
 800c89c:	1e10      	subs	r0, r2, #0
 800c89e:	bf18      	it	ne
 800c8a0:	2001      	movne	r0, #1
 800c8a2:	b002      	add	sp, #8
 800c8a4:	4770      	bx	lr
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	e7fb      	b.n	800c8a2 <__ascii_mbtowc+0x16>
 800c8aa:	f06f 0001 	mvn.w	r0, #1
 800c8ae:	e7f8      	b.n	800c8a2 <__ascii_mbtowc+0x16>

0800c8b0 <__malloc_lock>:
 800c8b0:	4801      	ldr	r0, [pc, #4]	@ (800c8b8 <__malloc_lock+0x8>)
 800c8b2:	f7ff bbac 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800c8b6:	bf00      	nop
 800c8b8:	2001d364 	.word	0x2001d364

0800c8bc <__malloc_unlock>:
 800c8bc:	4801      	ldr	r0, [pc, #4]	@ (800c8c4 <__malloc_unlock+0x8>)
 800c8be:	f7ff bba7 	b.w	800c010 <__retarget_lock_release_recursive>
 800c8c2:	bf00      	nop
 800c8c4:	2001d364 	.word	0x2001d364

0800c8c8 <_Balloc>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	69c6      	ldr	r6, [r0, #28]
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	460d      	mov	r5, r1
 800c8d0:	b976      	cbnz	r6, 800c8f0 <_Balloc+0x28>
 800c8d2:	2010      	movs	r0, #16
 800c8d4:	f002 fbda 	bl	800f08c <malloc>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	61e0      	str	r0, [r4, #28]
 800c8dc:	b920      	cbnz	r0, 800c8e8 <_Balloc+0x20>
 800c8de:	4b18      	ldr	r3, [pc, #96]	@ (800c940 <_Balloc+0x78>)
 800c8e0:	4818      	ldr	r0, [pc, #96]	@ (800c944 <_Balloc+0x7c>)
 800c8e2:	216b      	movs	r1, #107	@ 0x6b
 800c8e4:	f001 fd5c 	bl	800e3a0 <__assert_func>
 800c8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8ec:	6006      	str	r6, [r0, #0]
 800c8ee:	60c6      	str	r6, [r0, #12]
 800c8f0:	69e6      	ldr	r6, [r4, #28]
 800c8f2:	68f3      	ldr	r3, [r6, #12]
 800c8f4:	b183      	cbz	r3, 800c918 <_Balloc+0x50>
 800c8f6:	69e3      	ldr	r3, [r4, #28]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8fe:	b9b8      	cbnz	r0, 800c930 <_Balloc+0x68>
 800c900:	2101      	movs	r1, #1
 800c902:	fa01 f605 	lsl.w	r6, r1, r5
 800c906:	1d72      	adds	r2, r6, #5
 800c908:	0092      	lsls	r2, r2, #2
 800c90a:	4620      	mov	r0, r4
 800c90c:	f001 fd66 	bl	800e3dc <_calloc_r>
 800c910:	b160      	cbz	r0, 800c92c <_Balloc+0x64>
 800c912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c916:	e00e      	b.n	800c936 <_Balloc+0x6e>
 800c918:	2221      	movs	r2, #33	@ 0x21
 800c91a:	2104      	movs	r1, #4
 800c91c:	4620      	mov	r0, r4
 800c91e:	f001 fd5d 	bl	800e3dc <_calloc_r>
 800c922:	69e3      	ldr	r3, [r4, #28]
 800c924:	60f0      	str	r0, [r6, #12]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1e4      	bne.n	800c8f6 <_Balloc+0x2e>
 800c92c:	2000      	movs	r0, #0
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
 800c930:	6802      	ldr	r2, [r0, #0]
 800c932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c936:	2300      	movs	r3, #0
 800c938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c93c:	e7f7      	b.n	800c92e <_Balloc+0x66>
 800c93e:	bf00      	nop
 800c940:	08022e9c 	.word	0x08022e9c
 800c944:	08022eb3 	.word	0x08022eb3

0800c948 <_Bfree>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	69c6      	ldr	r6, [r0, #28]
 800c94c:	4605      	mov	r5, r0
 800c94e:	460c      	mov	r4, r1
 800c950:	b976      	cbnz	r6, 800c970 <_Bfree+0x28>
 800c952:	2010      	movs	r0, #16
 800c954:	f002 fb9a 	bl	800f08c <malloc>
 800c958:	4602      	mov	r2, r0
 800c95a:	61e8      	str	r0, [r5, #28]
 800c95c:	b920      	cbnz	r0, 800c968 <_Bfree+0x20>
 800c95e:	4b09      	ldr	r3, [pc, #36]	@ (800c984 <_Bfree+0x3c>)
 800c960:	4809      	ldr	r0, [pc, #36]	@ (800c988 <_Bfree+0x40>)
 800c962:	218f      	movs	r1, #143	@ 0x8f
 800c964:	f001 fd1c 	bl	800e3a0 <__assert_func>
 800c968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c96c:	6006      	str	r6, [r0, #0]
 800c96e:	60c6      	str	r6, [r0, #12]
 800c970:	b13c      	cbz	r4, 800c982 <_Bfree+0x3a>
 800c972:	69eb      	ldr	r3, [r5, #28]
 800c974:	6862      	ldr	r2, [r4, #4]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c97c:	6021      	str	r1, [r4, #0]
 800c97e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c982:	bd70      	pop	{r4, r5, r6, pc}
 800c984:	08022e9c 	.word	0x08022e9c
 800c988:	08022eb3 	.word	0x08022eb3

0800c98c <__multadd>:
 800c98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c990:	690d      	ldr	r5, [r1, #16]
 800c992:	4607      	mov	r7, r0
 800c994:	460c      	mov	r4, r1
 800c996:	461e      	mov	r6, r3
 800c998:	f101 0c14 	add.w	ip, r1, #20
 800c99c:	2000      	movs	r0, #0
 800c99e:	f8dc 3000 	ldr.w	r3, [ip]
 800c9a2:	b299      	uxth	r1, r3
 800c9a4:	fb02 6101 	mla	r1, r2, r1, r6
 800c9a8:	0c1e      	lsrs	r6, r3, #16
 800c9aa:	0c0b      	lsrs	r3, r1, #16
 800c9ac:	fb02 3306 	mla	r3, r2, r6, r3
 800c9b0:	b289      	uxth	r1, r1
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9b8:	4285      	cmp	r5, r0
 800c9ba:	f84c 1b04 	str.w	r1, [ip], #4
 800c9be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9c2:	dcec      	bgt.n	800c99e <__multadd+0x12>
 800c9c4:	b30e      	cbz	r6, 800ca0a <__multadd+0x7e>
 800c9c6:	68a3      	ldr	r3, [r4, #8]
 800c9c8:	42ab      	cmp	r3, r5
 800c9ca:	dc19      	bgt.n	800ca00 <__multadd+0x74>
 800c9cc:	6861      	ldr	r1, [r4, #4]
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	3101      	adds	r1, #1
 800c9d2:	f7ff ff79 	bl	800c8c8 <_Balloc>
 800c9d6:	4680      	mov	r8, r0
 800c9d8:	b928      	cbnz	r0, 800c9e6 <__multadd+0x5a>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	4b0c      	ldr	r3, [pc, #48]	@ (800ca10 <__multadd+0x84>)
 800c9de:	480d      	ldr	r0, [pc, #52]	@ (800ca14 <__multadd+0x88>)
 800c9e0:	21ba      	movs	r1, #186	@ 0xba
 800c9e2:	f001 fcdd 	bl	800e3a0 <__assert_func>
 800c9e6:	6922      	ldr	r2, [r4, #16]
 800c9e8:	3202      	adds	r2, #2
 800c9ea:	f104 010c 	add.w	r1, r4, #12
 800c9ee:	0092      	lsls	r2, r2, #2
 800c9f0:	300c      	adds	r0, #12
 800c9f2:	f7ff fb0e 	bl	800c012 <memcpy>
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	4638      	mov	r0, r7
 800c9fa:	f7ff ffa5 	bl	800c948 <_Bfree>
 800c9fe:	4644      	mov	r4, r8
 800ca00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca04:	3501      	adds	r5, #1
 800ca06:	615e      	str	r6, [r3, #20]
 800ca08:	6125      	str	r5, [r4, #16]
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca10:	08022e01 	.word	0x08022e01
 800ca14:	08022eb3 	.word	0x08022eb3

0800ca18 <__s2b>:
 800ca18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	4615      	mov	r5, r2
 800ca20:	461f      	mov	r7, r3
 800ca22:	2209      	movs	r2, #9
 800ca24:	3308      	adds	r3, #8
 800ca26:	4606      	mov	r6, r0
 800ca28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	2201      	movs	r2, #1
 800ca30:	429a      	cmp	r2, r3
 800ca32:	db09      	blt.n	800ca48 <__s2b+0x30>
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff ff47 	bl	800c8c8 <_Balloc>
 800ca3a:	b940      	cbnz	r0, 800ca4e <__s2b+0x36>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	4b19      	ldr	r3, [pc, #100]	@ (800caa4 <__s2b+0x8c>)
 800ca40:	4819      	ldr	r0, [pc, #100]	@ (800caa8 <__s2b+0x90>)
 800ca42:	21d3      	movs	r1, #211	@ 0xd3
 800ca44:	f001 fcac 	bl	800e3a0 <__assert_func>
 800ca48:	0052      	lsls	r2, r2, #1
 800ca4a:	3101      	adds	r1, #1
 800ca4c:	e7f0      	b.n	800ca30 <__s2b+0x18>
 800ca4e:	9b08      	ldr	r3, [sp, #32]
 800ca50:	6143      	str	r3, [r0, #20]
 800ca52:	2d09      	cmp	r5, #9
 800ca54:	f04f 0301 	mov.w	r3, #1
 800ca58:	6103      	str	r3, [r0, #16]
 800ca5a:	dd16      	ble.n	800ca8a <__s2b+0x72>
 800ca5c:	f104 0909 	add.w	r9, r4, #9
 800ca60:	46c8      	mov	r8, r9
 800ca62:	442c      	add	r4, r5
 800ca64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca68:	4601      	mov	r1, r0
 800ca6a:	3b30      	subs	r3, #48	@ 0x30
 800ca6c:	220a      	movs	r2, #10
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f7ff ff8c 	bl	800c98c <__multadd>
 800ca74:	45a0      	cmp	r8, r4
 800ca76:	d1f5      	bne.n	800ca64 <__s2b+0x4c>
 800ca78:	f1a5 0408 	sub.w	r4, r5, #8
 800ca7c:	444c      	add	r4, r9
 800ca7e:	1b2d      	subs	r5, r5, r4
 800ca80:	1963      	adds	r3, r4, r5
 800ca82:	42bb      	cmp	r3, r7
 800ca84:	db04      	blt.n	800ca90 <__s2b+0x78>
 800ca86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8a:	340a      	adds	r4, #10
 800ca8c:	2509      	movs	r5, #9
 800ca8e:	e7f6      	b.n	800ca7e <__s2b+0x66>
 800ca90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca94:	4601      	mov	r1, r0
 800ca96:	3b30      	subs	r3, #48	@ 0x30
 800ca98:	220a      	movs	r2, #10
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	f7ff ff76 	bl	800c98c <__multadd>
 800caa0:	e7ee      	b.n	800ca80 <__s2b+0x68>
 800caa2:	bf00      	nop
 800caa4:	08022e01 	.word	0x08022e01
 800caa8:	08022eb3 	.word	0x08022eb3

0800caac <__hi0bits>:
 800caac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cab0:	4603      	mov	r3, r0
 800cab2:	bf36      	itet	cc
 800cab4:	0403      	lslcc	r3, r0, #16
 800cab6:	2000      	movcs	r0, #0
 800cab8:	2010      	movcc	r0, #16
 800caba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cabe:	bf3c      	itt	cc
 800cac0:	021b      	lslcc	r3, r3, #8
 800cac2:	3008      	addcc	r0, #8
 800cac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cac8:	bf3c      	itt	cc
 800caca:	011b      	lslcc	r3, r3, #4
 800cacc:	3004      	addcc	r0, #4
 800cace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cad2:	bf3c      	itt	cc
 800cad4:	009b      	lslcc	r3, r3, #2
 800cad6:	3002      	addcc	r0, #2
 800cad8:	2b00      	cmp	r3, #0
 800cada:	db05      	blt.n	800cae8 <__hi0bits+0x3c>
 800cadc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cae0:	f100 0001 	add.w	r0, r0, #1
 800cae4:	bf08      	it	eq
 800cae6:	2020      	moveq	r0, #32
 800cae8:	4770      	bx	lr

0800caea <__lo0bits>:
 800caea:	6803      	ldr	r3, [r0, #0]
 800caec:	4602      	mov	r2, r0
 800caee:	f013 0007 	ands.w	r0, r3, #7
 800caf2:	d00b      	beq.n	800cb0c <__lo0bits+0x22>
 800caf4:	07d9      	lsls	r1, r3, #31
 800caf6:	d421      	bmi.n	800cb3c <__lo0bits+0x52>
 800caf8:	0798      	lsls	r0, r3, #30
 800cafa:	bf49      	itett	mi
 800cafc:	085b      	lsrmi	r3, r3, #1
 800cafe:	089b      	lsrpl	r3, r3, #2
 800cb00:	2001      	movmi	r0, #1
 800cb02:	6013      	strmi	r3, [r2, #0]
 800cb04:	bf5c      	itt	pl
 800cb06:	6013      	strpl	r3, [r2, #0]
 800cb08:	2002      	movpl	r0, #2
 800cb0a:	4770      	bx	lr
 800cb0c:	b299      	uxth	r1, r3
 800cb0e:	b909      	cbnz	r1, 800cb14 <__lo0bits+0x2a>
 800cb10:	0c1b      	lsrs	r3, r3, #16
 800cb12:	2010      	movs	r0, #16
 800cb14:	b2d9      	uxtb	r1, r3
 800cb16:	b909      	cbnz	r1, 800cb1c <__lo0bits+0x32>
 800cb18:	3008      	adds	r0, #8
 800cb1a:	0a1b      	lsrs	r3, r3, #8
 800cb1c:	0719      	lsls	r1, r3, #28
 800cb1e:	bf04      	itt	eq
 800cb20:	091b      	lsreq	r3, r3, #4
 800cb22:	3004      	addeq	r0, #4
 800cb24:	0799      	lsls	r1, r3, #30
 800cb26:	bf04      	itt	eq
 800cb28:	089b      	lsreq	r3, r3, #2
 800cb2a:	3002      	addeq	r0, #2
 800cb2c:	07d9      	lsls	r1, r3, #31
 800cb2e:	d403      	bmi.n	800cb38 <__lo0bits+0x4e>
 800cb30:	085b      	lsrs	r3, r3, #1
 800cb32:	f100 0001 	add.w	r0, r0, #1
 800cb36:	d003      	beq.n	800cb40 <__lo0bits+0x56>
 800cb38:	6013      	str	r3, [r2, #0]
 800cb3a:	4770      	bx	lr
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	4770      	bx	lr
 800cb40:	2020      	movs	r0, #32
 800cb42:	4770      	bx	lr

0800cb44 <__i2b>:
 800cb44:	b510      	push	{r4, lr}
 800cb46:	460c      	mov	r4, r1
 800cb48:	2101      	movs	r1, #1
 800cb4a:	f7ff febd 	bl	800c8c8 <_Balloc>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	b928      	cbnz	r0, 800cb5e <__i2b+0x1a>
 800cb52:	4b05      	ldr	r3, [pc, #20]	@ (800cb68 <__i2b+0x24>)
 800cb54:	4805      	ldr	r0, [pc, #20]	@ (800cb6c <__i2b+0x28>)
 800cb56:	f240 1145 	movw	r1, #325	@ 0x145
 800cb5a:	f001 fc21 	bl	800e3a0 <__assert_func>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	6144      	str	r4, [r0, #20]
 800cb62:	6103      	str	r3, [r0, #16]
 800cb64:	bd10      	pop	{r4, pc}
 800cb66:	bf00      	nop
 800cb68:	08022e01 	.word	0x08022e01
 800cb6c:	08022eb3 	.word	0x08022eb3

0800cb70 <__multiply>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	4617      	mov	r7, r2
 800cb76:	690a      	ldr	r2, [r1, #16]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	bfa8      	it	ge
 800cb7e:	463b      	movge	r3, r7
 800cb80:	4689      	mov	r9, r1
 800cb82:	bfa4      	itt	ge
 800cb84:	460f      	movge	r7, r1
 800cb86:	4699      	movge	r9, r3
 800cb88:	693d      	ldr	r5, [r7, #16]
 800cb8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	eb05 060a 	add.w	r6, r5, sl
 800cb96:	42b3      	cmp	r3, r6
 800cb98:	b085      	sub	sp, #20
 800cb9a:	bfb8      	it	lt
 800cb9c:	3101      	addlt	r1, #1
 800cb9e:	f7ff fe93 	bl	800c8c8 <_Balloc>
 800cba2:	b930      	cbnz	r0, 800cbb2 <__multiply+0x42>
 800cba4:	4602      	mov	r2, r0
 800cba6:	4b41      	ldr	r3, [pc, #260]	@ (800ccac <__multiply+0x13c>)
 800cba8:	4841      	ldr	r0, [pc, #260]	@ (800ccb0 <__multiply+0x140>)
 800cbaa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbae:	f001 fbf7 	bl	800e3a0 <__assert_func>
 800cbb2:	f100 0414 	add.w	r4, r0, #20
 800cbb6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cbba:	4623      	mov	r3, r4
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	4573      	cmp	r3, lr
 800cbc0:	d320      	bcc.n	800cc04 <__multiply+0x94>
 800cbc2:	f107 0814 	add.w	r8, r7, #20
 800cbc6:	f109 0114 	add.w	r1, r9, #20
 800cbca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cbce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cbd2:	9302      	str	r3, [sp, #8]
 800cbd4:	1beb      	subs	r3, r5, r7
 800cbd6:	3b15      	subs	r3, #21
 800cbd8:	f023 0303 	bic.w	r3, r3, #3
 800cbdc:	3304      	adds	r3, #4
 800cbde:	3715      	adds	r7, #21
 800cbe0:	42bd      	cmp	r5, r7
 800cbe2:	bf38      	it	cc
 800cbe4:	2304      	movcc	r3, #4
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	9b02      	ldr	r3, [sp, #8]
 800cbea:	9103      	str	r1, [sp, #12]
 800cbec:	428b      	cmp	r3, r1
 800cbee:	d80c      	bhi.n	800cc0a <__multiply+0x9a>
 800cbf0:	2e00      	cmp	r6, #0
 800cbf2:	dd03      	ble.n	800cbfc <__multiply+0x8c>
 800cbf4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d055      	beq.n	800cca8 <__multiply+0x138>
 800cbfc:	6106      	str	r6, [r0, #16]
 800cbfe:	b005      	add	sp, #20
 800cc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc04:	f843 2b04 	str.w	r2, [r3], #4
 800cc08:	e7d9      	b.n	800cbbe <__multiply+0x4e>
 800cc0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc0e:	f1ba 0f00 	cmp.w	sl, #0
 800cc12:	d01f      	beq.n	800cc54 <__multiply+0xe4>
 800cc14:	46c4      	mov	ip, r8
 800cc16:	46a1      	mov	r9, r4
 800cc18:	2700      	movs	r7, #0
 800cc1a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc1e:	f8d9 3000 	ldr.w	r3, [r9]
 800cc22:	fa1f fb82 	uxth.w	fp, r2
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc2c:	443b      	add	r3, r7
 800cc2e:	f8d9 7000 	ldr.w	r7, [r9]
 800cc32:	0c12      	lsrs	r2, r2, #16
 800cc34:	0c3f      	lsrs	r7, r7, #16
 800cc36:	fb0a 7202 	mla	r2, sl, r2, r7
 800cc3a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc44:	4565      	cmp	r5, ip
 800cc46:	f849 3b04 	str.w	r3, [r9], #4
 800cc4a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cc4e:	d8e4      	bhi.n	800cc1a <__multiply+0xaa>
 800cc50:	9b01      	ldr	r3, [sp, #4]
 800cc52:	50e7      	str	r7, [r4, r3]
 800cc54:	9b03      	ldr	r3, [sp, #12]
 800cc56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc5a:	3104      	adds	r1, #4
 800cc5c:	f1b9 0f00 	cmp.w	r9, #0
 800cc60:	d020      	beq.n	800cca4 <__multiply+0x134>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	4647      	mov	r7, r8
 800cc66:	46a4      	mov	ip, r4
 800cc68:	f04f 0a00 	mov.w	sl, #0
 800cc6c:	f8b7 b000 	ldrh.w	fp, [r7]
 800cc70:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cc74:	fb09 220b 	mla	r2, r9, fp, r2
 800cc78:	4452      	add	r2, sl
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc80:	f84c 3b04 	str.w	r3, [ip], #4
 800cc84:	f857 3b04 	ldr.w	r3, [r7], #4
 800cc88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc8c:	f8bc 3000 	ldrh.w	r3, [ip]
 800cc90:	fb09 330a 	mla	r3, r9, sl, r3
 800cc94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cc98:	42bd      	cmp	r5, r7
 800cc9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc9e:	d8e5      	bhi.n	800cc6c <__multiply+0xfc>
 800cca0:	9a01      	ldr	r2, [sp, #4]
 800cca2:	50a3      	str	r3, [r4, r2]
 800cca4:	3404      	adds	r4, #4
 800cca6:	e79f      	b.n	800cbe8 <__multiply+0x78>
 800cca8:	3e01      	subs	r6, #1
 800ccaa:	e7a1      	b.n	800cbf0 <__multiply+0x80>
 800ccac:	08022e01 	.word	0x08022e01
 800ccb0:	08022eb3 	.word	0x08022eb3

0800ccb4 <__pow5mult>:
 800ccb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb8:	4615      	mov	r5, r2
 800ccba:	f012 0203 	ands.w	r2, r2, #3
 800ccbe:	4607      	mov	r7, r0
 800ccc0:	460e      	mov	r6, r1
 800ccc2:	d007      	beq.n	800ccd4 <__pow5mult+0x20>
 800ccc4:	4c25      	ldr	r4, [pc, #148]	@ (800cd5c <__pow5mult+0xa8>)
 800ccc6:	3a01      	subs	r2, #1
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccce:	f7ff fe5d 	bl	800c98c <__multadd>
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	10ad      	asrs	r5, r5, #2
 800ccd6:	d03d      	beq.n	800cd54 <__pow5mult+0xa0>
 800ccd8:	69fc      	ldr	r4, [r7, #28]
 800ccda:	b97c      	cbnz	r4, 800ccfc <__pow5mult+0x48>
 800ccdc:	2010      	movs	r0, #16
 800ccde:	f002 f9d5 	bl	800f08c <malloc>
 800cce2:	4602      	mov	r2, r0
 800cce4:	61f8      	str	r0, [r7, #28]
 800cce6:	b928      	cbnz	r0, 800ccf4 <__pow5mult+0x40>
 800cce8:	4b1d      	ldr	r3, [pc, #116]	@ (800cd60 <__pow5mult+0xac>)
 800ccea:	481e      	ldr	r0, [pc, #120]	@ (800cd64 <__pow5mult+0xb0>)
 800ccec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ccf0:	f001 fb56 	bl	800e3a0 <__assert_func>
 800ccf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccf8:	6004      	str	r4, [r0, #0]
 800ccfa:	60c4      	str	r4, [r0, #12]
 800ccfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd04:	b94c      	cbnz	r4, 800cd1a <__pow5mult+0x66>
 800cd06:	f240 2171 	movw	r1, #625	@ 0x271
 800cd0a:	4638      	mov	r0, r7
 800cd0c:	f7ff ff1a 	bl	800cb44 <__i2b>
 800cd10:	2300      	movs	r3, #0
 800cd12:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd16:	4604      	mov	r4, r0
 800cd18:	6003      	str	r3, [r0, #0]
 800cd1a:	f04f 0900 	mov.w	r9, #0
 800cd1e:	07eb      	lsls	r3, r5, #31
 800cd20:	d50a      	bpl.n	800cd38 <__pow5mult+0x84>
 800cd22:	4631      	mov	r1, r6
 800cd24:	4622      	mov	r2, r4
 800cd26:	4638      	mov	r0, r7
 800cd28:	f7ff ff22 	bl	800cb70 <__multiply>
 800cd2c:	4631      	mov	r1, r6
 800cd2e:	4680      	mov	r8, r0
 800cd30:	4638      	mov	r0, r7
 800cd32:	f7ff fe09 	bl	800c948 <_Bfree>
 800cd36:	4646      	mov	r6, r8
 800cd38:	106d      	asrs	r5, r5, #1
 800cd3a:	d00b      	beq.n	800cd54 <__pow5mult+0xa0>
 800cd3c:	6820      	ldr	r0, [r4, #0]
 800cd3e:	b938      	cbnz	r0, 800cd50 <__pow5mult+0x9c>
 800cd40:	4622      	mov	r2, r4
 800cd42:	4621      	mov	r1, r4
 800cd44:	4638      	mov	r0, r7
 800cd46:	f7ff ff13 	bl	800cb70 <__multiply>
 800cd4a:	6020      	str	r0, [r4, #0]
 800cd4c:	f8c0 9000 	str.w	r9, [r0]
 800cd50:	4604      	mov	r4, r0
 800cd52:	e7e4      	b.n	800cd1e <__pow5mult+0x6a>
 800cd54:	4630      	mov	r0, r6
 800cd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	bf00      	nop
 800cd5c:	080230a0 	.word	0x080230a0
 800cd60:	08022e9c 	.word	0x08022e9c
 800cd64:	08022eb3 	.word	0x08022eb3

0800cd68 <__lshift>:
 800cd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	6849      	ldr	r1, [r1, #4]
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	4607      	mov	r7, r0
 800cd7a:	4691      	mov	r9, r2
 800cd7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd80:	f108 0601 	add.w	r6, r8, #1
 800cd84:	42b3      	cmp	r3, r6
 800cd86:	db0b      	blt.n	800cda0 <__lshift+0x38>
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f7ff fd9d 	bl	800c8c8 <_Balloc>
 800cd8e:	4605      	mov	r5, r0
 800cd90:	b948      	cbnz	r0, 800cda6 <__lshift+0x3e>
 800cd92:	4602      	mov	r2, r0
 800cd94:	4b28      	ldr	r3, [pc, #160]	@ (800ce38 <__lshift+0xd0>)
 800cd96:	4829      	ldr	r0, [pc, #164]	@ (800ce3c <__lshift+0xd4>)
 800cd98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cd9c:	f001 fb00 	bl	800e3a0 <__assert_func>
 800cda0:	3101      	adds	r1, #1
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	e7ee      	b.n	800cd84 <__lshift+0x1c>
 800cda6:	2300      	movs	r3, #0
 800cda8:	f100 0114 	add.w	r1, r0, #20
 800cdac:	f100 0210 	add.w	r2, r0, #16
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	4553      	cmp	r3, sl
 800cdb4:	db33      	blt.n	800ce1e <__lshift+0xb6>
 800cdb6:	6920      	ldr	r0, [r4, #16]
 800cdb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdbc:	f104 0314 	add.w	r3, r4, #20
 800cdc0:	f019 091f 	ands.w	r9, r9, #31
 800cdc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdcc:	d02b      	beq.n	800ce26 <__lshift+0xbe>
 800cdce:	f1c9 0e20 	rsb	lr, r9, #32
 800cdd2:	468a      	mov	sl, r1
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	6818      	ldr	r0, [r3, #0]
 800cdd8:	fa00 f009 	lsl.w	r0, r0, r9
 800cddc:	4310      	orrs	r0, r2
 800cdde:	f84a 0b04 	str.w	r0, [sl], #4
 800cde2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cde6:	459c      	cmp	ip, r3
 800cde8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cdec:	d8f3      	bhi.n	800cdd6 <__lshift+0x6e>
 800cdee:	ebac 0304 	sub.w	r3, ip, r4
 800cdf2:	3b15      	subs	r3, #21
 800cdf4:	f023 0303 	bic.w	r3, r3, #3
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	f104 0015 	add.w	r0, r4, #21
 800cdfe:	4560      	cmp	r0, ip
 800ce00:	bf88      	it	hi
 800ce02:	2304      	movhi	r3, #4
 800ce04:	50ca      	str	r2, [r1, r3]
 800ce06:	b10a      	cbz	r2, 800ce0c <__lshift+0xa4>
 800ce08:	f108 0602 	add.w	r6, r8, #2
 800ce0c:	3e01      	subs	r6, #1
 800ce0e:	4638      	mov	r0, r7
 800ce10:	612e      	str	r6, [r5, #16]
 800ce12:	4621      	mov	r1, r4
 800ce14:	f7ff fd98 	bl	800c948 <_Bfree>
 800ce18:	4628      	mov	r0, r5
 800ce1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce22:	3301      	adds	r3, #1
 800ce24:	e7c5      	b.n	800cdb2 <__lshift+0x4a>
 800ce26:	3904      	subs	r1, #4
 800ce28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce30:	459c      	cmp	ip, r3
 800ce32:	d8f9      	bhi.n	800ce28 <__lshift+0xc0>
 800ce34:	e7ea      	b.n	800ce0c <__lshift+0xa4>
 800ce36:	bf00      	nop
 800ce38:	08022e01 	.word	0x08022e01
 800ce3c:	08022eb3 	.word	0x08022eb3

0800ce40 <__mcmp>:
 800ce40:	690a      	ldr	r2, [r1, #16]
 800ce42:	4603      	mov	r3, r0
 800ce44:	6900      	ldr	r0, [r0, #16]
 800ce46:	1a80      	subs	r0, r0, r2
 800ce48:	b530      	push	{r4, r5, lr}
 800ce4a:	d10e      	bne.n	800ce6a <__mcmp+0x2a>
 800ce4c:	3314      	adds	r3, #20
 800ce4e:	3114      	adds	r1, #20
 800ce50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce60:	4295      	cmp	r5, r2
 800ce62:	d003      	beq.n	800ce6c <__mcmp+0x2c>
 800ce64:	d205      	bcs.n	800ce72 <__mcmp+0x32>
 800ce66:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6a:	bd30      	pop	{r4, r5, pc}
 800ce6c:	42a3      	cmp	r3, r4
 800ce6e:	d3f3      	bcc.n	800ce58 <__mcmp+0x18>
 800ce70:	e7fb      	b.n	800ce6a <__mcmp+0x2a>
 800ce72:	2001      	movs	r0, #1
 800ce74:	e7f9      	b.n	800ce6a <__mcmp+0x2a>
	...

0800ce78 <__mdiff>:
 800ce78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	4689      	mov	r9, r1
 800ce7e:	4606      	mov	r6, r0
 800ce80:	4611      	mov	r1, r2
 800ce82:	4648      	mov	r0, r9
 800ce84:	4614      	mov	r4, r2
 800ce86:	f7ff ffdb 	bl	800ce40 <__mcmp>
 800ce8a:	1e05      	subs	r5, r0, #0
 800ce8c:	d112      	bne.n	800ceb4 <__mdiff+0x3c>
 800ce8e:	4629      	mov	r1, r5
 800ce90:	4630      	mov	r0, r6
 800ce92:	f7ff fd19 	bl	800c8c8 <_Balloc>
 800ce96:	4602      	mov	r2, r0
 800ce98:	b928      	cbnz	r0, 800cea6 <__mdiff+0x2e>
 800ce9a:	4b3f      	ldr	r3, [pc, #252]	@ (800cf98 <__mdiff+0x120>)
 800ce9c:	f240 2137 	movw	r1, #567	@ 0x237
 800cea0:	483e      	ldr	r0, [pc, #248]	@ (800cf9c <__mdiff+0x124>)
 800cea2:	f001 fa7d 	bl	800e3a0 <__assert_func>
 800cea6:	2301      	movs	r3, #1
 800cea8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ceac:	4610      	mov	r0, r2
 800ceae:	b003      	add	sp, #12
 800ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb4:	bfbc      	itt	lt
 800ceb6:	464b      	movlt	r3, r9
 800ceb8:	46a1      	movlt	r9, r4
 800ceba:	4630      	mov	r0, r6
 800cebc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cec0:	bfba      	itte	lt
 800cec2:	461c      	movlt	r4, r3
 800cec4:	2501      	movlt	r5, #1
 800cec6:	2500      	movge	r5, #0
 800cec8:	f7ff fcfe 	bl	800c8c8 <_Balloc>
 800cecc:	4602      	mov	r2, r0
 800cece:	b918      	cbnz	r0, 800ced8 <__mdiff+0x60>
 800ced0:	4b31      	ldr	r3, [pc, #196]	@ (800cf98 <__mdiff+0x120>)
 800ced2:	f240 2145 	movw	r1, #581	@ 0x245
 800ced6:	e7e3      	b.n	800cea0 <__mdiff+0x28>
 800ced8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cedc:	6926      	ldr	r6, [r4, #16]
 800cede:	60c5      	str	r5, [r0, #12]
 800cee0:	f109 0310 	add.w	r3, r9, #16
 800cee4:	f109 0514 	add.w	r5, r9, #20
 800cee8:	f104 0e14 	add.w	lr, r4, #20
 800ceec:	f100 0b14 	add.w	fp, r0, #20
 800cef0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cef4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cef8:	9301      	str	r3, [sp, #4]
 800cefa:	46d9      	mov	r9, fp
 800cefc:	f04f 0c00 	mov.w	ip, #0
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf0a:	9301      	str	r3, [sp, #4]
 800cf0c:	fa1f f38a 	uxth.w	r3, sl
 800cf10:	4619      	mov	r1, r3
 800cf12:	b283      	uxth	r3, r0
 800cf14:	1acb      	subs	r3, r1, r3
 800cf16:	0c00      	lsrs	r0, r0, #16
 800cf18:	4463      	add	r3, ip
 800cf1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf28:	4576      	cmp	r6, lr
 800cf2a:	f849 3b04 	str.w	r3, [r9], #4
 800cf2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf32:	d8e5      	bhi.n	800cf00 <__mdiff+0x88>
 800cf34:	1b33      	subs	r3, r6, r4
 800cf36:	3b15      	subs	r3, #21
 800cf38:	f023 0303 	bic.w	r3, r3, #3
 800cf3c:	3415      	adds	r4, #21
 800cf3e:	3304      	adds	r3, #4
 800cf40:	42a6      	cmp	r6, r4
 800cf42:	bf38      	it	cc
 800cf44:	2304      	movcc	r3, #4
 800cf46:	441d      	add	r5, r3
 800cf48:	445b      	add	r3, fp
 800cf4a:	461e      	mov	r6, r3
 800cf4c:	462c      	mov	r4, r5
 800cf4e:	4544      	cmp	r4, r8
 800cf50:	d30e      	bcc.n	800cf70 <__mdiff+0xf8>
 800cf52:	f108 0103 	add.w	r1, r8, #3
 800cf56:	1b49      	subs	r1, r1, r5
 800cf58:	f021 0103 	bic.w	r1, r1, #3
 800cf5c:	3d03      	subs	r5, #3
 800cf5e:	45a8      	cmp	r8, r5
 800cf60:	bf38      	it	cc
 800cf62:	2100      	movcc	r1, #0
 800cf64:	440b      	add	r3, r1
 800cf66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf6a:	b191      	cbz	r1, 800cf92 <__mdiff+0x11a>
 800cf6c:	6117      	str	r7, [r2, #16]
 800cf6e:	e79d      	b.n	800ceac <__mdiff+0x34>
 800cf70:	f854 1b04 	ldr.w	r1, [r4], #4
 800cf74:	46e6      	mov	lr, ip
 800cf76:	0c08      	lsrs	r0, r1, #16
 800cf78:	fa1c fc81 	uxtah	ip, ip, r1
 800cf7c:	4471      	add	r1, lr
 800cf7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cf82:	b289      	uxth	r1, r1
 800cf84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf88:	f846 1b04 	str.w	r1, [r6], #4
 800cf8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf90:	e7dd      	b.n	800cf4e <__mdiff+0xd6>
 800cf92:	3f01      	subs	r7, #1
 800cf94:	e7e7      	b.n	800cf66 <__mdiff+0xee>
 800cf96:	bf00      	nop
 800cf98:	08022e01 	.word	0x08022e01
 800cf9c:	08022eb3 	.word	0x08022eb3

0800cfa0 <__ulp>:
 800cfa0:	b082      	sub	sp, #8
 800cfa2:	ed8d 0b00 	vstr	d0, [sp]
 800cfa6:	9a01      	ldr	r2, [sp, #4]
 800cfa8:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe8 <__ulp+0x48>)
 800cfaa:	4013      	ands	r3, r2
 800cfac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dc08      	bgt.n	800cfc6 <__ulp+0x26>
 800cfb4:	425b      	negs	r3, r3
 800cfb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cfba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cfbe:	da04      	bge.n	800cfca <__ulp+0x2a>
 800cfc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cfc4:	4113      	asrs	r3, r2
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	e008      	b.n	800cfdc <__ulp+0x3c>
 800cfca:	f1a2 0314 	sub.w	r3, r2, #20
 800cfce:	2b1e      	cmp	r3, #30
 800cfd0:	bfda      	itte	le
 800cfd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cfd6:	40da      	lsrle	r2, r3
 800cfd8:	2201      	movgt	r2, #1
 800cfda:	2300      	movs	r3, #0
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4610      	mov	r0, r2
 800cfe0:	ec41 0b10 	vmov	d0, r0, r1
 800cfe4:	b002      	add	sp, #8
 800cfe6:	4770      	bx	lr
 800cfe8:	7ff00000 	.word	0x7ff00000

0800cfec <__b2d>:
 800cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	6906      	ldr	r6, [r0, #16]
 800cff2:	f100 0814 	add.w	r8, r0, #20
 800cff6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cffa:	1f37      	subs	r7, r6, #4
 800cffc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d000:	4610      	mov	r0, r2
 800d002:	f7ff fd53 	bl	800caac <__hi0bits>
 800d006:	f1c0 0320 	rsb	r3, r0, #32
 800d00a:	280a      	cmp	r0, #10
 800d00c:	600b      	str	r3, [r1, #0]
 800d00e:	491b      	ldr	r1, [pc, #108]	@ (800d07c <__b2d+0x90>)
 800d010:	dc15      	bgt.n	800d03e <__b2d+0x52>
 800d012:	f1c0 0c0b 	rsb	ip, r0, #11
 800d016:	fa22 f30c 	lsr.w	r3, r2, ip
 800d01a:	45b8      	cmp	r8, r7
 800d01c:	ea43 0501 	orr.w	r5, r3, r1
 800d020:	bf34      	ite	cc
 800d022:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d026:	2300      	movcs	r3, #0
 800d028:	3015      	adds	r0, #21
 800d02a:	fa02 f000 	lsl.w	r0, r2, r0
 800d02e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d032:	4303      	orrs	r3, r0
 800d034:	461c      	mov	r4, r3
 800d036:	ec45 4b10 	vmov	d0, r4, r5
 800d03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03e:	45b8      	cmp	r8, r7
 800d040:	bf3a      	itte	cc
 800d042:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d046:	f1a6 0708 	subcc.w	r7, r6, #8
 800d04a:	2300      	movcs	r3, #0
 800d04c:	380b      	subs	r0, #11
 800d04e:	d012      	beq.n	800d076 <__b2d+0x8a>
 800d050:	f1c0 0120 	rsb	r1, r0, #32
 800d054:	fa23 f401 	lsr.w	r4, r3, r1
 800d058:	4082      	lsls	r2, r0
 800d05a:	4322      	orrs	r2, r4
 800d05c:	4547      	cmp	r7, r8
 800d05e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d062:	bf8c      	ite	hi
 800d064:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d068:	2200      	movls	r2, #0
 800d06a:	4083      	lsls	r3, r0
 800d06c:	40ca      	lsrs	r2, r1
 800d06e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d072:	4313      	orrs	r3, r2
 800d074:	e7de      	b.n	800d034 <__b2d+0x48>
 800d076:	ea42 0501 	orr.w	r5, r2, r1
 800d07a:	e7db      	b.n	800d034 <__b2d+0x48>
 800d07c:	3ff00000 	.word	0x3ff00000

0800d080 <__d2b>:
 800d080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d084:	460f      	mov	r7, r1
 800d086:	2101      	movs	r1, #1
 800d088:	ec59 8b10 	vmov	r8, r9, d0
 800d08c:	4616      	mov	r6, r2
 800d08e:	f7ff fc1b 	bl	800c8c8 <_Balloc>
 800d092:	4604      	mov	r4, r0
 800d094:	b930      	cbnz	r0, 800d0a4 <__d2b+0x24>
 800d096:	4602      	mov	r2, r0
 800d098:	4b23      	ldr	r3, [pc, #140]	@ (800d128 <__d2b+0xa8>)
 800d09a:	4824      	ldr	r0, [pc, #144]	@ (800d12c <__d2b+0xac>)
 800d09c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0a0:	f001 f97e 	bl	800e3a0 <__assert_func>
 800d0a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0ac:	b10d      	cbz	r5, 800d0b2 <__d2b+0x32>
 800d0ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	f1b8 0300 	subs.w	r3, r8, #0
 800d0b8:	d023      	beq.n	800d102 <__d2b+0x82>
 800d0ba:	4668      	mov	r0, sp
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	f7ff fd14 	bl	800caea <__lo0bits>
 800d0c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0c6:	b1d0      	cbz	r0, 800d0fe <__d2b+0x7e>
 800d0c8:	f1c0 0320 	rsb	r3, r0, #32
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	430b      	orrs	r3, r1
 800d0d2:	40c2      	lsrs	r2, r0
 800d0d4:	6163      	str	r3, [r4, #20]
 800d0d6:	9201      	str	r2, [sp, #4]
 800d0d8:	9b01      	ldr	r3, [sp, #4]
 800d0da:	61a3      	str	r3, [r4, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	bf0c      	ite	eq
 800d0e0:	2201      	moveq	r2, #1
 800d0e2:	2202      	movne	r2, #2
 800d0e4:	6122      	str	r2, [r4, #16]
 800d0e6:	b1a5      	cbz	r5, 800d112 <__d2b+0x92>
 800d0e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0ec:	4405      	add	r5, r0
 800d0ee:	603d      	str	r5, [r7, #0]
 800d0f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0f4:	6030      	str	r0, [r6, #0]
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	b003      	add	sp, #12
 800d0fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0fe:	6161      	str	r1, [r4, #20]
 800d100:	e7ea      	b.n	800d0d8 <__d2b+0x58>
 800d102:	a801      	add	r0, sp, #4
 800d104:	f7ff fcf1 	bl	800caea <__lo0bits>
 800d108:	9b01      	ldr	r3, [sp, #4]
 800d10a:	6163      	str	r3, [r4, #20]
 800d10c:	3020      	adds	r0, #32
 800d10e:	2201      	movs	r2, #1
 800d110:	e7e8      	b.n	800d0e4 <__d2b+0x64>
 800d112:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d116:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d11a:	6038      	str	r0, [r7, #0]
 800d11c:	6918      	ldr	r0, [r3, #16]
 800d11e:	f7ff fcc5 	bl	800caac <__hi0bits>
 800d122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d126:	e7e5      	b.n	800d0f4 <__d2b+0x74>
 800d128:	08022e01 	.word	0x08022e01
 800d12c:	08022eb3 	.word	0x08022eb3

0800d130 <__ratio>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	b085      	sub	sp, #20
 800d136:	e9cd 1000 	strd	r1, r0, [sp]
 800d13a:	a902      	add	r1, sp, #8
 800d13c:	f7ff ff56 	bl	800cfec <__b2d>
 800d140:	9800      	ldr	r0, [sp, #0]
 800d142:	a903      	add	r1, sp, #12
 800d144:	ec55 4b10 	vmov	r4, r5, d0
 800d148:	f7ff ff50 	bl	800cfec <__b2d>
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	6919      	ldr	r1, [r3, #16]
 800d150:	9b00      	ldr	r3, [sp, #0]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	1ac9      	subs	r1, r1, r3
 800d156:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	ec5b ab10 	vmov	sl, fp, d0
 800d160:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d164:	2b00      	cmp	r3, #0
 800d166:	bfce      	itee	gt
 800d168:	462a      	movgt	r2, r5
 800d16a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d16e:	465a      	movle	r2, fp
 800d170:	462f      	mov	r7, r5
 800d172:	46d9      	mov	r9, fp
 800d174:	bfcc      	ite	gt
 800d176:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d17a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d17e:	464b      	mov	r3, r9
 800d180:	4652      	mov	r2, sl
 800d182:	4620      	mov	r0, r4
 800d184:	4639      	mov	r1, r7
 800d186:	f7f3 fb69 	bl	800085c <__aeabi_ddiv>
 800d18a:	ec41 0b10 	vmov	d0, r0, r1
 800d18e:	b005      	add	sp, #20
 800d190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d194 <_mprec_log10>:
 800d194:	2817      	cmp	r0, #23
 800d196:	b5d0      	push	{r4, r6, r7, lr}
 800d198:	4604      	mov	r4, r0
 800d19a:	dc07      	bgt.n	800d1ac <_mprec_log10+0x18>
 800d19c:	4b09      	ldr	r3, [pc, #36]	@ (800d1c4 <_mprec_log10+0x30>)
 800d19e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d1a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1a6:	ec41 0b10 	vmov	d0, r0, r1
 800d1aa:	bdd0      	pop	{r4, r6, r7, pc}
 800d1ac:	4906      	ldr	r1, [pc, #24]	@ (800d1c8 <_mprec_log10+0x34>)
 800d1ae:	4f07      	ldr	r7, [pc, #28]	@ (800d1cc <_mprec_log10+0x38>)
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	2600      	movs	r6, #0
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	463b      	mov	r3, r7
 800d1b8:	f7f3 fa26 	bl	8000608 <__aeabi_dmul>
 800d1bc:	3c01      	subs	r4, #1
 800d1be:	d1f9      	bne.n	800d1b4 <_mprec_log10+0x20>
 800d1c0:	e7f1      	b.n	800d1a6 <_mprec_log10+0x12>
 800d1c2:	bf00      	nop
 800d1c4:	080230d8 	.word	0x080230d8
 800d1c8:	3ff00000 	.word	0x3ff00000
 800d1cc:	40240000 	.word	0x40240000

0800d1d0 <__copybits>:
 800d1d0:	3901      	subs	r1, #1
 800d1d2:	b570      	push	{r4, r5, r6, lr}
 800d1d4:	1149      	asrs	r1, r1, #5
 800d1d6:	6914      	ldr	r4, [r2, #16]
 800d1d8:	3101      	adds	r1, #1
 800d1da:	f102 0314 	add.w	r3, r2, #20
 800d1de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1e6:	1f05      	subs	r5, r0, #4
 800d1e8:	42a3      	cmp	r3, r4
 800d1ea:	d30c      	bcc.n	800d206 <__copybits+0x36>
 800d1ec:	1aa3      	subs	r3, r4, r2
 800d1ee:	3b11      	subs	r3, #17
 800d1f0:	f023 0303 	bic.w	r3, r3, #3
 800d1f4:	3211      	adds	r2, #17
 800d1f6:	42a2      	cmp	r2, r4
 800d1f8:	bf88      	it	hi
 800d1fa:	2300      	movhi	r3, #0
 800d1fc:	4418      	add	r0, r3
 800d1fe:	2300      	movs	r3, #0
 800d200:	4288      	cmp	r0, r1
 800d202:	d305      	bcc.n	800d210 <__copybits+0x40>
 800d204:	bd70      	pop	{r4, r5, r6, pc}
 800d206:	f853 6b04 	ldr.w	r6, [r3], #4
 800d20a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d20e:	e7eb      	b.n	800d1e8 <__copybits+0x18>
 800d210:	f840 3b04 	str.w	r3, [r0], #4
 800d214:	e7f4      	b.n	800d200 <__copybits+0x30>

0800d216 <__any_on>:
 800d216:	f100 0214 	add.w	r2, r0, #20
 800d21a:	6900      	ldr	r0, [r0, #16]
 800d21c:	114b      	asrs	r3, r1, #5
 800d21e:	4298      	cmp	r0, r3
 800d220:	b510      	push	{r4, lr}
 800d222:	db11      	blt.n	800d248 <__any_on+0x32>
 800d224:	dd0a      	ble.n	800d23c <__any_on+0x26>
 800d226:	f011 011f 	ands.w	r1, r1, #31
 800d22a:	d007      	beq.n	800d23c <__any_on+0x26>
 800d22c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d230:	fa24 f001 	lsr.w	r0, r4, r1
 800d234:	fa00 f101 	lsl.w	r1, r0, r1
 800d238:	428c      	cmp	r4, r1
 800d23a:	d10b      	bne.n	800d254 <__any_on+0x3e>
 800d23c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d240:	4293      	cmp	r3, r2
 800d242:	d803      	bhi.n	800d24c <__any_on+0x36>
 800d244:	2000      	movs	r0, #0
 800d246:	bd10      	pop	{r4, pc}
 800d248:	4603      	mov	r3, r0
 800d24a:	e7f7      	b.n	800d23c <__any_on+0x26>
 800d24c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d250:	2900      	cmp	r1, #0
 800d252:	d0f5      	beq.n	800d240 <__any_on+0x2a>
 800d254:	2001      	movs	r0, #1
 800d256:	e7f6      	b.n	800d246 <__any_on+0x30>

0800d258 <__ascii_wctomb>:
 800d258:	4603      	mov	r3, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	b141      	cbz	r1, 800d270 <__ascii_wctomb+0x18>
 800d25e:	2aff      	cmp	r2, #255	@ 0xff
 800d260:	d904      	bls.n	800d26c <__ascii_wctomb+0x14>
 800d262:	228a      	movs	r2, #138	@ 0x8a
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	f04f 30ff 	mov.w	r0, #4294967295
 800d26a:	4770      	bx	lr
 800d26c:	700a      	strb	r2, [r1, #0]
 800d26e:	2001      	movs	r0, #1
 800d270:	4770      	bx	lr

0800d272 <print_e>:
 800d272:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d274:	b087      	sub	sp, #28
 800d276:	461e      	mov	r6, r3
 800d278:	ab04      	add	r3, sp, #16
 800d27a:	9301      	str	r3, [sp, #4]
 800d27c:	ab03      	add	r3, sp, #12
 800d27e:	9300      	str	r3, [sp, #0]
 800d280:	460c      	mov	r4, r1
 800d282:	ab05      	add	r3, sp, #20
 800d284:	2102      	movs	r1, #2
 800d286:	4615      	mov	r5, r2
 800d288:	3201      	adds	r2, #1
 800d28a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800d28c:	f001 f944 	bl	800e518 <_dtoa_r>
 800d290:	9b05      	ldr	r3, [sp, #20]
 800d292:	f242 720f 	movw	r2, #9999	@ 0x270f
 800d296:	4293      	cmp	r3, r2
 800d298:	4601      	mov	r1, r0
 800d29a:	d104      	bne.n	800d2a6 <print_e+0x34>
 800d29c:	4620      	mov	r0, r4
 800d29e:	f001 f877 	bl	800e390 <strcpy>
 800d2a2:	b007      	add	sp, #28
 800d2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a6:	7802      	ldrb	r2, [r0, #0]
 800d2a8:	f804 2b01 	strb.w	r2, [r4], #1
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	bfc8      	it	gt
 800d2b0:	2701      	movgt	r7, #1
 800d2b2:	222e      	movs	r2, #46	@ 0x2e
 800d2b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d2b8:	b108      	cbz	r0, 800d2be <print_e+0x4c>
 800d2ba:	2d00      	cmp	r5, #0
 800d2bc:	dc29      	bgt.n	800d312 <print_e+0xa0>
 800d2be:	2e67      	cmp	r6, #103	@ 0x67
 800d2c0:	d038      	beq.n	800d334 <print_e+0xc2>
 800d2c2:	2e47      	cmp	r6, #71	@ 0x47
 800d2c4:	d038      	beq.n	800d338 <print_e+0xc6>
 800d2c6:	222e      	movs	r2, #46	@ 0x2e
 800d2c8:	2130      	movs	r1, #48	@ 0x30
 800d2ca:	2d00      	cmp	r5, #0
 800d2cc:	dc2a      	bgt.n	800d324 <print_e+0xb2>
 800d2ce:	1e5a      	subs	r2, r3, #1
 800d2d0:	2a00      	cmp	r2, #0
 800d2d2:	bfb8      	it	lt
 800d2d4:	f1c3 0301 	rsblt	r3, r3, #1
 800d2d8:	9205      	str	r2, [sp, #20]
 800d2da:	bfaa      	itet	ge
 800d2dc:	232b      	movge	r3, #43	@ 0x2b
 800d2de:	9305      	strlt	r3, [sp, #20]
 800d2e0:	7063      	strbge	r3, [r4, #1]
 800d2e2:	9b05      	ldr	r3, [sp, #20]
 800d2e4:	7026      	strb	r6, [r4, #0]
 800d2e6:	bfbc      	itt	lt
 800d2e8:	222d      	movlt	r2, #45	@ 0x2d
 800d2ea:	7062      	strblt	r2, [r4, #1]
 800d2ec:	2b63      	cmp	r3, #99	@ 0x63
 800d2ee:	dc25      	bgt.n	800d33c <print_e+0xca>
 800d2f0:	1ca1      	adds	r1, r4, #2
 800d2f2:	9b05      	ldr	r3, [sp, #20]
 800d2f4:	220a      	movs	r2, #10
 800d2f6:	fb93 f2f2 	sdiv	r2, r3, r2
 800d2fa:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800d2fe:	7008      	strb	r0, [r1, #0]
 800d300:	f06f 0009 	mvn.w	r0, #9
 800d304:	fb00 3302 	mla	r3, r0, r2, r3
 800d308:	3330      	adds	r3, #48	@ 0x30
 800d30a:	704b      	strb	r3, [r1, #1]
 800d30c:	2300      	movs	r3, #0
 800d30e:	708b      	strb	r3, [r1, #2]
 800d310:	e7c7      	b.n	800d2a2 <print_e+0x30>
 800d312:	b10f      	cbz	r7, 800d318 <print_e+0xa6>
 800d314:	f804 2b01 	strb.w	r2, [r4], #1
 800d318:	7808      	ldrb	r0, [r1, #0]
 800d31a:	f804 0b01 	strb.w	r0, [r4], #1
 800d31e:	3d01      	subs	r5, #1
 800d320:	2700      	movs	r7, #0
 800d322:	e7c7      	b.n	800d2b4 <print_e+0x42>
 800d324:	b10f      	cbz	r7, 800d32a <print_e+0xb8>
 800d326:	f804 2b01 	strb.w	r2, [r4], #1
 800d32a:	f804 1b01 	strb.w	r1, [r4], #1
 800d32e:	3d01      	subs	r5, #1
 800d330:	2700      	movs	r7, #0
 800d332:	e7ca      	b.n	800d2ca <print_e+0x58>
 800d334:	2665      	movs	r6, #101	@ 0x65
 800d336:	e7ca      	b.n	800d2ce <print_e+0x5c>
 800d338:	2645      	movs	r6, #69	@ 0x45
 800d33a:	e7c8      	b.n	800d2ce <print_e+0x5c>
 800d33c:	2264      	movs	r2, #100	@ 0x64
 800d33e:	fb93 f2f2 	sdiv	r2, r3, r2
 800d342:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800d346:	70a0      	strb	r0, [r4, #2]
 800d348:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800d34c:	fb00 3302 	mla	r3, r0, r2, r3
 800d350:	1ce1      	adds	r1, r4, #3
 800d352:	9305      	str	r3, [sp, #20]
 800d354:	e7cd      	b.n	800d2f2 <print_e+0x80>
	...

0800d358 <_gcvt>:
 800d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	ec55 4b10 	vmov	r4, r5, d0
 800d360:	b087      	sub	sp, #28
 800d362:	4681      	mov	r9, r0
 800d364:	4688      	mov	r8, r1
 800d366:	4616      	mov	r6, r2
 800d368:	469b      	mov	fp, r3
 800d36a:	2200      	movs	r2, #0
 800d36c:	2300      	movs	r3, #0
 800d36e:	4620      	mov	r0, r4
 800d370:	4629      	mov	r1, r5
 800d372:	f7f3 fbbb 	bl	8000aec <__aeabi_dcmplt>
 800d376:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d378:	4682      	mov	sl, r0
 800d37a:	2200      	movs	r2, #0
 800d37c:	2300      	movs	r3, #0
 800d37e:	b1a8      	cbz	r0, 800d3ac <_gcvt+0x54>
 800d380:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800d384:	461d      	mov	r5, r3
 800d386:	a35a      	add	r3, pc, #360	@ (adr r3, 800d4f0 <_gcvt+0x198>)
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	4620      	mov	r0, r4
 800d38e:	4629      	mov	r1, r5
 800d390:	f7f3 fbb6 	bl	8000b00 <__aeabi_dcmple>
 800d394:	b1c0      	cbz	r0, 800d3c8 <_gcvt+0x70>
 800d396:	ec45 4b10 	vmov	d0, r4, r5
 800d39a:	9700      	str	r7, [sp, #0]
 800d39c:	465b      	mov	r3, fp
 800d39e:	f108 32ff 	add.w	r2, r8, #4294967295
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	4648      	mov	r0, r9
 800d3a6:	f7ff ff64 	bl	800d272 <print_e>
 800d3aa:	e009      	b.n	800d3c0 <_gcvt+0x68>
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f7f3 fb92 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d0e6      	beq.n	800d386 <_gcvt+0x2e>
 800d3b8:	2330      	movs	r3, #48	@ 0x30
 800d3ba:	7033      	strb	r3, [r6, #0]
 800d3bc:	f886 a001 	strb.w	sl, [r6, #1]
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	b007      	add	sp, #28
 800d3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c8:	4640      	mov	r0, r8
 800d3ca:	f7ff fee3 	bl	800d194 <_mprec_log10>
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	ec51 0b10 	vmov	r0, r1, d0
 800d3d4:	462b      	mov	r3, r5
 800d3d6:	f7f3 fb93 	bl	8000b00 <__aeabi_dcmple>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d1db      	bne.n	800d396 <_gcvt+0x3e>
 800d3de:	ab05      	add	r3, sp, #20
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	ab04      	add	r3, sp, #16
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	4642      	mov	r2, r8
 800d3e8:	ab03      	add	r3, sp, #12
 800d3ea:	2102      	movs	r1, #2
 800d3ec:	ec45 4b10 	vmov	d0, r4, r5
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	f001 f891 	bl	800e518 <_dtoa_r>
 800d3f6:	9a03      	ldr	r2, [sp, #12]
 800d3f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	4601      	mov	r1, r0
 800d400:	d046      	beq.n	800d490 <_gcvt+0x138>
 800d402:	4633      	mov	r3, r6
 800d404:	4608      	mov	r0, r1
 800d406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d40a:	9c03      	ldr	r4, [sp, #12]
 800d40c:	2a00      	cmp	r2, #0
 800d40e:	d143      	bne.n	800d498 <_gcvt+0x140>
 800d410:	eb06 0108 	add.w	r1, r6, r8
 800d414:	1ac9      	subs	r1, r1, r3
 800d416:	2200      	movs	r2, #0
 800d418:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800d41c:	2c00      	cmp	r4, #0
 800d41e:	4625      	mov	r5, r4
 800d420:	dc46      	bgt.n	800d4b0 <_gcvt+0x158>
 800d422:	b102      	cbz	r2, 800d426 <_gcvt+0xce>
 800d424:	9403      	str	r4, [sp, #12]
 800d426:	b90f      	cbnz	r7, 800d42c <_gcvt+0xd4>
 800d428:	7802      	ldrb	r2, [r0, #0]
 800d42a:	b372      	cbz	r2, 800d48a <_gcvt+0x132>
 800d42c:	42b3      	cmp	r3, r6
 800d42e:	bf04      	itt	eq
 800d430:	2230      	moveq	r2, #48	@ 0x30
 800d432:	f803 2b01 	strbeq.w	r2, [r3], #1
 800d436:	9c03      	ldr	r4, [sp, #12]
 800d438:	222e      	movs	r2, #46	@ 0x2e
 800d43a:	701a      	strb	r2, [r3, #0]
 800d43c:	f04f 0e00 	mov.w	lr, #0
 800d440:	461a      	mov	r2, r3
 800d442:	1ae5      	subs	r5, r4, r3
 800d444:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800d448:	42d5      	cmn	r5, r2
 800d44a:	d439      	bmi.n	800d4c0 <_gcvt+0x168>
 800d44c:	2c00      	cmp	r4, #0
 800d44e:	bfcc      	ite	gt
 800d450:	f04f 0c00 	movgt.w	ip, #0
 800d454:	f04f 0c01 	movle.w	ip, #1
 800d458:	f1bc 0f00 	cmp.w	ip, #0
 800d45c:	f1c4 0200 	rsb	r2, r4, #0
 800d460:	bf14      	ite	ne
 800d462:	4615      	movne	r5, r2
 800d464:	2500      	moveq	r5, #0
 800d466:	3501      	adds	r5, #1
 800d468:	442b      	add	r3, r5
 800d46a:	f1be 0f00 	cmp.w	lr, #0
 800d46e:	d005      	beq.n	800d47c <_gcvt+0x124>
 800d470:	f1bc 0f00 	cmp.w	ip, #0
 800d474:	bf08      	it	eq
 800d476:	2200      	moveq	r2, #0
 800d478:	4422      	add	r2, r4
 800d47a:	9203      	str	r2, [sp, #12]
 800d47c:	1e42      	subs	r2, r0, #1
 800d47e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d482:	b108      	cbz	r0, 800d488 <_gcvt+0x130>
 800d484:	2900      	cmp	r1, #0
 800d486:	dc20      	bgt.n	800d4ca <_gcvt+0x172>
 800d488:	bb67      	cbnz	r7, 800d4e4 <_gcvt+0x18c>
 800d48a:	2200      	movs	r2, #0
 800d48c:	701a      	strb	r2, [r3, #0]
 800d48e:	e797      	b.n	800d3c0 <_gcvt+0x68>
 800d490:	4630      	mov	r0, r6
 800d492:	f000 ff7d 	bl	800e390 <strcpy>
 800d496:	e793      	b.n	800d3c0 <_gcvt+0x68>
 800d498:	2c00      	cmp	r4, #0
 800d49a:	ddb9      	ble.n	800d410 <_gcvt+0xb8>
 800d49c:	3c01      	subs	r4, #1
 800d49e:	f803 2b01 	strb.w	r2, [r3], #1
 800d4a2:	9403      	str	r4, [sp, #12]
 800d4a4:	e7ae      	b.n	800d404 <_gcvt+0xac>
 800d4a6:	f803 cb01 	strb.w	ip, [r3], #1
 800d4aa:	3901      	subs	r1, #1
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	e7b5      	b.n	800d41c <_gcvt+0xc4>
 800d4b0:	2900      	cmp	r1, #0
 800d4b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d4b6:	dcf6      	bgt.n	800d4a6 <_gcvt+0x14e>
 800d4b8:	2a00      	cmp	r2, #0
 800d4ba:	d0b4      	beq.n	800d426 <_gcvt+0xce>
 800d4bc:	9503      	str	r5, [sp, #12]
 800d4be:	e7b2      	b.n	800d426 <_gcvt+0xce>
 800d4c0:	f802 cf01 	strb.w	ip, [r2, #1]!
 800d4c4:	f04f 0e01 	mov.w	lr, #1
 800d4c8:	e7be      	b.n	800d448 <_gcvt+0xf0>
 800d4ca:	f803 0b01 	strb.w	r0, [r3], #1
 800d4ce:	3901      	subs	r1, #1
 800d4d0:	e7d5      	b.n	800d47e <_gcvt+0x126>
 800d4d2:	f802 5b01 	strb.w	r5, [r2], #1
 800d4d6:	1aa0      	subs	r0, r4, r2
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	dcfa      	bgt.n	800d4d2 <_gcvt+0x17a>
 800d4dc:	2900      	cmp	r1, #0
 800d4de:	bfa8      	it	ge
 800d4e0:	185b      	addge	r3, r3, r1
 800d4e2:	e7d2      	b.n	800d48a <_gcvt+0x132>
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	185c      	adds	r4, r3, r1
 800d4e8:	2530      	movs	r5, #48	@ 0x30
 800d4ea:	e7f4      	b.n	800d4d6 <_gcvt+0x17e>
 800d4ec:	f3af 8000 	nop.w
 800d4f0:	eb1c432d 	.word	0xeb1c432d
 800d4f4:	3f1a36e2 	.word	0x3f1a36e2

0800d4f8 <__ssputs_r>:
 800d4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fc:	688e      	ldr	r6, [r1, #8]
 800d4fe:	461f      	mov	r7, r3
 800d500:	42be      	cmp	r6, r7
 800d502:	680b      	ldr	r3, [r1, #0]
 800d504:	4682      	mov	sl, r0
 800d506:	460c      	mov	r4, r1
 800d508:	4690      	mov	r8, r2
 800d50a:	d82d      	bhi.n	800d568 <__ssputs_r+0x70>
 800d50c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d510:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d514:	d026      	beq.n	800d564 <__ssputs_r+0x6c>
 800d516:	6965      	ldr	r5, [r4, #20]
 800d518:	6909      	ldr	r1, [r1, #16]
 800d51a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d51e:	eba3 0901 	sub.w	r9, r3, r1
 800d522:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d526:	1c7b      	adds	r3, r7, #1
 800d528:	444b      	add	r3, r9
 800d52a:	106d      	asrs	r5, r5, #1
 800d52c:	429d      	cmp	r5, r3
 800d52e:	bf38      	it	cc
 800d530:	461d      	movcc	r5, r3
 800d532:	0553      	lsls	r3, r2, #21
 800d534:	d527      	bpl.n	800d586 <__ssputs_r+0x8e>
 800d536:	4629      	mov	r1, r5
 800d538:	f7ff f928 	bl	800c78c <_malloc_r>
 800d53c:	4606      	mov	r6, r0
 800d53e:	b360      	cbz	r0, 800d59a <__ssputs_r+0xa2>
 800d540:	6921      	ldr	r1, [r4, #16]
 800d542:	464a      	mov	r2, r9
 800d544:	f7fe fd65 	bl	800c012 <memcpy>
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d54e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	6126      	str	r6, [r4, #16]
 800d556:	6165      	str	r5, [r4, #20]
 800d558:	444e      	add	r6, r9
 800d55a:	eba5 0509 	sub.w	r5, r5, r9
 800d55e:	6026      	str	r6, [r4, #0]
 800d560:	60a5      	str	r5, [r4, #8]
 800d562:	463e      	mov	r6, r7
 800d564:	42be      	cmp	r6, r7
 800d566:	d900      	bls.n	800d56a <__ssputs_r+0x72>
 800d568:	463e      	mov	r6, r7
 800d56a:	6820      	ldr	r0, [r4, #0]
 800d56c:	4632      	mov	r2, r6
 800d56e:	4641      	mov	r1, r8
 800d570:	f000 fee3 	bl	800e33a <memmove>
 800d574:	68a3      	ldr	r3, [r4, #8]
 800d576:	1b9b      	subs	r3, r3, r6
 800d578:	60a3      	str	r3, [r4, #8]
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	4433      	add	r3, r6
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	2000      	movs	r0, #0
 800d582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d586:	462a      	mov	r2, r5
 800d588:	f001 fd88 	bl	800f09c <_realloc_r>
 800d58c:	4606      	mov	r6, r0
 800d58e:	2800      	cmp	r0, #0
 800d590:	d1e0      	bne.n	800d554 <__ssputs_r+0x5c>
 800d592:	6921      	ldr	r1, [r4, #16]
 800d594:	4650      	mov	r0, sl
 800d596:	f7fe fd53 	bl	800c040 <_free_r>
 800d59a:	230c      	movs	r3, #12
 800d59c:	f8ca 3000 	str.w	r3, [sl]
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5a6:	81a3      	strh	r3, [r4, #12]
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	e7e9      	b.n	800d582 <__ssputs_r+0x8a>
	...

0800d5b0 <_svfiprintf_r>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	4698      	mov	r8, r3
 800d5b6:	898b      	ldrh	r3, [r1, #12]
 800d5b8:	061b      	lsls	r3, r3, #24
 800d5ba:	b09d      	sub	sp, #116	@ 0x74
 800d5bc:	4607      	mov	r7, r0
 800d5be:	460d      	mov	r5, r1
 800d5c0:	4614      	mov	r4, r2
 800d5c2:	d510      	bpl.n	800d5e6 <_svfiprintf_r+0x36>
 800d5c4:	690b      	ldr	r3, [r1, #16]
 800d5c6:	b973      	cbnz	r3, 800d5e6 <_svfiprintf_r+0x36>
 800d5c8:	2140      	movs	r1, #64	@ 0x40
 800d5ca:	f7ff f8df 	bl	800c78c <_malloc_r>
 800d5ce:	6028      	str	r0, [r5, #0]
 800d5d0:	6128      	str	r0, [r5, #16]
 800d5d2:	b930      	cbnz	r0, 800d5e2 <_svfiprintf_r+0x32>
 800d5d4:	230c      	movs	r3, #12
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	b01d      	add	sp, #116	@ 0x74
 800d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e2:	2340      	movs	r3, #64	@ 0x40
 800d5e4:	616b      	str	r3, [r5, #20]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ea:	2320      	movs	r3, #32
 800d5ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5f4:	2330      	movs	r3, #48	@ 0x30
 800d5f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d794 <_svfiprintf_r+0x1e4>
 800d5fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5fe:	f04f 0901 	mov.w	r9, #1
 800d602:	4623      	mov	r3, r4
 800d604:	469a      	mov	sl, r3
 800d606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d60a:	b10a      	cbz	r2, 800d610 <_svfiprintf_r+0x60>
 800d60c:	2a25      	cmp	r2, #37	@ 0x25
 800d60e:	d1f9      	bne.n	800d604 <_svfiprintf_r+0x54>
 800d610:	ebba 0b04 	subs.w	fp, sl, r4
 800d614:	d00b      	beq.n	800d62e <_svfiprintf_r+0x7e>
 800d616:	465b      	mov	r3, fp
 800d618:	4622      	mov	r2, r4
 800d61a:	4629      	mov	r1, r5
 800d61c:	4638      	mov	r0, r7
 800d61e:	f7ff ff6b 	bl	800d4f8 <__ssputs_r>
 800d622:	3001      	adds	r0, #1
 800d624:	f000 80a7 	beq.w	800d776 <_svfiprintf_r+0x1c6>
 800d628:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d62a:	445a      	add	r2, fp
 800d62c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d62e:	f89a 3000 	ldrb.w	r3, [sl]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 809f 	beq.w	800d776 <_svfiprintf_r+0x1c6>
 800d638:	2300      	movs	r3, #0
 800d63a:	f04f 32ff 	mov.w	r2, #4294967295
 800d63e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d642:	f10a 0a01 	add.w	sl, sl, #1
 800d646:	9304      	str	r3, [sp, #16]
 800d648:	9307      	str	r3, [sp, #28]
 800d64a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d64e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d650:	4654      	mov	r4, sl
 800d652:	2205      	movs	r2, #5
 800d654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d658:	484e      	ldr	r0, [pc, #312]	@ (800d794 <_svfiprintf_r+0x1e4>)
 800d65a:	f7f2 fdc9 	bl	80001f0 <memchr>
 800d65e:	9a04      	ldr	r2, [sp, #16]
 800d660:	b9d8      	cbnz	r0, 800d69a <_svfiprintf_r+0xea>
 800d662:	06d0      	lsls	r0, r2, #27
 800d664:	bf44      	itt	mi
 800d666:	2320      	movmi	r3, #32
 800d668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d66c:	0711      	lsls	r1, r2, #28
 800d66e:	bf44      	itt	mi
 800d670:	232b      	movmi	r3, #43	@ 0x2b
 800d672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d676:	f89a 3000 	ldrb.w	r3, [sl]
 800d67a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d67c:	d015      	beq.n	800d6aa <_svfiprintf_r+0xfa>
 800d67e:	9a07      	ldr	r2, [sp, #28]
 800d680:	4654      	mov	r4, sl
 800d682:	2000      	movs	r0, #0
 800d684:	f04f 0c0a 	mov.w	ip, #10
 800d688:	4621      	mov	r1, r4
 800d68a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d68e:	3b30      	subs	r3, #48	@ 0x30
 800d690:	2b09      	cmp	r3, #9
 800d692:	d94b      	bls.n	800d72c <_svfiprintf_r+0x17c>
 800d694:	b1b0      	cbz	r0, 800d6c4 <_svfiprintf_r+0x114>
 800d696:	9207      	str	r2, [sp, #28]
 800d698:	e014      	b.n	800d6c4 <_svfiprintf_r+0x114>
 800d69a:	eba0 0308 	sub.w	r3, r0, r8
 800d69e:	fa09 f303 	lsl.w	r3, r9, r3
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	9304      	str	r3, [sp, #16]
 800d6a6:	46a2      	mov	sl, r4
 800d6a8:	e7d2      	b.n	800d650 <_svfiprintf_r+0xa0>
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	1d19      	adds	r1, r3, #4
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	9103      	str	r1, [sp, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	bfbb      	ittet	lt
 800d6b6:	425b      	neglt	r3, r3
 800d6b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d6bc:	9307      	strge	r3, [sp, #28]
 800d6be:	9307      	strlt	r3, [sp, #28]
 800d6c0:	bfb8      	it	lt
 800d6c2:	9204      	strlt	r2, [sp, #16]
 800d6c4:	7823      	ldrb	r3, [r4, #0]
 800d6c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6c8:	d10a      	bne.n	800d6e0 <_svfiprintf_r+0x130>
 800d6ca:	7863      	ldrb	r3, [r4, #1]
 800d6cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6ce:	d132      	bne.n	800d736 <_svfiprintf_r+0x186>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	1d1a      	adds	r2, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	9203      	str	r2, [sp, #12]
 800d6d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6dc:	3402      	adds	r4, #2
 800d6de:	9305      	str	r3, [sp, #20]
 800d6e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7a4 <_svfiprintf_r+0x1f4>
 800d6e4:	7821      	ldrb	r1, [r4, #0]
 800d6e6:	2203      	movs	r2, #3
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	f7f2 fd81 	bl	80001f0 <memchr>
 800d6ee:	b138      	cbz	r0, 800d700 <_svfiprintf_r+0x150>
 800d6f0:	9b04      	ldr	r3, [sp, #16]
 800d6f2:	eba0 000a 	sub.w	r0, r0, sl
 800d6f6:	2240      	movs	r2, #64	@ 0x40
 800d6f8:	4082      	lsls	r2, r0
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	3401      	adds	r4, #1
 800d6fe:	9304      	str	r3, [sp, #16]
 800d700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d704:	4824      	ldr	r0, [pc, #144]	@ (800d798 <_svfiprintf_r+0x1e8>)
 800d706:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d70a:	2206      	movs	r2, #6
 800d70c:	f7f2 fd70 	bl	80001f0 <memchr>
 800d710:	2800      	cmp	r0, #0
 800d712:	d036      	beq.n	800d782 <_svfiprintf_r+0x1d2>
 800d714:	4b21      	ldr	r3, [pc, #132]	@ (800d79c <_svfiprintf_r+0x1ec>)
 800d716:	bb1b      	cbnz	r3, 800d760 <_svfiprintf_r+0x1b0>
 800d718:	9b03      	ldr	r3, [sp, #12]
 800d71a:	3307      	adds	r3, #7
 800d71c:	f023 0307 	bic.w	r3, r3, #7
 800d720:	3308      	adds	r3, #8
 800d722:	9303      	str	r3, [sp, #12]
 800d724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d726:	4433      	add	r3, r6
 800d728:	9309      	str	r3, [sp, #36]	@ 0x24
 800d72a:	e76a      	b.n	800d602 <_svfiprintf_r+0x52>
 800d72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d730:	460c      	mov	r4, r1
 800d732:	2001      	movs	r0, #1
 800d734:	e7a8      	b.n	800d688 <_svfiprintf_r+0xd8>
 800d736:	2300      	movs	r3, #0
 800d738:	3401      	adds	r4, #1
 800d73a:	9305      	str	r3, [sp, #20]
 800d73c:	4619      	mov	r1, r3
 800d73e:	f04f 0c0a 	mov.w	ip, #10
 800d742:	4620      	mov	r0, r4
 800d744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d748:	3a30      	subs	r2, #48	@ 0x30
 800d74a:	2a09      	cmp	r2, #9
 800d74c:	d903      	bls.n	800d756 <_svfiprintf_r+0x1a6>
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0c6      	beq.n	800d6e0 <_svfiprintf_r+0x130>
 800d752:	9105      	str	r1, [sp, #20]
 800d754:	e7c4      	b.n	800d6e0 <_svfiprintf_r+0x130>
 800d756:	fb0c 2101 	mla	r1, ip, r1, r2
 800d75a:	4604      	mov	r4, r0
 800d75c:	2301      	movs	r3, #1
 800d75e:	e7f0      	b.n	800d742 <_svfiprintf_r+0x192>
 800d760:	ab03      	add	r3, sp, #12
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	462a      	mov	r2, r5
 800d766:	4b0e      	ldr	r3, [pc, #56]	@ (800d7a0 <_svfiprintf_r+0x1f0>)
 800d768:	a904      	add	r1, sp, #16
 800d76a:	4638      	mov	r0, r7
 800d76c:	f3af 8000 	nop.w
 800d770:	1c42      	adds	r2, r0, #1
 800d772:	4606      	mov	r6, r0
 800d774:	d1d6      	bne.n	800d724 <_svfiprintf_r+0x174>
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	065b      	lsls	r3, r3, #25
 800d77a:	f53f af2d 	bmi.w	800d5d8 <_svfiprintf_r+0x28>
 800d77e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d780:	e72c      	b.n	800d5dc <_svfiprintf_r+0x2c>
 800d782:	ab03      	add	r3, sp, #12
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	462a      	mov	r2, r5
 800d788:	4b05      	ldr	r3, [pc, #20]	@ (800d7a0 <_svfiprintf_r+0x1f0>)
 800d78a:	a904      	add	r1, sp, #16
 800d78c:	4638      	mov	r0, r7
 800d78e:	f000 fa49 	bl	800dc24 <_printf_i>
 800d792:	e7ed      	b.n	800d770 <_svfiprintf_r+0x1c0>
 800d794:	08022f36 	.word	0x08022f36
 800d798:	08022f40 	.word	0x08022f40
 800d79c:	00000000 	.word	0x00000000
 800d7a0:	0800d4f9 	.word	0x0800d4f9
 800d7a4:	08022f3c 	.word	0x08022f3c

0800d7a8 <_sungetc_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	1c4b      	adds	r3, r1, #1
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	d103      	bne.n	800d7b8 <_sungetc_r+0x10>
 800d7b0:	f04f 35ff 	mov.w	r5, #4294967295
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	bd38      	pop	{r3, r4, r5, pc}
 800d7b8:	8993      	ldrh	r3, [r2, #12]
 800d7ba:	f023 0320 	bic.w	r3, r3, #32
 800d7be:	8193      	strh	r3, [r2, #12]
 800d7c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7c2:	6852      	ldr	r2, [r2, #4]
 800d7c4:	b2cd      	uxtb	r5, r1
 800d7c6:	b18b      	cbz	r3, 800d7ec <_sungetc_r+0x44>
 800d7c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	dd08      	ble.n	800d7e0 <_sungetc_r+0x38>
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	1e5a      	subs	r2, r3, #1
 800d7d2:	6022      	str	r2, [r4, #0]
 800d7d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d7d8:	6863      	ldr	r3, [r4, #4]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	6063      	str	r3, [r4, #4]
 800d7de:	e7e9      	b.n	800d7b4 <_sungetc_r+0xc>
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	f000 fd70 	bl	800e2c6 <__submore>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d0f1      	beq.n	800d7ce <_sungetc_r+0x26>
 800d7ea:	e7e1      	b.n	800d7b0 <_sungetc_r+0x8>
 800d7ec:	6921      	ldr	r1, [r4, #16]
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	b151      	cbz	r1, 800d808 <_sungetc_r+0x60>
 800d7f2:	4299      	cmp	r1, r3
 800d7f4:	d208      	bcs.n	800d808 <_sungetc_r+0x60>
 800d7f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d7fa:	42a9      	cmp	r1, r5
 800d7fc:	d104      	bne.n	800d808 <_sungetc_r+0x60>
 800d7fe:	3b01      	subs	r3, #1
 800d800:	3201      	adds	r2, #1
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	6062      	str	r2, [r4, #4]
 800d806:	e7d5      	b.n	800d7b4 <_sungetc_r+0xc>
 800d808:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d80c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d810:	6363      	str	r3, [r4, #52]	@ 0x34
 800d812:	2303      	movs	r3, #3
 800d814:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d816:	4623      	mov	r3, r4
 800d818:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	2301      	movs	r3, #1
 800d820:	e7dc      	b.n	800d7dc <_sungetc_r+0x34>

0800d822 <__ssrefill_r>:
 800d822:	b510      	push	{r4, lr}
 800d824:	460c      	mov	r4, r1
 800d826:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d828:	b169      	cbz	r1, 800d846 <__ssrefill_r+0x24>
 800d82a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d82e:	4299      	cmp	r1, r3
 800d830:	d001      	beq.n	800d836 <__ssrefill_r+0x14>
 800d832:	f7fe fc05 	bl	800c040 <_free_r>
 800d836:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d838:	6063      	str	r3, [r4, #4]
 800d83a:	2000      	movs	r0, #0
 800d83c:	6360      	str	r0, [r4, #52]	@ 0x34
 800d83e:	b113      	cbz	r3, 800d846 <__ssrefill_r+0x24>
 800d840:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	bd10      	pop	{r4, pc}
 800d846:	6923      	ldr	r3, [r4, #16]
 800d848:	6023      	str	r3, [r4, #0]
 800d84a:	2300      	movs	r3, #0
 800d84c:	6063      	str	r3, [r4, #4]
 800d84e:	89a3      	ldrh	r3, [r4, #12]
 800d850:	f043 0320 	orr.w	r3, r3, #32
 800d854:	81a3      	strh	r3, [r4, #12]
 800d856:	f04f 30ff 	mov.w	r0, #4294967295
 800d85a:	e7f3      	b.n	800d844 <__ssrefill_r+0x22>

0800d85c <__ssvfiscanf_r>:
 800d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d866:	2100      	movs	r1, #0
 800d868:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d86c:	49a6      	ldr	r1, [pc, #664]	@ (800db08 <__ssvfiscanf_r+0x2ac>)
 800d86e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d870:	f10d 0804 	add.w	r8, sp, #4
 800d874:	49a5      	ldr	r1, [pc, #660]	@ (800db0c <__ssvfiscanf_r+0x2b0>)
 800d876:	4fa6      	ldr	r7, [pc, #664]	@ (800db10 <__ssvfiscanf_r+0x2b4>)
 800d878:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d87c:	4606      	mov	r6, r0
 800d87e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	f892 9000 	ldrb.w	r9, [r2]
 800d886:	f1b9 0f00 	cmp.w	r9, #0
 800d88a:	f000 8158 	beq.w	800db3e <__ssvfiscanf_r+0x2e2>
 800d88e:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d892:	f013 0308 	ands.w	r3, r3, #8
 800d896:	f102 0501 	add.w	r5, r2, #1
 800d89a:	d019      	beq.n	800d8d0 <__ssvfiscanf_r+0x74>
 800d89c:	6863      	ldr	r3, [r4, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	dd0f      	ble.n	800d8c2 <__ssvfiscanf_r+0x66>
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	781a      	ldrb	r2, [r3, #0]
 800d8a6:	5cba      	ldrb	r2, [r7, r2]
 800d8a8:	0712      	lsls	r2, r2, #28
 800d8aa:	d401      	bmi.n	800d8b0 <__ssvfiscanf_r+0x54>
 800d8ac:	462a      	mov	r2, r5
 800d8ae:	e7e8      	b.n	800d882 <__ssvfiscanf_r+0x26>
 800d8b0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d8b2:	3201      	adds	r2, #1
 800d8b4:	9245      	str	r2, [sp, #276]	@ 0x114
 800d8b6:	6862      	ldr	r2, [r4, #4]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	3a01      	subs	r2, #1
 800d8bc:	6062      	str	r2, [r4, #4]
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	e7ec      	b.n	800d89c <__ssvfiscanf_r+0x40>
 800d8c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	4798      	blx	r3
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d0e9      	beq.n	800d8a2 <__ssvfiscanf_r+0x46>
 800d8ce:	e7ed      	b.n	800d8ac <__ssvfiscanf_r+0x50>
 800d8d0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d8d4:	f040 8085 	bne.w	800d9e2 <__ssvfiscanf_r+0x186>
 800d8d8:	9341      	str	r3, [sp, #260]	@ 0x104
 800d8da:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d8dc:	7853      	ldrb	r3, [r2, #1]
 800d8de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8e0:	bf02      	ittt	eq
 800d8e2:	2310      	moveq	r3, #16
 800d8e4:	1c95      	addeq	r5, r2, #2
 800d8e6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d8e8:	220a      	movs	r2, #10
 800d8ea:	46aa      	mov	sl, r5
 800d8ec:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d8f0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d8f4:	2b09      	cmp	r3, #9
 800d8f6:	d91e      	bls.n	800d936 <__ssvfiscanf_r+0xda>
 800d8f8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800db14 <__ssvfiscanf_r+0x2b8>
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	4658      	mov	r0, fp
 800d900:	f7f2 fc76 	bl	80001f0 <memchr>
 800d904:	b138      	cbz	r0, 800d916 <__ssvfiscanf_r+0xba>
 800d906:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d908:	eba0 000b 	sub.w	r0, r0, fp
 800d90c:	2301      	movs	r3, #1
 800d90e:	4083      	lsls	r3, r0
 800d910:	4313      	orrs	r3, r2
 800d912:	9341      	str	r3, [sp, #260]	@ 0x104
 800d914:	4655      	mov	r5, sl
 800d916:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d91a:	2b78      	cmp	r3, #120	@ 0x78
 800d91c:	d806      	bhi.n	800d92c <__ssvfiscanf_r+0xd0>
 800d91e:	2b57      	cmp	r3, #87	@ 0x57
 800d920:	d810      	bhi.n	800d944 <__ssvfiscanf_r+0xe8>
 800d922:	2b25      	cmp	r3, #37	@ 0x25
 800d924:	d05d      	beq.n	800d9e2 <__ssvfiscanf_r+0x186>
 800d926:	d857      	bhi.n	800d9d8 <__ssvfiscanf_r+0x17c>
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d075      	beq.n	800da18 <__ssvfiscanf_r+0x1bc>
 800d92c:	2303      	movs	r3, #3
 800d92e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d930:	230a      	movs	r3, #10
 800d932:	9342      	str	r3, [sp, #264]	@ 0x108
 800d934:	e088      	b.n	800da48 <__ssvfiscanf_r+0x1ec>
 800d936:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d938:	fb02 1103 	mla	r1, r2, r3, r1
 800d93c:	3930      	subs	r1, #48	@ 0x30
 800d93e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d940:	4655      	mov	r5, sl
 800d942:	e7d2      	b.n	800d8ea <__ssvfiscanf_r+0x8e>
 800d944:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d948:	2a20      	cmp	r2, #32
 800d94a:	d8ef      	bhi.n	800d92c <__ssvfiscanf_r+0xd0>
 800d94c:	a101      	add	r1, pc, #4	@ (adr r1, 800d954 <__ssvfiscanf_r+0xf8>)
 800d94e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d952:	bf00      	nop
 800d954:	0800da27 	.word	0x0800da27
 800d958:	0800d92d 	.word	0x0800d92d
 800d95c:	0800d92d 	.word	0x0800d92d
 800d960:	0800da81 	.word	0x0800da81
 800d964:	0800d92d 	.word	0x0800d92d
 800d968:	0800d92d 	.word	0x0800d92d
 800d96c:	0800d92d 	.word	0x0800d92d
 800d970:	0800d92d 	.word	0x0800d92d
 800d974:	0800d92d 	.word	0x0800d92d
 800d978:	0800d92d 	.word	0x0800d92d
 800d97c:	0800d92d 	.word	0x0800d92d
 800d980:	0800da97 	.word	0x0800da97
 800d984:	0800da7d 	.word	0x0800da7d
 800d988:	0800d9df 	.word	0x0800d9df
 800d98c:	0800d9df 	.word	0x0800d9df
 800d990:	0800d9df 	.word	0x0800d9df
 800d994:	0800d92d 	.word	0x0800d92d
 800d998:	0800da39 	.word	0x0800da39
 800d99c:	0800d92d 	.word	0x0800d92d
 800d9a0:	0800d92d 	.word	0x0800d92d
 800d9a4:	0800d92d 	.word	0x0800d92d
 800d9a8:	0800d92d 	.word	0x0800d92d
 800d9ac:	0800daa7 	.word	0x0800daa7
 800d9b0:	0800da41 	.word	0x0800da41
 800d9b4:	0800da1f 	.word	0x0800da1f
 800d9b8:	0800d92d 	.word	0x0800d92d
 800d9bc:	0800d92d 	.word	0x0800d92d
 800d9c0:	0800daa3 	.word	0x0800daa3
 800d9c4:	0800d92d 	.word	0x0800d92d
 800d9c8:	0800da7d 	.word	0x0800da7d
 800d9cc:	0800d92d 	.word	0x0800d92d
 800d9d0:	0800d92d 	.word	0x0800d92d
 800d9d4:	0800da27 	.word	0x0800da27
 800d9d8:	3b45      	subs	r3, #69	@ 0x45
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d8a6      	bhi.n	800d92c <__ssvfiscanf_r+0xd0>
 800d9de:	2305      	movs	r3, #5
 800d9e0:	e031      	b.n	800da46 <__ssvfiscanf_r+0x1ea>
 800d9e2:	6863      	ldr	r3, [r4, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dd0d      	ble.n	800da04 <__ssvfiscanf_r+0x1a8>
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	781a      	ldrb	r2, [r3, #0]
 800d9ec:	454a      	cmp	r2, r9
 800d9ee:	f040 80a6 	bne.w	800db3e <__ssvfiscanf_r+0x2e2>
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	6862      	ldr	r2, [r4, #4]
 800d9f6:	6023      	str	r3, [r4, #0]
 800d9f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d9fa:	3a01      	subs	r2, #1
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	6062      	str	r2, [r4, #4]
 800da00:	9345      	str	r3, [sp, #276]	@ 0x114
 800da02:	e753      	b.n	800d8ac <__ssvfiscanf_r+0x50>
 800da04:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800da06:	4621      	mov	r1, r4
 800da08:	4630      	mov	r0, r6
 800da0a:	4798      	blx	r3
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d0eb      	beq.n	800d9e8 <__ssvfiscanf_r+0x18c>
 800da10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800da12:	2800      	cmp	r0, #0
 800da14:	f040 808b 	bne.w	800db2e <__ssvfiscanf_r+0x2d2>
 800da18:	f04f 30ff 	mov.w	r0, #4294967295
 800da1c:	e08b      	b.n	800db36 <__ssvfiscanf_r+0x2da>
 800da1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800da20:	f042 0220 	orr.w	r2, r2, #32
 800da24:	9241      	str	r2, [sp, #260]	@ 0x104
 800da26:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800da28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da2c:	9241      	str	r2, [sp, #260]	@ 0x104
 800da2e:	2210      	movs	r2, #16
 800da30:	2b6e      	cmp	r3, #110	@ 0x6e
 800da32:	9242      	str	r2, [sp, #264]	@ 0x108
 800da34:	d902      	bls.n	800da3c <__ssvfiscanf_r+0x1e0>
 800da36:	e005      	b.n	800da44 <__ssvfiscanf_r+0x1e8>
 800da38:	2300      	movs	r3, #0
 800da3a:	9342      	str	r3, [sp, #264]	@ 0x108
 800da3c:	2303      	movs	r3, #3
 800da3e:	e002      	b.n	800da46 <__ssvfiscanf_r+0x1ea>
 800da40:	2308      	movs	r3, #8
 800da42:	9342      	str	r3, [sp, #264]	@ 0x108
 800da44:	2304      	movs	r3, #4
 800da46:	9347      	str	r3, [sp, #284]	@ 0x11c
 800da48:	6863      	ldr	r3, [r4, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	dd39      	ble.n	800dac2 <__ssvfiscanf_r+0x266>
 800da4e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da50:	0659      	lsls	r1, r3, #25
 800da52:	d404      	bmi.n	800da5e <__ssvfiscanf_r+0x202>
 800da54:	6823      	ldr	r3, [r4, #0]
 800da56:	781a      	ldrb	r2, [r3, #0]
 800da58:	5cba      	ldrb	r2, [r7, r2]
 800da5a:	0712      	lsls	r2, r2, #28
 800da5c:	d438      	bmi.n	800dad0 <__ssvfiscanf_r+0x274>
 800da5e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800da60:	2b02      	cmp	r3, #2
 800da62:	dc47      	bgt.n	800daf4 <__ssvfiscanf_r+0x298>
 800da64:	466b      	mov	r3, sp
 800da66:	4622      	mov	r2, r4
 800da68:	a941      	add	r1, sp, #260	@ 0x104
 800da6a:	4630      	mov	r0, r6
 800da6c:	f000 f9f8 	bl	800de60 <_scanf_chars>
 800da70:	2801      	cmp	r0, #1
 800da72:	d064      	beq.n	800db3e <__ssvfiscanf_r+0x2e2>
 800da74:	2802      	cmp	r0, #2
 800da76:	f47f af19 	bne.w	800d8ac <__ssvfiscanf_r+0x50>
 800da7a:	e7c9      	b.n	800da10 <__ssvfiscanf_r+0x1b4>
 800da7c:	220a      	movs	r2, #10
 800da7e:	e7d7      	b.n	800da30 <__ssvfiscanf_r+0x1d4>
 800da80:	4629      	mov	r1, r5
 800da82:	4640      	mov	r0, r8
 800da84:	f000 fbe6 	bl	800e254 <__sccl>
 800da88:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da8e:	9341      	str	r3, [sp, #260]	@ 0x104
 800da90:	4605      	mov	r5, r0
 800da92:	2301      	movs	r3, #1
 800da94:	e7d7      	b.n	800da46 <__ssvfiscanf_r+0x1ea>
 800da96:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da9c:	9341      	str	r3, [sp, #260]	@ 0x104
 800da9e:	2300      	movs	r3, #0
 800daa0:	e7d1      	b.n	800da46 <__ssvfiscanf_r+0x1ea>
 800daa2:	2302      	movs	r3, #2
 800daa4:	e7cf      	b.n	800da46 <__ssvfiscanf_r+0x1ea>
 800daa6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800daa8:	06c3      	lsls	r3, r0, #27
 800daaa:	f53f aeff 	bmi.w	800d8ac <__ssvfiscanf_r+0x50>
 800daae:	9b00      	ldr	r3, [sp, #0]
 800dab0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dab2:	1d19      	adds	r1, r3, #4
 800dab4:	9100      	str	r1, [sp, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	07c0      	lsls	r0, r0, #31
 800daba:	bf4c      	ite	mi
 800dabc:	801a      	strhmi	r2, [r3, #0]
 800dabe:	601a      	strpl	r2, [r3, #0]
 800dac0:	e6f4      	b.n	800d8ac <__ssvfiscanf_r+0x50>
 800dac2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dac4:	4621      	mov	r1, r4
 800dac6:	4630      	mov	r0, r6
 800dac8:	4798      	blx	r3
 800daca:	2800      	cmp	r0, #0
 800dacc:	d0bf      	beq.n	800da4e <__ssvfiscanf_r+0x1f2>
 800dace:	e79f      	b.n	800da10 <__ssvfiscanf_r+0x1b4>
 800dad0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dad2:	3201      	adds	r2, #1
 800dad4:	9245      	str	r2, [sp, #276]	@ 0x114
 800dad6:	6862      	ldr	r2, [r4, #4]
 800dad8:	3a01      	subs	r2, #1
 800dada:	2a00      	cmp	r2, #0
 800dadc:	6062      	str	r2, [r4, #4]
 800dade:	dd02      	ble.n	800dae6 <__ssvfiscanf_r+0x28a>
 800dae0:	3301      	adds	r3, #1
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	e7b6      	b.n	800da54 <__ssvfiscanf_r+0x1f8>
 800dae6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dae8:	4621      	mov	r1, r4
 800daea:	4630      	mov	r0, r6
 800daec:	4798      	blx	r3
 800daee:	2800      	cmp	r0, #0
 800daf0:	d0b0      	beq.n	800da54 <__ssvfiscanf_r+0x1f8>
 800daf2:	e78d      	b.n	800da10 <__ssvfiscanf_r+0x1b4>
 800daf4:	2b04      	cmp	r3, #4
 800daf6:	dc0f      	bgt.n	800db18 <__ssvfiscanf_r+0x2bc>
 800daf8:	466b      	mov	r3, sp
 800dafa:	4622      	mov	r2, r4
 800dafc:	a941      	add	r1, sp, #260	@ 0x104
 800dafe:	4630      	mov	r0, r6
 800db00:	f000 fa08 	bl	800df14 <_scanf_i>
 800db04:	e7b4      	b.n	800da70 <__ssvfiscanf_r+0x214>
 800db06:	bf00      	nop
 800db08:	0800d7a9 	.word	0x0800d7a9
 800db0c:	0800d823 	.word	0x0800d823
 800db10:	080231a1 	.word	0x080231a1
 800db14:	08022f3c 	.word	0x08022f3c
 800db18:	4b0a      	ldr	r3, [pc, #40]	@ (800db44 <__ssvfiscanf_r+0x2e8>)
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f43f aec6 	beq.w	800d8ac <__ssvfiscanf_r+0x50>
 800db20:	466b      	mov	r3, sp
 800db22:	4622      	mov	r2, r4
 800db24:	a941      	add	r1, sp, #260	@ 0x104
 800db26:	4630      	mov	r0, r6
 800db28:	f3af 8000 	nop.w
 800db2c:	e7a0      	b.n	800da70 <__ssvfiscanf_r+0x214>
 800db2e:	89a3      	ldrh	r3, [r4, #12]
 800db30:	065b      	lsls	r3, r3, #25
 800db32:	f53f af71 	bmi.w	800da18 <__ssvfiscanf_r+0x1bc>
 800db36:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800db3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800db40:	e7f9      	b.n	800db36 <__ssvfiscanf_r+0x2da>
 800db42:	bf00      	nop
 800db44:	00000000 	.word	0x00000000

0800db48 <_printf_common>:
 800db48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db4c:	4616      	mov	r6, r2
 800db4e:	4698      	mov	r8, r3
 800db50:	688a      	ldr	r2, [r1, #8]
 800db52:	690b      	ldr	r3, [r1, #16]
 800db54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db58:	4293      	cmp	r3, r2
 800db5a:	bfb8      	it	lt
 800db5c:	4613      	movlt	r3, r2
 800db5e:	6033      	str	r3, [r6, #0]
 800db60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db64:	4607      	mov	r7, r0
 800db66:	460c      	mov	r4, r1
 800db68:	b10a      	cbz	r2, 800db6e <_printf_common+0x26>
 800db6a:	3301      	adds	r3, #1
 800db6c:	6033      	str	r3, [r6, #0]
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	0699      	lsls	r1, r3, #26
 800db72:	bf42      	ittt	mi
 800db74:	6833      	ldrmi	r3, [r6, #0]
 800db76:	3302      	addmi	r3, #2
 800db78:	6033      	strmi	r3, [r6, #0]
 800db7a:	6825      	ldr	r5, [r4, #0]
 800db7c:	f015 0506 	ands.w	r5, r5, #6
 800db80:	d106      	bne.n	800db90 <_printf_common+0x48>
 800db82:	f104 0a19 	add.w	sl, r4, #25
 800db86:	68e3      	ldr	r3, [r4, #12]
 800db88:	6832      	ldr	r2, [r6, #0]
 800db8a:	1a9b      	subs	r3, r3, r2
 800db8c:	42ab      	cmp	r3, r5
 800db8e:	dc26      	bgt.n	800dbde <_printf_common+0x96>
 800db90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db94:	6822      	ldr	r2, [r4, #0]
 800db96:	3b00      	subs	r3, #0
 800db98:	bf18      	it	ne
 800db9a:	2301      	movne	r3, #1
 800db9c:	0692      	lsls	r2, r2, #26
 800db9e:	d42b      	bmi.n	800dbf8 <_printf_common+0xb0>
 800dba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dba4:	4641      	mov	r1, r8
 800dba6:	4638      	mov	r0, r7
 800dba8:	47c8      	blx	r9
 800dbaa:	3001      	adds	r0, #1
 800dbac:	d01e      	beq.n	800dbec <_printf_common+0xa4>
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	6922      	ldr	r2, [r4, #16]
 800dbb2:	f003 0306 	and.w	r3, r3, #6
 800dbb6:	2b04      	cmp	r3, #4
 800dbb8:	bf02      	ittt	eq
 800dbba:	68e5      	ldreq	r5, [r4, #12]
 800dbbc:	6833      	ldreq	r3, [r6, #0]
 800dbbe:	1aed      	subeq	r5, r5, r3
 800dbc0:	68a3      	ldr	r3, [r4, #8]
 800dbc2:	bf0c      	ite	eq
 800dbc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbc8:	2500      	movne	r5, #0
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	bfc4      	itt	gt
 800dbce:	1a9b      	subgt	r3, r3, r2
 800dbd0:	18ed      	addgt	r5, r5, r3
 800dbd2:	2600      	movs	r6, #0
 800dbd4:	341a      	adds	r4, #26
 800dbd6:	42b5      	cmp	r5, r6
 800dbd8:	d11a      	bne.n	800dc10 <_printf_common+0xc8>
 800dbda:	2000      	movs	r0, #0
 800dbdc:	e008      	b.n	800dbf0 <_printf_common+0xa8>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	4652      	mov	r2, sl
 800dbe2:	4641      	mov	r1, r8
 800dbe4:	4638      	mov	r0, r7
 800dbe6:	47c8      	blx	r9
 800dbe8:	3001      	adds	r0, #1
 800dbea:	d103      	bne.n	800dbf4 <_printf_common+0xac>
 800dbec:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf4:	3501      	adds	r5, #1
 800dbf6:	e7c6      	b.n	800db86 <_printf_common+0x3e>
 800dbf8:	18e1      	adds	r1, r4, r3
 800dbfa:	1c5a      	adds	r2, r3, #1
 800dbfc:	2030      	movs	r0, #48	@ 0x30
 800dbfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc02:	4422      	add	r2, r4
 800dc04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc0c:	3302      	adds	r3, #2
 800dc0e:	e7c7      	b.n	800dba0 <_printf_common+0x58>
 800dc10:	2301      	movs	r3, #1
 800dc12:	4622      	mov	r2, r4
 800dc14:	4641      	mov	r1, r8
 800dc16:	4638      	mov	r0, r7
 800dc18:	47c8      	blx	r9
 800dc1a:	3001      	adds	r0, #1
 800dc1c:	d0e6      	beq.n	800dbec <_printf_common+0xa4>
 800dc1e:	3601      	adds	r6, #1
 800dc20:	e7d9      	b.n	800dbd6 <_printf_common+0x8e>
	...

0800dc24 <_printf_i>:
 800dc24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc28:	7e0f      	ldrb	r7, [r1, #24]
 800dc2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc2c:	2f78      	cmp	r7, #120	@ 0x78
 800dc2e:	4691      	mov	r9, r2
 800dc30:	4680      	mov	r8, r0
 800dc32:	460c      	mov	r4, r1
 800dc34:	469a      	mov	sl, r3
 800dc36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc3a:	d807      	bhi.n	800dc4c <_printf_i+0x28>
 800dc3c:	2f62      	cmp	r7, #98	@ 0x62
 800dc3e:	d80a      	bhi.n	800dc56 <_printf_i+0x32>
 800dc40:	2f00      	cmp	r7, #0
 800dc42:	f000 80d1 	beq.w	800dde8 <_printf_i+0x1c4>
 800dc46:	2f58      	cmp	r7, #88	@ 0x58
 800dc48:	f000 80b8 	beq.w	800ddbc <_printf_i+0x198>
 800dc4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc54:	e03a      	b.n	800dccc <_printf_i+0xa8>
 800dc56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc5a:	2b15      	cmp	r3, #21
 800dc5c:	d8f6      	bhi.n	800dc4c <_printf_i+0x28>
 800dc5e:	a101      	add	r1, pc, #4	@ (adr r1, 800dc64 <_printf_i+0x40>)
 800dc60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc64:	0800dcbd 	.word	0x0800dcbd
 800dc68:	0800dcd1 	.word	0x0800dcd1
 800dc6c:	0800dc4d 	.word	0x0800dc4d
 800dc70:	0800dc4d 	.word	0x0800dc4d
 800dc74:	0800dc4d 	.word	0x0800dc4d
 800dc78:	0800dc4d 	.word	0x0800dc4d
 800dc7c:	0800dcd1 	.word	0x0800dcd1
 800dc80:	0800dc4d 	.word	0x0800dc4d
 800dc84:	0800dc4d 	.word	0x0800dc4d
 800dc88:	0800dc4d 	.word	0x0800dc4d
 800dc8c:	0800dc4d 	.word	0x0800dc4d
 800dc90:	0800ddcf 	.word	0x0800ddcf
 800dc94:	0800dcfb 	.word	0x0800dcfb
 800dc98:	0800dd89 	.word	0x0800dd89
 800dc9c:	0800dc4d 	.word	0x0800dc4d
 800dca0:	0800dc4d 	.word	0x0800dc4d
 800dca4:	0800ddf1 	.word	0x0800ddf1
 800dca8:	0800dc4d 	.word	0x0800dc4d
 800dcac:	0800dcfb 	.word	0x0800dcfb
 800dcb0:	0800dc4d 	.word	0x0800dc4d
 800dcb4:	0800dc4d 	.word	0x0800dc4d
 800dcb8:	0800dd91 	.word	0x0800dd91
 800dcbc:	6833      	ldr	r3, [r6, #0]
 800dcbe:	1d1a      	adds	r2, r3, #4
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6032      	str	r2, [r6, #0]
 800dcc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dccc:	2301      	movs	r3, #1
 800dcce:	e09c      	b.n	800de0a <_printf_i+0x1e6>
 800dcd0:	6833      	ldr	r3, [r6, #0]
 800dcd2:	6820      	ldr	r0, [r4, #0]
 800dcd4:	1d19      	adds	r1, r3, #4
 800dcd6:	6031      	str	r1, [r6, #0]
 800dcd8:	0606      	lsls	r6, r0, #24
 800dcda:	d501      	bpl.n	800dce0 <_printf_i+0xbc>
 800dcdc:	681d      	ldr	r5, [r3, #0]
 800dcde:	e003      	b.n	800dce8 <_printf_i+0xc4>
 800dce0:	0645      	lsls	r5, r0, #25
 800dce2:	d5fb      	bpl.n	800dcdc <_printf_i+0xb8>
 800dce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dce8:	2d00      	cmp	r5, #0
 800dcea:	da03      	bge.n	800dcf4 <_printf_i+0xd0>
 800dcec:	232d      	movs	r3, #45	@ 0x2d
 800dcee:	426d      	negs	r5, r5
 800dcf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcf4:	4858      	ldr	r0, [pc, #352]	@ (800de58 <_printf_i+0x234>)
 800dcf6:	230a      	movs	r3, #10
 800dcf8:	e011      	b.n	800dd1e <_printf_i+0xfa>
 800dcfa:	6821      	ldr	r1, [r4, #0]
 800dcfc:	6833      	ldr	r3, [r6, #0]
 800dcfe:	0608      	lsls	r0, r1, #24
 800dd00:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd04:	d402      	bmi.n	800dd0c <_printf_i+0xe8>
 800dd06:	0649      	lsls	r1, r1, #25
 800dd08:	bf48      	it	mi
 800dd0a:	b2ad      	uxthmi	r5, r5
 800dd0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd0e:	4852      	ldr	r0, [pc, #328]	@ (800de58 <_printf_i+0x234>)
 800dd10:	6033      	str	r3, [r6, #0]
 800dd12:	bf14      	ite	ne
 800dd14:	230a      	movne	r3, #10
 800dd16:	2308      	moveq	r3, #8
 800dd18:	2100      	movs	r1, #0
 800dd1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd1e:	6866      	ldr	r6, [r4, #4]
 800dd20:	60a6      	str	r6, [r4, #8]
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	db05      	blt.n	800dd32 <_printf_i+0x10e>
 800dd26:	6821      	ldr	r1, [r4, #0]
 800dd28:	432e      	orrs	r6, r5
 800dd2a:	f021 0104 	bic.w	r1, r1, #4
 800dd2e:	6021      	str	r1, [r4, #0]
 800dd30:	d04b      	beq.n	800ddca <_printf_i+0x1a6>
 800dd32:	4616      	mov	r6, r2
 800dd34:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd38:	fb03 5711 	mls	r7, r3, r1, r5
 800dd3c:	5dc7      	ldrb	r7, [r0, r7]
 800dd3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd42:	462f      	mov	r7, r5
 800dd44:	42bb      	cmp	r3, r7
 800dd46:	460d      	mov	r5, r1
 800dd48:	d9f4      	bls.n	800dd34 <_printf_i+0x110>
 800dd4a:	2b08      	cmp	r3, #8
 800dd4c:	d10b      	bne.n	800dd66 <_printf_i+0x142>
 800dd4e:	6823      	ldr	r3, [r4, #0]
 800dd50:	07df      	lsls	r7, r3, #31
 800dd52:	d508      	bpl.n	800dd66 <_printf_i+0x142>
 800dd54:	6923      	ldr	r3, [r4, #16]
 800dd56:	6861      	ldr	r1, [r4, #4]
 800dd58:	4299      	cmp	r1, r3
 800dd5a:	bfde      	ittt	le
 800dd5c:	2330      	movle	r3, #48	@ 0x30
 800dd5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd66:	1b92      	subs	r2, r2, r6
 800dd68:	6122      	str	r2, [r4, #16]
 800dd6a:	f8cd a000 	str.w	sl, [sp]
 800dd6e:	464b      	mov	r3, r9
 800dd70:	aa03      	add	r2, sp, #12
 800dd72:	4621      	mov	r1, r4
 800dd74:	4640      	mov	r0, r8
 800dd76:	f7ff fee7 	bl	800db48 <_printf_common>
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	d14a      	bne.n	800de14 <_printf_i+0x1f0>
 800dd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd82:	b004      	add	sp, #16
 800dd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd88:	6823      	ldr	r3, [r4, #0]
 800dd8a:	f043 0320 	orr.w	r3, r3, #32
 800dd8e:	6023      	str	r3, [r4, #0]
 800dd90:	4832      	ldr	r0, [pc, #200]	@ (800de5c <_printf_i+0x238>)
 800dd92:	2778      	movs	r7, #120	@ 0x78
 800dd94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	6831      	ldr	r1, [r6, #0]
 800dd9c:	061f      	lsls	r7, r3, #24
 800dd9e:	f851 5b04 	ldr.w	r5, [r1], #4
 800dda2:	d402      	bmi.n	800ddaa <_printf_i+0x186>
 800dda4:	065f      	lsls	r7, r3, #25
 800dda6:	bf48      	it	mi
 800dda8:	b2ad      	uxthmi	r5, r5
 800ddaa:	6031      	str	r1, [r6, #0]
 800ddac:	07d9      	lsls	r1, r3, #31
 800ddae:	bf44      	itt	mi
 800ddb0:	f043 0320 	orrmi.w	r3, r3, #32
 800ddb4:	6023      	strmi	r3, [r4, #0]
 800ddb6:	b11d      	cbz	r5, 800ddc0 <_printf_i+0x19c>
 800ddb8:	2310      	movs	r3, #16
 800ddba:	e7ad      	b.n	800dd18 <_printf_i+0xf4>
 800ddbc:	4826      	ldr	r0, [pc, #152]	@ (800de58 <_printf_i+0x234>)
 800ddbe:	e7e9      	b.n	800dd94 <_printf_i+0x170>
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	f023 0320 	bic.w	r3, r3, #32
 800ddc6:	6023      	str	r3, [r4, #0]
 800ddc8:	e7f6      	b.n	800ddb8 <_printf_i+0x194>
 800ddca:	4616      	mov	r6, r2
 800ddcc:	e7bd      	b.n	800dd4a <_printf_i+0x126>
 800ddce:	6833      	ldr	r3, [r6, #0]
 800ddd0:	6825      	ldr	r5, [r4, #0]
 800ddd2:	6961      	ldr	r1, [r4, #20]
 800ddd4:	1d18      	adds	r0, r3, #4
 800ddd6:	6030      	str	r0, [r6, #0]
 800ddd8:	062e      	lsls	r6, r5, #24
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	d501      	bpl.n	800dde2 <_printf_i+0x1be>
 800ddde:	6019      	str	r1, [r3, #0]
 800dde0:	e002      	b.n	800dde8 <_printf_i+0x1c4>
 800dde2:	0668      	lsls	r0, r5, #25
 800dde4:	d5fb      	bpl.n	800ddde <_printf_i+0x1ba>
 800dde6:	8019      	strh	r1, [r3, #0]
 800dde8:	2300      	movs	r3, #0
 800ddea:	6123      	str	r3, [r4, #16]
 800ddec:	4616      	mov	r6, r2
 800ddee:	e7bc      	b.n	800dd6a <_printf_i+0x146>
 800ddf0:	6833      	ldr	r3, [r6, #0]
 800ddf2:	1d1a      	adds	r2, r3, #4
 800ddf4:	6032      	str	r2, [r6, #0]
 800ddf6:	681e      	ldr	r6, [r3, #0]
 800ddf8:	6862      	ldr	r2, [r4, #4]
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	f7f2 f9f7 	bl	80001f0 <memchr>
 800de02:	b108      	cbz	r0, 800de08 <_printf_i+0x1e4>
 800de04:	1b80      	subs	r0, r0, r6
 800de06:	6060      	str	r0, [r4, #4]
 800de08:	6863      	ldr	r3, [r4, #4]
 800de0a:	6123      	str	r3, [r4, #16]
 800de0c:	2300      	movs	r3, #0
 800de0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de12:	e7aa      	b.n	800dd6a <_printf_i+0x146>
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	4632      	mov	r2, r6
 800de18:	4649      	mov	r1, r9
 800de1a:	4640      	mov	r0, r8
 800de1c:	47d0      	blx	sl
 800de1e:	3001      	adds	r0, #1
 800de20:	d0ad      	beq.n	800dd7e <_printf_i+0x15a>
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	079b      	lsls	r3, r3, #30
 800de26:	d413      	bmi.n	800de50 <_printf_i+0x22c>
 800de28:	68e0      	ldr	r0, [r4, #12]
 800de2a:	9b03      	ldr	r3, [sp, #12]
 800de2c:	4298      	cmp	r0, r3
 800de2e:	bfb8      	it	lt
 800de30:	4618      	movlt	r0, r3
 800de32:	e7a6      	b.n	800dd82 <_printf_i+0x15e>
 800de34:	2301      	movs	r3, #1
 800de36:	4632      	mov	r2, r6
 800de38:	4649      	mov	r1, r9
 800de3a:	4640      	mov	r0, r8
 800de3c:	47d0      	blx	sl
 800de3e:	3001      	adds	r0, #1
 800de40:	d09d      	beq.n	800dd7e <_printf_i+0x15a>
 800de42:	3501      	adds	r5, #1
 800de44:	68e3      	ldr	r3, [r4, #12]
 800de46:	9903      	ldr	r1, [sp, #12]
 800de48:	1a5b      	subs	r3, r3, r1
 800de4a:	42ab      	cmp	r3, r5
 800de4c:	dcf2      	bgt.n	800de34 <_printf_i+0x210>
 800de4e:	e7eb      	b.n	800de28 <_printf_i+0x204>
 800de50:	2500      	movs	r5, #0
 800de52:	f104 0619 	add.w	r6, r4, #25
 800de56:	e7f5      	b.n	800de44 <_printf_i+0x220>
 800de58:	08022f47 	.word	0x08022f47
 800de5c:	08022f58 	.word	0x08022f58

0800de60 <_scanf_chars>:
 800de60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de64:	4615      	mov	r5, r2
 800de66:	688a      	ldr	r2, [r1, #8]
 800de68:	4680      	mov	r8, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	b932      	cbnz	r2, 800de7c <_scanf_chars+0x1c>
 800de6e:	698a      	ldr	r2, [r1, #24]
 800de70:	2a00      	cmp	r2, #0
 800de72:	bf14      	ite	ne
 800de74:	f04f 32ff 	movne.w	r2, #4294967295
 800de78:	2201      	moveq	r2, #1
 800de7a:	608a      	str	r2, [r1, #8]
 800de7c:	6822      	ldr	r2, [r4, #0]
 800de7e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800df10 <_scanf_chars+0xb0>
 800de82:	06d1      	lsls	r1, r2, #27
 800de84:	bf5f      	itttt	pl
 800de86:	681a      	ldrpl	r2, [r3, #0]
 800de88:	1d11      	addpl	r1, r2, #4
 800de8a:	6019      	strpl	r1, [r3, #0]
 800de8c:	6816      	ldrpl	r6, [r2, #0]
 800de8e:	2700      	movs	r7, #0
 800de90:	69a0      	ldr	r0, [r4, #24]
 800de92:	b188      	cbz	r0, 800deb8 <_scanf_chars+0x58>
 800de94:	2801      	cmp	r0, #1
 800de96:	d107      	bne.n	800dea8 <_scanf_chars+0x48>
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	781a      	ldrb	r2, [r3, #0]
 800de9c:	6963      	ldr	r3, [r4, #20]
 800de9e:	5c9b      	ldrb	r3, [r3, r2]
 800dea0:	b953      	cbnz	r3, 800deb8 <_scanf_chars+0x58>
 800dea2:	2f00      	cmp	r7, #0
 800dea4:	d031      	beq.n	800df0a <_scanf_chars+0xaa>
 800dea6:	e022      	b.n	800deee <_scanf_chars+0x8e>
 800dea8:	2802      	cmp	r0, #2
 800deaa:	d120      	bne.n	800deee <_scanf_chars+0x8e>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800deb4:	071b      	lsls	r3, r3, #28
 800deb6:	d41a      	bmi.n	800deee <_scanf_chars+0x8e>
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	06da      	lsls	r2, r3, #27
 800debc:	bf5e      	ittt	pl
 800debe:	682b      	ldrpl	r3, [r5, #0]
 800dec0:	781b      	ldrbpl	r3, [r3, #0]
 800dec2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dec6:	682a      	ldr	r2, [r5, #0]
 800dec8:	686b      	ldr	r3, [r5, #4]
 800deca:	3201      	adds	r2, #1
 800decc:	602a      	str	r2, [r5, #0]
 800dece:	68a2      	ldr	r2, [r4, #8]
 800ded0:	3b01      	subs	r3, #1
 800ded2:	3a01      	subs	r2, #1
 800ded4:	606b      	str	r3, [r5, #4]
 800ded6:	3701      	adds	r7, #1
 800ded8:	60a2      	str	r2, [r4, #8]
 800deda:	b142      	cbz	r2, 800deee <_scanf_chars+0x8e>
 800dedc:	2b00      	cmp	r3, #0
 800dede:	dcd7      	bgt.n	800de90 <_scanf_chars+0x30>
 800dee0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dee4:	4629      	mov	r1, r5
 800dee6:	4640      	mov	r0, r8
 800dee8:	4798      	blx	r3
 800deea:	2800      	cmp	r0, #0
 800deec:	d0d0      	beq.n	800de90 <_scanf_chars+0x30>
 800deee:	6823      	ldr	r3, [r4, #0]
 800def0:	f013 0310 	ands.w	r3, r3, #16
 800def4:	d105      	bne.n	800df02 <_scanf_chars+0xa2>
 800def6:	68e2      	ldr	r2, [r4, #12]
 800def8:	3201      	adds	r2, #1
 800defa:	60e2      	str	r2, [r4, #12]
 800defc:	69a2      	ldr	r2, [r4, #24]
 800defe:	b102      	cbz	r2, 800df02 <_scanf_chars+0xa2>
 800df00:	7033      	strb	r3, [r6, #0]
 800df02:	6923      	ldr	r3, [r4, #16]
 800df04:	443b      	add	r3, r7
 800df06:	6123      	str	r3, [r4, #16]
 800df08:	2000      	movs	r0, #0
 800df0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df0e:	bf00      	nop
 800df10:	080231a1 	.word	0x080231a1

0800df14 <_scanf_i>:
 800df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	4698      	mov	r8, r3
 800df1a:	4b74      	ldr	r3, [pc, #464]	@ (800e0ec <_scanf_i+0x1d8>)
 800df1c:	460c      	mov	r4, r1
 800df1e:	4682      	mov	sl, r0
 800df20:	4616      	mov	r6, r2
 800df22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df26:	b087      	sub	sp, #28
 800df28:	ab03      	add	r3, sp, #12
 800df2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800df2e:	4b70      	ldr	r3, [pc, #448]	@ (800e0f0 <_scanf_i+0x1dc>)
 800df30:	69a1      	ldr	r1, [r4, #24]
 800df32:	4a70      	ldr	r2, [pc, #448]	@ (800e0f4 <_scanf_i+0x1e0>)
 800df34:	2903      	cmp	r1, #3
 800df36:	bf08      	it	eq
 800df38:	461a      	moveq	r2, r3
 800df3a:	68a3      	ldr	r3, [r4, #8]
 800df3c:	9201      	str	r2, [sp, #4]
 800df3e:	1e5a      	subs	r2, r3, #1
 800df40:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800df44:	bf88      	it	hi
 800df46:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800df4a:	4627      	mov	r7, r4
 800df4c:	bf82      	ittt	hi
 800df4e:	eb03 0905 	addhi.w	r9, r3, r5
 800df52:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800df56:	60a3      	strhi	r3, [r4, #8]
 800df58:	f857 3b1c 	ldr.w	r3, [r7], #28
 800df5c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800df60:	bf98      	it	ls
 800df62:	f04f 0900 	movls.w	r9, #0
 800df66:	6023      	str	r3, [r4, #0]
 800df68:	463d      	mov	r5, r7
 800df6a:	f04f 0b00 	mov.w	fp, #0
 800df6e:	6831      	ldr	r1, [r6, #0]
 800df70:	ab03      	add	r3, sp, #12
 800df72:	7809      	ldrb	r1, [r1, #0]
 800df74:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800df78:	2202      	movs	r2, #2
 800df7a:	f7f2 f939 	bl	80001f0 <memchr>
 800df7e:	b328      	cbz	r0, 800dfcc <_scanf_i+0xb8>
 800df80:	f1bb 0f01 	cmp.w	fp, #1
 800df84:	d159      	bne.n	800e03a <_scanf_i+0x126>
 800df86:	6862      	ldr	r2, [r4, #4]
 800df88:	b92a      	cbnz	r2, 800df96 <_scanf_i+0x82>
 800df8a:	6822      	ldr	r2, [r4, #0]
 800df8c:	2108      	movs	r1, #8
 800df8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df92:	6061      	str	r1, [r4, #4]
 800df94:	6022      	str	r2, [r4, #0]
 800df96:	6822      	ldr	r2, [r4, #0]
 800df98:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800df9c:	6022      	str	r2, [r4, #0]
 800df9e:	68a2      	ldr	r2, [r4, #8]
 800dfa0:	1e51      	subs	r1, r2, #1
 800dfa2:	60a1      	str	r1, [r4, #8]
 800dfa4:	b192      	cbz	r2, 800dfcc <_scanf_i+0xb8>
 800dfa6:	6832      	ldr	r2, [r6, #0]
 800dfa8:	1c51      	adds	r1, r2, #1
 800dfaa:	6031      	str	r1, [r6, #0]
 800dfac:	7812      	ldrb	r2, [r2, #0]
 800dfae:	f805 2b01 	strb.w	r2, [r5], #1
 800dfb2:	6872      	ldr	r2, [r6, #4]
 800dfb4:	3a01      	subs	r2, #1
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	6072      	str	r2, [r6, #4]
 800dfba:	dc07      	bgt.n	800dfcc <_scanf_i+0xb8>
 800dfbc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	4650      	mov	r0, sl
 800dfc4:	4790      	blx	r2
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	f040 8085 	bne.w	800e0d6 <_scanf_i+0x1c2>
 800dfcc:	f10b 0b01 	add.w	fp, fp, #1
 800dfd0:	f1bb 0f03 	cmp.w	fp, #3
 800dfd4:	d1cb      	bne.n	800df6e <_scanf_i+0x5a>
 800dfd6:	6863      	ldr	r3, [r4, #4]
 800dfd8:	b90b      	cbnz	r3, 800dfde <_scanf_i+0xca>
 800dfda:	230a      	movs	r3, #10
 800dfdc:	6063      	str	r3, [r4, #4]
 800dfde:	6863      	ldr	r3, [r4, #4]
 800dfe0:	4945      	ldr	r1, [pc, #276]	@ (800e0f8 <_scanf_i+0x1e4>)
 800dfe2:	6960      	ldr	r0, [r4, #20]
 800dfe4:	1ac9      	subs	r1, r1, r3
 800dfe6:	f000 f935 	bl	800e254 <__sccl>
 800dfea:	f04f 0b00 	mov.w	fp, #0
 800dfee:	68a3      	ldr	r3, [r4, #8]
 800dff0:	6822      	ldr	r2, [r4, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d03d      	beq.n	800e072 <_scanf_i+0x15e>
 800dff6:	6831      	ldr	r1, [r6, #0]
 800dff8:	6960      	ldr	r0, [r4, #20]
 800dffa:	f891 c000 	ldrb.w	ip, [r1]
 800dffe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e002:	2800      	cmp	r0, #0
 800e004:	d035      	beq.n	800e072 <_scanf_i+0x15e>
 800e006:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e00a:	d124      	bne.n	800e056 <_scanf_i+0x142>
 800e00c:	0510      	lsls	r0, r2, #20
 800e00e:	d522      	bpl.n	800e056 <_scanf_i+0x142>
 800e010:	f10b 0b01 	add.w	fp, fp, #1
 800e014:	f1b9 0f00 	cmp.w	r9, #0
 800e018:	d003      	beq.n	800e022 <_scanf_i+0x10e>
 800e01a:	3301      	adds	r3, #1
 800e01c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e020:	60a3      	str	r3, [r4, #8]
 800e022:	6873      	ldr	r3, [r6, #4]
 800e024:	3b01      	subs	r3, #1
 800e026:	2b00      	cmp	r3, #0
 800e028:	6073      	str	r3, [r6, #4]
 800e02a:	dd1b      	ble.n	800e064 <_scanf_i+0x150>
 800e02c:	6833      	ldr	r3, [r6, #0]
 800e02e:	3301      	adds	r3, #1
 800e030:	6033      	str	r3, [r6, #0]
 800e032:	68a3      	ldr	r3, [r4, #8]
 800e034:	3b01      	subs	r3, #1
 800e036:	60a3      	str	r3, [r4, #8]
 800e038:	e7d9      	b.n	800dfee <_scanf_i+0xda>
 800e03a:	f1bb 0f02 	cmp.w	fp, #2
 800e03e:	d1ae      	bne.n	800df9e <_scanf_i+0x8a>
 800e040:	6822      	ldr	r2, [r4, #0]
 800e042:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e046:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e04a:	d1bf      	bne.n	800dfcc <_scanf_i+0xb8>
 800e04c:	2110      	movs	r1, #16
 800e04e:	6061      	str	r1, [r4, #4]
 800e050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e054:	e7a2      	b.n	800df9c <_scanf_i+0x88>
 800e056:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e05a:	6022      	str	r2, [r4, #0]
 800e05c:	780b      	ldrb	r3, [r1, #0]
 800e05e:	f805 3b01 	strb.w	r3, [r5], #1
 800e062:	e7de      	b.n	800e022 <_scanf_i+0x10e>
 800e064:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e068:	4631      	mov	r1, r6
 800e06a:	4650      	mov	r0, sl
 800e06c:	4798      	blx	r3
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0df      	beq.n	800e032 <_scanf_i+0x11e>
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	05d9      	lsls	r1, r3, #23
 800e076:	d50d      	bpl.n	800e094 <_scanf_i+0x180>
 800e078:	42bd      	cmp	r5, r7
 800e07a:	d909      	bls.n	800e090 <_scanf_i+0x17c>
 800e07c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e080:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e084:	4632      	mov	r2, r6
 800e086:	4650      	mov	r0, sl
 800e088:	4798      	blx	r3
 800e08a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e08e:	464d      	mov	r5, r9
 800e090:	42bd      	cmp	r5, r7
 800e092:	d028      	beq.n	800e0e6 <_scanf_i+0x1d2>
 800e094:	6822      	ldr	r2, [r4, #0]
 800e096:	f012 0210 	ands.w	r2, r2, #16
 800e09a:	d113      	bne.n	800e0c4 <_scanf_i+0x1b0>
 800e09c:	702a      	strb	r2, [r5, #0]
 800e09e:	6863      	ldr	r3, [r4, #4]
 800e0a0:	9e01      	ldr	r6, [sp, #4]
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	4650      	mov	r0, sl
 800e0a6:	47b0      	blx	r6
 800e0a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ac:	6821      	ldr	r1, [r4, #0]
 800e0ae:	1d1a      	adds	r2, r3, #4
 800e0b0:	f8c8 2000 	str.w	r2, [r8]
 800e0b4:	f011 0f20 	tst.w	r1, #32
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	d00f      	beq.n	800e0dc <_scanf_i+0x1c8>
 800e0bc:	6018      	str	r0, [r3, #0]
 800e0be:	68e3      	ldr	r3, [r4, #12]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	60e3      	str	r3, [r4, #12]
 800e0c4:	6923      	ldr	r3, [r4, #16]
 800e0c6:	1bed      	subs	r5, r5, r7
 800e0c8:	445d      	add	r5, fp
 800e0ca:	442b      	add	r3, r5
 800e0cc:	6123      	str	r3, [r4, #16]
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	b007      	add	sp, #28
 800e0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d6:	f04f 0b00 	mov.w	fp, #0
 800e0da:	e7ca      	b.n	800e072 <_scanf_i+0x15e>
 800e0dc:	07ca      	lsls	r2, r1, #31
 800e0de:	bf4c      	ite	mi
 800e0e0:	8018      	strhmi	r0, [r3, #0]
 800e0e2:	6018      	strpl	r0, [r3, #0]
 800e0e4:	e7eb      	b.n	800e0be <_scanf_i+0x1aa>
 800e0e6:	2001      	movs	r0, #1
 800e0e8:	e7f2      	b.n	800e0d0 <_scanf_i+0x1bc>
 800e0ea:	bf00      	nop
 800e0ec:	08011680 	.word	0x08011680
 800e0f0:	0800f1ed 	.word	0x0800f1ed
 800e0f4:	0800f2cd 	.word	0x0800f2cd
 800e0f8:	08022f79 	.word	0x08022f79

0800e0fc <__sflush_r>:
 800e0fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e104:	0716      	lsls	r6, r2, #28
 800e106:	4605      	mov	r5, r0
 800e108:	460c      	mov	r4, r1
 800e10a:	d454      	bmi.n	800e1b6 <__sflush_r+0xba>
 800e10c:	684b      	ldr	r3, [r1, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	dc02      	bgt.n	800e118 <__sflush_r+0x1c>
 800e112:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e114:	2b00      	cmp	r3, #0
 800e116:	dd48      	ble.n	800e1aa <__sflush_r+0xae>
 800e118:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	d045      	beq.n	800e1aa <__sflush_r+0xae>
 800e11e:	2300      	movs	r3, #0
 800e120:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e124:	682f      	ldr	r7, [r5, #0]
 800e126:	6a21      	ldr	r1, [r4, #32]
 800e128:	602b      	str	r3, [r5, #0]
 800e12a:	d030      	beq.n	800e18e <__sflush_r+0x92>
 800e12c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e12e:	89a3      	ldrh	r3, [r4, #12]
 800e130:	0759      	lsls	r1, r3, #29
 800e132:	d505      	bpl.n	800e140 <__sflush_r+0x44>
 800e134:	6863      	ldr	r3, [r4, #4]
 800e136:	1ad2      	subs	r2, r2, r3
 800e138:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e13a:	b10b      	cbz	r3, 800e140 <__sflush_r+0x44>
 800e13c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e13e:	1ad2      	subs	r2, r2, r3
 800e140:	2300      	movs	r3, #0
 800e142:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e144:	6a21      	ldr	r1, [r4, #32]
 800e146:	4628      	mov	r0, r5
 800e148:	47b0      	blx	r6
 800e14a:	1c43      	adds	r3, r0, #1
 800e14c:	89a3      	ldrh	r3, [r4, #12]
 800e14e:	d106      	bne.n	800e15e <__sflush_r+0x62>
 800e150:	6829      	ldr	r1, [r5, #0]
 800e152:	291d      	cmp	r1, #29
 800e154:	d82b      	bhi.n	800e1ae <__sflush_r+0xb2>
 800e156:	4a2a      	ldr	r2, [pc, #168]	@ (800e200 <__sflush_r+0x104>)
 800e158:	40ca      	lsrs	r2, r1
 800e15a:	07d6      	lsls	r6, r2, #31
 800e15c:	d527      	bpl.n	800e1ae <__sflush_r+0xb2>
 800e15e:	2200      	movs	r2, #0
 800e160:	6062      	str	r2, [r4, #4]
 800e162:	04d9      	lsls	r1, r3, #19
 800e164:	6922      	ldr	r2, [r4, #16]
 800e166:	6022      	str	r2, [r4, #0]
 800e168:	d504      	bpl.n	800e174 <__sflush_r+0x78>
 800e16a:	1c42      	adds	r2, r0, #1
 800e16c:	d101      	bne.n	800e172 <__sflush_r+0x76>
 800e16e:	682b      	ldr	r3, [r5, #0]
 800e170:	b903      	cbnz	r3, 800e174 <__sflush_r+0x78>
 800e172:	6560      	str	r0, [r4, #84]	@ 0x54
 800e174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e176:	602f      	str	r7, [r5, #0]
 800e178:	b1b9      	cbz	r1, 800e1aa <__sflush_r+0xae>
 800e17a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e17e:	4299      	cmp	r1, r3
 800e180:	d002      	beq.n	800e188 <__sflush_r+0x8c>
 800e182:	4628      	mov	r0, r5
 800e184:	f7fd ff5c 	bl	800c040 <_free_r>
 800e188:	2300      	movs	r3, #0
 800e18a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e18c:	e00d      	b.n	800e1aa <__sflush_r+0xae>
 800e18e:	2301      	movs	r3, #1
 800e190:	4628      	mov	r0, r5
 800e192:	47b0      	blx	r6
 800e194:	4602      	mov	r2, r0
 800e196:	1c50      	adds	r0, r2, #1
 800e198:	d1c9      	bne.n	800e12e <__sflush_r+0x32>
 800e19a:	682b      	ldr	r3, [r5, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d0c6      	beq.n	800e12e <__sflush_r+0x32>
 800e1a0:	2b1d      	cmp	r3, #29
 800e1a2:	d001      	beq.n	800e1a8 <__sflush_r+0xac>
 800e1a4:	2b16      	cmp	r3, #22
 800e1a6:	d11e      	bne.n	800e1e6 <__sflush_r+0xea>
 800e1a8:	602f      	str	r7, [r5, #0]
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	e022      	b.n	800e1f4 <__sflush_r+0xf8>
 800e1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1b2:	b21b      	sxth	r3, r3
 800e1b4:	e01b      	b.n	800e1ee <__sflush_r+0xf2>
 800e1b6:	690f      	ldr	r7, [r1, #16]
 800e1b8:	2f00      	cmp	r7, #0
 800e1ba:	d0f6      	beq.n	800e1aa <__sflush_r+0xae>
 800e1bc:	0793      	lsls	r3, r2, #30
 800e1be:	680e      	ldr	r6, [r1, #0]
 800e1c0:	bf08      	it	eq
 800e1c2:	694b      	ldreq	r3, [r1, #20]
 800e1c4:	600f      	str	r7, [r1, #0]
 800e1c6:	bf18      	it	ne
 800e1c8:	2300      	movne	r3, #0
 800e1ca:	eba6 0807 	sub.w	r8, r6, r7
 800e1ce:	608b      	str	r3, [r1, #8]
 800e1d0:	f1b8 0f00 	cmp.w	r8, #0
 800e1d4:	dde9      	ble.n	800e1aa <__sflush_r+0xae>
 800e1d6:	6a21      	ldr	r1, [r4, #32]
 800e1d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e1da:	4643      	mov	r3, r8
 800e1dc:	463a      	mov	r2, r7
 800e1de:	4628      	mov	r0, r5
 800e1e0:	47b0      	blx	r6
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	dc08      	bgt.n	800e1f8 <__sflush_r+0xfc>
 800e1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ee:	81a3      	strh	r3, [r4, #12]
 800e1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f8:	4407      	add	r7, r0
 800e1fa:	eba8 0800 	sub.w	r8, r8, r0
 800e1fe:	e7e7      	b.n	800e1d0 <__sflush_r+0xd4>
 800e200:	20400001 	.word	0x20400001

0800e204 <_fflush_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	690b      	ldr	r3, [r1, #16]
 800e208:	4605      	mov	r5, r0
 800e20a:	460c      	mov	r4, r1
 800e20c:	b913      	cbnz	r3, 800e214 <_fflush_r+0x10>
 800e20e:	2500      	movs	r5, #0
 800e210:	4628      	mov	r0, r5
 800e212:	bd38      	pop	{r3, r4, r5, pc}
 800e214:	b118      	cbz	r0, 800e21e <_fflush_r+0x1a>
 800e216:	6a03      	ldr	r3, [r0, #32]
 800e218:	b90b      	cbnz	r3, 800e21e <_fflush_r+0x1a>
 800e21a:	f7fd fd57 	bl	800bccc <__sinit>
 800e21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d0f3      	beq.n	800e20e <_fflush_r+0xa>
 800e226:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e228:	07d0      	lsls	r0, r2, #31
 800e22a:	d404      	bmi.n	800e236 <_fflush_r+0x32>
 800e22c:	0599      	lsls	r1, r3, #22
 800e22e:	d402      	bmi.n	800e236 <_fflush_r+0x32>
 800e230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e232:	f7fd feec 	bl	800c00e <__retarget_lock_acquire_recursive>
 800e236:	4628      	mov	r0, r5
 800e238:	4621      	mov	r1, r4
 800e23a:	f7ff ff5f 	bl	800e0fc <__sflush_r>
 800e23e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e240:	07da      	lsls	r2, r3, #31
 800e242:	4605      	mov	r5, r0
 800e244:	d4e4      	bmi.n	800e210 <_fflush_r+0xc>
 800e246:	89a3      	ldrh	r3, [r4, #12]
 800e248:	059b      	lsls	r3, r3, #22
 800e24a:	d4e1      	bmi.n	800e210 <_fflush_r+0xc>
 800e24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e24e:	f7fd fedf 	bl	800c010 <__retarget_lock_release_recursive>
 800e252:	e7dd      	b.n	800e210 <_fflush_r+0xc>

0800e254 <__sccl>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	780b      	ldrb	r3, [r1, #0]
 800e258:	4604      	mov	r4, r0
 800e25a:	2b5e      	cmp	r3, #94	@ 0x5e
 800e25c:	bf0b      	itete	eq
 800e25e:	784b      	ldrbeq	r3, [r1, #1]
 800e260:	1c4a      	addne	r2, r1, #1
 800e262:	1c8a      	addeq	r2, r1, #2
 800e264:	2100      	movne	r1, #0
 800e266:	bf08      	it	eq
 800e268:	2101      	moveq	r1, #1
 800e26a:	3801      	subs	r0, #1
 800e26c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e270:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e274:	42a8      	cmp	r0, r5
 800e276:	d1fb      	bne.n	800e270 <__sccl+0x1c>
 800e278:	b90b      	cbnz	r3, 800e27e <__sccl+0x2a>
 800e27a:	1e50      	subs	r0, r2, #1
 800e27c:	bd70      	pop	{r4, r5, r6, pc}
 800e27e:	f081 0101 	eor.w	r1, r1, #1
 800e282:	54e1      	strb	r1, [r4, r3]
 800e284:	4610      	mov	r0, r2
 800e286:	4602      	mov	r2, r0
 800e288:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e28c:	2d2d      	cmp	r5, #45	@ 0x2d
 800e28e:	d005      	beq.n	800e29c <__sccl+0x48>
 800e290:	2d5d      	cmp	r5, #93	@ 0x5d
 800e292:	d016      	beq.n	800e2c2 <__sccl+0x6e>
 800e294:	2d00      	cmp	r5, #0
 800e296:	d0f1      	beq.n	800e27c <__sccl+0x28>
 800e298:	462b      	mov	r3, r5
 800e29a:	e7f2      	b.n	800e282 <__sccl+0x2e>
 800e29c:	7846      	ldrb	r6, [r0, #1]
 800e29e:	2e5d      	cmp	r6, #93	@ 0x5d
 800e2a0:	d0fa      	beq.n	800e298 <__sccl+0x44>
 800e2a2:	42b3      	cmp	r3, r6
 800e2a4:	dcf8      	bgt.n	800e298 <__sccl+0x44>
 800e2a6:	3002      	adds	r0, #2
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	4296      	cmp	r6, r2
 800e2ae:	54a1      	strb	r1, [r4, r2]
 800e2b0:	dcfb      	bgt.n	800e2aa <__sccl+0x56>
 800e2b2:	1af2      	subs	r2, r6, r3
 800e2b4:	3a01      	subs	r2, #1
 800e2b6:	1c5d      	adds	r5, r3, #1
 800e2b8:	42b3      	cmp	r3, r6
 800e2ba:	bfa8      	it	ge
 800e2bc:	2200      	movge	r2, #0
 800e2be:	18ab      	adds	r3, r5, r2
 800e2c0:	e7e1      	b.n	800e286 <__sccl+0x32>
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	e7da      	b.n	800e27c <__sccl+0x28>

0800e2c6 <__submore>:
 800e2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e2ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2d2:	4299      	cmp	r1, r3
 800e2d4:	d11d      	bne.n	800e312 <__submore+0x4c>
 800e2d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e2da:	f7fe fa57 	bl	800c78c <_malloc_r>
 800e2de:	b918      	cbnz	r0, 800e2e8 <__submore+0x22>
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e2ee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e2f2:	6360      	str	r0, [r4, #52]	@ 0x34
 800e2f4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e2f8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e2fc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e300:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e304:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e308:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e30c:	6020      	str	r0, [r4, #0]
 800e30e:	2000      	movs	r0, #0
 800e310:	e7e8      	b.n	800e2e4 <__submore+0x1e>
 800e312:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e314:	0077      	lsls	r7, r6, #1
 800e316:	463a      	mov	r2, r7
 800e318:	f000 fec0 	bl	800f09c <_realloc_r>
 800e31c:	4605      	mov	r5, r0
 800e31e:	2800      	cmp	r0, #0
 800e320:	d0de      	beq.n	800e2e0 <__submore+0x1a>
 800e322:	eb00 0806 	add.w	r8, r0, r6
 800e326:	4601      	mov	r1, r0
 800e328:	4632      	mov	r2, r6
 800e32a:	4640      	mov	r0, r8
 800e32c:	f7fd fe71 	bl	800c012 <memcpy>
 800e330:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e334:	f8c4 8000 	str.w	r8, [r4]
 800e338:	e7e9      	b.n	800e30e <__submore+0x48>

0800e33a <memmove>:
 800e33a:	4288      	cmp	r0, r1
 800e33c:	b510      	push	{r4, lr}
 800e33e:	eb01 0402 	add.w	r4, r1, r2
 800e342:	d902      	bls.n	800e34a <memmove+0x10>
 800e344:	4284      	cmp	r4, r0
 800e346:	4623      	mov	r3, r4
 800e348:	d807      	bhi.n	800e35a <memmove+0x20>
 800e34a:	1e43      	subs	r3, r0, #1
 800e34c:	42a1      	cmp	r1, r4
 800e34e:	d008      	beq.n	800e362 <memmove+0x28>
 800e350:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e354:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e358:	e7f8      	b.n	800e34c <memmove+0x12>
 800e35a:	4402      	add	r2, r0
 800e35c:	4601      	mov	r1, r0
 800e35e:	428a      	cmp	r2, r1
 800e360:	d100      	bne.n	800e364 <memmove+0x2a>
 800e362:	bd10      	pop	{r4, pc}
 800e364:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e368:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e36c:	e7f7      	b.n	800e35e <memmove+0x24>
	...

0800e370 <_sbrk_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	4d06      	ldr	r5, [pc, #24]	@ (800e38c <_sbrk_r+0x1c>)
 800e374:	2300      	movs	r3, #0
 800e376:	4604      	mov	r4, r0
 800e378:	4608      	mov	r0, r1
 800e37a:	602b      	str	r3, [r5, #0]
 800e37c:	f7fc fd16 	bl	800adac <_sbrk>
 800e380:	1c43      	adds	r3, r0, #1
 800e382:	d102      	bne.n	800e38a <_sbrk_r+0x1a>
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	b103      	cbz	r3, 800e38a <_sbrk_r+0x1a>
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	bd38      	pop	{r3, r4, r5, pc}
 800e38c:	2001d360 	.word	0x2001d360

0800e390 <strcpy>:
 800e390:	4603      	mov	r3, r0
 800e392:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e396:	f803 2b01 	strb.w	r2, [r3], #1
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	d1f9      	bne.n	800e392 <strcpy+0x2>
 800e39e:	4770      	bx	lr

0800e3a0 <__assert_func>:
 800e3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3a2:	4614      	mov	r4, r2
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	4b09      	ldr	r3, [pc, #36]	@ (800e3cc <__assert_func+0x2c>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	68d8      	ldr	r0, [r3, #12]
 800e3ae:	b14c      	cbz	r4, 800e3c4 <__assert_func+0x24>
 800e3b0:	4b07      	ldr	r3, [pc, #28]	@ (800e3d0 <__assert_func+0x30>)
 800e3b2:	9100      	str	r1, [sp, #0]
 800e3b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3b8:	4906      	ldr	r1, [pc, #24]	@ (800e3d4 <__assert_func+0x34>)
 800e3ba:	462b      	mov	r3, r5
 800e3bc:	f000 ff88 	bl	800f2d0 <fiprintf>
 800e3c0:	f000 ff98 	bl	800f2f4 <abort>
 800e3c4:	4b04      	ldr	r3, [pc, #16]	@ (800e3d8 <__assert_func+0x38>)
 800e3c6:	461c      	mov	r4, r3
 800e3c8:	e7f3      	b.n	800e3b2 <__assert_func+0x12>
 800e3ca:	bf00      	nop
 800e3cc:	200002c8 	.word	0x200002c8
 800e3d0:	08022f84 	.word	0x08022f84
 800e3d4:	08022f91 	.word	0x08022f91
 800e3d8:	08022fbf 	.word	0x08022fbf

0800e3dc <_calloc_r>:
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	fba1 5402 	umull	r5, r4, r1, r2
 800e3e2:	b934      	cbnz	r4, 800e3f2 <_calloc_r+0x16>
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	f7fe f9d1 	bl	800c78c <_malloc_r>
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	b928      	cbnz	r0, 800e3fa <_calloc_r+0x1e>
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	bd70      	pop	{r4, r5, r6, pc}
 800e3f2:	220c      	movs	r2, #12
 800e3f4:	6002      	str	r2, [r0, #0]
 800e3f6:	2600      	movs	r6, #0
 800e3f8:	e7f9      	b.n	800e3ee <_calloc_r+0x12>
 800e3fa:	462a      	mov	r2, r5
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	f7fd fd64 	bl	800beca <memset>
 800e402:	e7f4      	b.n	800e3ee <_calloc_r+0x12>

0800e404 <quorem>:
 800e404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e408:	6903      	ldr	r3, [r0, #16]
 800e40a:	690c      	ldr	r4, [r1, #16]
 800e40c:	42a3      	cmp	r3, r4
 800e40e:	4607      	mov	r7, r0
 800e410:	db7e      	blt.n	800e510 <quorem+0x10c>
 800e412:	3c01      	subs	r4, #1
 800e414:	f101 0814 	add.w	r8, r1, #20
 800e418:	00a3      	lsls	r3, r4, #2
 800e41a:	f100 0514 	add.w	r5, r0, #20
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e424:	9301      	str	r3, [sp, #4]
 800e426:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e42a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e42e:	3301      	adds	r3, #1
 800e430:	429a      	cmp	r2, r3
 800e432:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e436:	fbb2 f6f3 	udiv	r6, r2, r3
 800e43a:	d32e      	bcc.n	800e49a <quorem+0x96>
 800e43c:	f04f 0a00 	mov.w	sl, #0
 800e440:	46c4      	mov	ip, r8
 800e442:	46ae      	mov	lr, r5
 800e444:	46d3      	mov	fp, sl
 800e446:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e44a:	b298      	uxth	r0, r3
 800e44c:	fb06 a000 	mla	r0, r6, r0, sl
 800e450:	0c02      	lsrs	r2, r0, #16
 800e452:	0c1b      	lsrs	r3, r3, #16
 800e454:	fb06 2303 	mla	r3, r6, r3, r2
 800e458:	f8de 2000 	ldr.w	r2, [lr]
 800e45c:	b280      	uxth	r0, r0
 800e45e:	b292      	uxth	r2, r2
 800e460:	1a12      	subs	r2, r2, r0
 800e462:	445a      	add	r2, fp
 800e464:	f8de 0000 	ldr.w	r0, [lr]
 800e468:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e472:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e476:	b292      	uxth	r2, r2
 800e478:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e47c:	45e1      	cmp	r9, ip
 800e47e:	f84e 2b04 	str.w	r2, [lr], #4
 800e482:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e486:	d2de      	bcs.n	800e446 <quorem+0x42>
 800e488:	9b00      	ldr	r3, [sp, #0]
 800e48a:	58eb      	ldr	r3, [r5, r3]
 800e48c:	b92b      	cbnz	r3, 800e49a <quorem+0x96>
 800e48e:	9b01      	ldr	r3, [sp, #4]
 800e490:	3b04      	subs	r3, #4
 800e492:	429d      	cmp	r5, r3
 800e494:	461a      	mov	r2, r3
 800e496:	d32f      	bcc.n	800e4f8 <quorem+0xf4>
 800e498:	613c      	str	r4, [r7, #16]
 800e49a:	4638      	mov	r0, r7
 800e49c:	f7fe fcd0 	bl	800ce40 <__mcmp>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	db25      	blt.n	800e4f0 <quorem+0xec>
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4ac:	f8d1 c000 	ldr.w	ip, [r1]
 800e4b0:	fa1f fe82 	uxth.w	lr, r2
 800e4b4:	fa1f f38c 	uxth.w	r3, ip
 800e4b8:	eba3 030e 	sub.w	r3, r3, lr
 800e4bc:	4403      	add	r3, r0
 800e4be:	0c12      	lsrs	r2, r2, #16
 800e4c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e4c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4ce:	45c1      	cmp	r9, r8
 800e4d0:	f841 3b04 	str.w	r3, [r1], #4
 800e4d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e4d8:	d2e6      	bcs.n	800e4a8 <quorem+0xa4>
 800e4da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4e2:	b922      	cbnz	r2, 800e4ee <quorem+0xea>
 800e4e4:	3b04      	subs	r3, #4
 800e4e6:	429d      	cmp	r5, r3
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	d30b      	bcc.n	800e504 <quorem+0x100>
 800e4ec:	613c      	str	r4, [r7, #16]
 800e4ee:	3601      	adds	r6, #1
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	b003      	add	sp, #12
 800e4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f8:	6812      	ldr	r2, [r2, #0]
 800e4fa:	3b04      	subs	r3, #4
 800e4fc:	2a00      	cmp	r2, #0
 800e4fe:	d1cb      	bne.n	800e498 <quorem+0x94>
 800e500:	3c01      	subs	r4, #1
 800e502:	e7c6      	b.n	800e492 <quorem+0x8e>
 800e504:	6812      	ldr	r2, [r2, #0]
 800e506:	3b04      	subs	r3, #4
 800e508:	2a00      	cmp	r2, #0
 800e50a:	d1ef      	bne.n	800e4ec <quorem+0xe8>
 800e50c:	3c01      	subs	r4, #1
 800e50e:	e7ea      	b.n	800e4e6 <quorem+0xe2>
 800e510:	2000      	movs	r0, #0
 800e512:	e7ee      	b.n	800e4f2 <quorem+0xee>
 800e514:	0000      	movs	r0, r0
	...

0800e518 <_dtoa_r>:
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	69c7      	ldr	r7, [r0, #28]
 800e51e:	b099      	sub	sp, #100	@ 0x64
 800e520:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e524:	ec55 4b10 	vmov	r4, r5, d0
 800e528:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e52a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e52c:	4683      	mov	fp, r0
 800e52e:	920e      	str	r2, [sp, #56]	@ 0x38
 800e530:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e532:	b97f      	cbnz	r7, 800e554 <_dtoa_r+0x3c>
 800e534:	2010      	movs	r0, #16
 800e536:	f000 fda9 	bl	800f08c <malloc>
 800e53a:	4602      	mov	r2, r0
 800e53c:	f8cb 001c 	str.w	r0, [fp, #28]
 800e540:	b920      	cbnz	r0, 800e54c <_dtoa_r+0x34>
 800e542:	4ba5      	ldr	r3, [pc, #660]	@ (800e7d8 <_dtoa_r+0x2c0>)
 800e544:	21ef      	movs	r1, #239	@ 0xef
 800e546:	48a5      	ldr	r0, [pc, #660]	@ (800e7dc <_dtoa_r+0x2c4>)
 800e548:	f7ff ff2a 	bl	800e3a0 <__assert_func>
 800e54c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e550:	6007      	str	r7, [r0, #0]
 800e552:	60c7      	str	r7, [r0, #12]
 800e554:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e558:	6819      	ldr	r1, [r3, #0]
 800e55a:	b159      	cbz	r1, 800e574 <_dtoa_r+0x5c>
 800e55c:	685a      	ldr	r2, [r3, #4]
 800e55e:	604a      	str	r2, [r1, #4]
 800e560:	2301      	movs	r3, #1
 800e562:	4093      	lsls	r3, r2
 800e564:	608b      	str	r3, [r1, #8]
 800e566:	4658      	mov	r0, fp
 800e568:	f7fe f9ee 	bl	800c948 <_Bfree>
 800e56c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	1e2b      	subs	r3, r5, #0
 800e576:	bfb9      	ittee	lt
 800e578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e57c:	9305      	strlt	r3, [sp, #20]
 800e57e:	2300      	movge	r3, #0
 800e580:	6033      	strge	r3, [r6, #0]
 800e582:	9f05      	ldr	r7, [sp, #20]
 800e584:	4b96      	ldr	r3, [pc, #600]	@ (800e7e0 <_dtoa_r+0x2c8>)
 800e586:	bfbc      	itt	lt
 800e588:	2201      	movlt	r2, #1
 800e58a:	6032      	strlt	r2, [r6, #0]
 800e58c:	43bb      	bics	r3, r7
 800e58e:	d112      	bne.n	800e5b6 <_dtoa_r+0x9e>
 800e590:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e592:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e59c:	4323      	orrs	r3, r4
 800e59e:	f000 8543 	beq.w	800f028 <_dtoa_r+0xb10>
 800e5a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5a4:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 800e7f4 <_dtoa_r+0x2dc>
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 8545 	beq.w	800f038 <_dtoa_r+0xb20>
 800e5ae:	f10a 0303 	add.w	r3, sl, #3
 800e5b2:	f000 bd3f 	b.w	800f034 <_dtoa_r+0xb1c>
 800e5b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	ec51 0b17 	vmov	r0, r1, d7
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e5c6:	f7f2 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5ca:	4680      	mov	r8, r0
 800e5cc:	b158      	cbz	r0, 800e5e6 <_dtoa_r+0xce>
 800e5ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e5d6:	b113      	cbz	r3, 800e5de <_dtoa_r+0xc6>
 800e5d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e5da:	4b82      	ldr	r3, [pc, #520]	@ (800e7e4 <_dtoa_r+0x2cc>)
 800e5dc:	6013      	str	r3, [r2, #0]
 800e5de:	f8df a218 	ldr.w	sl, [pc, #536]	@ 800e7f8 <_dtoa_r+0x2e0>
 800e5e2:	f000 bd29 	b.w	800f038 <_dtoa_r+0xb20>
 800e5e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e5ea:	aa16      	add	r2, sp, #88	@ 0x58
 800e5ec:	a917      	add	r1, sp, #92	@ 0x5c
 800e5ee:	4658      	mov	r0, fp
 800e5f0:	f7fe fd46 	bl	800d080 <__d2b>
 800e5f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e5f8:	4681      	mov	r9, r0
 800e5fa:	2e00      	cmp	r6, #0
 800e5fc:	d077      	beq.n	800e6ee <_dtoa_r+0x1d6>
 800e5fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e600:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e60c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e618:	4619      	mov	r1, r3
 800e61a:	2200      	movs	r2, #0
 800e61c:	4b72      	ldr	r3, [pc, #456]	@ (800e7e8 <_dtoa_r+0x2d0>)
 800e61e:	f7f1 fe3b 	bl	8000298 <__aeabi_dsub>
 800e622:	a367      	add	r3, pc, #412	@ (adr r3, 800e7c0 <_dtoa_r+0x2a8>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	f7f1 ffee 	bl	8000608 <__aeabi_dmul>
 800e62c:	a366      	add	r3, pc, #408	@ (adr r3, 800e7c8 <_dtoa_r+0x2b0>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7f1 fe33 	bl	800029c <__adddf3>
 800e636:	4604      	mov	r4, r0
 800e638:	4630      	mov	r0, r6
 800e63a:	460d      	mov	r5, r1
 800e63c:	f7f1 ff7a 	bl	8000534 <__aeabi_i2d>
 800e640:	a363      	add	r3, pc, #396	@ (adr r3, 800e7d0 <_dtoa_r+0x2b8>)
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	f7f1 ffdf 	bl	8000608 <__aeabi_dmul>
 800e64a:	4602      	mov	r2, r0
 800e64c:	460b      	mov	r3, r1
 800e64e:	4620      	mov	r0, r4
 800e650:	4629      	mov	r1, r5
 800e652:	f7f1 fe23 	bl	800029c <__adddf3>
 800e656:	4604      	mov	r4, r0
 800e658:	460d      	mov	r5, r1
 800e65a:	f7f2 fa85 	bl	8000b68 <__aeabi_d2iz>
 800e65e:	2200      	movs	r2, #0
 800e660:	4607      	mov	r7, r0
 800e662:	2300      	movs	r3, #0
 800e664:	4620      	mov	r0, r4
 800e666:	4629      	mov	r1, r5
 800e668:	f7f2 fa40 	bl	8000aec <__aeabi_dcmplt>
 800e66c:	b140      	cbz	r0, 800e680 <_dtoa_r+0x168>
 800e66e:	4638      	mov	r0, r7
 800e670:	f7f1 ff60 	bl	8000534 <__aeabi_i2d>
 800e674:	4622      	mov	r2, r4
 800e676:	462b      	mov	r3, r5
 800e678:	f7f2 fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e67c:	b900      	cbnz	r0, 800e680 <_dtoa_r+0x168>
 800e67e:	3f01      	subs	r7, #1
 800e680:	2f16      	cmp	r7, #22
 800e682:	d851      	bhi.n	800e728 <_dtoa_r+0x210>
 800e684:	4b59      	ldr	r3, [pc, #356]	@ (800e7ec <_dtoa_r+0x2d4>)
 800e686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e692:	f7f2 fa2b 	bl	8000aec <__aeabi_dcmplt>
 800e696:	2800      	cmp	r0, #0
 800e698:	d048      	beq.n	800e72c <_dtoa_r+0x214>
 800e69a:	3f01      	subs	r7, #1
 800e69c:	2300      	movs	r3, #0
 800e69e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e6a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e6a2:	1b9b      	subs	r3, r3, r6
 800e6a4:	1e5a      	subs	r2, r3, #1
 800e6a6:	bf44      	itt	mi
 800e6a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800e6ac:	2300      	movmi	r3, #0
 800e6ae:	9208      	str	r2, [sp, #32]
 800e6b0:	bf54      	ite	pl
 800e6b2:	f04f 0800 	movpl.w	r8, #0
 800e6b6:	9308      	strmi	r3, [sp, #32]
 800e6b8:	2f00      	cmp	r7, #0
 800e6ba:	db39      	blt.n	800e730 <_dtoa_r+0x218>
 800e6bc:	9b08      	ldr	r3, [sp, #32]
 800e6be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e6c0:	443b      	add	r3, r7
 800e6c2:	9308      	str	r3, [sp, #32]
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ca:	2b09      	cmp	r3, #9
 800e6cc:	d861      	bhi.n	800e792 <_dtoa_r+0x27a>
 800e6ce:	2b05      	cmp	r3, #5
 800e6d0:	bfc4      	itt	gt
 800e6d2:	3b04      	subgt	r3, #4
 800e6d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e6d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6d8:	f1a3 0302 	sub.w	r3, r3, #2
 800e6dc:	bfcc      	ite	gt
 800e6de:	2400      	movgt	r4, #0
 800e6e0:	2401      	movle	r4, #1
 800e6e2:	2b03      	cmp	r3, #3
 800e6e4:	d861      	bhi.n	800e7aa <_dtoa_r+0x292>
 800e6e6:	e8df f003 	tbb	[pc, r3]
 800e6ea:	5250      	.short	0x5250
 800e6ec:	2a35      	.short	0x2a35
 800e6ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e6f2:	441e      	add	r6, r3
 800e6f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e6f8:	2b20      	cmp	r3, #32
 800e6fa:	bfc1      	itttt	gt
 800e6fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e700:	409f      	lslgt	r7, r3
 800e702:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e706:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e70a:	bfd6      	itet	le
 800e70c:	f1c3 0320 	rsble	r3, r3, #32
 800e710:	ea47 0003 	orrgt.w	r0, r7, r3
 800e714:	fa04 f003 	lslle.w	r0, r4, r3
 800e718:	f7f1 fefc 	bl	8000514 <__aeabi_ui2d>
 800e71c:	2201      	movs	r2, #1
 800e71e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e722:	3e01      	subs	r6, #1
 800e724:	9214      	str	r2, [sp, #80]	@ 0x50
 800e726:	e777      	b.n	800e618 <_dtoa_r+0x100>
 800e728:	2301      	movs	r3, #1
 800e72a:	e7b8      	b.n	800e69e <_dtoa_r+0x186>
 800e72c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e72e:	e7b7      	b.n	800e6a0 <_dtoa_r+0x188>
 800e730:	427b      	negs	r3, r7
 800e732:	930a      	str	r3, [sp, #40]	@ 0x28
 800e734:	2300      	movs	r3, #0
 800e736:	eba8 0807 	sub.w	r8, r8, r7
 800e73a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e73c:	e7c4      	b.n	800e6c8 <_dtoa_r+0x1b0>
 800e73e:	2301      	movs	r3, #1
 800e740:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e744:	18fb      	adds	r3, r7, r3
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	3301      	adds	r3, #1
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	9303      	str	r3, [sp, #12]
 800e74e:	bfb8      	it	lt
 800e750:	2301      	movlt	r3, #1
 800e752:	e006      	b.n	800e762 <_dtoa_r+0x24a>
 800e754:	2301      	movs	r3, #1
 800e756:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	dd28      	ble.n	800e7b0 <_dtoa_r+0x298>
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	9303      	str	r3, [sp, #12]
 800e762:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e766:	2100      	movs	r1, #0
 800e768:	2204      	movs	r2, #4
 800e76a:	f102 0514 	add.w	r5, r2, #20
 800e76e:	429d      	cmp	r5, r3
 800e770:	d923      	bls.n	800e7ba <_dtoa_r+0x2a2>
 800e772:	6041      	str	r1, [r0, #4]
 800e774:	4658      	mov	r0, fp
 800e776:	f7fe f8a7 	bl	800c8c8 <_Balloc>
 800e77a:	4682      	mov	sl, r0
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d13d      	bne.n	800e7fc <_dtoa_r+0x2e4>
 800e780:	4b1b      	ldr	r3, [pc, #108]	@ (800e7f0 <_dtoa_r+0x2d8>)
 800e782:	4602      	mov	r2, r0
 800e784:	f240 11af 	movw	r1, #431	@ 0x1af
 800e788:	e6dd      	b.n	800e546 <_dtoa_r+0x2e>
 800e78a:	2300      	movs	r3, #0
 800e78c:	e7e3      	b.n	800e756 <_dtoa_r+0x23e>
 800e78e:	2300      	movs	r3, #0
 800e790:	e7d6      	b.n	800e740 <_dtoa_r+0x228>
 800e792:	2401      	movs	r4, #1
 800e794:	2300      	movs	r3, #0
 800e796:	9309      	str	r3, [sp, #36]	@ 0x24
 800e798:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e79a:	f04f 33ff 	mov.w	r3, #4294967295
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	9303      	str	r3, [sp, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	2312      	movs	r3, #18
 800e7a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7a8:	e7db      	b.n	800e762 <_dtoa_r+0x24a>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7ae:	e7f4      	b.n	800e79a <_dtoa_r+0x282>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	9303      	str	r3, [sp, #12]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	e7f5      	b.n	800e7a6 <_dtoa_r+0x28e>
 800e7ba:	3101      	adds	r1, #1
 800e7bc:	0052      	lsls	r2, r2, #1
 800e7be:	e7d4      	b.n	800e76a <_dtoa_r+0x252>
 800e7c0:	636f4361 	.word	0x636f4361
 800e7c4:	3fd287a7 	.word	0x3fd287a7
 800e7c8:	8b60c8b3 	.word	0x8b60c8b3
 800e7cc:	3fc68a28 	.word	0x3fc68a28
 800e7d0:	509f79fb 	.word	0x509f79fb
 800e7d4:	3fd34413 	.word	0x3fd34413
 800e7d8:	08022e9c 	.word	0x08022e9c
 800e7dc:	08022fcd 	.word	0x08022fcd
 800e7e0:	7ff00000 	.word	0x7ff00000
 800e7e4:	08022f80 	.word	0x08022f80
 800e7e8:	3ff80000 	.word	0x3ff80000
 800e7ec:	080230d8 	.word	0x080230d8
 800e7f0:	08022e01 	.word	0x08022e01
 800e7f4:	08022fc9 	.word	0x08022fc9
 800e7f8:	08022f7f 	.word	0x08022f7f
 800e7fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e800:	6018      	str	r0, [r3, #0]
 800e802:	9b03      	ldr	r3, [sp, #12]
 800e804:	2b0e      	cmp	r3, #14
 800e806:	f200 80a1 	bhi.w	800e94c <_dtoa_r+0x434>
 800e80a:	2c00      	cmp	r4, #0
 800e80c:	f000 809e 	beq.w	800e94c <_dtoa_r+0x434>
 800e810:	2f00      	cmp	r7, #0
 800e812:	dd33      	ble.n	800e87c <_dtoa_r+0x364>
 800e814:	4b9c      	ldr	r3, [pc, #624]	@ (800ea88 <_dtoa_r+0x570>)
 800e816:	f007 020f 	and.w	r2, r7, #15
 800e81a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e81e:	ed93 7b00 	vldr	d7, [r3]
 800e822:	05f8      	lsls	r0, r7, #23
 800e824:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e828:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e82c:	d516      	bpl.n	800e85c <_dtoa_r+0x344>
 800e82e:	4b97      	ldr	r3, [pc, #604]	@ (800ea8c <_dtoa_r+0x574>)
 800e830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e834:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e838:	f7f2 f810 	bl	800085c <__aeabi_ddiv>
 800e83c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e840:	f004 040f 	and.w	r4, r4, #15
 800e844:	2603      	movs	r6, #3
 800e846:	4d91      	ldr	r5, [pc, #580]	@ (800ea8c <_dtoa_r+0x574>)
 800e848:	b954      	cbnz	r4, 800e860 <_dtoa_r+0x348>
 800e84a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e84e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e852:	f7f2 f803 	bl	800085c <__aeabi_ddiv>
 800e856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e85a:	e028      	b.n	800e8ae <_dtoa_r+0x396>
 800e85c:	2602      	movs	r6, #2
 800e85e:	e7f2      	b.n	800e846 <_dtoa_r+0x32e>
 800e860:	07e1      	lsls	r1, r4, #31
 800e862:	d508      	bpl.n	800e876 <_dtoa_r+0x35e>
 800e864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e868:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e86c:	f7f1 fecc 	bl	8000608 <__aeabi_dmul>
 800e870:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e874:	3601      	adds	r6, #1
 800e876:	1064      	asrs	r4, r4, #1
 800e878:	3508      	adds	r5, #8
 800e87a:	e7e5      	b.n	800e848 <_dtoa_r+0x330>
 800e87c:	f000 80af 	beq.w	800e9de <_dtoa_r+0x4c6>
 800e880:	427c      	negs	r4, r7
 800e882:	4b81      	ldr	r3, [pc, #516]	@ (800ea88 <_dtoa_r+0x570>)
 800e884:	4d81      	ldr	r5, [pc, #516]	@ (800ea8c <_dtoa_r+0x574>)
 800e886:	f004 020f 	and.w	r2, r4, #15
 800e88a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e896:	f7f1 feb7 	bl	8000608 <__aeabi_dmul>
 800e89a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e89e:	1124      	asrs	r4, r4, #4
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	2602      	movs	r6, #2
 800e8a4:	2c00      	cmp	r4, #0
 800e8a6:	f040 808f 	bne.w	800e9c8 <_dtoa_r+0x4b0>
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1d3      	bne.n	800e856 <_dtoa_r+0x33e>
 800e8ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 8094 	beq.w	800e9e2 <_dtoa_r+0x4ca>
 800e8ba:	4b75      	ldr	r3, [pc, #468]	@ (800ea90 <_dtoa_r+0x578>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	4620      	mov	r0, r4
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	f7f2 f913 	bl	8000aec <__aeabi_dcmplt>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	f000 808b 	beq.w	800e9e2 <_dtoa_r+0x4ca>
 800e8cc:	9b03      	ldr	r3, [sp, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f000 8087 	beq.w	800e9e2 <_dtoa_r+0x4ca>
 800e8d4:	9b00      	ldr	r3, [sp, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	dd34      	ble.n	800e944 <_dtoa_r+0x42c>
 800e8da:	1e7b      	subs	r3, r7, #1
 800e8dc:	9306      	str	r3, [sp, #24]
 800e8de:	4620      	mov	r0, r4
 800e8e0:	4b6c      	ldr	r3, [pc, #432]	@ (800ea94 <_dtoa_r+0x57c>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	f7f1 fe8f 	bl	8000608 <__aeabi_dmul>
 800e8ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8ee:	9c00      	ldr	r4, [sp, #0]
 800e8f0:	3601      	adds	r6, #1
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f7f1 fe1e 	bl	8000534 <__aeabi_i2d>
 800e8f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8fc:	f7f1 fe84 	bl	8000608 <__aeabi_dmul>
 800e900:	4b65      	ldr	r3, [pc, #404]	@ (800ea98 <_dtoa_r+0x580>)
 800e902:	2200      	movs	r2, #0
 800e904:	f7f1 fcca 	bl	800029c <__adddf3>
 800e908:	4605      	mov	r5, r0
 800e90a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e90e:	2c00      	cmp	r4, #0
 800e910:	d16a      	bne.n	800e9e8 <_dtoa_r+0x4d0>
 800e912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e916:	4b61      	ldr	r3, [pc, #388]	@ (800ea9c <_dtoa_r+0x584>)
 800e918:	2200      	movs	r2, #0
 800e91a:	f7f1 fcbd 	bl	8000298 <__aeabi_dsub>
 800e91e:	4602      	mov	r2, r0
 800e920:	460b      	mov	r3, r1
 800e922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e926:	462a      	mov	r2, r5
 800e928:	4633      	mov	r3, r6
 800e92a:	f7f2 f8fd 	bl	8000b28 <__aeabi_dcmpgt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	f040 8287 	bne.w	800ee42 <_dtoa_r+0x92a>
 800e934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e938:	462a      	mov	r2, r5
 800e93a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e93e:	f7f2 f8d5 	bl	8000aec <__aeabi_dcmplt>
 800e942:	bb38      	cbnz	r0, 800e994 <_dtoa_r+0x47c>
 800e944:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e948:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e94c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f2c0 8158 	blt.w	800ec04 <_dtoa_r+0x6ec>
 800e954:	2f0e      	cmp	r7, #14
 800e956:	f300 8155 	bgt.w	800ec04 <_dtoa_r+0x6ec>
 800e95a:	4b4b      	ldr	r3, [pc, #300]	@ (800ea88 <_dtoa_r+0x570>)
 800e95c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e960:	ed93 7b00 	vldr	d7, [r3]
 800e964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e966:	2b00      	cmp	r3, #0
 800e968:	ed8d 7b00 	vstr	d7, [sp]
 800e96c:	f280 80e5 	bge.w	800eb3a <_dtoa_r+0x622>
 800e970:	9b03      	ldr	r3, [sp, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	f300 80e1 	bgt.w	800eb3a <_dtoa_r+0x622>
 800e978:	d10c      	bne.n	800e994 <_dtoa_r+0x47c>
 800e97a:	4b48      	ldr	r3, [pc, #288]	@ (800ea9c <_dtoa_r+0x584>)
 800e97c:	2200      	movs	r2, #0
 800e97e:	ec51 0b17 	vmov	r0, r1, d7
 800e982:	f7f1 fe41 	bl	8000608 <__aeabi_dmul>
 800e986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e98a:	f7f2 f8c3 	bl	8000b14 <__aeabi_dcmpge>
 800e98e:	2800      	cmp	r0, #0
 800e990:	f000 8255 	beq.w	800ee3e <_dtoa_r+0x926>
 800e994:	2400      	movs	r4, #0
 800e996:	4625      	mov	r5, r4
 800e998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e99a:	43db      	mvns	r3, r3
 800e99c:	9306      	str	r3, [sp, #24]
 800e99e:	4656      	mov	r6, sl
 800e9a0:	2700      	movs	r7, #0
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	4658      	mov	r0, fp
 800e9a6:	f7fd ffcf 	bl	800c948 <_Bfree>
 800e9aa:	2d00      	cmp	r5, #0
 800e9ac:	f000 80bd 	beq.w	800eb2a <_dtoa_r+0x612>
 800e9b0:	b12f      	cbz	r7, 800e9be <_dtoa_r+0x4a6>
 800e9b2:	42af      	cmp	r7, r5
 800e9b4:	d003      	beq.n	800e9be <_dtoa_r+0x4a6>
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	4658      	mov	r0, fp
 800e9ba:	f7fd ffc5 	bl	800c948 <_Bfree>
 800e9be:	4629      	mov	r1, r5
 800e9c0:	4658      	mov	r0, fp
 800e9c2:	f7fd ffc1 	bl	800c948 <_Bfree>
 800e9c6:	e0b0      	b.n	800eb2a <_dtoa_r+0x612>
 800e9c8:	07e2      	lsls	r2, r4, #31
 800e9ca:	d505      	bpl.n	800e9d8 <_dtoa_r+0x4c0>
 800e9cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9d0:	f7f1 fe1a 	bl	8000608 <__aeabi_dmul>
 800e9d4:	3601      	adds	r6, #1
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	1064      	asrs	r4, r4, #1
 800e9da:	3508      	adds	r5, #8
 800e9dc:	e762      	b.n	800e8a4 <_dtoa_r+0x38c>
 800e9de:	2602      	movs	r6, #2
 800e9e0:	e765      	b.n	800e8ae <_dtoa_r+0x396>
 800e9e2:	9c03      	ldr	r4, [sp, #12]
 800e9e4:	9706      	str	r7, [sp, #24]
 800e9e6:	e784      	b.n	800e8f2 <_dtoa_r+0x3da>
 800e9e8:	4b27      	ldr	r3, [pc, #156]	@ (800ea88 <_dtoa_r+0x570>)
 800e9ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9f4:	4454      	add	r4, sl
 800e9f6:	2900      	cmp	r1, #0
 800e9f8:	d054      	beq.n	800eaa4 <_dtoa_r+0x58c>
 800e9fa:	4929      	ldr	r1, [pc, #164]	@ (800eaa0 <_dtoa_r+0x588>)
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	f7f1 ff2d 	bl	800085c <__aeabi_ddiv>
 800ea02:	4633      	mov	r3, r6
 800ea04:	462a      	mov	r2, r5
 800ea06:	f7f1 fc47 	bl	8000298 <__aeabi_dsub>
 800ea0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea0e:	4656      	mov	r6, sl
 800ea10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea14:	f7f2 f8a8 	bl	8000b68 <__aeabi_d2iz>
 800ea18:	4605      	mov	r5, r0
 800ea1a:	f7f1 fd8b 	bl	8000534 <__aeabi_i2d>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	460b      	mov	r3, r1
 800ea22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea26:	f7f1 fc37 	bl	8000298 <__aeabi_dsub>
 800ea2a:	3530      	adds	r5, #48	@ 0x30
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea34:	f806 5b01 	strb.w	r5, [r6], #1
 800ea38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea3c:	f7f2 f856 	bl	8000aec <__aeabi_dcmplt>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d172      	bne.n	800eb2a <_dtoa_r+0x612>
 800ea44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea48:	4911      	ldr	r1, [pc, #68]	@ (800ea90 <_dtoa_r+0x578>)
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	f7f1 fc24 	bl	8000298 <__aeabi_dsub>
 800ea50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea54:	f7f2 f84a 	bl	8000aec <__aeabi_dcmplt>
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	f040 80b4 	bne.w	800ebc6 <_dtoa_r+0x6ae>
 800ea5e:	42a6      	cmp	r6, r4
 800ea60:	f43f af70 	beq.w	800e944 <_dtoa_r+0x42c>
 800ea64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea68:	4b0a      	ldr	r3, [pc, #40]	@ (800ea94 <_dtoa_r+0x57c>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f7f1 fdcc 	bl	8000608 <__aeabi_dmul>
 800ea70:	4b08      	ldr	r3, [pc, #32]	@ (800ea94 <_dtoa_r+0x57c>)
 800ea72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea76:	2200      	movs	r2, #0
 800ea78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea7c:	f7f1 fdc4 	bl	8000608 <__aeabi_dmul>
 800ea80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea84:	e7c4      	b.n	800ea10 <_dtoa_r+0x4f8>
 800ea86:	bf00      	nop
 800ea88:	080230d8 	.word	0x080230d8
 800ea8c:	080230b0 	.word	0x080230b0
 800ea90:	3ff00000 	.word	0x3ff00000
 800ea94:	40240000 	.word	0x40240000
 800ea98:	401c0000 	.word	0x401c0000
 800ea9c:	40140000 	.word	0x40140000
 800eaa0:	3fe00000 	.word	0x3fe00000
 800eaa4:	4631      	mov	r1, r6
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f7f1 fdae 	bl	8000608 <__aeabi_dmul>
 800eaac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eab0:	9415      	str	r4, [sp, #84]	@ 0x54
 800eab2:	4656      	mov	r6, sl
 800eab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eab8:	f7f2 f856 	bl	8000b68 <__aeabi_d2iz>
 800eabc:	4605      	mov	r5, r0
 800eabe:	f7f1 fd39 	bl	8000534 <__aeabi_i2d>
 800eac2:	4602      	mov	r2, r0
 800eac4:	460b      	mov	r3, r1
 800eac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaca:	f7f1 fbe5 	bl	8000298 <__aeabi_dsub>
 800eace:	3530      	adds	r5, #48	@ 0x30
 800ead0:	f806 5b01 	strb.w	r5, [r6], #1
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	42a6      	cmp	r6, r4
 800eada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eade:	f04f 0200 	mov.w	r2, #0
 800eae2:	d124      	bne.n	800eb2e <_dtoa_r+0x616>
 800eae4:	4bab      	ldr	r3, [pc, #684]	@ (800ed94 <_dtoa_r+0x87c>)
 800eae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eaea:	f7f1 fbd7 	bl	800029c <__adddf3>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaf6:	f7f2 f817 	bl	8000b28 <__aeabi_dcmpgt>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d163      	bne.n	800ebc6 <_dtoa_r+0x6ae>
 800eafe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb02:	49a4      	ldr	r1, [pc, #656]	@ (800ed94 <_dtoa_r+0x87c>)
 800eb04:	2000      	movs	r0, #0
 800eb06:	f7f1 fbc7 	bl	8000298 <__aeabi_dsub>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb12:	f7f1 ffeb 	bl	8000aec <__aeabi_dcmplt>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f43f af14 	beq.w	800e944 <_dtoa_r+0x42c>
 800eb1c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eb1e:	1e73      	subs	r3, r6, #1
 800eb20:	9315      	str	r3, [sp, #84]	@ 0x54
 800eb22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb26:	2b30      	cmp	r3, #48	@ 0x30
 800eb28:	d0f8      	beq.n	800eb1c <_dtoa_r+0x604>
 800eb2a:	9f06      	ldr	r7, [sp, #24]
 800eb2c:	e03b      	b.n	800eba6 <_dtoa_r+0x68e>
 800eb2e:	4b9a      	ldr	r3, [pc, #616]	@ (800ed98 <_dtoa_r+0x880>)
 800eb30:	f7f1 fd6a 	bl	8000608 <__aeabi_dmul>
 800eb34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb38:	e7bc      	b.n	800eab4 <_dtoa_r+0x59c>
 800eb3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eb3e:	4656      	mov	r6, sl
 800eb40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb44:	4620      	mov	r0, r4
 800eb46:	4629      	mov	r1, r5
 800eb48:	f7f1 fe88 	bl	800085c <__aeabi_ddiv>
 800eb4c:	f7f2 f80c 	bl	8000b68 <__aeabi_d2iz>
 800eb50:	4680      	mov	r8, r0
 800eb52:	f7f1 fcef 	bl	8000534 <__aeabi_i2d>
 800eb56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb5a:	f7f1 fd55 	bl	8000608 <__aeabi_dmul>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	4620      	mov	r0, r4
 800eb64:	4629      	mov	r1, r5
 800eb66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb6a:	f7f1 fb95 	bl	8000298 <__aeabi_dsub>
 800eb6e:	f806 4b01 	strb.w	r4, [r6], #1
 800eb72:	9d03      	ldr	r5, [sp, #12]
 800eb74:	eba6 040a 	sub.w	r4, r6, sl
 800eb78:	42a5      	cmp	r5, r4
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	d134      	bne.n	800ebea <_dtoa_r+0x6d2>
 800eb80:	f7f1 fb8c 	bl	800029c <__adddf3>
 800eb84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb88:	4604      	mov	r4, r0
 800eb8a:	460d      	mov	r5, r1
 800eb8c:	f7f1 ffcc 	bl	8000b28 <__aeabi_dcmpgt>
 800eb90:	b9c0      	cbnz	r0, 800ebc4 <_dtoa_r+0x6ac>
 800eb92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb96:	4620      	mov	r0, r4
 800eb98:	4629      	mov	r1, r5
 800eb9a:	f7f1 ff9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb9e:	b110      	cbz	r0, 800eba6 <_dtoa_r+0x68e>
 800eba0:	f018 0f01 	tst.w	r8, #1
 800eba4:	d10e      	bne.n	800ebc4 <_dtoa_r+0x6ac>
 800eba6:	4649      	mov	r1, r9
 800eba8:	4658      	mov	r0, fp
 800ebaa:	f7fd fecd 	bl	800c948 <_Bfree>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	7033      	strb	r3, [r6, #0]
 800ebb2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ebb4:	3701      	adds	r7, #1
 800ebb6:	601f      	str	r7, [r3, #0]
 800ebb8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f000 823c 	beq.w	800f038 <_dtoa_r+0xb20>
 800ebc0:	601e      	str	r6, [r3, #0]
 800ebc2:	e239      	b.n	800f038 <_dtoa_r+0xb20>
 800ebc4:	9706      	str	r7, [sp, #24]
 800ebc6:	4633      	mov	r3, r6
 800ebc8:	461e      	mov	r6, r3
 800ebca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebce:	2a39      	cmp	r2, #57	@ 0x39
 800ebd0:	d107      	bne.n	800ebe2 <_dtoa_r+0x6ca>
 800ebd2:	459a      	cmp	sl, r3
 800ebd4:	d1f8      	bne.n	800ebc8 <_dtoa_r+0x6b0>
 800ebd6:	9a06      	ldr	r2, [sp, #24]
 800ebd8:	3201      	adds	r2, #1
 800ebda:	9206      	str	r2, [sp, #24]
 800ebdc:	2230      	movs	r2, #48	@ 0x30
 800ebde:	f88a 2000 	strb.w	r2, [sl]
 800ebe2:	781a      	ldrb	r2, [r3, #0]
 800ebe4:	3201      	adds	r2, #1
 800ebe6:	701a      	strb	r2, [r3, #0]
 800ebe8:	e79f      	b.n	800eb2a <_dtoa_r+0x612>
 800ebea:	4b6b      	ldr	r3, [pc, #428]	@ (800ed98 <_dtoa_r+0x880>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	f7f1 fd0b 	bl	8000608 <__aeabi_dmul>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	460d      	mov	r5, r1
 800ebfa:	f7f1 ff6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d09e      	beq.n	800eb40 <_dtoa_r+0x628>
 800ec02:	e7d0      	b.n	800eba6 <_dtoa_r+0x68e>
 800ec04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ec06:	2a00      	cmp	r2, #0
 800ec08:	f000 80e1 	beq.w	800edce <_dtoa_r+0x8b6>
 800ec0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec0e:	2a01      	cmp	r2, #1
 800ec10:	f300 80c4 	bgt.w	800ed9c <_dtoa_r+0x884>
 800ec14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	f000 80b7 	beq.w	800ed8a <_dtoa_r+0x872>
 800ec1c:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec20:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec22:	4646      	mov	r6, r8
 800ec24:	9a08      	ldr	r2, [sp, #32]
 800ec26:	2101      	movs	r1, #1
 800ec28:	441a      	add	r2, r3
 800ec2a:	4658      	mov	r0, fp
 800ec2c:	4498      	add	r8, r3
 800ec2e:	9208      	str	r2, [sp, #32]
 800ec30:	f7fd ff88 	bl	800cb44 <__i2b>
 800ec34:	4605      	mov	r5, r0
 800ec36:	b15e      	cbz	r6, 800ec50 <_dtoa_r+0x738>
 800ec38:	9b08      	ldr	r3, [sp, #32]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	dd08      	ble.n	800ec50 <_dtoa_r+0x738>
 800ec3e:	42b3      	cmp	r3, r6
 800ec40:	9a08      	ldr	r2, [sp, #32]
 800ec42:	bfa8      	it	ge
 800ec44:	4633      	movge	r3, r6
 800ec46:	eba8 0803 	sub.w	r8, r8, r3
 800ec4a:	1af6      	subs	r6, r6, r3
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	9308      	str	r3, [sp, #32]
 800ec50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec52:	b1f3      	cbz	r3, 800ec92 <_dtoa_r+0x77a>
 800ec54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 80bd 	beq.w	800edd6 <_dtoa_r+0x8be>
 800ec5c:	b18c      	cbz	r4, 800ec82 <_dtoa_r+0x76a>
 800ec5e:	4629      	mov	r1, r5
 800ec60:	4622      	mov	r2, r4
 800ec62:	4658      	mov	r0, fp
 800ec64:	f7fe f826 	bl	800ccb4 <__pow5mult>
 800ec68:	464a      	mov	r2, r9
 800ec6a:	4601      	mov	r1, r0
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	4658      	mov	r0, fp
 800ec70:	f7fd ff7e 	bl	800cb70 <__multiply>
 800ec74:	4649      	mov	r1, r9
 800ec76:	9006      	str	r0, [sp, #24]
 800ec78:	4658      	mov	r0, fp
 800ec7a:	f7fd fe65 	bl	800c948 <_Bfree>
 800ec7e:	9b06      	ldr	r3, [sp, #24]
 800ec80:	4699      	mov	r9, r3
 800ec82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec84:	1b1a      	subs	r2, r3, r4
 800ec86:	d004      	beq.n	800ec92 <_dtoa_r+0x77a>
 800ec88:	4649      	mov	r1, r9
 800ec8a:	4658      	mov	r0, fp
 800ec8c:	f7fe f812 	bl	800ccb4 <__pow5mult>
 800ec90:	4681      	mov	r9, r0
 800ec92:	2101      	movs	r1, #1
 800ec94:	4658      	mov	r0, fp
 800ec96:	f7fd ff55 	bl	800cb44 <__i2b>
 800ec9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 81ce 	beq.w	800f040 <_dtoa_r+0xb28>
 800eca4:	461a      	mov	r2, r3
 800eca6:	4601      	mov	r1, r0
 800eca8:	4658      	mov	r0, fp
 800ecaa:	f7fe f803 	bl	800ccb4 <__pow5mult>
 800ecae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	f300 8095 	bgt.w	800ede2 <_dtoa_r+0x8ca>
 800ecb8:	9b04      	ldr	r3, [sp, #16]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f040 808d 	bne.w	800edda <_dtoa_r+0x8c2>
 800ecc0:	9b05      	ldr	r3, [sp, #20]
 800ecc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f040 8089 	bne.w	800edde <_dtoa_r+0x8c6>
 800eccc:	9b05      	ldr	r3, [sp, #20]
 800ecce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ecd2:	0d1b      	lsrs	r3, r3, #20
 800ecd4:	051b      	lsls	r3, r3, #20
 800ecd6:	b12b      	cbz	r3, 800ece4 <_dtoa_r+0x7cc>
 800ecd8:	9b08      	ldr	r3, [sp, #32]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	9308      	str	r3, [sp, #32]
 800ecde:	f108 0801 	add.w	r8, r8, #1
 800ece2:	2301      	movs	r3, #1
 800ece4:	930a      	str	r3, [sp, #40]	@ 0x28
 800ece6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f000 81af 	beq.w	800f04c <_dtoa_r+0xb34>
 800ecee:	6923      	ldr	r3, [r4, #16]
 800ecf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecf4:	6918      	ldr	r0, [r3, #16]
 800ecf6:	f7fd fed9 	bl	800caac <__hi0bits>
 800ecfa:	f1c0 0020 	rsb	r0, r0, #32
 800ecfe:	9b08      	ldr	r3, [sp, #32]
 800ed00:	4418      	add	r0, r3
 800ed02:	f010 001f 	ands.w	r0, r0, #31
 800ed06:	d077      	beq.n	800edf8 <_dtoa_r+0x8e0>
 800ed08:	f1c0 0320 	rsb	r3, r0, #32
 800ed0c:	2b04      	cmp	r3, #4
 800ed0e:	dd6b      	ble.n	800ede8 <_dtoa_r+0x8d0>
 800ed10:	9b08      	ldr	r3, [sp, #32]
 800ed12:	f1c0 001c 	rsb	r0, r0, #28
 800ed16:	4403      	add	r3, r0
 800ed18:	4480      	add	r8, r0
 800ed1a:	4406      	add	r6, r0
 800ed1c:	9308      	str	r3, [sp, #32]
 800ed1e:	f1b8 0f00 	cmp.w	r8, #0
 800ed22:	dd05      	ble.n	800ed30 <_dtoa_r+0x818>
 800ed24:	4649      	mov	r1, r9
 800ed26:	4642      	mov	r2, r8
 800ed28:	4658      	mov	r0, fp
 800ed2a:	f7fe f81d 	bl	800cd68 <__lshift>
 800ed2e:	4681      	mov	r9, r0
 800ed30:	9b08      	ldr	r3, [sp, #32]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	dd05      	ble.n	800ed42 <_dtoa_r+0x82a>
 800ed36:	4621      	mov	r1, r4
 800ed38:	461a      	mov	r2, r3
 800ed3a:	4658      	mov	r0, fp
 800ed3c:	f7fe f814 	bl	800cd68 <__lshift>
 800ed40:	4604      	mov	r4, r0
 800ed42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d059      	beq.n	800edfc <_dtoa_r+0x8e4>
 800ed48:	4621      	mov	r1, r4
 800ed4a:	4648      	mov	r0, r9
 800ed4c:	f7fe f878 	bl	800ce40 <__mcmp>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	da53      	bge.n	800edfc <_dtoa_r+0x8e4>
 800ed54:	1e7b      	subs	r3, r7, #1
 800ed56:	9306      	str	r3, [sp, #24]
 800ed58:	4649      	mov	r1, r9
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	220a      	movs	r2, #10
 800ed5e:	4658      	mov	r0, fp
 800ed60:	f7fd fe14 	bl	800c98c <__multadd>
 800ed64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed66:	4681      	mov	r9, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 8171 	beq.w	800f050 <_dtoa_r+0xb38>
 800ed6e:	2300      	movs	r3, #0
 800ed70:	4629      	mov	r1, r5
 800ed72:	220a      	movs	r2, #10
 800ed74:	4658      	mov	r0, fp
 800ed76:	f7fd fe09 	bl	800c98c <__multadd>
 800ed7a:	9b00      	ldr	r3, [sp, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	4605      	mov	r5, r0
 800ed80:	dc67      	bgt.n	800ee52 <_dtoa_r+0x93a>
 800ed82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	dc41      	bgt.n	800ee0c <_dtoa_r+0x8f4>
 800ed88:	e063      	b.n	800ee52 <_dtoa_r+0x93a>
 800ed8a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ed8c:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ed90:	e746      	b.n	800ec20 <_dtoa_r+0x708>
 800ed92:	bf00      	nop
 800ed94:	3fe00000 	.word	0x3fe00000
 800ed98:	40240000 	.word	0x40240000
 800ed9c:	9b03      	ldr	r3, [sp, #12]
 800ed9e:	1e5c      	subs	r4, r3, #1
 800eda0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eda2:	42a3      	cmp	r3, r4
 800eda4:	db09      	blt.n	800edba <_dtoa_r+0x8a2>
 800eda6:	1b1c      	subs	r4, r3, r4
 800eda8:	9b03      	ldr	r3, [sp, #12]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f6bf af39 	bge.w	800ec22 <_dtoa_r+0x70a>
 800edb0:	9b03      	ldr	r3, [sp, #12]
 800edb2:	eba8 0603 	sub.w	r6, r8, r3
 800edb6:	2300      	movs	r3, #0
 800edb8:	e734      	b.n	800ec24 <_dtoa_r+0x70c>
 800edba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edbc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800edbe:	940a      	str	r4, [sp, #40]	@ 0x28
 800edc0:	1ae3      	subs	r3, r4, r3
 800edc2:	441a      	add	r2, r3
 800edc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800edc6:	9b03      	ldr	r3, [sp, #12]
 800edc8:	4646      	mov	r6, r8
 800edca:	2400      	movs	r4, #0
 800edcc:	e72a      	b.n	800ec24 <_dtoa_r+0x70c>
 800edce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800edd0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800edd2:	4646      	mov	r6, r8
 800edd4:	e72f      	b.n	800ec36 <_dtoa_r+0x71e>
 800edd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800edd8:	e756      	b.n	800ec88 <_dtoa_r+0x770>
 800edda:	2300      	movs	r3, #0
 800eddc:	e782      	b.n	800ece4 <_dtoa_r+0x7cc>
 800edde:	9b04      	ldr	r3, [sp, #16]
 800ede0:	e780      	b.n	800ece4 <_dtoa_r+0x7cc>
 800ede2:	2300      	movs	r3, #0
 800ede4:	930a      	str	r3, [sp, #40]	@ 0x28
 800ede6:	e782      	b.n	800ecee <_dtoa_r+0x7d6>
 800ede8:	d099      	beq.n	800ed1e <_dtoa_r+0x806>
 800edea:	9a08      	ldr	r2, [sp, #32]
 800edec:	331c      	adds	r3, #28
 800edee:	441a      	add	r2, r3
 800edf0:	4498      	add	r8, r3
 800edf2:	441e      	add	r6, r3
 800edf4:	9208      	str	r2, [sp, #32]
 800edf6:	e792      	b.n	800ed1e <_dtoa_r+0x806>
 800edf8:	4603      	mov	r3, r0
 800edfa:	e7f6      	b.n	800edea <_dtoa_r+0x8d2>
 800edfc:	9b03      	ldr	r3, [sp, #12]
 800edfe:	9706      	str	r7, [sp, #24]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	dc20      	bgt.n	800ee46 <_dtoa_r+0x92e>
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	dd1e      	ble.n	800ee4a <_dtoa_r+0x932>
 800ee0c:	9b00      	ldr	r3, [sp, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f47f adc2 	bne.w	800e998 <_dtoa_r+0x480>
 800ee14:	4621      	mov	r1, r4
 800ee16:	2205      	movs	r2, #5
 800ee18:	4658      	mov	r0, fp
 800ee1a:	f7fd fdb7 	bl	800c98c <__multadd>
 800ee1e:	4601      	mov	r1, r0
 800ee20:	4604      	mov	r4, r0
 800ee22:	4648      	mov	r0, r9
 800ee24:	f7fe f80c 	bl	800ce40 <__mcmp>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	f77f adb5 	ble.w	800e998 <_dtoa_r+0x480>
 800ee2e:	4656      	mov	r6, sl
 800ee30:	2331      	movs	r3, #49	@ 0x31
 800ee32:	f806 3b01 	strb.w	r3, [r6], #1
 800ee36:	9b06      	ldr	r3, [sp, #24]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	9306      	str	r3, [sp, #24]
 800ee3c:	e5b0      	b.n	800e9a0 <_dtoa_r+0x488>
 800ee3e:	9c03      	ldr	r4, [sp, #12]
 800ee40:	9706      	str	r7, [sp, #24]
 800ee42:	4625      	mov	r5, r4
 800ee44:	e7f3      	b.n	800ee2e <_dtoa_r+0x916>
 800ee46:	9b03      	ldr	r3, [sp, #12]
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f000 8103 	beq.w	800f058 <_dtoa_r+0xb40>
 800ee52:	2e00      	cmp	r6, #0
 800ee54:	dd05      	ble.n	800ee62 <_dtoa_r+0x94a>
 800ee56:	4629      	mov	r1, r5
 800ee58:	4632      	mov	r2, r6
 800ee5a:	4658      	mov	r0, fp
 800ee5c:	f7fd ff84 	bl	800cd68 <__lshift>
 800ee60:	4605      	mov	r5, r0
 800ee62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d05a      	beq.n	800ef1e <_dtoa_r+0xa06>
 800ee68:	6869      	ldr	r1, [r5, #4]
 800ee6a:	4658      	mov	r0, fp
 800ee6c:	f7fd fd2c 	bl	800c8c8 <_Balloc>
 800ee70:	4606      	mov	r6, r0
 800ee72:	b928      	cbnz	r0, 800ee80 <_dtoa_r+0x968>
 800ee74:	4b83      	ldr	r3, [pc, #524]	@ (800f084 <_dtoa_r+0xb6c>)
 800ee76:	4602      	mov	r2, r0
 800ee78:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ee7c:	f7ff bb63 	b.w	800e546 <_dtoa_r+0x2e>
 800ee80:	692a      	ldr	r2, [r5, #16]
 800ee82:	3202      	adds	r2, #2
 800ee84:	0092      	lsls	r2, r2, #2
 800ee86:	f105 010c 	add.w	r1, r5, #12
 800ee8a:	300c      	adds	r0, #12
 800ee8c:	f7fd f8c1 	bl	800c012 <memcpy>
 800ee90:	2201      	movs	r2, #1
 800ee92:	4631      	mov	r1, r6
 800ee94:	4658      	mov	r0, fp
 800ee96:	f7fd ff67 	bl	800cd68 <__lshift>
 800ee9a:	f10a 0301 	add.w	r3, sl, #1
 800ee9e:	9303      	str	r3, [sp, #12]
 800eea0:	9b00      	ldr	r3, [sp, #0]
 800eea2:	4453      	add	r3, sl
 800eea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eea6:	9b04      	ldr	r3, [sp, #16]
 800eea8:	f003 0301 	and.w	r3, r3, #1
 800eeac:	462f      	mov	r7, r5
 800eeae:	930a      	str	r3, [sp, #40]	@ 0x28
 800eeb0:	4605      	mov	r5, r0
 800eeb2:	9b03      	ldr	r3, [sp, #12]
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	4648      	mov	r0, r9
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	f7ff faa2 	bl	800e404 <quorem>
 800eec0:	4639      	mov	r1, r7
 800eec2:	9004      	str	r0, [sp, #16]
 800eec4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eec8:	4648      	mov	r0, r9
 800eeca:	f7fd ffb9 	bl	800ce40 <__mcmp>
 800eece:	462a      	mov	r2, r5
 800eed0:	9008      	str	r0, [sp, #32]
 800eed2:	4621      	mov	r1, r4
 800eed4:	4658      	mov	r0, fp
 800eed6:	f7fd ffcf 	bl	800ce78 <__mdiff>
 800eeda:	68c2      	ldr	r2, [r0, #12]
 800eedc:	4606      	mov	r6, r0
 800eede:	bb02      	cbnz	r2, 800ef22 <_dtoa_r+0xa0a>
 800eee0:	4601      	mov	r1, r0
 800eee2:	4648      	mov	r0, r9
 800eee4:	f7fd ffac 	bl	800ce40 <__mcmp>
 800eee8:	4602      	mov	r2, r0
 800eeea:	4631      	mov	r1, r6
 800eeec:	4658      	mov	r0, fp
 800eeee:	920e      	str	r2, [sp, #56]	@ 0x38
 800eef0:	f7fd fd2a 	bl	800c948 <_Bfree>
 800eef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eef8:	9e03      	ldr	r6, [sp, #12]
 800eefa:	ea42 0103 	orr.w	r1, r2, r3
 800eefe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef00:	4319      	orrs	r1, r3
 800ef02:	d110      	bne.n	800ef26 <_dtoa_r+0xa0e>
 800ef04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef08:	d029      	beq.n	800ef5e <_dtoa_r+0xa46>
 800ef0a:	9b08      	ldr	r3, [sp, #32]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	dd02      	ble.n	800ef16 <_dtoa_r+0x9fe>
 800ef10:	9b04      	ldr	r3, [sp, #16]
 800ef12:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ef16:	9b00      	ldr	r3, [sp, #0]
 800ef18:	f883 8000 	strb.w	r8, [r3]
 800ef1c:	e541      	b.n	800e9a2 <_dtoa_r+0x48a>
 800ef1e:	4628      	mov	r0, r5
 800ef20:	e7bb      	b.n	800ee9a <_dtoa_r+0x982>
 800ef22:	2201      	movs	r2, #1
 800ef24:	e7e1      	b.n	800eeea <_dtoa_r+0x9d2>
 800ef26:	9b08      	ldr	r3, [sp, #32]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	db04      	blt.n	800ef36 <_dtoa_r+0xa1e>
 800ef2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef2e:	430b      	orrs	r3, r1
 800ef30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef32:	430b      	orrs	r3, r1
 800ef34:	d120      	bne.n	800ef78 <_dtoa_r+0xa60>
 800ef36:	2a00      	cmp	r2, #0
 800ef38:	dded      	ble.n	800ef16 <_dtoa_r+0x9fe>
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	4658      	mov	r0, fp
 800ef40:	f7fd ff12 	bl	800cd68 <__lshift>
 800ef44:	4621      	mov	r1, r4
 800ef46:	4681      	mov	r9, r0
 800ef48:	f7fd ff7a 	bl	800ce40 <__mcmp>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	dc03      	bgt.n	800ef58 <_dtoa_r+0xa40>
 800ef50:	d1e1      	bne.n	800ef16 <_dtoa_r+0x9fe>
 800ef52:	f018 0f01 	tst.w	r8, #1
 800ef56:	d0de      	beq.n	800ef16 <_dtoa_r+0x9fe>
 800ef58:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef5c:	d1d8      	bne.n	800ef10 <_dtoa_r+0x9f8>
 800ef5e:	9a00      	ldr	r2, [sp, #0]
 800ef60:	2339      	movs	r3, #57	@ 0x39
 800ef62:	7013      	strb	r3, [r2, #0]
 800ef64:	4633      	mov	r3, r6
 800ef66:	461e      	mov	r6, r3
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ef6e:	2a39      	cmp	r2, #57	@ 0x39
 800ef70:	d051      	beq.n	800f016 <_dtoa_r+0xafe>
 800ef72:	3201      	adds	r2, #1
 800ef74:	701a      	strb	r2, [r3, #0]
 800ef76:	e514      	b.n	800e9a2 <_dtoa_r+0x48a>
 800ef78:	2a00      	cmp	r2, #0
 800ef7a:	dd07      	ble.n	800ef8c <_dtoa_r+0xa74>
 800ef7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef80:	d0ed      	beq.n	800ef5e <_dtoa_r+0xa46>
 800ef82:	9a00      	ldr	r2, [sp, #0]
 800ef84:	f108 0301 	add.w	r3, r8, #1
 800ef88:	7013      	strb	r3, [r2, #0]
 800ef8a:	e50a      	b.n	800e9a2 <_dtoa_r+0x48a>
 800ef8c:	9b03      	ldr	r3, [sp, #12]
 800ef8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef90:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d028      	beq.n	800efea <_dtoa_r+0xad2>
 800ef98:	4649      	mov	r1, r9
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	220a      	movs	r2, #10
 800ef9e:	4658      	mov	r0, fp
 800efa0:	f7fd fcf4 	bl	800c98c <__multadd>
 800efa4:	42af      	cmp	r7, r5
 800efa6:	4681      	mov	r9, r0
 800efa8:	f04f 0300 	mov.w	r3, #0
 800efac:	f04f 020a 	mov.w	r2, #10
 800efb0:	4639      	mov	r1, r7
 800efb2:	4658      	mov	r0, fp
 800efb4:	d107      	bne.n	800efc6 <_dtoa_r+0xaae>
 800efb6:	f7fd fce9 	bl	800c98c <__multadd>
 800efba:	4607      	mov	r7, r0
 800efbc:	4605      	mov	r5, r0
 800efbe:	9b03      	ldr	r3, [sp, #12]
 800efc0:	3301      	adds	r3, #1
 800efc2:	9303      	str	r3, [sp, #12]
 800efc4:	e775      	b.n	800eeb2 <_dtoa_r+0x99a>
 800efc6:	f7fd fce1 	bl	800c98c <__multadd>
 800efca:	4629      	mov	r1, r5
 800efcc:	4607      	mov	r7, r0
 800efce:	2300      	movs	r3, #0
 800efd0:	220a      	movs	r2, #10
 800efd2:	4658      	mov	r0, fp
 800efd4:	f7fd fcda 	bl	800c98c <__multadd>
 800efd8:	4605      	mov	r5, r0
 800efda:	e7f0      	b.n	800efbe <_dtoa_r+0xaa6>
 800efdc:	9b00      	ldr	r3, [sp, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bfcc      	ite	gt
 800efe2:	461e      	movgt	r6, r3
 800efe4:	2601      	movle	r6, #1
 800efe6:	4456      	add	r6, sl
 800efe8:	2700      	movs	r7, #0
 800efea:	4649      	mov	r1, r9
 800efec:	2201      	movs	r2, #1
 800efee:	4658      	mov	r0, fp
 800eff0:	f7fd feba 	bl	800cd68 <__lshift>
 800eff4:	4621      	mov	r1, r4
 800eff6:	4681      	mov	r9, r0
 800eff8:	f7fd ff22 	bl	800ce40 <__mcmp>
 800effc:	2800      	cmp	r0, #0
 800effe:	dcb1      	bgt.n	800ef64 <_dtoa_r+0xa4c>
 800f000:	d102      	bne.n	800f008 <_dtoa_r+0xaf0>
 800f002:	f018 0f01 	tst.w	r8, #1
 800f006:	d1ad      	bne.n	800ef64 <_dtoa_r+0xa4c>
 800f008:	4633      	mov	r3, r6
 800f00a:	461e      	mov	r6, r3
 800f00c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f010:	2a30      	cmp	r2, #48	@ 0x30
 800f012:	d0fa      	beq.n	800f00a <_dtoa_r+0xaf2>
 800f014:	e4c5      	b.n	800e9a2 <_dtoa_r+0x48a>
 800f016:	459a      	cmp	sl, r3
 800f018:	d1a5      	bne.n	800ef66 <_dtoa_r+0xa4e>
 800f01a:	9b06      	ldr	r3, [sp, #24]
 800f01c:	3301      	adds	r3, #1
 800f01e:	9306      	str	r3, [sp, #24]
 800f020:	2331      	movs	r3, #49	@ 0x31
 800f022:	f88a 3000 	strb.w	r3, [sl]
 800f026:	e4bc      	b.n	800e9a2 <_dtoa_r+0x48a>
 800f028:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f02a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f088 <_dtoa_r+0xb70>
 800f02e:	b11b      	cbz	r3, 800f038 <_dtoa_r+0xb20>
 800f030:	f10a 0308 	add.w	r3, sl, #8
 800f034:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	4650      	mov	r0, sl
 800f03a:	b019      	add	sp, #100	@ 0x64
 800f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f042:	2b01      	cmp	r3, #1
 800f044:	f77f ae38 	ble.w	800ecb8 <_dtoa_r+0x7a0>
 800f048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f04a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f04c:	2001      	movs	r0, #1
 800f04e:	e656      	b.n	800ecfe <_dtoa_r+0x7e6>
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	f77f aed7 	ble.w	800ee06 <_dtoa_r+0x8ee>
 800f058:	4656      	mov	r6, sl
 800f05a:	4621      	mov	r1, r4
 800f05c:	4648      	mov	r0, r9
 800f05e:	f7ff f9d1 	bl	800e404 <quorem>
 800f062:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f066:	f806 8b01 	strb.w	r8, [r6], #1
 800f06a:	9b00      	ldr	r3, [sp, #0]
 800f06c:	eba6 020a 	sub.w	r2, r6, sl
 800f070:	4293      	cmp	r3, r2
 800f072:	ddb3      	ble.n	800efdc <_dtoa_r+0xac4>
 800f074:	4649      	mov	r1, r9
 800f076:	2300      	movs	r3, #0
 800f078:	220a      	movs	r2, #10
 800f07a:	4658      	mov	r0, fp
 800f07c:	f7fd fc86 	bl	800c98c <__multadd>
 800f080:	4681      	mov	r9, r0
 800f082:	e7ea      	b.n	800f05a <_dtoa_r+0xb42>
 800f084:	08022e01 	.word	0x08022e01
 800f088:	08022fc0 	.word	0x08022fc0

0800f08c <malloc>:
 800f08c:	4b02      	ldr	r3, [pc, #8]	@ (800f098 <malloc+0xc>)
 800f08e:	4601      	mov	r1, r0
 800f090:	6818      	ldr	r0, [r3, #0]
 800f092:	f7fd bb7b 	b.w	800c78c <_malloc_r>
 800f096:	bf00      	nop
 800f098:	200002c8 	.word	0x200002c8

0800f09c <_realloc_r>:
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	4607      	mov	r7, r0
 800f0a2:	4614      	mov	r4, r2
 800f0a4:	460d      	mov	r5, r1
 800f0a6:	b921      	cbnz	r1, 800f0b2 <_realloc_r+0x16>
 800f0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ac:	4611      	mov	r1, r2
 800f0ae:	f7fd bb6d 	b.w	800c78c <_malloc_r>
 800f0b2:	b92a      	cbnz	r2, 800f0c0 <_realloc_r+0x24>
 800f0b4:	f7fc ffc4 	bl	800c040 <_free_r>
 800f0b8:	4625      	mov	r5, r4
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c0:	f000 f91f 	bl	800f302 <_malloc_usable_size_r>
 800f0c4:	4284      	cmp	r4, r0
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	d802      	bhi.n	800f0d0 <_realloc_r+0x34>
 800f0ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0ce:	d8f4      	bhi.n	800f0ba <_realloc_r+0x1e>
 800f0d0:	4621      	mov	r1, r4
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	f7fd fb5a 	bl	800c78c <_malloc_r>
 800f0d8:	4680      	mov	r8, r0
 800f0da:	b908      	cbnz	r0, 800f0e0 <_realloc_r+0x44>
 800f0dc:	4645      	mov	r5, r8
 800f0de:	e7ec      	b.n	800f0ba <_realloc_r+0x1e>
 800f0e0:	42b4      	cmp	r4, r6
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	4629      	mov	r1, r5
 800f0e6:	bf28      	it	cs
 800f0e8:	4632      	movcs	r2, r6
 800f0ea:	f7fc ff92 	bl	800c012 <memcpy>
 800f0ee:	4629      	mov	r1, r5
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7fc ffa5 	bl	800c040 <_free_r>
 800f0f6:	e7f1      	b.n	800f0dc <_realloc_r+0x40>

0800f0f8 <_strtol_l.isra.0>:
 800f0f8:	2b24      	cmp	r3, #36	@ 0x24
 800f0fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0fe:	4686      	mov	lr, r0
 800f100:	4690      	mov	r8, r2
 800f102:	d801      	bhi.n	800f108 <_strtol_l.isra.0+0x10>
 800f104:	2b01      	cmp	r3, #1
 800f106:	d106      	bne.n	800f116 <_strtol_l.isra.0+0x1e>
 800f108:	f7fc ff56 	bl	800bfb8 <__errno>
 800f10c:	2316      	movs	r3, #22
 800f10e:	6003      	str	r3, [r0, #0]
 800f110:	2000      	movs	r0, #0
 800f112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f116:	4834      	ldr	r0, [pc, #208]	@ (800f1e8 <_strtol_l.isra.0+0xf0>)
 800f118:	460d      	mov	r5, r1
 800f11a:	462a      	mov	r2, r5
 800f11c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f120:	5d06      	ldrb	r6, [r0, r4]
 800f122:	f016 0608 	ands.w	r6, r6, #8
 800f126:	d1f8      	bne.n	800f11a <_strtol_l.isra.0+0x22>
 800f128:	2c2d      	cmp	r4, #45	@ 0x2d
 800f12a:	d110      	bne.n	800f14e <_strtol_l.isra.0+0x56>
 800f12c:	782c      	ldrb	r4, [r5, #0]
 800f12e:	2601      	movs	r6, #1
 800f130:	1c95      	adds	r5, r2, #2
 800f132:	f033 0210 	bics.w	r2, r3, #16
 800f136:	d115      	bne.n	800f164 <_strtol_l.isra.0+0x6c>
 800f138:	2c30      	cmp	r4, #48	@ 0x30
 800f13a:	d10d      	bne.n	800f158 <_strtol_l.isra.0+0x60>
 800f13c:	782a      	ldrb	r2, [r5, #0]
 800f13e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f142:	2a58      	cmp	r2, #88	@ 0x58
 800f144:	d108      	bne.n	800f158 <_strtol_l.isra.0+0x60>
 800f146:	786c      	ldrb	r4, [r5, #1]
 800f148:	3502      	adds	r5, #2
 800f14a:	2310      	movs	r3, #16
 800f14c:	e00a      	b.n	800f164 <_strtol_l.isra.0+0x6c>
 800f14e:	2c2b      	cmp	r4, #43	@ 0x2b
 800f150:	bf04      	itt	eq
 800f152:	782c      	ldrbeq	r4, [r5, #0]
 800f154:	1c95      	addeq	r5, r2, #2
 800f156:	e7ec      	b.n	800f132 <_strtol_l.isra.0+0x3a>
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1f6      	bne.n	800f14a <_strtol_l.isra.0+0x52>
 800f15c:	2c30      	cmp	r4, #48	@ 0x30
 800f15e:	bf14      	ite	ne
 800f160:	230a      	movne	r3, #10
 800f162:	2308      	moveq	r3, #8
 800f164:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f168:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f16c:	2200      	movs	r2, #0
 800f16e:	fbbc f9f3 	udiv	r9, ip, r3
 800f172:	4610      	mov	r0, r2
 800f174:	fb03 ca19 	mls	sl, r3, r9, ip
 800f178:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f17c:	2f09      	cmp	r7, #9
 800f17e:	d80f      	bhi.n	800f1a0 <_strtol_l.isra.0+0xa8>
 800f180:	463c      	mov	r4, r7
 800f182:	42a3      	cmp	r3, r4
 800f184:	dd1b      	ble.n	800f1be <_strtol_l.isra.0+0xc6>
 800f186:	1c57      	adds	r7, r2, #1
 800f188:	d007      	beq.n	800f19a <_strtol_l.isra.0+0xa2>
 800f18a:	4581      	cmp	r9, r0
 800f18c:	d314      	bcc.n	800f1b8 <_strtol_l.isra.0+0xc0>
 800f18e:	d101      	bne.n	800f194 <_strtol_l.isra.0+0x9c>
 800f190:	45a2      	cmp	sl, r4
 800f192:	db11      	blt.n	800f1b8 <_strtol_l.isra.0+0xc0>
 800f194:	fb00 4003 	mla	r0, r0, r3, r4
 800f198:	2201      	movs	r2, #1
 800f19a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f19e:	e7eb      	b.n	800f178 <_strtol_l.isra.0+0x80>
 800f1a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f1a4:	2f19      	cmp	r7, #25
 800f1a6:	d801      	bhi.n	800f1ac <_strtol_l.isra.0+0xb4>
 800f1a8:	3c37      	subs	r4, #55	@ 0x37
 800f1aa:	e7ea      	b.n	800f182 <_strtol_l.isra.0+0x8a>
 800f1ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1b0:	2f19      	cmp	r7, #25
 800f1b2:	d804      	bhi.n	800f1be <_strtol_l.isra.0+0xc6>
 800f1b4:	3c57      	subs	r4, #87	@ 0x57
 800f1b6:	e7e4      	b.n	800f182 <_strtol_l.isra.0+0x8a>
 800f1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1bc:	e7ed      	b.n	800f19a <_strtol_l.isra.0+0xa2>
 800f1be:	1c53      	adds	r3, r2, #1
 800f1c0:	d108      	bne.n	800f1d4 <_strtol_l.isra.0+0xdc>
 800f1c2:	2322      	movs	r3, #34	@ 0x22
 800f1c4:	f8ce 3000 	str.w	r3, [lr]
 800f1c8:	4660      	mov	r0, ip
 800f1ca:	f1b8 0f00 	cmp.w	r8, #0
 800f1ce:	d0a0      	beq.n	800f112 <_strtol_l.isra.0+0x1a>
 800f1d0:	1e69      	subs	r1, r5, #1
 800f1d2:	e006      	b.n	800f1e2 <_strtol_l.isra.0+0xea>
 800f1d4:	b106      	cbz	r6, 800f1d8 <_strtol_l.isra.0+0xe0>
 800f1d6:	4240      	negs	r0, r0
 800f1d8:	f1b8 0f00 	cmp.w	r8, #0
 800f1dc:	d099      	beq.n	800f112 <_strtol_l.isra.0+0x1a>
 800f1de:	2a00      	cmp	r2, #0
 800f1e0:	d1f6      	bne.n	800f1d0 <_strtol_l.isra.0+0xd8>
 800f1e2:	f8c8 1000 	str.w	r1, [r8]
 800f1e6:	e794      	b.n	800f112 <_strtol_l.isra.0+0x1a>
 800f1e8:	080231a1 	.word	0x080231a1

0800f1ec <_strtol_r>:
 800f1ec:	f7ff bf84 	b.w	800f0f8 <_strtol_l.isra.0>

0800f1f0 <_strtoul_l.isra.0>:
 800f1f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	4e34      	ldr	r6, [pc, #208]	@ (800f2c8 <_strtoul_l.isra.0+0xd8>)
 800f1f6:	4686      	mov	lr, r0
 800f1f8:	460d      	mov	r5, r1
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f200:	5d37      	ldrb	r7, [r6, r4]
 800f202:	f017 0708 	ands.w	r7, r7, #8
 800f206:	d1f8      	bne.n	800f1fa <_strtoul_l.isra.0+0xa>
 800f208:	2c2d      	cmp	r4, #45	@ 0x2d
 800f20a:	d110      	bne.n	800f22e <_strtoul_l.isra.0+0x3e>
 800f20c:	782c      	ldrb	r4, [r5, #0]
 800f20e:	2701      	movs	r7, #1
 800f210:	1c85      	adds	r5, r0, #2
 800f212:	f033 0010 	bics.w	r0, r3, #16
 800f216:	d115      	bne.n	800f244 <_strtoul_l.isra.0+0x54>
 800f218:	2c30      	cmp	r4, #48	@ 0x30
 800f21a:	d10d      	bne.n	800f238 <_strtoul_l.isra.0+0x48>
 800f21c:	7828      	ldrb	r0, [r5, #0]
 800f21e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f222:	2858      	cmp	r0, #88	@ 0x58
 800f224:	d108      	bne.n	800f238 <_strtoul_l.isra.0+0x48>
 800f226:	786c      	ldrb	r4, [r5, #1]
 800f228:	3502      	adds	r5, #2
 800f22a:	2310      	movs	r3, #16
 800f22c:	e00a      	b.n	800f244 <_strtoul_l.isra.0+0x54>
 800f22e:	2c2b      	cmp	r4, #43	@ 0x2b
 800f230:	bf04      	itt	eq
 800f232:	782c      	ldrbeq	r4, [r5, #0]
 800f234:	1c85      	addeq	r5, r0, #2
 800f236:	e7ec      	b.n	800f212 <_strtoul_l.isra.0+0x22>
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1f6      	bne.n	800f22a <_strtoul_l.isra.0+0x3a>
 800f23c:	2c30      	cmp	r4, #48	@ 0x30
 800f23e:	bf14      	ite	ne
 800f240:	230a      	movne	r3, #10
 800f242:	2308      	moveq	r3, #8
 800f244:	f04f 38ff 	mov.w	r8, #4294967295
 800f248:	2600      	movs	r6, #0
 800f24a:	fbb8 f8f3 	udiv	r8, r8, r3
 800f24e:	fb03 f908 	mul.w	r9, r3, r8
 800f252:	ea6f 0909 	mvn.w	r9, r9
 800f256:	4630      	mov	r0, r6
 800f258:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f25c:	f1bc 0f09 	cmp.w	ip, #9
 800f260:	d810      	bhi.n	800f284 <_strtoul_l.isra.0+0x94>
 800f262:	4664      	mov	r4, ip
 800f264:	42a3      	cmp	r3, r4
 800f266:	dd1e      	ble.n	800f2a6 <_strtoul_l.isra.0+0xb6>
 800f268:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f26c:	d007      	beq.n	800f27e <_strtoul_l.isra.0+0x8e>
 800f26e:	4580      	cmp	r8, r0
 800f270:	d316      	bcc.n	800f2a0 <_strtoul_l.isra.0+0xb0>
 800f272:	d101      	bne.n	800f278 <_strtoul_l.isra.0+0x88>
 800f274:	45a1      	cmp	r9, r4
 800f276:	db13      	blt.n	800f2a0 <_strtoul_l.isra.0+0xb0>
 800f278:	fb00 4003 	mla	r0, r0, r3, r4
 800f27c:	2601      	movs	r6, #1
 800f27e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f282:	e7e9      	b.n	800f258 <_strtoul_l.isra.0+0x68>
 800f284:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f288:	f1bc 0f19 	cmp.w	ip, #25
 800f28c:	d801      	bhi.n	800f292 <_strtoul_l.isra.0+0xa2>
 800f28e:	3c37      	subs	r4, #55	@ 0x37
 800f290:	e7e8      	b.n	800f264 <_strtoul_l.isra.0+0x74>
 800f292:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f296:	f1bc 0f19 	cmp.w	ip, #25
 800f29a:	d804      	bhi.n	800f2a6 <_strtoul_l.isra.0+0xb6>
 800f29c:	3c57      	subs	r4, #87	@ 0x57
 800f29e:	e7e1      	b.n	800f264 <_strtoul_l.isra.0+0x74>
 800f2a0:	f04f 36ff 	mov.w	r6, #4294967295
 800f2a4:	e7eb      	b.n	800f27e <_strtoul_l.isra.0+0x8e>
 800f2a6:	1c73      	adds	r3, r6, #1
 800f2a8:	d106      	bne.n	800f2b8 <_strtoul_l.isra.0+0xc8>
 800f2aa:	2322      	movs	r3, #34	@ 0x22
 800f2ac:	f8ce 3000 	str.w	r3, [lr]
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	b932      	cbnz	r2, 800f2c2 <_strtoul_l.isra.0+0xd2>
 800f2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2b8:	b107      	cbz	r7, 800f2bc <_strtoul_l.isra.0+0xcc>
 800f2ba:	4240      	negs	r0, r0
 800f2bc:	2a00      	cmp	r2, #0
 800f2be:	d0f9      	beq.n	800f2b4 <_strtoul_l.isra.0+0xc4>
 800f2c0:	b106      	cbz	r6, 800f2c4 <_strtoul_l.isra.0+0xd4>
 800f2c2:	1e69      	subs	r1, r5, #1
 800f2c4:	6011      	str	r1, [r2, #0]
 800f2c6:	e7f5      	b.n	800f2b4 <_strtoul_l.isra.0+0xc4>
 800f2c8:	080231a1 	.word	0x080231a1

0800f2cc <_strtoul_r>:
 800f2cc:	f7ff bf90 	b.w	800f1f0 <_strtoul_l.isra.0>

0800f2d0 <fiprintf>:
 800f2d0:	b40e      	push	{r1, r2, r3}
 800f2d2:	b503      	push	{r0, r1, lr}
 800f2d4:	4601      	mov	r1, r0
 800f2d6:	ab03      	add	r3, sp, #12
 800f2d8:	4805      	ldr	r0, [pc, #20]	@ (800f2f0 <fiprintf+0x20>)
 800f2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2de:	6800      	ldr	r0, [r0, #0]
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	f000 f83f 	bl	800f364 <_vfiprintf_r>
 800f2e6:	b002      	add	sp, #8
 800f2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2ec:	b003      	add	sp, #12
 800f2ee:	4770      	bx	lr
 800f2f0:	200002c8 	.word	0x200002c8

0800f2f4 <abort>:
 800f2f4:	b508      	push	{r3, lr}
 800f2f6:	2006      	movs	r0, #6
 800f2f8:	f000 fa08 	bl	800f70c <raise>
 800f2fc:	2001      	movs	r0, #1
 800f2fe:	f7fb fd25 	bl	800ad4c <_exit>

0800f302 <_malloc_usable_size_r>:
 800f302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f306:	1f18      	subs	r0, r3, #4
 800f308:	2b00      	cmp	r3, #0
 800f30a:	bfbc      	itt	lt
 800f30c:	580b      	ldrlt	r3, [r1, r0]
 800f30e:	18c0      	addlt	r0, r0, r3
 800f310:	4770      	bx	lr

0800f312 <__sfputc_r>:
 800f312:	6893      	ldr	r3, [r2, #8]
 800f314:	3b01      	subs	r3, #1
 800f316:	2b00      	cmp	r3, #0
 800f318:	b410      	push	{r4}
 800f31a:	6093      	str	r3, [r2, #8]
 800f31c:	da08      	bge.n	800f330 <__sfputc_r+0x1e>
 800f31e:	6994      	ldr	r4, [r2, #24]
 800f320:	42a3      	cmp	r3, r4
 800f322:	db01      	blt.n	800f328 <__sfputc_r+0x16>
 800f324:	290a      	cmp	r1, #10
 800f326:	d103      	bne.n	800f330 <__sfputc_r+0x1e>
 800f328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f32c:	f000 b932 	b.w	800f594 <__swbuf_r>
 800f330:	6813      	ldr	r3, [r2, #0]
 800f332:	1c58      	adds	r0, r3, #1
 800f334:	6010      	str	r0, [r2, #0]
 800f336:	7019      	strb	r1, [r3, #0]
 800f338:	4608      	mov	r0, r1
 800f33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <__sfputs_r>:
 800f340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f342:	4606      	mov	r6, r0
 800f344:	460f      	mov	r7, r1
 800f346:	4614      	mov	r4, r2
 800f348:	18d5      	adds	r5, r2, r3
 800f34a:	42ac      	cmp	r4, r5
 800f34c:	d101      	bne.n	800f352 <__sfputs_r+0x12>
 800f34e:	2000      	movs	r0, #0
 800f350:	e007      	b.n	800f362 <__sfputs_r+0x22>
 800f352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f356:	463a      	mov	r2, r7
 800f358:	4630      	mov	r0, r6
 800f35a:	f7ff ffda 	bl	800f312 <__sfputc_r>
 800f35e:	1c43      	adds	r3, r0, #1
 800f360:	d1f3      	bne.n	800f34a <__sfputs_r+0xa>
 800f362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f364 <_vfiprintf_r>:
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	460d      	mov	r5, r1
 800f36a:	b09d      	sub	sp, #116	@ 0x74
 800f36c:	4614      	mov	r4, r2
 800f36e:	4698      	mov	r8, r3
 800f370:	4606      	mov	r6, r0
 800f372:	b118      	cbz	r0, 800f37c <_vfiprintf_r+0x18>
 800f374:	6a03      	ldr	r3, [r0, #32]
 800f376:	b90b      	cbnz	r3, 800f37c <_vfiprintf_r+0x18>
 800f378:	f7fc fca8 	bl	800bccc <__sinit>
 800f37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f37e:	07d9      	lsls	r1, r3, #31
 800f380:	d405      	bmi.n	800f38e <_vfiprintf_r+0x2a>
 800f382:	89ab      	ldrh	r3, [r5, #12]
 800f384:	059a      	lsls	r2, r3, #22
 800f386:	d402      	bmi.n	800f38e <_vfiprintf_r+0x2a>
 800f388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f38a:	f7fc fe40 	bl	800c00e <__retarget_lock_acquire_recursive>
 800f38e:	89ab      	ldrh	r3, [r5, #12]
 800f390:	071b      	lsls	r3, r3, #28
 800f392:	d501      	bpl.n	800f398 <_vfiprintf_r+0x34>
 800f394:	692b      	ldr	r3, [r5, #16]
 800f396:	b99b      	cbnz	r3, 800f3c0 <_vfiprintf_r+0x5c>
 800f398:	4629      	mov	r1, r5
 800f39a:	4630      	mov	r0, r6
 800f39c:	f000 f938 	bl	800f610 <__swsetup_r>
 800f3a0:	b170      	cbz	r0, 800f3c0 <_vfiprintf_r+0x5c>
 800f3a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3a4:	07dc      	lsls	r4, r3, #31
 800f3a6:	d504      	bpl.n	800f3b2 <_vfiprintf_r+0x4e>
 800f3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ac:	b01d      	add	sp, #116	@ 0x74
 800f3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b2:	89ab      	ldrh	r3, [r5, #12]
 800f3b4:	0598      	lsls	r0, r3, #22
 800f3b6:	d4f7      	bmi.n	800f3a8 <_vfiprintf_r+0x44>
 800f3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ba:	f7fc fe29 	bl	800c010 <__retarget_lock_release_recursive>
 800f3be:	e7f3      	b.n	800f3a8 <_vfiprintf_r+0x44>
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3c4:	2320      	movs	r3, #32
 800f3c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3ce:	2330      	movs	r3, #48	@ 0x30
 800f3d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f580 <_vfiprintf_r+0x21c>
 800f3d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3d8:	f04f 0901 	mov.w	r9, #1
 800f3dc:	4623      	mov	r3, r4
 800f3de:	469a      	mov	sl, r3
 800f3e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3e4:	b10a      	cbz	r2, 800f3ea <_vfiprintf_r+0x86>
 800f3e6:	2a25      	cmp	r2, #37	@ 0x25
 800f3e8:	d1f9      	bne.n	800f3de <_vfiprintf_r+0x7a>
 800f3ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f3ee:	d00b      	beq.n	800f408 <_vfiprintf_r+0xa4>
 800f3f0:	465b      	mov	r3, fp
 800f3f2:	4622      	mov	r2, r4
 800f3f4:	4629      	mov	r1, r5
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f7ff ffa2 	bl	800f340 <__sfputs_r>
 800f3fc:	3001      	adds	r0, #1
 800f3fe:	f000 80a7 	beq.w	800f550 <_vfiprintf_r+0x1ec>
 800f402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f404:	445a      	add	r2, fp
 800f406:	9209      	str	r2, [sp, #36]	@ 0x24
 800f408:	f89a 3000 	ldrb.w	r3, [sl]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f000 809f 	beq.w	800f550 <_vfiprintf_r+0x1ec>
 800f412:	2300      	movs	r3, #0
 800f414:	f04f 32ff 	mov.w	r2, #4294967295
 800f418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f41c:	f10a 0a01 	add.w	sl, sl, #1
 800f420:	9304      	str	r3, [sp, #16]
 800f422:	9307      	str	r3, [sp, #28]
 800f424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f428:	931a      	str	r3, [sp, #104]	@ 0x68
 800f42a:	4654      	mov	r4, sl
 800f42c:	2205      	movs	r2, #5
 800f42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f432:	4853      	ldr	r0, [pc, #332]	@ (800f580 <_vfiprintf_r+0x21c>)
 800f434:	f7f0 fedc 	bl	80001f0 <memchr>
 800f438:	9a04      	ldr	r2, [sp, #16]
 800f43a:	b9d8      	cbnz	r0, 800f474 <_vfiprintf_r+0x110>
 800f43c:	06d1      	lsls	r1, r2, #27
 800f43e:	bf44      	itt	mi
 800f440:	2320      	movmi	r3, #32
 800f442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f446:	0713      	lsls	r3, r2, #28
 800f448:	bf44      	itt	mi
 800f44a:	232b      	movmi	r3, #43	@ 0x2b
 800f44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f450:	f89a 3000 	ldrb.w	r3, [sl]
 800f454:	2b2a      	cmp	r3, #42	@ 0x2a
 800f456:	d015      	beq.n	800f484 <_vfiprintf_r+0x120>
 800f458:	9a07      	ldr	r2, [sp, #28]
 800f45a:	4654      	mov	r4, sl
 800f45c:	2000      	movs	r0, #0
 800f45e:	f04f 0c0a 	mov.w	ip, #10
 800f462:	4621      	mov	r1, r4
 800f464:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f468:	3b30      	subs	r3, #48	@ 0x30
 800f46a:	2b09      	cmp	r3, #9
 800f46c:	d94b      	bls.n	800f506 <_vfiprintf_r+0x1a2>
 800f46e:	b1b0      	cbz	r0, 800f49e <_vfiprintf_r+0x13a>
 800f470:	9207      	str	r2, [sp, #28]
 800f472:	e014      	b.n	800f49e <_vfiprintf_r+0x13a>
 800f474:	eba0 0308 	sub.w	r3, r0, r8
 800f478:	fa09 f303 	lsl.w	r3, r9, r3
 800f47c:	4313      	orrs	r3, r2
 800f47e:	9304      	str	r3, [sp, #16]
 800f480:	46a2      	mov	sl, r4
 800f482:	e7d2      	b.n	800f42a <_vfiprintf_r+0xc6>
 800f484:	9b03      	ldr	r3, [sp, #12]
 800f486:	1d19      	adds	r1, r3, #4
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	9103      	str	r1, [sp, #12]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	bfbb      	ittet	lt
 800f490:	425b      	neglt	r3, r3
 800f492:	f042 0202 	orrlt.w	r2, r2, #2
 800f496:	9307      	strge	r3, [sp, #28]
 800f498:	9307      	strlt	r3, [sp, #28]
 800f49a:	bfb8      	it	lt
 800f49c:	9204      	strlt	r2, [sp, #16]
 800f49e:	7823      	ldrb	r3, [r4, #0]
 800f4a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4a2:	d10a      	bne.n	800f4ba <_vfiprintf_r+0x156>
 800f4a4:	7863      	ldrb	r3, [r4, #1]
 800f4a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4a8:	d132      	bne.n	800f510 <_vfiprintf_r+0x1ac>
 800f4aa:	9b03      	ldr	r3, [sp, #12]
 800f4ac:	1d1a      	adds	r2, r3, #4
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	9203      	str	r2, [sp, #12]
 800f4b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4b6:	3402      	adds	r4, #2
 800f4b8:	9305      	str	r3, [sp, #20]
 800f4ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f590 <_vfiprintf_r+0x22c>
 800f4be:	7821      	ldrb	r1, [r4, #0]
 800f4c0:	2203      	movs	r2, #3
 800f4c2:	4650      	mov	r0, sl
 800f4c4:	f7f0 fe94 	bl	80001f0 <memchr>
 800f4c8:	b138      	cbz	r0, 800f4da <_vfiprintf_r+0x176>
 800f4ca:	9b04      	ldr	r3, [sp, #16]
 800f4cc:	eba0 000a 	sub.w	r0, r0, sl
 800f4d0:	2240      	movs	r2, #64	@ 0x40
 800f4d2:	4082      	lsls	r2, r0
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	3401      	adds	r4, #1
 800f4d8:	9304      	str	r3, [sp, #16]
 800f4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4de:	4829      	ldr	r0, [pc, #164]	@ (800f584 <_vfiprintf_r+0x220>)
 800f4e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4e4:	2206      	movs	r2, #6
 800f4e6:	f7f0 fe83 	bl	80001f0 <memchr>
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d03f      	beq.n	800f56e <_vfiprintf_r+0x20a>
 800f4ee:	4b26      	ldr	r3, [pc, #152]	@ (800f588 <_vfiprintf_r+0x224>)
 800f4f0:	bb1b      	cbnz	r3, 800f53a <_vfiprintf_r+0x1d6>
 800f4f2:	9b03      	ldr	r3, [sp, #12]
 800f4f4:	3307      	adds	r3, #7
 800f4f6:	f023 0307 	bic.w	r3, r3, #7
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	9303      	str	r3, [sp, #12]
 800f4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f500:	443b      	add	r3, r7
 800f502:	9309      	str	r3, [sp, #36]	@ 0x24
 800f504:	e76a      	b.n	800f3dc <_vfiprintf_r+0x78>
 800f506:	fb0c 3202 	mla	r2, ip, r2, r3
 800f50a:	460c      	mov	r4, r1
 800f50c:	2001      	movs	r0, #1
 800f50e:	e7a8      	b.n	800f462 <_vfiprintf_r+0xfe>
 800f510:	2300      	movs	r3, #0
 800f512:	3401      	adds	r4, #1
 800f514:	9305      	str	r3, [sp, #20]
 800f516:	4619      	mov	r1, r3
 800f518:	f04f 0c0a 	mov.w	ip, #10
 800f51c:	4620      	mov	r0, r4
 800f51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f522:	3a30      	subs	r2, #48	@ 0x30
 800f524:	2a09      	cmp	r2, #9
 800f526:	d903      	bls.n	800f530 <_vfiprintf_r+0x1cc>
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d0c6      	beq.n	800f4ba <_vfiprintf_r+0x156>
 800f52c:	9105      	str	r1, [sp, #20]
 800f52e:	e7c4      	b.n	800f4ba <_vfiprintf_r+0x156>
 800f530:	fb0c 2101 	mla	r1, ip, r1, r2
 800f534:	4604      	mov	r4, r0
 800f536:	2301      	movs	r3, #1
 800f538:	e7f0      	b.n	800f51c <_vfiprintf_r+0x1b8>
 800f53a:	ab03      	add	r3, sp, #12
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	462a      	mov	r2, r5
 800f540:	4b12      	ldr	r3, [pc, #72]	@ (800f58c <_vfiprintf_r+0x228>)
 800f542:	a904      	add	r1, sp, #16
 800f544:	4630      	mov	r0, r6
 800f546:	f3af 8000 	nop.w
 800f54a:	4607      	mov	r7, r0
 800f54c:	1c78      	adds	r0, r7, #1
 800f54e:	d1d6      	bne.n	800f4fe <_vfiprintf_r+0x19a>
 800f550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f552:	07d9      	lsls	r1, r3, #31
 800f554:	d405      	bmi.n	800f562 <_vfiprintf_r+0x1fe>
 800f556:	89ab      	ldrh	r3, [r5, #12]
 800f558:	059a      	lsls	r2, r3, #22
 800f55a:	d402      	bmi.n	800f562 <_vfiprintf_r+0x1fe>
 800f55c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f55e:	f7fc fd57 	bl	800c010 <__retarget_lock_release_recursive>
 800f562:	89ab      	ldrh	r3, [r5, #12]
 800f564:	065b      	lsls	r3, r3, #25
 800f566:	f53f af1f 	bmi.w	800f3a8 <_vfiprintf_r+0x44>
 800f56a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f56c:	e71e      	b.n	800f3ac <_vfiprintf_r+0x48>
 800f56e:	ab03      	add	r3, sp, #12
 800f570:	9300      	str	r3, [sp, #0]
 800f572:	462a      	mov	r2, r5
 800f574:	4b05      	ldr	r3, [pc, #20]	@ (800f58c <_vfiprintf_r+0x228>)
 800f576:	a904      	add	r1, sp, #16
 800f578:	4630      	mov	r0, r6
 800f57a:	f7fe fb53 	bl	800dc24 <_printf_i>
 800f57e:	e7e4      	b.n	800f54a <_vfiprintf_r+0x1e6>
 800f580:	08022f36 	.word	0x08022f36
 800f584:	08022f40 	.word	0x08022f40
 800f588:	00000000 	.word	0x00000000
 800f58c:	0800f341 	.word	0x0800f341
 800f590:	08022f3c 	.word	0x08022f3c

0800f594 <__swbuf_r>:
 800f594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f596:	460e      	mov	r6, r1
 800f598:	4614      	mov	r4, r2
 800f59a:	4605      	mov	r5, r0
 800f59c:	b118      	cbz	r0, 800f5a6 <__swbuf_r+0x12>
 800f59e:	6a03      	ldr	r3, [r0, #32]
 800f5a0:	b90b      	cbnz	r3, 800f5a6 <__swbuf_r+0x12>
 800f5a2:	f7fc fb93 	bl	800bccc <__sinit>
 800f5a6:	69a3      	ldr	r3, [r4, #24]
 800f5a8:	60a3      	str	r3, [r4, #8]
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	071a      	lsls	r2, r3, #28
 800f5ae:	d501      	bpl.n	800f5b4 <__swbuf_r+0x20>
 800f5b0:	6923      	ldr	r3, [r4, #16]
 800f5b2:	b943      	cbnz	r3, 800f5c6 <__swbuf_r+0x32>
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f000 f82a 	bl	800f610 <__swsetup_r>
 800f5bc:	b118      	cbz	r0, 800f5c6 <__swbuf_r+0x32>
 800f5be:	f04f 37ff 	mov.w	r7, #4294967295
 800f5c2:	4638      	mov	r0, r7
 800f5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	6922      	ldr	r2, [r4, #16]
 800f5ca:	1a98      	subs	r0, r3, r2
 800f5cc:	6963      	ldr	r3, [r4, #20]
 800f5ce:	b2f6      	uxtb	r6, r6
 800f5d0:	4283      	cmp	r3, r0
 800f5d2:	4637      	mov	r7, r6
 800f5d4:	dc05      	bgt.n	800f5e2 <__swbuf_r+0x4e>
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f7fe fe13 	bl	800e204 <_fflush_r>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d1ed      	bne.n	800f5be <__swbuf_r+0x2a>
 800f5e2:	68a3      	ldr	r3, [r4, #8]
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	60a3      	str	r3, [r4, #8]
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	1c5a      	adds	r2, r3, #1
 800f5ec:	6022      	str	r2, [r4, #0]
 800f5ee:	701e      	strb	r6, [r3, #0]
 800f5f0:	6962      	ldr	r2, [r4, #20]
 800f5f2:	1c43      	adds	r3, r0, #1
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d004      	beq.n	800f602 <__swbuf_r+0x6e>
 800f5f8:	89a3      	ldrh	r3, [r4, #12]
 800f5fa:	07db      	lsls	r3, r3, #31
 800f5fc:	d5e1      	bpl.n	800f5c2 <__swbuf_r+0x2e>
 800f5fe:	2e0a      	cmp	r6, #10
 800f600:	d1df      	bne.n	800f5c2 <__swbuf_r+0x2e>
 800f602:	4621      	mov	r1, r4
 800f604:	4628      	mov	r0, r5
 800f606:	f7fe fdfd 	bl	800e204 <_fflush_r>
 800f60a:	2800      	cmp	r0, #0
 800f60c:	d0d9      	beq.n	800f5c2 <__swbuf_r+0x2e>
 800f60e:	e7d6      	b.n	800f5be <__swbuf_r+0x2a>

0800f610 <__swsetup_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4b29      	ldr	r3, [pc, #164]	@ (800f6b8 <__swsetup_r+0xa8>)
 800f614:	4605      	mov	r5, r0
 800f616:	6818      	ldr	r0, [r3, #0]
 800f618:	460c      	mov	r4, r1
 800f61a:	b118      	cbz	r0, 800f624 <__swsetup_r+0x14>
 800f61c:	6a03      	ldr	r3, [r0, #32]
 800f61e:	b90b      	cbnz	r3, 800f624 <__swsetup_r+0x14>
 800f620:	f7fc fb54 	bl	800bccc <__sinit>
 800f624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f628:	0719      	lsls	r1, r3, #28
 800f62a:	d422      	bmi.n	800f672 <__swsetup_r+0x62>
 800f62c:	06da      	lsls	r2, r3, #27
 800f62e:	d407      	bmi.n	800f640 <__swsetup_r+0x30>
 800f630:	2209      	movs	r2, #9
 800f632:	602a      	str	r2, [r5, #0]
 800f634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f638:	81a3      	strh	r3, [r4, #12]
 800f63a:	f04f 30ff 	mov.w	r0, #4294967295
 800f63e:	e033      	b.n	800f6a8 <__swsetup_r+0x98>
 800f640:	0758      	lsls	r0, r3, #29
 800f642:	d512      	bpl.n	800f66a <__swsetup_r+0x5a>
 800f644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f646:	b141      	cbz	r1, 800f65a <__swsetup_r+0x4a>
 800f648:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f64c:	4299      	cmp	r1, r3
 800f64e:	d002      	beq.n	800f656 <__swsetup_r+0x46>
 800f650:	4628      	mov	r0, r5
 800f652:	f7fc fcf5 	bl	800c040 <_free_r>
 800f656:	2300      	movs	r3, #0
 800f658:	6363      	str	r3, [r4, #52]	@ 0x34
 800f65a:	89a3      	ldrh	r3, [r4, #12]
 800f65c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f660:	81a3      	strh	r3, [r4, #12]
 800f662:	2300      	movs	r3, #0
 800f664:	6063      	str	r3, [r4, #4]
 800f666:	6923      	ldr	r3, [r4, #16]
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	89a3      	ldrh	r3, [r4, #12]
 800f66c:	f043 0308 	orr.w	r3, r3, #8
 800f670:	81a3      	strh	r3, [r4, #12]
 800f672:	6923      	ldr	r3, [r4, #16]
 800f674:	b94b      	cbnz	r3, 800f68a <__swsetup_r+0x7a>
 800f676:	89a3      	ldrh	r3, [r4, #12]
 800f678:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f67c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f680:	d003      	beq.n	800f68a <__swsetup_r+0x7a>
 800f682:	4621      	mov	r1, r4
 800f684:	4628      	mov	r0, r5
 800f686:	f000 f883 	bl	800f790 <__smakebuf_r>
 800f68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f68e:	f013 0201 	ands.w	r2, r3, #1
 800f692:	d00a      	beq.n	800f6aa <__swsetup_r+0x9a>
 800f694:	2200      	movs	r2, #0
 800f696:	60a2      	str	r2, [r4, #8]
 800f698:	6962      	ldr	r2, [r4, #20]
 800f69a:	4252      	negs	r2, r2
 800f69c:	61a2      	str	r2, [r4, #24]
 800f69e:	6922      	ldr	r2, [r4, #16]
 800f6a0:	b942      	cbnz	r2, 800f6b4 <__swsetup_r+0xa4>
 800f6a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6a6:	d1c5      	bne.n	800f634 <__swsetup_r+0x24>
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
 800f6aa:	0799      	lsls	r1, r3, #30
 800f6ac:	bf58      	it	pl
 800f6ae:	6962      	ldrpl	r2, [r4, #20]
 800f6b0:	60a2      	str	r2, [r4, #8]
 800f6b2:	e7f4      	b.n	800f69e <__swsetup_r+0x8e>
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	e7f7      	b.n	800f6a8 <__swsetup_r+0x98>
 800f6b8:	200002c8 	.word	0x200002c8

0800f6bc <_raise_r>:
 800f6bc:	291f      	cmp	r1, #31
 800f6be:	b538      	push	{r3, r4, r5, lr}
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	d904      	bls.n	800f6d0 <_raise_r+0x14>
 800f6c6:	2316      	movs	r3, #22
 800f6c8:	6003      	str	r3, [r0, #0]
 800f6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f6d2:	b112      	cbz	r2, 800f6da <_raise_r+0x1e>
 800f6d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6d8:	b94b      	cbnz	r3, 800f6ee <_raise_r+0x32>
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f000 f830 	bl	800f740 <_getpid_r>
 800f6e0:	4622      	mov	r2, r4
 800f6e2:	4601      	mov	r1, r0
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6ea:	f000 b817 	b.w	800f71c <_kill_r>
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d00a      	beq.n	800f708 <_raise_r+0x4c>
 800f6f2:	1c59      	adds	r1, r3, #1
 800f6f4:	d103      	bne.n	800f6fe <_raise_r+0x42>
 800f6f6:	2316      	movs	r3, #22
 800f6f8:	6003      	str	r3, [r0, #0]
 800f6fa:	2001      	movs	r0, #1
 800f6fc:	e7e7      	b.n	800f6ce <_raise_r+0x12>
 800f6fe:	2100      	movs	r1, #0
 800f700:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f704:	4620      	mov	r0, r4
 800f706:	4798      	blx	r3
 800f708:	2000      	movs	r0, #0
 800f70a:	e7e0      	b.n	800f6ce <_raise_r+0x12>

0800f70c <raise>:
 800f70c:	4b02      	ldr	r3, [pc, #8]	@ (800f718 <raise+0xc>)
 800f70e:	4601      	mov	r1, r0
 800f710:	6818      	ldr	r0, [r3, #0]
 800f712:	f7ff bfd3 	b.w	800f6bc <_raise_r>
 800f716:	bf00      	nop
 800f718:	200002c8 	.word	0x200002c8

0800f71c <_kill_r>:
 800f71c:	b538      	push	{r3, r4, r5, lr}
 800f71e:	4d07      	ldr	r5, [pc, #28]	@ (800f73c <_kill_r+0x20>)
 800f720:	2300      	movs	r3, #0
 800f722:	4604      	mov	r4, r0
 800f724:	4608      	mov	r0, r1
 800f726:	4611      	mov	r1, r2
 800f728:	602b      	str	r3, [r5, #0]
 800f72a:	f7fb fb07 	bl	800ad3c <_kill>
 800f72e:	1c43      	adds	r3, r0, #1
 800f730:	d102      	bne.n	800f738 <_kill_r+0x1c>
 800f732:	682b      	ldr	r3, [r5, #0]
 800f734:	b103      	cbz	r3, 800f738 <_kill_r+0x1c>
 800f736:	6023      	str	r3, [r4, #0]
 800f738:	bd38      	pop	{r3, r4, r5, pc}
 800f73a:	bf00      	nop
 800f73c:	2001d360 	.word	0x2001d360

0800f740 <_getpid_r>:
 800f740:	f7fb bafa 	b.w	800ad38 <_getpid>

0800f744 <__swhatbuf_r>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	460c      	mov	r4, r1
 800f748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f74c:	2900      	cmp	r1, #0
 800f74e:	b096      	sub	sp, #88	@ 0x58
 800f750:	4615      	mov	r5, r2
 800f752:	461e      	mov	r6, r3
 800f754:	da0d      	bge.n	800f772 <__swhatbuf_r+0x2e>
 800f756:	89a3      	ldrh	r3, [r4, #12]
 800f758:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f75c:	f04f 0100 	mov.w	r1, #0
 800f760:	bf14      	ite	ne
 800f762:	2340      	movne	r3, #64	@ 0x40
 800f764:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f768:	2000      	movs	r0, #0
 800f76a:	6031      	str	r1, [r6, #0]
 800f76c:	602b      	str	r3, [r5, #0]
 800f76e:	b016      	add	sp, #88	@ 0x58
 800f770:	bd70      	pop	{r4, r5, r6, pc}
 800f772:	466a      	mov	r2, sp
 800f774:	f000 f848 	bl	800f808 <_fstat_r>
 800f778:	2800      	cmp	r0, #0
 800f77a:	dbec      	blt.n	800f756 <__swhatbuf_r+0x12>
 800f77c:	9901      	ldr	r1, [sp, #4]
 800f77e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f782:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f786:	4259      	negs	r1, r3
 800f788:	4159      	adcs	r1, r3
 800f78a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f78e:	e7eb      	b.n	800f768 <__swhatbuf_r+0x24>

0800f790 <__smakebuf_r>:
 800f790:	898b      	ldrh	r3, [r1, #12]
 800f792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f794:	079d      	lsls	r5, r3, #30
 800f796:	4606      	mov	r6, r0
 800f798:	460c      	mov	r4, r1
 800f79a:	d507      	bpl.n	800f7ac <__smakebuf_r+0x1c>
 800f79c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f7a0:	6023      	str	r3, [r4, #0]
 800f7a2:	6123      	str	r3, [r4, #16]
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	6163      	str	r3, [r4, #20]
 800f7a8:	b003      	add	sp, #12
 800f7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ac:	ab01      	add	r3, sp, #4
 800f7ae:	466a      	mov	r2, sp
 800f7b0:	f7ff ffc8 	bl	800f744 <__swhatbuf_r>
 800f7b4:	9f00      	ldr	r7, [sp, #0]
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	4639      	mov	r1, r7
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	f7fc ffe6 	bl	800c78c <_malloc_r>
 800f7c0:	b948      	cbnz	r0, 800f7d6 <__smakebuf_r+0x46>
 800f7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7c6:	059a      	lsls	r2, r3, #22
 800f7c8:	d4ee      	bmi.n	800f7a8 <__smakebuf_r+0x18>
 800f7ca:	f023 0303 	bic.w	r3, r3, #3
 800f7ce:	f043 0302 	orr.w	r3, r3, #2
 800f7d2:	81a3      	strh	r3, [r4, #12]
 800f7d4:	e7e2      	b.n	800f79c <__smakebuf_r+0xc>
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	6020      	str	r0, [r4, #0]
 800f7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7de:	81a3      	strh	r3, [r4, #12]
 800f7e0:	9b01      	ldr	r3, [sp, #4]
 800f7e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7e6:	b15b      	cbz	r3, 800f800 <__smakebuf_r+0x70>
 800f7e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	f000 f81d 	bl	800f82c <_isatty_r>
 800f7f2:	b128      	cbz	r0, 800f800 <__smakebuf_r+0x70>
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	f023 0303 	bic.w	r3, r3, #3
 800f7fa:	f043 0301 	orr.w	r3, r3, #1
 800f7fe:	81a3      	strh	r3, [r4, #12]
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	431d      	orrs	r5, r3
 800f804:	81a5      	strh	r5, [r4, #12]
 800f806:	e7cf      	b.n	800f7a8 <__smakebuf_r+0x18>

0800f808 <_fstat_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	4d07      	ldr	r5, [pc, #28]	@ (800f828 <_fstat_r+0x20>)
 800f80c:	2300      	movs	r3, #0
 800f80e:	4604      	mov	r4, r0
 800f810:	4608      	mov	r0, r1
 800f812:	4611      	mov	r1, r2
 800f814:	602b      	str	r3, [r5, #0]
 800f816:	f7fb fac0 	bl	800ad9a <_fstat>
 800f81a:	1c43      	adds	r3, r0, #1
 800f81c:	d102      	bne.n	800f824 <_fstat_r+0x1c>
 800f81e:	682b      	ldr	r3, [r5, #0]
 800f820:	b103      	cbz	r3, 800f824 <_fstat_r+0x1c>
 800f822:	6023      	str	r3, [r4, #0]
 800f824:	bd38      	pop	{r3, r4, r5, pc}
 800f826:	bf00      	nop
 800f828:	2001d360 	.word	0x2001d360

0800f82c <_isatty_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4d06      	ldr	r5, [pc, #24]	@ (800f848 <_isatty_r+0x1c>)
 800f830:	2300      	movs	r3, #0
 800f832:	4604      	mov	r4, r0
 800f834:	4608      	mov	r0, r1
 800f836:	602b      	str	r3, [r5, #0]
 800f838:	f7fb fab4 	bl	800ada4 <_isatty>
 800f83c:	1c43      	adds	r3, r0, #1
 800f83e:	d102      	bne.n	800f846 <_isatty_r+0x1a>
 800f840:	682b      	ldr	r3, [r5, #0]
 800f842:	b103      	cbz	r3, 800f846 <_isatty_r+0x1a>
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	bd38      	pop	{r3, r4, r5, pc}
 800f848:	2001d360 	.word	0x2001d360

0800f84c <atan2>:
 800f84c:	f000 bbb0 	b.w	800ffb0 <__ieee754_atan2>

0800f850 <sqrt>:
 800f850:	b538      	push	{r3, r4, r5, lr}
 800f852:	ed2d 8b02 	vpush	{d8}
 800f856:	ec55 4b10 	vmov	r4, r5, d0
 800f85a:	f000 f8b9 	bl	800f9d0 <__ieee754_sqrt>
 800f85e:	4622      	mov	r2, r4
 800f860:	462b      	mov	r3, r5
 800f862:	4620      	mov	r0, r4
 800f864:	4629      	mov	r1, r5
 800f866:	eeb0 8a40 	vmov.f32	s16, s0
 800f86a:	eef0 8a60 	vmov.f32	s17, s1
 800f86e:	f7f1 f965 	bl	8000b3c <__aeabi_dcmpun>
 800f872:	b930      	cbnz	r0, 800f882 <sqrt+0x32>
 800f874:	2200      	movs	r2, #0
 800f876:	2300      	movs	r3, #0
 800f878:	4620      	mov	r0, r4
 800f87a:	4629      	mov	r1, r5
 800f87c:	f7f1 f936 	bl	8000aec <__aeabi_dcmplt>
 800f880:	b930      	cbnz	r0, 800f890 <sqrt+0x40>
 800f882:	eeb0 0a48 	vmov.f32	s0, s16
 800f886:	eef0 0a68 	vmov.f32	s1, s17
 800f88a:	ecbd 8b02 	vpop	{d8}
 800f88e:	bd38      	pop	{r3, r4, r5, pc}
 800f890:	f7fc fb92 	bl	800bfb8 <__errno>
 800f894:	2200      	movs	r2, #0
 800f896:	2300      	movs	r3, #0
 800f898:	2121      	movs	r1, #33	@ 0x21
 800f89a:	6001      	str	r1, [r0, #0]
 800f89c:	4610      	mov	r0, r2
 800f89e:	4619      	mov	r1, r3
 800f8a0:	f7f0 ffdc 	bl	800085c <__aeabi_ddiv>
 800f8a4:	ec41 0b18 	vmov	d8, r0, r1
 800f8a8:	eeb0 0a48 	vmov.f32	s0, s16
 800f8ac:	eef0 0a68 	vmov.f32	s1, s17
 800f8b0:	ecbd 8b02 	vpop	{d8}
 800f8b4:	bd38      	pop	{r3, r4, r5, pc}
 800f8b6:	bf00      	nop

0800f8b8 <cos>:
 800f8b8:	ec51 0b10 	vmov	r0, r1, d0
 800f8bc:	4a1e      	ldr	r2, [pc, #120]	@ (800f938 <cos+0x80>)
 800f8be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d91e      	bls.n	800f904 <cos+0x4c>
 800f8c6:	b500      	push	{lr}
 800f8c8:	4a1c      	ldr	r2, [pc, #112]	@ (800f93c <cos+0x84>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	b085      	sub	sp, #20
 800f8ce:	d908      	bls.n	800f8e2 <cos+0x2a>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	f7f0 fce0 	bl	8000298 <__aeabi_dsub>
 800f8d8:	ec41 0b10 	vmov	d0, r0, r1
 800f8dc:	b005      	add	sp, #20
 800f8de:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8e2:	4668      	mov	r0, sp
 800f8e4:	f000 fc3c 	bl	8010160 <__ieee754_rem_pio2>
 800f8e8:	f000 0003 	and.w	r0, r0, #3
 800f8ec:	2801      	cmp	r0, #1
 800f8ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f8f2:	ed9d 0b00 	vldr	d0, [sp]
 800f8f6:	d014      	beq.n	800f922 <cos+0x6a>
 800f8f8:	2802      	cmp	r0, #2
 800f8fa:	d007      	beq.n	800f90c <cos+0x54>
 800f8fc:	b9a0      	cbnz	r0, 800f928 <cos+0x70>
 800f8fe:	f000 f95f 	bl	800fbc0 <__kernel_cos>
 800f902:	e7eb      	b.n	800f8dc <cos+0x24>
 800f904:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 800f930 <cos+0x78>
 800f908:	f000 b95a 	b.w	800fbc0 <__kernel_cos>
 800f90c:	f000 f958 	bl	800fbc0 <__kernel_cos>
 800f910:	ec53 2b10 	vmov	r2, r3, d0
 800f914:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f918:	ee00 3a90 	vmov	s1, r3
 800f91c:	b005      	add	sp, #20
 800f91e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f922:	f000 fa85 	bl	800fe30 <__kernel_sin>
 800f926:	e7f3      	b.n	800f910 <cos+0x58>
 800f928:	2001      	movs	r0, #1
 800f92a:	f000 fa81 	bl	800fe30 <__kernel_sin>
 800f92e:	e7d5      	b.n	800f8dc <cos+0x24>
	...
 800f938:	3fe921fb 	.word	0x3fe921fb
 800f93c:	7fefffff 	.word	0x7fefffff

0800f940 <sin>:
 800f940:	ec51 0b10 	vmov	r0, r1, d0
 800f944:	4a20      	ldr	r2, [pc, #128]	@ (800f9c8 <sin+0x88>)
 800f946:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d91f      	bls.n	800f98e <sin+0x4e>
 800f94e:	b500      	push	{lr}
 800f950:	4a1e      	ldr	r2, [pc, #120]	@ (800f9cc <sin+0x8c>)
 800f952:	4293      	cmp	r3, r2
 800f954:	b085      	sub	sp, #20
 800f956:	d908      	bls.n	800f96a <sin+0x2a>
 800f958:	4602      	mov	r2, r0
 800f95a:	460b      	mov	r3, r1
 800f95c:	f7f0 fc9c 	bl	8000298 <__aeabi_dsub>
 800f960:	ec41 0b10 	vmov	d0, r0, r1
 800f964:	b005      	add	sp, #20
 800f966:	f85d fb04 	ldr.w	pc, [sp], #4
 800f96a:	4668      	mov	r0, sp
 800f96c:	f000 fbf8 	bl	8010160 <__ieee754_rem_pio2>
 800f970:	f000 0003 	and.w	r0, r0, #3
 800f974:	2801      	cmp	r0, #1
 800f976:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f97a:	ed9d 0b00 	vldr	d0, [sp]
 800f97e:	d017      	beq.n	800f9b0 <sin+0x70>
 800f980:	2802      	cmp	r0, #2
 800f982:	d009      	beq.n	800f998 <sin+0x58>
 800f984:	b9b8      	cbnz	r0, 800f9b6 <sin+0x76>
 800f986:	2001      	movs	r0, #1
 800f988:	f000 fa52 	bl	800fe30 <__kernel_sin>
 800f98c:	e7ea      	b.n	800f964 <sin+0x24>
 800f98e:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 800f9c0 <sin+0x80>
 800f992:	2000      	movs	r0, #0
 800f994:	f000 ba4c 	b.w	800fe30 <__kernel_sin>
 800f998:	2001      	movs	r0, #1
 800f99a:	f000 fa49 	bl	800fe30 <__kernel_sin>
 800f99e:	ec53 2b10 	vmov	r2, r3, d0
 800f9a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f9a6:	ee00 3a90 	vmov	s1, r3
 800f9aa:	b005      	add	sp, #20
 800f9ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9b0:	f000 f906 	bl	800fbc0 <__kernel_cos>
 800f9b4:	e7d6      	b.n	800f964 <sin+0x24>
 800f9b6:	f000 f903 	bl	800fbc0 <__kernel_cos>
 800f9ba:	e7f0      	b.n	800f99e <sin+0x5e>
 800f9bc:	f3af 8000 	nop.w
	...
 800f9c8:	3fe921fb 	.word	0x3fe921fb
 800f9cc:	7fefffff 	.word	0x7fefffff

0800f9d0 <__ieee754_sqrt>:
 800f9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	4976      	ldr	r1, [pc, #472]	@ (800fbb0 <__ieee754_sqrt+0x1e0>)
 800f9d6:	ec55 4b10 	vmov	r4, r5, d0
 800f9da:	43a9      	bics	r1, r5
 800f9dc:	f000 80ab 	beq.w	800fb36 <__ieee754_sqrt+0x166>
 800f9e0:	2d00      	cmp	r5, #0
 800f9e2:	462a      	mov	r2, r5
 800f9e4:	4623      	mov	r3, r4
 800f9e6:	dd55      	ble.n	800fa94 <__ieee754_sqrt+0xc4>
 800f9e8:	152c      	asrs	r4, r5, #20
 800f9ea:	d062      	beq.n	800fab2 <__ieee754_sqrt+0xe2>
 800f9ec:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f9f0:	07e1      	lsls	r1, r4, #31
 800f9f2:	f2a4 37ff 	subw	r7, r4, #1023	@ 0x3ff
 800f9f6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800f9fa:	d403      	bmi.n	800fa04 <__ieee754_sqrt+0x34>
 800f9fc:	0fd9      	lsrs	r1, r3, #31
 800f9fe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800fa02:	005b      	lsls	r3, r3, #1
 800fa04:	0052      	lsls	r2, r2, #1
 800fa06:	2600      	movs	r6, #0
 800fa08:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fa0c:	107f      	asrs	r7, r7, #1
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	2416      	movs	r4, #22
 800fa12:	46b4      	mov	ip, r6
 800fa14:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fa18:	eb0c 0001 	add.w	r0, ip, r1
 800fa1c:	4290      	cmp	r0, r2
 800fa1e:	ea4f 75d3 	mov.w	r5, r3, lsr #31
 800fa22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa26:	dc03      	bgt.n	800fa30 <__ieee754_sqrt+0x60>
 800fa28:	eb00 0c01 	add.w	ip, r0, r1
 800fa2c:	1a12      	subs	r2, r2, r0
 800fa2e:	440e      	add	r6, r1
 800fa30:	3c01      	subs	r4, #1
 800fa32:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800fa36:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fa3a:	d1ed      	bne.n	800fa18 <__ieee754_sqrt+0x48>
 800fa3c:	46a0      	mov	r8, r4
 800fa3e:	2520      	movs	r5, #32
 800fa40:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800fa44:	e00a      	b.n	800fa5c <__ieee754_sqrt+0x8c>
 800fa46:	d043      	beq.n	800fad0 <__ieee754_sqrt+0x100>
 800fa48:	0051      	lsls	r1, r2, #1
 800fa4a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fa4e:	3d01      	subs	r5, #1
 800fa50:	460a      	mov	r2, r1
 800fa52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa56:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800fa5a:	d045      	beq.n	800fae8 <__ieee754_sqrt+0x118>
 800fa5c:	4594      	cmp	ip, r2
 800fa5e:	eb08 0e00 	add.w	lr, r8, r0
 800fa62:	daf0      	bge.n	800fa46 <__ieee754_sqrt+0x76>
 800fa64:	f1be 0f00 	cmp.w	lr, #0
 800fa68:	eb0e 0800 	add.w	r8, lr, r0
 800fa6c:	db0c      	blt.n	800fa88 <__ieee754_sqrt+0xb8>
 800fa6e:	46e1      	mov	r9, ip
 800fa70:	eba2 010c 	sub.w	r1, r2, ip
 800fa74:	459e      	cmp	lr, r3
 800fa76:	bf88      	it	hi
 800fa78:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800fa7c:	0049      	lsls	r1, r1, #1
 800fa7e:	46cc      	mov	ip, r9
 800fa80:	eba3 030e 	sub.w	r3, r3, lr
 800fa84:	4404      	add	r4, r0
 800fa86:	e7e0      	b.n	800fa4a <__ieee754_sqrt+0x7a>
 800fa88:	f1b8 0f00 	cmp.w	r8, #0
 800fa8c:	dbef      	blt.n	800fa6e <__ieee754_sqrt+0x9e>
 800fa8e:	f10c 0901 	add.w	r9, ip, #1
 800fa92:	e7ed      	b.n	800fa70 <__ieee754_sqrt+0xa0>
 800fa94:	f025 4100 	bic.w	r1, r5, #2147483648	@ 0x80000000
 800fa98:	4321      	orrs	r1, r4
 800fa9a:	d046      	beq.n	800fb2a <__ieee754_sqrt+0x15a>
 800fa9c:	2d00      	cmp	r5, #0
 800fa9e:	d171      	bne.n	800fb84 <__ieee754_sqrt+0x1b4>
 800faa0:	0ad9      	lsrs	r1, r3, #11
 800faa2:	3a15      	subs	r2, #21
 800faa4:	055b      	lsls	r3, r3, #21
 800faa6:	2900      	cmp	r1, #0
 800faa8:	d0fa      	beq.n	800faa0 <__ieee754_sqrt+0xd0>
 800faaa:	02ce      	lsls	r6, r1, #11
 800faac:	4614      	mov	r4, r2
 800faae:	d476      	bmi.n	800fb9e <__ieee754_sqrt+0x1ce>
 800fab0:	460a      	mov	r2, r1
 800fab2:	2100      	movs	r1, #0
 800fab4:	0052      	lsls	r2, r2, #1
 800fab6:	02d5      	lsls	r5, r2, #11
 800fab8:	4608      	mov	r0, r1
 800faba:	f101 0101 	add.w	r1, r1, #1
 800fabe:	d5f9      	bpl.n	800fab4 <__ieee754_sqrt+0xe4>
 800fac0:	f1c1 0520 	rsb	r5, r1, #32
 800fac4:	fa23 f505 	lsr.w	r5, r3, r5
 800fac8:	432a      	orrs	r2, r5
 800faca:	408b      	lsls	r3, r1
 800facc:	1a24      	subs	r4, r4, r0
 800face:	e78d      	b.n	800f9ec <__ieee754_sqrt+0x1c>
 800fad0:	459e      	cmp	lr, r3
 800fad2:	d902      	bls.n	800fada <__ieee754_sqrt+0x10a>
 800fad4:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800fad8:	e7b7      	b.n	800fa4a <__ieee754_sqrt+0x7a>
 800fada:	f1be 0f00 	cmp.w	lr, #0
 800fade:	eb0e 0800 	add.w	r8, lr, r0
 800fae2:	db24      	blt.n	800fb2e <__ieee754_sqrt+0x15e>
 800fae4:	2100      	movs	r1, #0
 800fae6:	e7cb      	b.n	800fa80 <__ieee754_sqrt+0xb0>
 800fae8:	4319      	orrs	r1, r3
 800faea:	d012      	beq.n	800fb12 <__ieee754_sqrt+0x142>
 800faec:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 800fbb4 <__ieee754_sqrt+0x1e4>
 800faf0:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 800fbb8 <__ieee754_sqrt+0x1e8>
 800faf4:	e9da 0100 	ldrd	r0, r1, [sl]
 800faf8:	e9db 2300 	ldrd	r2, r3, [fp]
 800fafc:	f7f0 fbcc 	bl	8000298 <__aeabi_dsub>
 800fb00:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	4640      	mov	r0, r8
 800fb0a:	4649      	mov	r1, r9
 800fb0c:	f7f0 fff8 	bl	8000b00 <__aeabi_dcmple>
 800fb10:	b9f8      	cbnz	r0, 800fb52 <__ieee754_sqrt+0x182>
 800fb12:	0865      	lsrs	r5, r4, #1
 800fb14:	1071      	asrs	r1, r6, #1
 800fb16:	f101 517f 	add.w	r1, r1, #1069547520	@ 0x3fc00000
 800fb1a:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800fb1e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 800fb22:	ea45 72c6 	orr.w	r2, r5, r6, lsl #31
 800fb26:	ec43 2b10 	vmov	d0, r2, r3
 800fb2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb2e:	f1b8 0f00 	cmp.w	r8, #0
 800fb32:	daac      	bge.n	800fa8e <__ieee754_sqrt+0xbe>
 800fb34:	e7d6      	b.n	800fae4 <__ieee754_sqrt+0x114>
 800fb36:	4622      	mov	r2, r4
 800fb38:	462b      	mov	r3, r5
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	f7f0 fd63 	bl	8000608 <__aeabi_dmul>
 800fb42:	4622      	mov	r2, r4
 800fb44:	462b      	mov	r3, r5
 800fb46:	f7f0 fba9 	bl	800029c <__adddf3>
 800fb4a:	ec41 0b10 	vmov	d0, r0, r1
 800fb4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb52:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fb56:	e9da 0100 	ldrd	r0, r1, [sl]
 800fb5a:	e9db 2300 	ldrd	r2, r3, [fp]
 800fb5e:	d022      	beq.n	800fba6 <__ieee754_sqrt+0x1d6>
 800fb60:	f7f0 fb9c 	bl	800029c <__adddf3>
 800fb64:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4640      	mov	r0, r8
 800fb6e:	4649      	mov	r1, r9
 800fb70:	f7f0 ffbc 	bl	8000aec <__aeabi_dcmplt>
 800fb74:	b1c8      	cbz	r0, 800fbaa <__ieee754_sqrt+0x1da>
 800fb76:	1ca3      	adds	r3, r4, #2
 800fb78:	f104 0502 	add.w	r5, r4, #2
 800fb7c:	bf08      	it	eq
 800fb7e:	3601      	addeq	r6, #1
 800fb80:	086d      	lsrs	r5, r5, #1
 800fb82:	e7c7      	b.n	800fb14 <__ieee754_sqrt+0x144>
 800fb84:	4622      	mov	r2, r4
 800fb86:	462b      	mov	r3, r5
 800fb88:	4620      	mov	r0, r4
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	f7f0 fb84 	bl	8000298 <__aeabi_dsub>
 800fb90:	4602      	mov	r2, r0
 800fb92:	460b      	mov	r3, r1
 800fb94:	f7f0 fe62 	bl	800085c <__aeabi_ddiv>
 800fb98:	ec41 0b10 	vmov	d0, r0, r1
 800fb9c:	e7c5      	b.n	800fb2a <__ieee754_sqrt+0x15a>
 800fb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800fba2:	460a      	mov	r2, r1
 800fba4:	e792      	b.n	800facc <__ieee754_sqrt+0xfc>
 800fba6:	3601      	adds	r6, #1
 800fba8:	e7b4      	b.n	800fb14 <__ieee754_sqrt+0x144>
 800fbaa:	3401      	adds	r4, #1
 800fbac:	e7b1      	b.n	800fb12 <__ieee754_sqrt+0x142>
 800fbae:	bf00      	nop
 800fbb0:	7ff00000 	.word	0x7ff00000
 800fbb4:	080232b0 	.word	0x080232b0
 800fbb8:	080232a8 	.word	0x080232a8
 800fbbc:	00000000 	.word	0x00000000

0800fbc0 <__kernel_cos>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	ec57 6b10 	vmov	r6, r7, d0
 800fbc8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fbcc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800fbd0:	ec5b ab11 	vmov	sl, fp, d1
 800fbd4:	b085      	sub	sp, #20
 800fbd6:	d271      	bcs.n	800fcbc <__kernel_cos+0xfc>
 800fbd8:	4630      	mov	r0, r6
 800fbda:	4639      	mov	r1, r7
 800fbdc:	f7f0 ffc4 	bl	8000b68 <__aeabi_d2iz>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	f000 80f4 	beq.w	800fdce <__kernel_cos+0x20e>
 800fbe6:	4632      	mov	r2, r6
 800fbe8:	463b      	mov	r3, r7
 800fbea:	4630      	mov	r0, r6
 800fbec:	4639      	mov	r1, r7
 800fbee:	f7f0 fd0b 	bl	8000608 <__aeabi_dmul>
 800fbf2:	a379      	add	r3, pc, #484	@ (adr r3, 800fdd8 <__kernel_cos+0x218>)
 800fbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	460d      	mov	r5, r1
 800fbfc:	f7f0 fd04 	bl	8000608 <__aeabi_dmul>
 800fc00:	a377      	add	r3, pc, #476	@ (adr r3, 800fde0 <__kernel_cos+0x220>)
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	f7f0 fb49 	bl	800029c <__adddf3>
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	462b      	mov	r3, r5
 800fc0e:	f7f0 fcfb 	bl	8000608 <__aeabi_dmul>
 800fc12:	a375      	add	r3, pc, #468	@ (adr r3, 800fde8 <__kernel_cos+0x228>)
 800fc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc18:	f7f0 fb3e 	bl	8000298 <__aeabi_dsub>
 800fc1c:	4622      	mov	r2, r4
 800fc1e:	462b      	mov	r3, r5
 800fc20:	f7f0 fcf2 	bl	8000608 <__aeabi_dmul>
 800fc24:	a372      	add	r3, pc, #456	@ (adr r3, 800fdf0 <__kernel_cos+0x230>)
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	f7f0 fb37 	bl	800029c <__adddf3>
 800fc2e:	4622      	mov	r2, r4
 800fc30:	462b      	mov	r3, r5
 800fc32:	f7f0 fce9 	bl	8000608 <__aeabi_dmul>
 800fc36:	a370      	add	r3, pc, #448	@ (adr r3, 800fdf8 <__kernel_cos+0x238>)
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	f7f0 fb2c 	bl	8000298 <__aeabi_dsub>
 800fc40:	4622      	mov	r2, r4
 800fc42:	462b      	mov	r3, r5
 800fc44:	f7f0 fce0 	bl	8000608 <__aeabi_dmul>
 800fc48:	a36d      	add	r3, pc, #436	@ (adr r3, 800fe00 <__kernel_cos+0x240>)
 800fc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4e:	f7f0 fb25 	bl	800029c <__adddf3>
 800fc52:	4622      	mov	r2, r4
 800fc54:	462b      	mov	r3, r5
 800fc56:	f7f0 fcd7 	bl	8000608 <__aeabi_dmul>
 800fc5a:	e9cd 0100 	strd	r0, r1, [sp]
 800fc5e:	4b6e      	ldr	r3, [pc, #440]	@ (800fe18 <__kernel_cos+0x258>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	4620      	mov	r0, r4
 800fc64:	4629      	mov	r1, r5
 800fc66:	f7f0 fccf 	bl	8000608 <__aeabi_dmul>
 800fc6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc6e:	4680      	mov	r8, r0
 800fc70:	4689      	mov	r9, r1
 800fc72:	4620      	mov	r0, r4
 800fc74:	4629      	mov	r1, r5
 800fc76:	f7f0 fcc7 	bl	8000608 <__aeabi_dmul>
 800fc7a:	4644      	mov	r4, r8
 800fc7c:	464d      	mov	r5, r9
 800fc7e:	4680      	mov	r8, r0
 800fc80:	4689      	mov	r9, r1
 800fc82:	4652      	mov	r2, sl
 800fc84:	465b      	mov	r3, fp
 800fc86:	4630      	mov	r0, r6
 800fc88:	4639      	mov	r1, r7
 800fc8a:	f7f0 fcbd 	bl	8000608 <__aeabi_dmul>
 800fc8e:	4602      	mov	r2, r0
 800fc90:	460b      	mov	r3, r1
 800fc92:	4640      	mov	r0, r8
 800fc94:	4649      	mov	r1, r9
 800fc96:	f7f0 faff 	bl	8000298 <__aeabi_dsub>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	4620      	mov	r0, r4
 800fca0:	4629      	mov	r1, r5
 800fca2:	f7f0 faf9 	bl	8000298 <__aeabi_dsub>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	2000      	movs	r0, #0
 800fcac:	495b      	ldr	r1, [pc, #364]	@ (800fe1c <__kernel_cos+0x25c>)
 800fcae:	f7f0 faf3 	bl	8000298 <__aeabi_dsub>
 800fcb2:	ec41 0b10 	vmov	d0, r0, r1
 800fcb6:	b005      	add	sp, #20
 800fcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcbc:	4632      	mov	r2, r6
 800fcbe:	463b      	mov	r3, r7
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f7f0 fca0 	bl	8000608 <__aeabi_dmul>
 800fcc8:	a343      	add	r3, pc, #268	@ (adr r3, 800fdd8 <__kernel_cos+0x218>)
 800fcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcce:	4604      	mov	r4, r0
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	f7f0 fc99 	bl	8000608 <__aeabi_dmul>
 800fcd6:	a342      	add	r3, pc, #264	@ (adr r3, 800fde0 <__kernel_cos+0x220>)
 800fcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcdc:	f7f0 fade 	bl	800029c <__adddf3>
 800fce0:	4622      	mov	r2, r4
 800fce2:	462b      	mov	r3, r5
 800fce4:	f7f0 fc90 	bl	8000608 <__aeabi_dmul>
 800fce8:	a33f      	add	r3, pc, #252	@ (adr r3, 800fde8 <__kernel_cos+0x228>)
 800fcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcee:	f7f0 fad3 	bl	8000298 <__aeabi_dsub>
 800fcf2:	4622      	mov	r2, r4
 800fcf4:	462b      	mov	r3, r5
 800fcf6:	f7f0 fc87 	bl	8000608 <__aeabi_dmul>
 800fcfa:	a33d      	add	r3, pc, #244	@ (adr r3, 800fdf0 <__kernel_cos+0x230>)
 800fcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd00:	f7f0 facc 	bl	800029c <__adddf3>
 800fd04:	4622      	mov	r2, r4
 800fd06:	462b      	mov	r3, r5
 800fd08:	f7f0 fc7e 	bl	8000608 <__aeabi_dmul>
 800fd0c:	a33a      	add	r3, pc, #232	@ (adr r3, 800fdf8 <__kernel_cos+0x238>)
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	f7f0 fac1 	bl	8000298 <__aeabi_dsub>
 800fd16:	4622      	mov	r2, r4
 800fd18:	462b      	mov	r3, r5
 800fd1a:	f7f0 fc75 	bl	8000608 <__aeabi_dmul>
 800fd1e:	a338      	add	r3, pc, #224	@ (adr r3, 800fe00 <__kernel_cos+0x240>)
 800fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd24:	f7f0 faba 	bl	800029c <__adddf3>
 800fd28:	462b      	mov	r3, r5
 800fd2a:	4622      	mov	r2, r4
 800fd2c:	f7f0 fc6c 	bl	8000608 <__aeabi_dmul>
 800fd30:	4b3b      	ldr	r3, [pc, #236]	@ (800fe20 <__kernel_cos+0x260>)
 800fd32:	4598      	cmp	r8, r3
 800fd34:	e9cd 0100 	strd	r0, r1, [sp]
 800fd38:	d991      	bls.n	800fc5e <__kernel_cos+0x9e>
 800fd3a:	4b3a      	ldr	r3, [pc, #232]	@ (800fe24 <__kernel_cos+0x264>)
 800fd3c:	4598      	cmp	r8, r3
 800fd3e:	d83d      	bhi.n	800fdbc <__kernel_cos+0x1fc>
 800fd40:	f5a8 1300 	sub.w	r3, r8, #2097152	@ 0x200000
 800fd44:	2200      	movs	r2, #0
 800fd46:	4935      	ldr	r1, [pc, #212]	@ (800fe1c <__kernel_cos+0x25c>)
 800fd48:	2000      	movs	r0, #0
 800fd4a:	4690      	mov	r8, r2
 800fd4c:	4699      	mov	r9, r3
 800fd4e:	f7f0 faa3 	bl	8000298 <__aeabi_dsub>
 800fd52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd56:	4b30      	ldr	r3, [pc, #192]	@ (800fe18 <__kernel_cos+0x258>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	f7f0 fc53 	bl	8000608 <__aeabi_dmul>
 800fd62:	4642      	mov	r2, r8
 800fd64:	464b      	mov	r3, r9
 800fd66:	f7f0 fa97 	bl	8000298 <__aeabi_dsub>
 800fd6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd6e:	4680      	mov	r8, r0
 800fd70:	4689      	mov	r9, r1
 800fd72:	4620      	mov	r0, r4
 800fd74:	4629      	mov	r1, r5
 800fd76:	f7f0 fc47 	bl	8000608 <__aeabi_dmul>
 800fd7a:	4644      	mov	r4, r8
 800fd7c:	464d      	mov	r5, r9
 800fd7e:	4680      	mov	r8, r0
 800fd80:	4689      	mov	r9, r1
 800fd82:	4652      	mov	r2, sl
 800fd84:	465b      	mov	r3, fp
 800fd86:	4630      	mov	r0, r6
 800fd88:	4639      	mov	r1, r7
 800fd8a:	f7f0 fc3d 	bl	8000608 <__aeabi_dmul>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4640      	mov	r0, r8
 800fd94:	4649      	mov	r1, r9
 800fd96:	f7f0 fa7f 	bl	8000298 <__aeabi_dsub>
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	4620      	mov	r0, r4
 800fda0:	4629      	mov	r1, r5
 800fda2:	f7f0 fa79 	bl	8000298 <__aeabi_dsub>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdae:	f7f0 fa73 	bl	8000298 <__aeabi_dsub>
 800fdb2:	ec41 0b10 	vmov	d0, r0, r1
 800fdb6:	b005      	add	sp, #20
 800fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbc:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800fe08 <__kernel_cos+0x248>
 800fdc0:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800fe28 <__kernel_cos+0x268>
 800fdc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fdc8:	f04f 0800 	mov.w	r8, #0
 800fdcc:	e7c3      	b.n	800fd56 <__kernel_cos+0x196>
 800fdce:	ed9f 0b10 	vldr	d0, [pc, #64]	@ 800fe10 <__kernel_cos+0x250>
 800fdd2:	b005      	add	sp, #20
 800fdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd8:	be8838d4 	.word	0xbe8838d4
 800fddc:	bda8fae9 	.word	0xbda8fae9
 800fde0:	bdb4b1c4 	.word	0xbdb4b1c4
 800fde4:	3e21ee9e 	.word	0x3e21ee9e
 800fde8:	809c52ad 	.word	0x809c52ad
 800fdec:	3e927e4f 	.word	0x3e927e4f
 800fdf0:	19cb1590 	.word	0x19cb1590
 800fdf4:	3efa01a0 	.word	0x3efa01a0
 800fdf8:	16c15177 	.word	0x16c15177
 800fdfc:	3f56c16c 	.word	0x3f56c16c
 800fe00:	5555554c 	.word	0x5555554c
 800fe04:	3fa55555 	.word	0x3fa55555
 800fe08:	00000000 	.word	0x00000000
 800fe0c:	3fe70000 	.word	0x3fe70000
 800fe10:	00000000 	.word	0x00000000
 800fe14:	3ff00000 	.word	0x3ff00000
 800fe18:	3fe00000 	.word	0x3fe00000
 800fe1c:	3ff00000 	.word	0x3ff00000
 800fe20:	3fd33332 	.word	0x3fd33332
 800fe24:	3fe90000 	.word	0x3fe90000
 800fe28:	3fd20000 	.word	0x3fd20000
 800fe2c:	00000000 	.word	0x00000000

0800fe30 <__kernel_sin>:
 800fe30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe34:	ec55 4b10 	vmov	r4, r5, d0
 800fe38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fe3c:	b085      	sub	sp, #20
 800fe3e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800fe42:	ed8d 1b00 	vstr	d1, [sp]
 800fe46:	4680      	mov	r8, r0
 800fe48:	d206      	bcs.n	800fe58 <__kernel_sin+0x28>
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	f7f0 fe8b 	bl	8000b68 <__aeabi_d2iz>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	f000 808a 	beq.w	800ff6c <__kernel_sin+0x13c>
 800fe58:	4622      	mov	r2, r4
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	4629      	mov	r1, r5
 800fe60:	f7f0 fbd2 	bl	8000608 <__aeabi_dmul>
 800fe64:	4606      	mov	r6, r0
 800fe66:	460f      	mov	r7, r1
 800fe68:	4632      	mov	r2, r6
 800fe6a:	463b      	mov	r3, r7
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	4629      	mov	r1, r5
 800fe70:	f7f0 fbca 	bl	8000608 <__aeabi_dmul>
 800fe74:	a343      	add	r3, pc, #268	@ (adr r3, 800ff84 <__kernel_sin+0x154>)
 800fe76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7a:	4682      	mov	sl, r0
 800fe7c:	468b      	mov	fp, r1
 800fe7e:	4630      	mov	r0, r6
 800fe80:	4639      	mov	r1, r7
 800fe82:	f7f0 fbc1 	bl	8000608 <__aeabi_dmul>
 800fe86:	a341      	add	r3, pc, #260	@ (adr r3, 800ff8c <__kernel_sin+0x15c>)
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	f7f0 fa04 	bl	8000298 <__aeabi_dsub>
 800fe90:	4632      	mov	r2, r6
 800fe92:	463b      	mov	r3, r7
 800fe94:	f7f0 fbb8 	bl	8000608 <__aeabi_dmul>
 800fe98:	a33e      	add	r3, pc, #248	@ (adr r3, 800ff94 <__kernel_sin+0x164>)
 800fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9e:	f7f0 f9fd 	bl	800029c <__adddf3>
 800fea2:	4632      	mov	r2, r6
 800fea4:	463b      	mov	r3, r7
 800fea6:	f7f0 fbaf 	bl	8000608 <__aeabi_dmul>
 800feaa:	a33c      	add	r3, pc, #240	@ (adr r3, 800ff9c <__kernel_sin+0x16c>)
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f7f0 f9f2 	bl	8000298 <__aeabi_dsub>
 800feb4:	4632      	mov	r2, r6
 800feb6:	463b      	mov	r3, r7
 800feb8:	f7f0 fba6 	bl	8000608 <__aeabi_dmul>
 800febc:	a339      	add	r3, pc, #228	@ (adr r3, 800ffa4 <__kernel_sin+0x174>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	f7f0 f9eb 	bl	800029c <__adddf3>
 800fec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800feca:	f1b8 0f00 	cmp.w	r8, #0
 800fece:	d035      	beq.n	800ff3c <__kernel_sin+0x10c>
 800fed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fed4:	4b2a      	ldr	r3, [pc, #168]	@ (800ff80 <__kernel_sin+0x150>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	f7f0 fb96 	bl	8000608 <__aeabi_dmul>
 800fedc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fee0:	4680      	mov	r8, r0
 800fee2:	4689      	mov	r9, r1
 800fee4:	4650      	mov	r0, sl
 800fee6:	4659      	mov	r1, fp
 800fee8:	f7f0 fb8e 	bl	8000608 <__aeabi_dmul>
 800feec:	4602      	mov	r2, r0
 800feee:	460b      	mov	r3, r1
 800fef0:	4640      	mov	r0, r8
 800fef2:	4649      	mov	r1, r9
 800fef4:	f7f0 f9d0 	bl	8000298 <__aeabi_dsub>
 800fef8:	4632      	mov	r2, r6
 800fefa:	463b      	mov	r3, r7
 800fefc:	f7f0 fb84 	bl	8000608 <__aeabi_dmul>
 800ff00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff04:	f7f0 f9c8 	bl	8000298 <__aeabi_dsub>
 800ff08:	a31b      	add	r3, pc, #108	@ (adr r3, 800ff78 <__kernel_sin+0x148>)
 800ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0e:	4606      	mov	r6, r0
 800ff10:	460f      	mov	r7, r1
 800ff12:	4650      	mov	r0, sl
 800ff14:	4659      	mov	r1, fp
 800ff16:	f7f0 fb77 	bl	8000608 <__aeabi_dmul>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	4630      	mov	r0, r6
 800ff20:	4639      	mov	r1, r7
 800ff22:	f7f0 f9bb 	bl	800029c <__adddf3>
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	4629      	mov	r1, r5
 800ff2e:	f7f0 f9b3 	bl	8000298 <__aeabi_dsub>
 800ff32:	ec41 0b10 	vmov	d0, r0, r1
 800ff36:	b005      	add	sp, #20
 800ff38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	460b      	mov	r3, r1
 800ff40:	4630      	mov	r0, r6
 800ff42:	4639      	mov	r1, r7
 800ff44:	f7f0 fb60 	bl	8000608 <__aeabi_dmul>
 800ff48:	a30b      	add	r3, pc, #44	@ (adr r3, 800ff78 <__kernel_sin+0x148>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	f7f0 f9a3 	bl	8000298 <__aeabi_dsub>
 800ff52:	4652      	mov	r2, sl
 800ff54:	465b      	mov	r3, fp
 800ff56:	f7f0 fb57 	bl	8000608 <__aeabi_dmul>
 800ff5a:	4622      	mov	r2, r4
 800ff5c:	462b      	mov	r3, r5
 800ff5e:	f7f0 f99d 	bl	800029c <__adddf3>
 800ff62:	ec41 0b10 	vmov	d0, r0, r1
 800ff66:	b005      	add	sp, #20
 800ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6c:	ec45 4b10 	vmov	d0, r4, r5
 800ff70:	b005      	add	sp, #20
 800ff72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff76:	bf00      	nop
 800ff78:	55555549 	.word	0x55555549
 800ff7c:	3fc55555 	.word	0x3fc55555
 800ff80:	3fe00000 	.word	0x3fe00000
 800ff84:	5acfd57c 	.word	0x5acfd57c
 800ff88:	3de5d93a 	.word	0x3de5d93a
 800ff8c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ff90:	3e5ae5e6 	.word	0x3e5ae5e6
 800ff94:	57b1fe7d 	.word	0x57b1fe7d
 800ff98:	3ec71de3 	.word	0x3ec71de3
 800ff9c:	19c161d5 	.word	0x19c161d5
 800ffa0:	3f2a01a0 	.word	0x3f2a01a0
 800ffa4:	1110f8a6 	.word	0x1110f8a6
 800ffa8:	3f811111 	.word	0x3f811111
 800ffac:	00000000 	.word	0x00000000

0800ffb0 <__ieee754_atan2>:
 800ffb0:	ec51 0b11 	vmov	r0, r1, d1
 800ffb4:	4243      	negs	r3, r0
 800ffb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffba:	4303      	orrs	r3, r0
 800ffbc:	4e64      	ldr	r6, [pc, #400]	@ (8010150 <__ieee754_atan2+0x1a0>)
 800ffbe:	f021 4e00 	bic.w	lr, r1, #2147483648	@ 0x80000000
 800ffc2:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 800ffc6:	42b3      	cmp	r3, r6
 800ffc8:	ec55 4b10 	vmov	r4, r5, d0
 800ffcc:	d840      	bhi.n	8010050 <__ieee754_atan2+0xa0>
 800ffce:	4263      	negs	r3, r4
 800ffd0:	4323      	orrs	r3, r4
 800ffd2:	f025 4a00 	bic.w	sl, r5, #2147483648	@ 0x80000000
 800ffd6:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 800ffda:	42b3      	cmp	r3, r6
 800ffdc:	46a0      	mov	r8, r4
 800ffde:	46a9      	mov	r9, r5
 800ffe0:	d836      	bhi.n	8010050 <__ieee754_atan2+0xa0>
 800ffe2:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800ffe6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800ffea:	4303      	orrs	r3, r0
 800ffec:	4602      	mov	r2, r0
 800ffee:	d03e      	beq.n	801006e <__ieee754_atan2+0xbe>
 800fff0:	178f      	asrs	r7, r1, #30
 800fff2:	f007 0702 	and.w	r7, r7, #2
 800fff6:	ea5a 0808 	orrs.w	r8, sl, r8
 800fffa:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 800fffe:	d02f      	beq.n	8010060 <__ieee754_atan2+0xb0>
 8010000:	ea5e 0202 	orrs.w	r2, lr, r2
 8010004:	d037      	beq.n	8010076 <__ieee754_atan2+0xc6>
 8010006:	45b6      	cmp	lr, r6
 8010008:	d044      	beq.n	8010094 <__ieee754_atan2+0xe4>
 801000a:	45b2      	cmp	sl, r6
 801000c:	d033      	beq.n	8010076 <__ieee754_atan2+0xc6>
 801000e:	ebaa 0a0e 	sub.w	sl, sl, lr
 8010012:	f1ba 7f74 	cmp.w	sl, #63963136	@ 0x3d00000
 8010016:	ea4f 532a 	mov.w	r3, sl, asr #20
 801001a:	da38      	bge.n	801008e <__ieee754_atan2+0xde>
 801001c:	2900      	cmp	r1, #0
 801001e:	da45      	bge.n	80100ac <__ieee754_atan2+0xfc>
 8010020:	333c      	adds	r3, #60	@ 0x3c
 8010022:	da43      	bge.n	80100ac <__ieee754_atan2+0xfc>
 8010024:	ed9f 0b3c 	vldr	d0, [pc, #240]	@ 8010118 <__ieee754_atan2+0x168>
 8010028:	2f01      	cmp	r7, #1
 801002a:	d05d      	beq.n	80100e8 <__ieee754_atan2+0x138>
 801002c:	2f02      	cmp	r7, #2
 801002e:	d04a      	beq.n	80100c6 <__ieee754_atan2+0x116>
 8010030:	b1a7      	cbz	r7, 801005c <__ieee754_atan2+0xac>
 8010032:	ec51 0b10 	vmov	r0, r1, d0
 8010036:	a33a      	add	r3, pc, #232	@ (adr r3, 8010120 <__ieee754_atan2+0x170>)
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	f7f0 f92c 	bl	8000298 <__aeabi_dsub>
 8010040:	a339      	add	r3, pc, #228	@ (adr r3, 8010128 <__ieee754_atan2+0x178>)
 8010042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010046:	f7f0 f927 	bl	8000298 <__aeabi_dsub>
 801004a:	ec41 0b10 	vmov	d0, r0, r1
 801004e:	e005      	b.n	801005c <__ieee754_atan2+0xac>
 8010050:	4622      	mov	r2, r4
 8010052:	462b      	mov	r3, r5
 8010054:	f7f0 f922 	bl	800029c <__adddf3>
 8010058:	ec41 0b10 	vmov	d0, r0, r1
 801005c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010060:	2f02      	cmp	r7, #2
 8010062:	d00e      	beq.n	8010082 <__ieee754_atan2+0xd2>
 8010064:	2f03      	cmp	r7, #3
 8010066:	d1f9      	bne.n	801005c <__ieee754_atan2+0xac>
 8010068:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8010130 <__ieee754_atan2+0x180>
 801006c:	e7f6      	b.n	801005c <__ieee754_atan2+0xac>
 801006e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010072:	f000 ba89 	b.w	8010588 <atan>
 8010076:	f1b9 0f00 	cmp.w	r9, #0
 801007a:	db05      	blt.n	8010088 <__ieee754_atan2+0xd8>
 801007c:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8010138 <__ieee754_atan2+0x188>
 8010080:	e7ec      	b.n	801005c <__ieee754_atan2+0xac>
 8010082:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8010128 <__ieee754_atan2+0x178>
 8010086:	e7e9      	b.n	801005c <__ieee754_atan2+0xac>
 8010088:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 8010140 <__ieee754_atan2+0x190>
 801008c:	e7e6      	b.n	801005c <__ieee754_atan2+0xac>
 801008e:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 8010138 <__ieee754_atan2+0x188>
 8010092:	e7c9      	b.n	8010028 <__ieee754_atan2+0x78>
 8010094:	45f2      	cmp	sl, lr
 8010096:	f107 37ff 	add.w	r7, r7, #4294967295
 801009a:	d02e      	beq.n	80100fa <__ieee754_atan2+0x14a>
 801009c:	2f02      	cmp	r7, #2
 801009e:	d834      	bhi.n	801010a <__ieee754_atan2+0x15a>
 80100a0:	4b2c      	ldr	r3, [pc, #176]	@ (8010154 <__ieee754_atan2+0x1a4>)
 80100a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100a6:	ed93 0b00 	vldr	d0, [r3]
 80100aa:	e7d7      	b.n	801005c <__ieee754_atan2+0xac>
 80100ac:	4602      	mov	r2, r0
 80100ae:	460b      	mov	r3, r1
 80100b0:	4620      	mov	r0, r4
 80100b2:	4629      	mov	r1, r5
 80100b4:	f7f0 fbd2 	bl	800085c <__aeabi_ddiv>
 80100b8:	ec41 0b10 	vmov	d0, r0, r1
 80100bc:	f000 fc0c 	bl	80108d8 <fabs>
 80100c0:	f000 fa62 	bl	8010588 <atan>
 80100c4:	e7b0      	b.n	8010028 <__ieee754_atan2+0x78>
 80100c6:	a316      	add	r3, pc, #88	@ (adr r3, 8010120 <__ieee754_atan2+0x170>)
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	ec51 0b10 	vmov	r0, r1, d0
 80100d0:	f7f0 f8e2 	bl	8000298 <__aeabi_dsub>
 80100d4:	4602      	mov	r2, r0
 80100d6:	460b      	mov	r3, r1
 80100d8:	a113      	add	r1, pc, #76	@ (adr r1, 8010128 <__ieee754_atan2+0x178>)
 80100da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100de:	f7f0 f8db 	bl	8000298 <__aeabi_dsub>
 80100e2:	ec41 0b10 	vmov	d0, r0, r1
 80100e6:	e7b9      	b.n	801005c <__ieee754_atan2+0xac>
 80100e8:	ee10 1a90 	vmov	r1, s1
 80100ec:	ec53 2b10 	vmov	r2, r3, d0
 80100f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100f4:	ec43 2b10 	vmov	d0, r2, r3
 80100f8:	e7b0      	b.n	801005c <__ieee754_atan2+0xac>
 80100fa:	2f02      	cmp	r7, #2
 80100fc:	d808      	bhi.n	8010110 <__ieee754_atan2+0x160>
 80100fe:	4b16      	ldr	r3, [pc, #88]	@ (8010158 <__ieee754_atan2+0x1a8>)
 8010100:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010104:	ed93 0b00 	vldr	d0, [r3]
 8010108:	e7a8      	b.n	801005c <__ieee754_atan2+0xac>
 801010a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8010118 <__ieee754_atan2+0x168>
 801010e:	e7a5      	b.n	801005c <__ieee754_atan2+0xac>
 8010110:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8010148 <__ieee754_atan2+0x198>
 8010114:	e7a2      	b.n	801005c <__ieee754_atan2+0xac>
 8010116:	bf00      	nop
	...
 8010120:	33145c07 	.word	0x33145c07
 8010124:	3ca1a626 	.word	0x3ca1a626
 8010128:	54442d18 	.word	0x54442d18
 801012c:	400921fb 	.word	0x400921fb
 8010130:	54442d18 	.word	0x54442d18
 8010134:	c00921fb 	.word	0xc00921fb
 8010138:	54442d18 	.word	0x54442d18
 801013c:	3ff921fb 	.word	0x3ff921fb
 8010140:	54442d18 	.word	0x54442d18
 8010144:	bff921fb 	.word	0xbff921fb
 8010148:	54442d18 	.word	0x54442d18
 801014c:	3fe921fb 	.word	0x3fe921fb
 8010150:	7ff00000 	.word	0x7ff00000
 8010154:	080232b8 	.word	0x080232b8
 8010158:	080232d0 	.word	0x080232d0
 801015c:	00000000 	.word	0x00000000

08010160 <__ieee754_rem_pio2>:
 8010160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010164:	ec53 2b10 	vmov	r2, r3, d0
 8010168:	4987      	ldr	r1, [pc, #540]	@ (8010388 <__ieee754_rem_pio2+0x228>)
 801016a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 801016e:	428d      	cmp	r5, r1
 8010170:	b091      	sub	sp, #68	@ 0x44
 8010172:	4604      	mov	r4, r0
 8010174:	f240 808e 	bls.w	8010294 <__ieee754_rem_pio2+0x134>
 8010178:	4984      	ldr	r1, [pc, #528]	@ (801038c <__ieee754_rem_pio2+0x22c>)
 801017a:	428d      	cmp	r5, r1
 801017c:	461e      	mov	r6, r3
 801017e:	d82a      	bhi.n	80101d6 <__ieee754_rem_pio2+0x76>
 8010180:	2e00      	cmp	r6, #0
 8010182:	4610      	mov	r0, r2
 8010184:	4619      	mov	r1, r3
 8010186:	a376      	add	r3, pc, #472	@ (adr r3, 8010360 <__ieee754_rem_pio2+0x200>)
 8010188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018c:	f340 81a8 	ble.w	80104e0 <__ieee754_rem_pio2+0x380>
 8010190:	f7f0 f882 	bl	8000298 <__aeabi_dsub>
 8010194:	4b7e      	ldr	r3, [pc, #504]	@ (8010390 <__ieee754_rem_pio2+0x230>)
 8010196:	429d      	cmp	r5, r3
 8010198:	4606      	mov	r6, r0
 801019a:	460f      	mov	r7, r1
 801019c:	f000 808b 	beq.w	80102b6 <__ieee754_rem_pio2+0x156>
 80101a0:	a371      	add	r3, pc, #452	@ (adr r3, 8010368 <__ieee754_rem_pio2+0x208>)
 80101a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a6:	f7f0 f877 	bl	8000298 <__aeabi_dsub>
 80101aa:	4680      	mov	r8, r0
 80101ac:	4689      	mov	r9, r1
 80101ae:	4642      	mov	r2, r8
 80101b0:	464b      	mov	r3, r9
 80101b2:	4630      	mov	r0, r6
 80101b4:	4639      	mov	r1, r7
 80101b6:	f7f0 f86f 	bl	8000298 <__aeabi_dsub>
 80101ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8010368 <__ieee754_rem_pio2+0x208>)
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	f7f0 f86a 	bl	8000298 <__aeabi_dsub>
 80101c4:	e9c4 8900 	strd	r8, r9, [r4]
 80101c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101cc:	2701      	movs	r7, #1
 80101ce:	4638      	mov	r0, r7
 80101d0:	b011      	add	sp, #68	@ 0x44
 80101d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d6:	496f      	ldr	r1, [pc, #444]	@ (8010394 <__ieee754_rem_pio2+0x234>)
 80101d8:	428d      	cmp	r5, r1
 80101da:	f240 8086 	bls.w	80102ea <__ieee754_rem_pio2+0x18a>
 80101de:	496e      	ldr	r1, [pc, #440]	@ (8010398 <__ieee754_rem_pio2+0x238>)
 80101e0:	428d      	cmp	r5, r1
 80101e2:	d85f      	bhi.n	80102a4 <__ieee754_rem_pio2+0x144>
 80101e4:	ea4f 5a25 	mov.w	sl, r5, asr #20
 80101e8:	f2aa 4a16 	subw	sl, sl, #1046	@ 0x416
 80101ec:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
 80101f0:	4610      	mov	r0, r2
 80101f2:	4690      	mov	r8, r2
 80101f4:	4689      	mov	r9, r1
 80101f6:	f7f0 fcb7 	bl	8000b68 <__aeabi_d2iz>
 80101fa:	f7f0 f99b 	bl	8000534 <__aeabi_i2d>
 80101fe:	4602      	mov	r2, r0
 8010200:	460b      	mov	r3, r1
 8010202:	4640      	mov	r0, r8
 8010204:	4649      	mov	r1, r9
 8010206:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801020a:	f7f0 f845 	bl	8000298 <__aeabi_dsub>
 801020e:	4b63      	ldr	r3, [pc, #396]	@ (801039c <__ieee754_rem_pio2+0x23c>)
 8010210:	2200      	movs	r2, #0
 8010212:	f7f0 f9f9 	bl	8000608 <__aeabi_dmul>
 8010216:	4689      	mov	r9, r1
 8010218:	4680      	mov	r8, r0
 801021a:	f7f0 fca5 	bl	8000b68 <__aeabi_d2iz>
 801021e:	f7f0 f989 	bl	8000534 <__aeabi_i2d>
 8010222:	4602      	mov	r2, r0
 8010224:	460b      	mov	r3, r1
 8010226:	4640      	mov	r0, r8
 8010228:	4649      	mov	r1, r9
 801022a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801022e:	f7f0 f833 	bl	8000298 <__aeabi_dsub>
 8010232:	4b5a      	ldr	r3, [pc, #360]	@ (801039c <__ieee754_rem_pio2+0x23c>)
 8010234:	2200      	movs	r2, #0
 8010236:	f7f0 f9e7 	bl	8000608 <__aeabi_dmul>
 801023a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801023e:	af10      	add	r7, sp, #64	@ 0x40
 8010240:	2503      	movs	r5, #3
 8010242:	f04f 0800 	mov.w	r8, #0
 8010246:	f04f 0900 	mov.w	r9, #0
 801024a:	e977 0102 	ldrd	r0, r1, [r7, #-8]!
 801024e:	4642      	mov	r2, r8
 8010250:	464b      	mov	r3, r9
 8010252:	46ab      	mov	fp, r5
 8010254:	3d01      	subs	r5, #1
 8010256:	f7f0 fc3f 	bl	8000ad8 <__aeabi_dcmpeq>
 801025a:	2800      	cmp	r0, #0
 801025c:	d1f5      	bne.n	801024a <__ieee754_rem_pio2+0xea>
 801025e:	4b50      	ldr	r3, [pc, #320]	@ (80103a0 <__ieee754_rem_pio2+0x240>)
 8010260:	9301      	str	r3, [sp, #4]
 8010262:	2302      	movs	r3, #2
 8010264:	9300      	str	r3, [sp, #0]
 8010266:	4652      	mov	r2, sl
 8010268:	465b      	mov	r3, fp
 801026a:	4621      	mov	r1, r4
 801026c:	a80a      	add	r0, sp, #40	@ 0x28
 801026e:	f000 fb3b 	bl	80108e8 <__kernel_rem_pio2>
 8010272:	2e00      	cmp	r6, #0
 8010274:	4607      	mov	r7, r0
 8010276:	daaa      	bge.n	80101ce <__ieee754_rem_pio2+0x6e>
 8010278:	6861      	ldr	r1, [r4, #4]
 801027a:	6822      	ldr	r2, [r4, #0]
 801027c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010280:	68e1      	ldr	r1, [r4, #12]
 8010282:	e9c4 2300 	strd	r2, r3, [r4]
 8010286:	68a2      	ldr	r2, [r4, #8]
 8010288:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801028c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010290:	4247      	negs	r7, r0
 8010292:	e79c      	b.n	80101ce <__ieee754_rem_pio2+0x6e>
 8010294:	2000      	movs	r0, #0
 8010296:	2100      	movs	r1, #0
 8010298:	ed84 0b00 	vstr	d0, [r4]
 801029c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80102a0:	2700      	movs	r7, #0
 80102a2:	e794      	b.n	80101ce <__ieee754_rem_pio2+0x6e>
 80102a4:	4610      	mov	r0, r2
 80102a6:	4619      	mov	r1, r3
 80102a8:	f7ef fff6 	bl	8000298 <__aeabi_dsub>
 80102ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80102b0:	e9c4 0100 	strd	r0, r1, [r4]
 80102b4:	e7f4      	b.n	80102a0 <__ieee754_rem_pio2+0x140>
 80102b6:	a32e      	add	r3, pc, #184	@ (adr r3, 8010370 <__ieee754_rem_pio2+0x210>)
 80102b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102bc:	f7ef ffec 	bl	8000298 <__aeabi_dsub>
 80102c0:	a32d      	add	r3, pc, #180	@ (adr r3, 8010378 <__ieee754_rem_pio2+0x218>)
 80102c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c6:	4606      	mov	r6, r0
 80102c8:	460f      	mov	r7, r1
 80102ca:	f7ef ffe5 	bl	8000298 <__aeabi_dsub>
 80102ce:	4680      	mov	r8, r0
 80102d0:	4689      	mov	r9, r1
 80102d2:	4642      	mov	r2, r8
 80102d4:	464b      	mov	r3, r9
 80102d6:	4630      	mov	r0, r6
 80102d8:	4639      	mov	r1, r7
 80102da:	f7ef ffdd 	bl	8000298 <__aeabi_dsub>
 80102de:	a326      	add	r3, pc, #152	@ (adr r3, 8010378 <__ieee754_rem_pio2+0x218>)
 80102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e4:	f7ef ffd8 	bl	8000298 <__aeabi_dsub>
 80102e8:	e76c      	b.n	80101c4 <__ieee754_rem_pio2+0x64>
 80102ea:	f000 faf5 	bl	80108d8 <fabs>
 80102ee:	ec59 8b10 	vmov	r8, r9, d0
 80102f2:	a323      	add	r3, pc, #140	@ (adr r3, 8010380 <__ieee754_rem_pio2+0x220>)
 80102f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f8:	4640      	mov	r0, r8
 80102fa:	4649      	mov	r1, r9
 80102fc:	f7f0 f984 	bl	8000608 <__aeabi_dmul>
 8010300:	4b28      	ldr	r3, [pc, #160]	@ (80103a4 <__ieee754_rem_pio2+0x244>)
 8010302:	2200      	movs	r2, #0
 8010304:	f7ef ffca 	bl	800029c <__adddf3>
 8010308:	f7f0 fc2e 	bl	8000b68 <__aeabi_d2iz>
 801030c:	4607      	mov	r7, r0
 801030e:	f7f0 f911 	bl	8000534 <__aeabi_i2d>
 8010312:	4602      	mov	r2, r0
 8010314:	460b      	mov	r3, r1
 8010316:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801031a:	a311      	add	r3, pc, #68	@ (adr r3, 8010360 <__ieee754_rem_pio2+0x200>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	f7f0 f972 	bl	8000608 <__aeabi_dmul>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	4640      	mov	r0, r8
 801032a:	4649      	mov	r1, r9
 801032c:	f7ef ffb4 	bl	8000298 <__aeabi_dsub>
 8010330:	a30d      	add	r3, pc, #52	@ (adr r3, 8010368 <__ieee754_rem_pio2+0x208>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	4682      	mov	sl, r0
 8010338:	468b      	mov	fp, r1
 801033a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801033e:	f7f0 f963 	bl	8000608 <__aeabi_dmul>
 8010342:	2f1f      	cmp	r7, #31
 8010344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010348:	dc30      	bgt.n	80103ac <__ieee754_rem_pio2+0x24c>
 801034a:	4b17      	ldr	r3, [pc, #92]	@ (80103a8 <__ieee754_rem_pio2+0x248>)
 801034c:	1e7a      	subs	r2, r7, #1
 801034e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010352:	42ab      	cmp	r3, r5
 8010354:	d02a      	beq.n	80103ac <__ieee754_rem_pio2+0x24c>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	e09d      	b.n	8010498 <__ieee754_rem_pio2+0x338>
 801035c:	f3af 8000 	nop.w
 8010360:	54400000 	.word	0x54400000
 8010364:	3ff921fb 	.word	0x3ff921fb
 8010368:	1a626331 	.word	0x1a626331
 801036c:	3dd0b461 	.word	0x3dd0b461
 8010370:	1a600000 	.word	0x1a600000
 8010374:	3dd0b461 	.word	0x3dd0b461
 8010378:	2e037073 	.word	0x2e037073
 801037c:	3ba3198a 	.word	0x3ba3198a
 8010380:	6dc9c883 	.word	0x6dc9c883
 8010384:	3fe45f30 	.word	0x3fe45f30
 8010388:	3fe921fb 	.word	0x3fe921fb
 801038c:	4002d97b 	.word	0x4002d97b
 8010390:	3ff921fb 	.word	0x3ff921fb
 8010394:	413921fb 	.word	0x413921fb
 8010398:	7fefffff 	.word	0x7fefffff
 801039c:	41700000 	.word	0x41700000
 80103a0:	08023368 	.word	0x08023368
 80103a4:	3fe00000 	.word	0x3fe00000
 80103a8:	080232e8 	.word	0x080232e8
 80103ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103b0:	4650      	mov	r0, sl
 80103b2:	4659      	mov	r1, fp
 80103b4:	f7ef ff70 	bl	8000298 <__aeabi_dsub>
 80103b8:	152b      	asrs	r3, r5, #20
 80103ba:	9307      	str	r3, [sp, #28]
 80103bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80103c0:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 80103c4:	2b10      	cmp	r3, #16
 80103c6:	4680      	mov	r8, r0
 80103c8:	4689      	mov	r9, r1
 80103ca:	dd6b      	ble.n	80104a4 <__ieee754_rem_pio2+0x344>
 80103cc:	a364      	add	r3, pc, #400	@ (adr r3, 8010560 <__ieee754_rem_pio2+0x400>)
 80103ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103d6:	f7f0 f917 	bl	8000608 <__aeabi_dmul>
 80103da:	4680      	mov	r8, r0
 80103dc:	4689      	mov	r9, r1
 80103de:	4642      	mov	r2, r8
 80103e0:	464b      	mov	r3, r9
 80103e2:	4650      	mov	r0, sl
 80103e4:	4659      	mov	r1, fp
 80103e6:	f7ef ff57 	bl	8000298 <__aeabi_dsub>
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	4650      	mov	r0, sl
 80103f0:	4659      	mov	r1, fp
 80103f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80103f6:	4692      	mov	sl, r2
 80103f8:	469b      	mov	fp, r3
 80103fa:	f7ef ff4d 	bl	8000298 <__aeabi_dsub>
 80103fe:	4642      	mov	r2, r8
 8010400:	464b      	mov	r3, r9
 8010402:	f7ef ff49 	bl	8000298 <__aeabi_dsub>
 8010406:	a358      	add	r3, pc, #352	@ (adr r3, 8010568 <__ieee754_rem_pio2+0x408>)
 8010408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040c:	4680      	mov	r8, r0
 801040e:	4689      	mov	r9, r1
 8010410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010414:	f7f0 f8f8 	bl	8000608 <__aeabi_dmul>
 8010418:	4642      	mov	r2, r8
 801041a:	464b      	mov	r3, r9
 801041c:	f7ef ff3c 	bl	8000298 <__aeabi_dsub>
 8010420:	4602      	mov	r2, r0
 8010422:	460b      	mov	r3, r1
 8010424:	4650      	mov	r0, sl
 8010426:	4659      	mov	r1, fp
 8010428:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801042c:	f7ef ff34 	bl	8000298 <__aeabi_dsub>
 8010430:	9a07      	ldr	r2, [sp, #28]
 8010432:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	2b31      	cmp	r3, #49	@ 0x31
 801043a:	4680      	mov	r8, r0
 801043c:	4689      	mov	r9, r1
 801043e:	dd4c      	ble.n	80104da <__ieee754_rem_pio2+0x37a>
 8010440:	a34c      	add	r3, pc, #304	@ (adr r3, 8010574 <__ieee754_rem_pio2+0x414>)
 8010442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801044a:	f7f0 f8dd 	bl	8000608 <__aeabi_dmul>
 801044e:	4680      	mov	r8, r0
 8010450:	4689      	mov	r9, r1
 8010452:	4642      	mov	r2, r8
 8010454:	464b      	mov	r3, r9
 8010456:	4650      	mov	r0, sl
 8010458:	4659      	mov	r1, fp
 801045a:	f7ef ff1d 	bl	8000298 <__aeabi_dsub>
 801045e:	4682      	mov	sl, r0
 8010460:	468b      	mov	fp, r1
 8010462:	4652      	mov	r2, sl
 8010464:	465b      	mov	r3, fp
 8010466:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801046a:	f7ef ff15 	bl	8000298 <__aeabi_dsub>
 801046e:	4642      	mov	r2, r8
 8010470:	464b      	mov	r3, r9
 8010472:	f7ef ff11 	bl	8000298 <__aeabi_dsub>
 8010476:	a341      	add	r3, pc, #260	@ (adr r3, 801057c <__ieee754_rem_pio2+0x41c>)
 8010478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047c:	4680      	mov	r8, r0
 801047e:	4689      	mov	r9, r1
 8010480:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010484:	f7f0 f8c0 	bl	8000608 <__aeabi_dmul>
 8010488:	4642      	mov	r2, r8
 801048a:	464b      	mov	r3, r9
 801048c:	f7ef ff04 	bl	8000298 <__aeabi_dsub>
 8010490:	4602      	mov	r2, r0
 8010492:	460b      	mov	r3, r1
 8010494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010498:	4650      	mov	r0, sl
 801049a:	4659      	mov	r1, fp
 801049c:	f7ef fefc 	bl	8000298 <__aeabi_dsub>
 80104a0:	4680      	mov	r8, r0
 80104a2:	4689      	mov	r9, r1
 80104a4:	4642      	mov	r2, r8
 80104a6:	464b      	mov	r3, r9
 80104a8:	e9c4 8900 	strd	r8, r9, [r4]
 80104ac:	4650      	mov	r0, sl
 80104ae:	4659      	mov	r1, fp
 80104b0:	f7ef fef2 	bl	8000298 <__aeabi_dsub>
 80104b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104b8:	f7ef feee 	bl	8000298 <__aeabi_dsub>
 80104bc:	2e00      	cmp	r6, #0
 80104be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80104c2:	f6bf ae84 	bge.w	80101ce <__ieee754_rem_pio2+0x6e>
 80104c6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80104ca:	e9c4 8300 	strd	r8, r3, [r4]
 80104ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80104d2:	e9c4 0302 	strd	r0, r3, [r4, #8]
 80104d6:	427f      	negs	r7, r7
 80104d8:	e679      	b.n	80101ce <__ieee754_rem_pio2+0x6e>
 80104da:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80104de:	e7e1      	b.n	80104a4 <__ieee754_rem_pio2+0x344>
 80104e0:	f7ef fedc 	bl	800029c <__adddf3>
 80104e4:	4b22      	ldr	r3, [pc, #136]	@ (8010570 <__ieee754_rem_pio2+0x410>)
 80104e6:	429d      	cmp	r5, r3
 80104e8:	4606      	mov	r6, r0
 80104ea:	460f      	mov	r7, r1
 80104ec:	d018      	beq.n	8010520 <__ieee754_rem_pio2+0x3c0>
 80104ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8010558 <__ieee754_rem_pio2+0x3f8>)
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	f7ef fed2 	bl	800029c <__adddf3>
 80104f8:	4680      	mov	r8, r0
 80104fa:	4689      	mov	r9, r1
 80104fc:	4642      	mov	r2, r8
 80104fe:	464b      	mov	r3, r9
 8010500:	4630      	mov	r0, r6
 8010502:	4639      	mov	r1, r7
 8010504:	f7ef fec8 	bl	8000298 <__aeabi_dsub>
 8010508:	a313      	add	r3, pc, #76	@ (adr r3, 8010558 <__ieee754_rem_pio2+0x3f8>)
 801050a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050e:	f7ef fec5 	bl	800029c <__adddf3>
 8010512:	e9c4 8900 	strd	r8, r9, [r4]
 8010516:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801051a:	f04f 37ff 	mov.w	r7, #4294967295
 801051e:	e656      	b.n	80101ce <__ieee754_rem_pio2+0x6e>
 8010520:	a30f      	add	r3, pc, #60	@ (adr r3, 8010560 <__ieee754_rem_pio2+0x400>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7ef feb9 	bl	800029c <__adddf3>
 801052a:	a30f      	add	r3, pc, #60	@ (adr r3, 8010568 <__ieee754_rem_pio2+0x408>)
 801052c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010530:	4606      	mov	r6, r0
 8010532:	460f      	mov	r7, r1
 8010534:	f7ef feb2 	bl	800029c <__adddf3>
 8010538:	4680      	mov	r8, r0
 801053a:	4689      	mov	r9, r1
 801053c:	4642      	mov	r2, r8
 801053e:	464b      	mov	r3, r9
 8010540:	4630      	mov	r0, r6
 8010542:	4639      	mov	r1, r7
 8010544:	f7ef fea8 	bl	8000298 <__aeabi_dsub>
 8010548:	a307      	add	r3, pc, #28	@ (adr r3, 8010568 <__ieee754_rem_pio2+0x408>)
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	f7ef fea5 	bl	800029c <__adddf3>
 8010552:	e7de      	b.n	8010512 <__ieee754_rem_pio2+0x3b2>
 8010554:	f3af 8000 	nop.w
 8010558:	1a626331 	.word	0x1a626331
 801055c:	3dd0b461 	.word	0x3dd0b461
 8010560:	1a600000 	.word	0x1a600000
 8010564:	3dd0b461 	.word	0x3dd0b461
 8010568:	2e037073 	.word	0x2e037073
 801056c:	3ba3198a 	.word	0x3ba3198a
 8010570:	3ff921fb 	.word	0x3ff921fb
 8010574:	2e000000 	.word	0x2e000000
 8010578:	3ba3198a 	.word	0x3ba3198a
 801057c:	252049c1 	.word	0x252049c1
 8010580:	397b839a 	.word	0x397b839a
 8010584:	00000000 	.word	0x00000000

08010588 <atan>:
 8010588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058c:	ec55 4b10 	vmov	r4, r5, d0
 8010590:	4bc7      	ldr	r3, [pc, #796]	@ (80108b0 <atan+0x328>)
 8010592:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010596:	429e      	cmp	r6, r3
 8010598:	46aa      	mov	sl, r5
 801059a:	d917      	bls.n	80105cc <atan+0x44>
 801059c:	4bc5      	ldr	r3, [pc, #788]	@ (80108b4 <atan+0x32c>)
 801059e:	429e      	cmp	r6, r3
 80105a0:	d80a      	bhi.n	80105b8 <atan+0x30>
 80105a2:	d007      	beq.n	80105b4 <atan+0x2c>
 80105a4:	f1ba 0f00 	cmp.w	sl, #0
 80105a8:	f340 80cb 	ble.w	8010742 <atan+0x1ba>
 80105ac:	ed9f 0ba4 	vldr	d0, [pc, #656]	@ 8010840 <atan+0x2b8>
 80105b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b4:	2c00      	cmp	r4, #0
 80105b6:	d0f5      	beq.n	80105a4 <atan+0x1c>
 80105b8:	4622      	mov	r2, r4
 80105ba:	462b      	mov	r3, r5
 80105bc:	4620      	mov	r0, r4
 80105be:	4629      	mov	r1, r5
 80105c0:	f7ef fe6c 	bl	800029c <__adddf3>
 80105c4:	ec41 0b10 	vmov	d0, r0, r1
 80105c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	4bba      	ldr	r3, [pc, #744]	@ (80108b8 <atan+0x330>)
 80105ce:	429e      	cmp	r6, r3
 80105d0:	f200 80bb 	bhi.w	801074a <atan+0x1c2>
 80105d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80105d8:	429e      	cmp	r6, r3
 80105da:	f240 80a1 	bls.w	8010720 <atan+0x198>
 80105de:	f04f 3bff 	mov.w	fp, #4294967295
 80105e2:	4622      	mov	r2, r4
 80105e4:	462b      	mov	r3, r5
 80105e6:	4620      	mov	r0, r4
 80105e8:	4629      	mov	r1, r5
 80105ea:	f7f0 f80d 	bl	8000608 <__aeabi_dmul>
 80105ee:	4602      	mov	r2, r0
 80105f0:	460b      	mov	r3, r1
 80105f2:	4680      	mov	r8, r0
 80105f4:	4689      	mov	r9, r1
 80105f6:	f7f0 f807 	bl	8000608 <__aeabi_dmul>
 80105fa:	a393      	add	r3, pc, #588	@ (adr r3, 8010848 <atan+0x2c0>)
 80105fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010600:	4606      	mov	r6, r0
 8010602:	460f      	mov	r7, r1
 8010604:	f7f0 f800 	bl	8000608 <__aeabi_dmul>
 8010608:	a391      	add	r3, pc, #580	@ (adr r3, 8010850 <atan+0x2c8>)
 801060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060e:	f7ef fe45 	bl	800029c <__adddf3>
 8010612:	4632      	mov	r2, r6
 8010614:	463b      	mov	r3, r7
 8010616:	f7ef fff7 	bl	8000608 <__aeabi_dmul>
 801061a:	a38f      	add	r3, pc, #572	@ (adr r3, 8010858 <atan+0x2d0>)
 801061c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010620:	f7ef fe3c 	bl	800029c <__adddf3>
 8010624:	4632      	mov	r2, r6
 8010626:	463b      	mov	r3, r7
 8010628:	f7ef ffee 	bl	8000608 <__aeabi_dmul>
 801062c:	a38c      	add	r3, pc, #560	@ (adr r3, 8010860 <atan+0x2d8>)
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	f7ef fe33 	bl	800029c <__adddf3>
 8010636:	4632      	mov	r2, r6
 8010638:	463b      	mov	r3, r7
 801063a:	f7ef ffe5 	bl	8000608 <__aeabi_dmul>
 801063e:	a38a      	add	r3, pc, #552	@ (adr r3, 8010868 <atan+0x2e0>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	f7ef fe2a 	bl	800029c <__adddf3>
 8010648:	4632      	mov	r2, r6
 801064a:	463b      	mov	r3, r7
 801064c:	f7ef ffdc 	bl	8000608 <__aeabi_dmul>
 8010650:	a387      	add	r3, pc, #540	@ (adr r3, 8010870 <atan+0x2e8>)
 8010652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010656:	f7ef fe21 	bl	800029c <__adddf3>
 801065a:	4642      	mov	r2, r8
 801065c:	464b      	mov	r3, r9
 801065e:	f7ef ffd3 	bl	8000608 <__aeabi_dmul>
 8010662:	a385      	add	r3, pc, #532	@ (adr r3, 8010878 <atan+0x2f0>)
 8010664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010668:	4680      	mov	r8, r0
 801066a:	4689      	mov	r9, r1
 801066c:	4630      	mov	r0, r6
 801066e:	4639      	mov	r1, r7
 8010670:	f7ef ffca 	bl	8000608 <__aeabi_dmul>
 8010674:	a382      	add	r3, pc, #520	@ (adr r3, 8010880 <atan+0x2f8>)
 8010676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067a:	f7ef fe0d 	bl	8000298 <__aeabi_dsub>
 801067e:	4632      	mov	r2, r6
 8010680:	463b      	mov	r3, r7
 8010682:	f7ef ffc1 	bl	8000608 <__aeabi_dmul>
 8010686:	a380      	add	r3, pc, #512	@ (adr r3, 8010888 <atan+0x300>)
 8010688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068c:	f7ef fe04 	bl	8000298 <__aeabi_dsub>
 8010690:	4632      	mov	r2, r6
 8010692:	463b      	mov	r3, r7
 8010694:	f7ef ffb8 	bl	8000608 <__aeabi_dmul>
 8010698:	a37d      	add	r3, pc, #500	@ (adr r3, 8010890 <atan+0x308>)
 801069a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069e:	f7ef fdfb 	bl	8000298 <__aeabi_dsub>
 80106a2:	4632      	mov	r2, r6
 80106a4:	463b      	mov	r3, r7
 80106a6:	f7ef ffaf 	bl	8000608 <__aeabi_dmul>
 80106aa:	a37b      	add	r3, pc, #492	@ (adr r3, 8010898 <atan+0x310>)
 80106ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b0:	f7ef fdf2 	bl	8000298 <__aeabi_dsub>
 80106b4:	4632      	mov	r2, r6
 80106b6:	463b      	mov	r3, r7
 80106b8:	f7ef ffa6 	bl	8000608 <__aeabi_dmul>
 80106bc:	4602      	mov	r2, r0
 80106be:	460b      	mov	r3, r1
 80106c0:	4640      	mov	r0, r8
 80106c2:	4649      	mov	r1, r9
 80106c4:	f7ef fdea 	bl	800029c <__adddf3>
 80106c8:	4622      	mov	r2, r4
 80106ca:	462b      	mov	r3, r5
 80106cc:	f7ef ff9c 	bl	8000608 <__aeabi_dmul>
 80106d0:	f1bb 3fff 	cmp.w	fp, #4294967295
 80106d4:	4602      	mov	r2, r0
 80106d6:	460b      	mov	r3, r1
 80106d8:	d062      	beq.n	80107a0 <atan+0x218>
 80106da:	4b78      	ldr	r3, [pc, #480]	@ (80108bc <atan+0x334>)
 80106dc:	4e78      	ldr	r6, [pc, #480]	@ (80108c0 <atan+0x338>)
 80106de:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	f7ef fdd7 	bl	8000298 <__aeabi_dsub>
 80106ea:	4622      	mov	r2, r4
 80106ec:	462b      	mov	r3, r5
 80106ee:	f7ef fdd3 	bl	8000298 <__aeabi_dsub>
 80106f2:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
 80106f6:	4602      	mov	r2, r0
 80106f8:	460b      	mov	r3, r1
 80106fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 80106fe:	f7ef fdcb 	bl	8000298 <__aeabi_dsub>
 8010702:	f1ba 0f00 	cmp.w	sl, #0
 8010706:	ec41 0b10 	vmov	d0, r0, r1
 801070a:	f6bf af5d 	bge.w	80105c8 <atan+0x40>
 801070e:	ee10 1a90 	vmov	r1, s1
 8010712:	4602      	mov	r2, r0
 8010714:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010718:	ec43 2b10 	vmov	d0, r2, r3
 801071c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010720:	a35f      	add	r3, pc, #380	@ (adr r3, 80108a0 <atan+0x318>)
 8010722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010726:	4620      	mov	r0, r4
 8010728:	4629      	mov	r1, r5
 801072a:	f7ef fdb7 	bl	800029c <__adddf3>
 801072e:	4b65      	ldr	r3, [pc, #404]	@ (80108c4 <atan+0x33c>)
 8010730:	2200      	movs	r2, #0
 8010732:	f7f0 f9f9 	bl	8000b28 <__aeabi_dcmpgt>
 8010736:	2800      	cmp	r0, #0
 8010738:	f43f af51 	beq.w	80105de <atan+0x56>
 801073c:	ec45 4b10 	vmov	d0, r4, r5
 8010740:	e742      	b.n	80105c8 <atan+0x40>
 8010742:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 80108a8 <atan+0x320>
 8010746:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801074a:	f000 f8c5 	bl	80108d8 <fabs>
 801074e:	4b5e      	ldr	r3, [pc, #376]	@ (80108c8 <atan+0x340>)
 8010750:	429e      	cmp	r6, r3
 8010752:	ec55 4b10 	vmov	r4, r5, d0
 8010756:	d82b      	bhi.n	80107b0 <atan+0x228>
 8010758:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801075c:	429e      	cmp	r6, r3
 801075e:	d854      	bhi.n	801080a <atan+0x282>
 8010760:	4622      	mov	r2, r4
 8010762:	462b      	mov	r3, r5
 8010764:	4620      	mov	r0, r4
 8010766:	4629      	mov	r1, r5
 8010768:	f7ef fd98 	bl	800029c <__adddf3>
 801076c:	4b55      	ldr	r3, [pc, #340]	@ (80108c4 <atan+0x33c>)
 801076e:	2200      	movs	r2, #0
 8010770:	f7ef fd92 	bl	8000298 <__aeabi_dsub>
 8010774:	4602      	mov	r2, r0
 8010776:	460b      	mov	r3, r1
 8010778:	4620      	mov	r0, r4
 801077a:	4629      	mov	r1, r5
 801077c:	4614      	mov	r4, r2
 801077e:	461d      	mov	r5, r3
 8010780:	2200      	movs	r2, #0
 8010782:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010786:	f7ef fd89 	bl	800029c <__adddf3>
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	4620      	mov	r0, r4
 8010790:	4629      	mov	r1, r5
 8010792:	f7f0 f863 	bl	800085c <__aeabi_ddiv>
 8010796:	f04f 0b00 	mov.w	fp, #0
 801079a:	4604      	mov	r4, r0
 801079c:	460d      	mov	r5, r1
 801079e:	e720      	b.n	80105e2 <atan+0x5a>
 80107a0:	4620      	mov	r0, r4
 80107a2:	4629      	mov	r1, r5
 80107a4:	f7ef fd78 	bl	8000298 <__aeabi_dsub>
 80107a8:	ec41 0b10 	vmov	d0, r0, r1
 80107ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b0:	4b46      	ldr	r3, [pc, #280]	@ (80108cc <atan+0x344>)
 80107b2:	429e      	cmp	r6, r3
 80107b4:	d21e      	bcs.n	80107f4 <atan+0x26c>
 80107b6:	4b46      	ldr	r3, [pc, #280]	@ (80108d0 <atan+0x348>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	4620      	mov	r0, r4
 80107bc:	4629      	mov	r1, r5
 80107be:	f7ef fd6b 	bl	8000298 <__aeabi_dsub>
 80107c2:	4602      	mov	r2, r0
 80107c4:	460b      	mov	r3, r1
 80107c6:	4620      	mov	r0, r4
 80107c8:	4629      	mov	r1, r5
 80107ca:	4614      	mov	r4, r2
 80107cc:	461d      	mov	r5, r3
 80107ce:	2200      	movs	r2, #0
 80107d0:	4b3f      	ldr	r3, [pc, #252]	@ (80108d0 <atan+0x348>)
 80107d2:	f7ef ff19 	bl	8000608 <__aeabi_dmul>
 80107d6:	4b3b      	ldr	r3, [pc, #236]	@ (80108c4 <atan+0x33c>)
 80107d8:	2200      	movs	r2, #0
 80107da:	f7ef fd5f 	bl	800029c <__adddf3>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4620      	mov	r0, r4
 80107e4:	4629      	mov	r1, r5
 80107e6:	f7f0 f839 	bl	800085c <__aeabi_ddiv>
 80107ea:	f04f 0b02 	mov.w	fp, #2
 80107ee:	4604      	mov	r4, r0
 80107f0:	460d      	mov	r5, r1
 80107f2:	e6f6      	b.n	80105e2 <atan+0x5a>
 80107f4:	4622      	mov	r2, r4
 80107f6:	462b      	mov	r3, r5
 80107f8:	4936      	ldr	r1, [pc, #216]	@ (80108d4 <atan+0x34c>)
 80107fa:	2000      	movs	r0, #0
 80107fc:	f7f0 f82e 	bl	800085c <__aeabi_ddiv>
 8010800:	f04f 0b03 	mov.w	fp, #3
 8010804:	4604      	mov	r4, r0
 8010806:	460d      	mov	r5, r1
 8010808:	e6eb      	b.n	80105e2 <atan+0x5a>
 801080a:	4b2e      	ldr	r3, [pc, #184]	@ (80108c4 <atan+0x33c>)
 801080c:	2200      	movs	r2, #0
 801080e:	4620      	mov	r0, r4
 8010810:	4629      	mov	r1, r5
 8010812:	f7ef fd41 	bl	8000298 <__aeabi_dsub>
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	4620      	mov	r0, r4
 801081c:	4629      	mov	r1, r5
 801081e:	4614      	mov	r4, r2
 8010820:	461d      	mov	r5, r3
 8010822:	2200      	movs	r2, #0
 8010824:	4b27      	ldr	r3, [pc, #156]	@ (80108c4 <atan+0x33c>)
 8010826:	f7ef fd39 	bl	800029c <__adddf3>
 801082a:	4602      	mov	r2, r0
 801082c:	460b      	mov	r3, r1
 801082e:	4620      	mov	r0, r4
 8010830:	4629      	mov	r1, r5
 8010832:	f7f0 f813 	bl	800085c <__aeabi_ddiv>
 8010836:	f04f 0b01 	mov.w	fp, #1
 801083a:	4604      	mov	r4, r0
 801083c:	460d      	mov	r5, r1
 801083e:	e6d0      	b.n	80105e2 <atan+0x5a>
 8010840:	54442d18 	.word	0x54442d18
 8010844:	3ff921fb 	.word	0x3ff921fb
 8010848:	e322da11 	.word	0xe322da11
 801084c:	3f90ad3a 	.word	0x3f90ad3a
 8010850:	24760deb 	.word	0x24760deb
 8010854:	3fa97b4b 	.word	0x3fa97b4b
 8010858:	a0d03d51 	.word	0xa0d03d51
 801085c:	3fb10d66 	.word	0x3fb10d66
 8010860:	c54c206e 	.word	0xc54c206e
 8010864:	3fb745cd 	.word	0x3fb745cd
 8010868:	920083ff 	.word	0x920083ff
 801086c:	3fc24924 	.word	0x3fc24924
 8010870:	5555550d 	.word	0x5555550d
 8010874:	3fd55555 	.word	0x3fd55555
 8010878:	2c6a6c2f 	.word	0x2c6a6c2f
 801087c:	bfa2b444 	.word	0xbfa2b444
 8010880:	52defd9a 	.word	0x52defd9a
 8010884:	3fadde2d 	.word	0x3fadde2d
 8010888:	af749a6d 	.word	0xaf749a6d
 801088c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010890:	fe231671 	.word	0xfe231671
 8010894:	3fbc71c6 	.word	0x3fbc71c6
 8010898:	9998ebc4 	.word	0x9998ebc4
 801089c:	3fc99999 	.word	0x3fc99999
 80108a0:	8800759c 	.word	0x8800759c
 80108a4:	7e37e43c 	.word	0x7e37e43c
 80108a8:	54442d18 	.word	0x54442d18
 80108ac:	bff921fb 	.word	0xbff921fb
 80108b0:	440fffff 	.word	0x440fffff
 80108b4:	7ff00000 	.word	0x7ff00000
 80108b8:	3fdbffff 	.word	0x3fdbffff
 80108bc:	08023470 	.word	0x08023470
 80108c0:	08023490 	.word	0x08023490
 80108c4:	3ff00000 	.word	0x3ff00000
 80108c8:	3ff2ffff 	.word	0x3ff2ffff
 80108cc:	40038000 	.word	0x40038000
 80108d0:	3ff80000 	.word	0x3ff80000
 80108d4:	bff00000 	.word	0xbff00000

080108d8 <fabs>:
 80108d8:	ec51 0b10 	vmov	r0, r1, d0
 80108dc:	4602      	mov	r2, r0
 80108de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80108e2:	ec43 2b10 	vmov	d0, r2, r3
 80108e6:	4770      	bx	lr

080108e8 <__kernel_rem_pio2>:
 80108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80108f0:	469c      	mov	ip, r3
 80108f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80108f4:	4bbd      	ldr	r3, [pc, #756]	@ (8010bec <__kernel_rem_pio2+0x304>)
 80108f6:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80108f8:	9004      	str	r0, [sp, #16]
 80108fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80108fe:	9305      	str	r3, [sp, #20]
 8010900:	f112 0f14 	cmn.w	r2, #20
 8010904:	f10c 33ff 	add.w	r3, ip, #4294967295
 8010908:	9303      	str	r3, [sp, #12]
 801090a:	f2c0 82ad 	blt.w	8010e68 <__kernel_rem_pio2+0x580>
 801090e:	49b8      	ldr	r1, [pc, #736]	@ (8010bf0 <__kernel_rem_pio2+0x308>)
 8010910:	1ed3      	subs	r3, r2, #3
 8010912:	fb81 0103 	smull	r0, r1, r1, r3
 8010916:	17db      	asrs	r3, r3, #31
 8010918:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 801091c:	9308      	str	r3, [sp, #32]
 801091e:	3301      	adds	r3, #1
 8010920:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	18d6      	adds	r6, r2, r3
 8010928:	9a08      	ldr	r2, [sp, #32]
 801092a:	9b03      	ldr	r3, [sp, #12]
 801092c:	1ad4      	subs	r4, r2, r3
 801092e:	9a05      	ldr	r2, [sp, #20]
 8010930:	18d7      	adds	r7, r2, r3
 8010932:	d41d      	bmi.n	8010970 <__kernel_rem_pio2+0x88>
 8010934:	3701      	adds	r7, #1
 8010936:	f8dd a28c 	ldr.w	sl, [sp, #652]	@ 0x28c
 801093a:	4427      	add	r7, r4
 801093c:	ad20      	add	r5, sp, #128	@ 0x80
 801093e:	f04f 0800 	mov.w	r8, #0
 8010942:	f04f 0900 	mov.w	r9, #0
 8010946:	46e3      	mov	fp, ip
 8010948:	e008      	b.n	801095c <__kernel_rem_pio2+0x74>
 801094a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 801094e:	f7ef fdf1 	bl	8000534 <__aeabi_i2d>
 8010952:	3401      	adds	r4, #1
 8010954:	42bc      	cmp	r4, r7
 8010956:	e8e5 0102 	strd	r0, r1, [r5], #8
 801095a:	d008      	beq.n	801096e <__kernel_rem_pio2+0x86>
 801095c:	2c00      	cmp	r4, #0
 801095e:	daf4      	bge.n	801094a <__kernel_rem_pio2+0x62>
 8010960:	3401      	adds	r4, #1
 8010962:	4640      	mov	r0, r8
 8010964:	4649      	mov	r1, r9
 8010966:	42bc      	cmp	r4, r7
 8010968:	e8e5 0102 	strd	r0, r1, [r5], #8
 801096c:	d1f6      	bne.n	801095c <__kernel_rem_pio2+0x74>
 801096e:	46dc      	mov	ip, fp
 8010970:	9b05      	ldr	r3, [sp, #20]
 8010972:	2b00      	cmp	r3, #0
 8010974:	bfb8      	it	lt
 8010976:	ea4f 07cc 	movlt.w	r7, ip, lsl #3
 801097a:	db38      	blt.n	80109ee <__kernel_rem_pio2+0x106>
 801097c:	ab20      	add	r3, sp, #128	@ 0x80
 801097e:	eb03 0acc 	add.w	sl, r3, ip, lsl #3
 8010982:	9b05      	ldr	r3, [sp, #20]
 8010984:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010988:	9602      	str	r6, [sp, #8]
 801098a:	4463      	add	r3, ip
 801098c:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	9b04      	ldr	r3, [sp, #16]
 8010994:	e9cd c706 	strd	ip, r7, [sp, #24]
 8010998:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 801099c:	eb03 08cc 	add.w	r8, r3, ip, lsl #3
 80109a0:	464b      	mov	r3, r9
 80109a2:	46d9      	mov	r9, fp
 80109a4:	469b      	mov	fp, r3
 80109a6:	9b03      	ldr	r3, [sp, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f2c0 81a2 	blt.w	8010cf2 <__kernel_rem_pio2+0x40a>
 80109ae:	9e04      	ldr	r6, [sp, #16]
 80109b0:	4657      	mov	r7, sl
 80109b2:	2400      	movs	r4, #0
 80109b4:	2500      	movs	r5, #0
 80109b6:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80109ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80109be:	f7ef fe23 	bl	8000608 <__aeabi_dmul>
 80109c2:	4602      	mov	r2, r0
 80109c4:	460b      	mov	r3, r1
 80109c6:	4620      	mov	r0, r4
 80109c8:	4629      	mov	r1, r5
 80109ca:	f7ef fc67 	bl	800029c <__adddf3>
 80109ce:	4546      	cmp	r6, r8
 80109d0:	4604      	mov	r4, r0
 80109d2:	460d      	mov	r5, r1
 80109d4:	d1ef      	bne.n	80109b6 <__kernel_rem_pio2+0xce>
 80109d6:	9b00      	ldr	r3, [sp, #0]
 80109d8:	f10b 0b01 	add.w	fp, fp, #1
 80109dc:	459b      	cmp	fp, r3
 80109de:	e8e9 4502 	strd	r4, r5, [r9], #8
 80109e2:	f10a 0a08 	add.w	sl, sl, #8
 80109e6:	d1de      	bne.n	80109a6 <__kernel_rem_pio2+0xbe>
 80109e8:	e9dd c706 	ldrd	ip, r7, [sp, #24]
 80109ec:	9e02      	ldr	r6, [sp, #8]
 80109ee:	9b04      	ldr	r3, [sp, #16]
 80109f0:	9a05      	ldr	r2, [sp, #20]
 80109f2:	9200      	str	r2, [sp, #0]
 80109f4:	eb03 0b07 	add.w	fp, r3, r7
 80109f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80109fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80109fe:	3b04      	subs	r3, #4
 8010a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a02:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a04:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8010a08:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8010a0c:	9a00      	ldr	r2, [sp, #0]
 8010a0e:	ab98      	add	r3, sp, #608	@ 0x260
 8010a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a14:	2a00      	cmp	r2, #0
 8010a16:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8010a1a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8010a1e:	dd2c      	ble.n	8010a7a <__kernel_rem_pio2+0x192>
 8010a20:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010a24:	44d0      	add	r8, sl
 8010a26:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010a2a:	9602      	str	r6, [sp, #8]
 8010a2c:	9706      	str	r7, [sp, #24]
 8010a2e:	4b71      	ldr	r3, [pc, #452]	@ (8010bf4 <__kernel_rem_pio2+0x30c>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	4620      	mov	r0, r4
 8010a34:	4629      	mov	r1, r5
 8010a36:	f7ef fde7 	bl	8000608 <__aeabi_dmul>
 8010a3a:	f7f0 f895 	bl	8000b68 <__aeabi_d2iz>
 8010a3e:	f7ef fd79 	bl	8000534 <__aeabi_i2d>
 8010a42:	4b6d      	ldr	r3, [pc, #436]	@ (8010bf8 <__kernel_rem_pio2+0x310>)
 8010a44:	2200      	movs	r2, #0
 8010a46:	4606      	mov	r6, r0
 8010a48:	460f      	mov	r7, r1
 8010a4a:	f7ef fddd 	bl	8000608 <__aeabi_dmul>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	460b      	mov	r3, r1
 8010a52:	4620      	mov	r0, r4
 8010a54:	4629      	mov	r1, r5
 8010a56:	f7ef fc1f 	bl	8000298 <__aeabi_dsub>
 8010a5a:	f7f0 f885 	bl	8000b68 <__aeabi_d2iz>
 8010a5e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8010a62:	f849 0b04 	str.w	r0, [r9], #4
 8010a66:	4639      	mov	r1, r7
 8010a68:	4630      	mov	r0, r6
 8010a6a:	f7ef fc17 	bl	800029c <__adddf3>
 8010a6e:	45d0      	cmp	r8, sl
 8010a70:	4604      	mov	r4, r0
 8010a72:	460d      	mov	r5, r1
 8010a74:	d1db      	bne.n	8010a2e <__kernel_rem_pio2+0x146>
 8010a76:	9e02      	ldr	r6, [sp, #8]
 8010a78:	9f06      	ldr	r7, [sp, #24]
 8010a7a:	ec45 4b10 	vmov	d0, r4, r5
 8010a7e:	4630      	mov	r0, r6
 8010a80:	f000 fb4a 	bl	8011118 <scalbn>
 8010a84:	ec55 4b10 	vmov	r4, r5, d0
 8010a88:	2200      	movs	r2, #0
 8010a8a:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010a8e:	4620      	mov	r0, r4
 8010a90:	4629      	mov	r1, r5
 8010a92:	f7ef fdb9 	bl	8000608 <__aeabi_dmul>
 8010a96:	ec41 0b10 	vmov	d0, r0, r1
 8010a9a:	f000 fbc9 	bl	8011230 <floor>
 8010a9e:	4b57      	ldr	r3, [pc, #348]	@ (8010bfc <__kernel_rem_pio2+0x314>)
 8010aa0:	ec51 0b10 	vmov	r0, r1, d0
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f7ef fdaf 	bl	8000608 <__aeabi_dmul>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	460b      	mov	r3, r1
 8010aae:	4620      	mov	r0, r4
 8010ab0:	4629      	mov	r1, r5
 8010ab2:	f7ef fbf1 	bl	8000298 <__aeabi_dsub>
 8010ab6:	460d      	mov	r5, r1
 8010ab8:	4604      	mov	r4, r0
 8010aba:	f7f0 f855 	bl	8000b68 <__aeabi_d2iz>
 8010abe:	4682      	mov	sl, r0
 8010ac0:	f7ef fd38 	bl	8000534 <__aeabi_i2d>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	4620      	mov	r0, r4
 8010aca:	4629      	mov	r1, r5
 8010acc:	f7ef fbe4 	bl	8000298 <__aeabi_dsub>
 8010ad0:	2e00      	cmp	r6, #0
 8010ad2:	4680      	mov	r8, r0
 8010ad4:	4689      	mov	r9, r1
 8010ad6:	f340 8093 	ble.w	8010c00 <__kernel_rem_pio2+0x318>
 8010ada:	9b00      	ldr	r3, [sp, #0]
 8010adc:	aa0c      	add	r2, sp, #48	@ 0x30
 8010ade:	1e58      	subs	r0, r3, #1
 8010ae0:	f1c6 0318 	rsb	r3, r6, #24
 8010ae4:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010ae8:	fa42 f403 	asr.w	r4, r2, r3
 8010aec:	fa04 f303 	lsl.w	r3, r4, r3
 8010af0:	1ad2      	subs	r2, r2, r3
 8010af2:	f1c6 0117 	rsb	r1, r6, #23
 8010af6:	ab0c      	add	r3, sp, #48	@ 0x30
 8010af8:	fa42 f501 	asr.w	r5, r2, r1
 8010afc:	2d00      	cmp	r5, #0
 8010afe:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8010b02:	44a2      	add	sl, r4
 8010b04:	f300 80dc 	bgt.w	8010cc0 <__kernel_rem_pio2+0x3d8>
 8010b08:	2200      	movs	r2, #0
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	4640      	mov	r0, r8
 8010b0e:	4649      	mov	r1, r9
 8010b10:	f7ef ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	f000 8257 	beq.w	8010fc8 <__kernel_rem_pio2+0x6e0>
 8010b1a:	9b00      	ldr	r3, [sp, #0]
 8010b1c:	9a05      	ldr	r2, [sp, #20]
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	dd0c      	ble.n	8010b3c <__kernel_rem_pio2+0x254>
 8010b22:	aa0c      	add	r2, sp, #48	@ 0x30
 8010b24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b2e:	42bb      	cmp	r3, r7
 8010b30:	ea42 0201 	orr.w	r2, r2, r1
 8010b34:	d1f9      	bne.n	8010b2a <__kernel_rem_pio2+0x242>
 8010b36:	2a00      	cmp	r2, #0
 8010b38:	f040 80de 	bne.w	8010cf8 <__kernel_rem_pio2+0x410>
 8010b3c:	9b05      	ldr	r3, [sp, #20]
 8010b3e:	aa0c      	add	r2, sp, #48	@ 0x30
 8010b40:	3b01      	subs	r3, #1
 8010b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	f040 80ce 	bne.w	8010ce8 <__kernel_rem_pio2+0x400>
 8010b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b4e:	2301      	movs	r3, #1
 8010b50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010b54:	3301      	adds	r3, #1
 8010b56:	2900      	cmp	r1, #0
 8010b58:	d0fa      	beq.n	8010b50 <__kernel_rem_pio2+0x268>
 8010b5a:	9a00      	ldr	r2, [sp, #0]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	3201      	adds	r2, #1
 8010b60:	4691      	mov	r9, r2
 8010b62:	9900      	ldr	r1, [sp, #0]
 8010b64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010b66:	9302      	str	r3, [sp, #8]
 8010b68:	4401      	add	r1, r0
 8010b6a:	9808      	ldr	r0, [sp, #32]
 8010b6c:	eb02 0a00 	add.w	sl, r2, r0
 8010b70:	f10a 4a80 	add.w	sl, sl, #1073741824	@ 0x40000000
 8010b74:	98a3      	ldr	r0, [sp, #652]	@ 0x28c
 8010b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b7a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8010b7e:	a820      	add	r0, sp, #128	@ 0x80
 8010b80:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
 8010b84:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010b88:	a970      	add	r1, sp, #448	@ 0x1c0
 8010b8a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010b8e:	9200      	str	r2, [sp, #0]
 8010b90:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8010b94:	f7ef fcce 	bl	8000534 <__aeabi_i2d>
 8010b98:	9b03      	ldr	r3, [sp, #12]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	e8e8 0102 	strd	r0, r1, [r8], #8
 8010ba0:	db20      	blt.n	8010be4 <__kernel_rem_pio2+0x2fc>
 8010ba2:	9e04      	ldr	r6, [sp, #16]
 8010ba4:	4647      	mov	r7, r8
 8010ba6:	2400      	movs	r4, #0
 8010ba8:	2500      	movs	r5, #0
 8010baa:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 8010bae:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8010bb2:	f7ef fd29 	bl	8000608 <__aeabi_dmul>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	460b      	mov	r3, r1
 8010bba:	4620      	mov	r0, r4
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	f7ef fb6d 	bl	800029c <__adddf3>
 8010bc2:	455e      	cmp	r6, fp
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	460d      	mov	r5, r1
 8010bc8:	d1ef      	bne.n	8010baa <__kernel_rem_pio2+0x2c2>
 8010bca:	9b00      	ldr	r3, [sp, #0]
 8010bcc:	e8e3 4502 	strd	r4, r5, [r3], #8
 8010bd0:	9300      	str	r3, [sp, #0]
 8010bd2:	9b02      	ldr	r3, [sp, #8]
 8010bd4:	f109 0901 	add.w	r9, r9, #1
 8010bd8:	4599      	cmp	r9, r3
 8010bda:	ddd9      	ble.n	8010b90 <__kernel_rem_pio2+0x2a8>
 8010bdc:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	e713      	b.n	8010a0c <__kernel_rem_pio2+0x124>
 8010be4:	2400      	movs	r4, #0
 8010be6:	2500      	movs	r5, #0
 8010be8:	e7ef      	b.n	8010bca <__kernel_rem_pio2+0x2e2>
 8010bea:	bf00      	nop
 8010bec:	080234f0 	.word	0x080234f0
 8010bf0:	2aaaaaab 	.word	0x2aaaaaab
 8010bf4:	3e700000 	.word	0x3e700000
 8010bf8:	41700000 	.word	0x41700000
 8010bfc:	40200000 	.word	0x40200000
 8010c00:	d155      	bne.n	8010cae <__kernel_rem_pio2+0x3c6>
 8010c02:	9b00      	ldr	r3, [sp, #0]
 8010c04:	aa0c      	add	r2, sp, #48	@ 0x30
 8010c06:	3b01      	subs	r3, #1
 8010c08:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8010c0c:	15ed      	asrs	r5, r5, #23
 8010c0e:	2d00      	cmp	r5, #0
 8010c10:	f77f af7a 	ble.w	8010b08 <__kernel_rem_pio2+0x220>
 8010c14:	9b00      	ldr	r3, [sp, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f10a 0a01 	add.w	sl, sl, #1
 8010c1c:	f340 8243 	ble.w	80110a6 <__kernel_rem_pio2+0x7be>
 8010c20:	ab0c      	add	r3, sp, #48	@ 0x30
 8010c22:	2200      	movs	r2, #0
 8010c24:	f853 4b04 	ldr.w	r4, [r3], #4
 8010c28:	2c00      	cmp	r4, #0
 8010c2a:	d03b      	beq.n	8010ca4 <__kernel_rem_pio2+0x3bc>
 8010c2c:	f1c4 7480 	rsb	r4, r4, #16777216	@ 0x1000000
 8010c30:	f843 4c04 	str.w	r4, [r3, #-4]
 8010c34:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8010c38:	9c00      	ldr	r4, [sp, #0]
 8010c3a:	e003      	b.n	8010c44 <__kernel_rem_pio2+0x35c>
 8010c3c:	6819      	ldr	r1, [r3, #0]
 8010c3e:	1a41      	subs	r1, r0, r1
 8010c40:	f843 1b04 	str.w	r1, [r3], #4
 8010c44:	3201      	adds	r2, #1
 8010c46:	4294      	cmp	r4, r2
 8010c48:	dcf8      	bgt.n	8010c3c <__kernel_rem_pio2+0x354>
 8010c4a:	2401      	movs	r4, #1
 8010c4c:	2e00      	cmp	r6, #0
 8010c4e:	dd0d      	ble.n	8010c6c <__kernel_rem_pio2+0x384>
 8010c50:	2e01      	cmp	r6, #1
 8010c52:	d03e      	beq.n	8010cd2 <__kernel_rem_pio2+0x3ea>
 8010c54:	2e02      	cmp	r6, #2
 8010c56:	d109      	bne.n	8010c6c <__kernel_rem_pio2+0x384>
 8010c58:	9b00      	ldr	r3, [sp, #0]
 8010c5a:	1e5a      	subs	r2, r3, #1
 8010c5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010c5e:	a90c      	add	r1, sp, #48	@ 0x30
 8010c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010c68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010c6c:	2d02      	cmp	r5, #2
 8010c6e:	f47f af4b 	bne.w	8010b08 <__kernel_rem_pio2+0x220>
 8010c72:	4642      	mov	r2, r8
 8010c74:	464b      	mov	r3, r9
 8010c76:	4994      	ldr	r1, [pc, #592]	@ (8010ec8 <__kernel_rem_pio2+0x5e0>)
 8010c78:	2000      	movs	r0, #0
 8010c7a:	f7ef fb0d 	bl	8000298 <__aeabi_dsub>
 8010c7e:	4680      	mov	r8, r0
 8010c80:	4689      	mov	r9, r1
 8010c82:	2c00      	cmp	r4, #0
 8010c84:	f43f af40 	beq.w	8010b08 <__kernel_rem_pio2+0x220>
 8010c88:	4630      	mov	r0, r6
 8010c8a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8010ec0 <__kernel_rem_pio2+0x5d8>
 8010c8e:	f000 fa43 	bl	8011118 <scalbn>
 8010c92:	4640      	mov	r0, r8
 8010c94:	4649      	mov	r1, r9
 8010c96:	ec53 2b10 	vmov	r2, r3, d0
 8010c9a:	f7ef fafd 	bl	8000298 <__aeabi_dsub>
 8010c9e:	4680      	mov	r8, r0
 8010ca0:	4689      	mov	r9, r1
 8010ca2:	e731      	b.n	8010b08 <__kernel_rem_pio2+0x220>
 8010ca4:	9900      	ldr	r1, [sp, #0]
 8010ca6:	3201      	adds	r2, #1
 8010ca8:	4291      	cmp	r1, r2
 8010caa:	dcbb      	bgt.n	8010c24 <__kernel_rem_pio2+0x33c>
 8010cac:	e7ce      	b.n	8010c4c <__kernel_rem_pio2+0x364>
 8010cae:	4b87      	ldr	r3, [pc, #540]	@ (8010ecc <__kernel_rem_pio2+0x5e4>)
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f7ef ff2f 	bl	8000b14 <__aeabi_dcmpge>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f040 80c4 	bne.w	8010e44 <__kernel_rem_pio2+0x55c>
 8010cbc:	4605      	mov	r5, r0
 8010cbe:	e723      	b.n	8010b08 <__kernel_rem_pio2+0x220>
 8010cc0:	9b00      	ldr	r3, [sp, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	f10a 0a01 	add.w	sl, sl, #1
 8010cc8:	bfd8      	it	le
 8010cca:	2400      	movle	r4, #0
 8010ccc:	dca8      	bgt.n	8010c20 <__kernel_rem_pio2+0x338>
 8010cce:	2e01      	cmp	r6, #1
 8010cd0:	d1c0      	bne.n	8010c54 <__kernel_rem_pio2+0x36c>
 8010cd2:	9b00      	ldr	r3, [sp, #0]
 8010cd4:	1e5a      	subs	r2, r3, #1
 8010cd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8010cd8:	a90c      	add	r1, sp, #48	@ 0x30
 8010cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cde:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010ce2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010ce6:	e7c1      	b.n	8010c6c <__kernel_rem_pio2+0x384>
 8010ce8:	9b00      	ldr	r3, [sp, #0]
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	4691      	mov	r9, r2
 8010cee:	4613      	mov	r3, r2
 8010cf0:	e737      	b.n	8010b62 <__kernel_rem_pio2+0x27a>
 8010cf2:	2400      	movs	r4, #0
 8010cf4:	2500      	movs	r5, #0
 8010cf6:	e66e      	b.n	80109d6 <__kernel_rem_pio2+0xee>
 8010cf8:	9a00      	ldr	r2, [sp, #0]
 8010cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8010cfc:	1e54      	subs	r4, r2, #1
 8010cfe:	e9cd 5a03 	strd	r5, sl, [sp, #12]
 8010d02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010d06:	3e18      	subs	r6, #24
 8010d08:	b95b      	cbnz	r3, 8010d22 <__kernel_rem_pio2+0x43a>
 8010d0a:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	aa0c      	add	r2, sp, #48	@ 0x30
 8010d12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d16:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010d1a:	3c01      	subs	r4, #1
 8010d1c:	3e18      	subs	r6, #24
 8010d1e:	2a00      	cmp	r2, #0
 8010d20:	d0f9      	beq.n	8010d16 <__kernel_rem_pio2+0x42e>
 8010d22:	4630      	mov	r0, r6
 8010d24:	ed9f 0b66 	vldr	d0, [pc, #408]	@ 8010ec0 <__kernel_rem_pio2+0x5d8>
 8010d28:	f000 f9f6 	bl	8011118 <scalbn>
 8010d2c:	2c00      	cmp	r4, #0
 8010d2e:	ec57 6b10 	vmov	r6, r7, d0
 8010d32:	f2c0 81c4 	blt.w	80110be <__kernel_rem_pio2+0x7d6>
 8010d36:	f104 0a01 	add.w	sl, r4, #1
 8010d3a:	ab0c      	add	r3, sp, #48	@ 0x30
 8010d3c:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8010d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010d44:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010d46:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8010ed0 <__kernel_rem_pio2+0x5e8>
 8010d4a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010d4e:	f04f 0800 	mov.w	r8, #0
 8010d52:	4693      	mov	fp, r2
 8010d54:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8010d58:	f7ef fbec 	bl	8000534 <__aeabi_i2d>
 8010d5c:	4632      	mov	r2, r6
 8010d5e:	463b      	mov	r3, r7
 8010d60:	f7ef fc52 	bl	8000608 <__aeabi_dmul>
 8010d64:	464b      	mov	r3, r9
 8010d66:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010d6a:	4642      	mov	r2, r8
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	4639      	mov	r1, r7
 8010d70:	f7ef fc4a 	bl	8000608 <__aeabi_dmul>
 8010d74:	ab0c      	add	r3, sp, #48	@ 0x30
 8010d76:	429d      	cmp	r5, r3
 8010d78:	4606      	mov	r6, r0
 8010d7a:	460f      	mov	r7, r1
 8010d7c:	d1ea      	bne.n	8010d54 <__kernel_rem_pio2+0x46c>
 8010d7e:	f1ab 0308 	sub.w	r3, fp, #8
 8010d82:	a970      	add	r1, sp, #448	@ 0x1c0
 8010d84:	465a      	mov	r2, fp
 8010d86:	eb01 0a03 	add.w	sl, r1, r3
 8010d8a:	f50d 7890 	add.w	r8, sp, #288	@ 0x120
 8010d8e:	f04f 0900 	mov.w	r9, #0
 8010d92:	e9cd 4206 	strd	r4, r2, [sp, #24]
 8010d96:	4643      	mov	r3, r8
 8010d98:	4652      	mov	r2, sl
 8010d9a:	46a3      	mov	fp, r4
 8010d9c:	46ca      	mov	sl, r9
 8010d9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010da2:	f8cd 8014 	str.w	r8, [sp, #20]
 8010da6:	f1b9 0f00 	cmp.w	r9, #0
 8010daa:	f2c0 8083 	blt.w	8010eb4 <__kernel_rem_pio2+0x5cc>
 8010dae:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8010ed4 <__kernel_rem_pio2+0x5ec>
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	4617      	mov	r7, r2
 8010db6:	2600      	movs	r6, #0
 8010db8:	2400      	movs	r4, #0
 8010dba:	2500      	movs	r5, #0
 8010dbc:	9202      	str	r2, [sp, #8]
 8010dbe:	e001      	b.n	8010dc4 <__kernel_rem_pio2+0x4dc>
 8010dc0:	4556      	cmp	r6, sl
 8010dc2:	dc10      	bgt.n	8010de6 <__kernel_rem_pio2+0x4fe>
 8010dc4:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8010dc8:	e8f8 0102 	ldrd	r0, r1, [r8], #8
 8010dcc:	f7ef fc1c 	bl	8000608 <__aeabi_dmul>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	4629      	mov	r1, r5
 8010dd8:	f7ef fa60 	bl	800029c <__adddf3>
 8010ddc:	3601      	adds	r6, #1
 8010dde:	45b1      	cmp	r9, r6
 8010de0:	4604      	mov	r4, r0
 8010de2:	460d      	mov	r5, r1
 8010de4:	daec      	bge.n	8010dc0 <__kernel_rem_pio2+0x4d8>
 8010de6:	9b00      	ldr	r3, [sp, #0]
 8010de8:	9a02      	ldr	r2, [sp, #8]
 8010dea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010dee:	f1bb 3fff 	cmp.w	fp, #4294967295
 8010df2:	e8e3 4502 	strd	r4, r5, [r3], #8
 8010df6:	f10a 0a01 	add.w	sl, sl, #1
 8010dfa:	f1a2 0208 	sub.w	r2, r2, #8
 8010dfe:	d1d2      	bne.n	8010da6 <__kernel_rem_pio2+0x4be>
 8010e00:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8010e02:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	e9dd 4206 	ldrd	r4, r2, [sp, #24]
 8010e0c:	dc64      	bgt.n	8010ed8 <__kernel_rem_pio2+0x5f0>
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	dc2f      	bgt.n	8010e72 <__kernel_rem_pio2+0x58a>
 8010e12:	d110      	bne.n	8010e36 <__kernel_rem_pio2+0x54e>
 8010e14:	eb08 0402 	add.w	r4, r8, r2
 8010e18:	2000      	movs	r0, #0
 8010e1a:	2100      	movs	r1, #0
 8010e1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010e20:	f7ef fa3c 	bl	800029c <__adddf3>
 8010e24:	4544      	cmp	r4, r8
 8010e26:	d1f9      	bne.n	8010e1c <__kernel_rem_pio2+0x534>
 8010e28:	9b03      	ldr	r3, [sp, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	f040 8137 	bne.w	801109e <__kernel_rem_pio2+0x7b6>
 8010e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e32:	e9c3 0100 	strd	r0, r1, [r3]
 8010e36:	9b04      	ldr	r3, [sp, #16]
 8010e38:	f003 0007 	and.w	r0, r3, #7
 8010e3c:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e44:	9b00      	ldr	r3, [sp, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f10a 0a01 	add.w	sl, sl, #1
 8010e4c:	bfc8      	it	gt
 8010e4e:	2502      	movgt	r5, #2
 8010e50:	f73f aee6 	bgt.w	8010c20 <__kernel_rem_pio2+0x338>
 8010e54:	4642      	mov	r2, r8
 8010e56:	464b      	mov	r3, r9
 8010e58:	491b      	ldr	r1, [pc, #108]	@ (8010ec8 <__kernel_rem_pio2+0x5e0>)
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	f7ef fa1c 	bl	8000298 <__aeabi_dsub>
 8010e60:	2502      	movs	r5, #2
 8010e62:	4680      	mov	r8, r0
 8010e64:	4689      	mov	r9, r1
 8010e66:	e64f      	b.n	8010b08 <__kernel_rem_pio2+0x220>
 8010e68:	2100      	movs	r1, #0
 8010e6a:	f06f 0317 	mvn.w	r3, #23
 8010e6e:	9108      	str	r1, [sp, #32]
 8010e70:	e559      	b.n	8010926 <__kernel_rem_pio2+0x3e>
 8010e72:	eb08 0502 	add.w	r5, r8, r2
 8010e76:	2600      	movs	r6, #0
 8010e78:	2700      	movs	r7, #0
 8010e7a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010e7e:	4630      	mov	r0, r6
 8010e80:	4639      	mov	r1, r7
 8010e82:	f7ef fa0b 	bl	800029c <__adddf3>
 8010e86:	4545      	cmp	r5, r8
 8010e88:	4606      	mov	r6, r0
 8010e8a:	460f      	mov	r7, r1
 8010e8c:	d1f5      	bne.n	8010e7a <__kernel_rem_pio2+0x592>
 8010e8e:	463b      	mov	r3, r7
 8010e90:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e94:	4632      	mov	r2, r6
 8010e96:	f7ef f9ff 	bl	8000298 <__aeabi_dsub>
 8010e9a:	9b03      	ldr	r3, [sp, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 80e2 	beq.w	8011066 <__kernel_rem_pio2+0x77e>
 8010ea2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010ea4:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010ea8:	e9c5 6300 	strd	r6, r3, [r5]
 8010eac:	2c00      	cmp	r4, #0
 8010eae:	f040 80de 	bne.w	801106e <__kernel_rem_pio2+0x786>
 8010eb2:	e0e7      	b.n	8011084 <__kernel_rem_pio2+0x79c>
 8010eb4:	2400      	movs	r4, #0
 8010eb6:	2500      	movs	r5, #0
 8010eb8:	e797      	b.n	8010dea <__kernel_rem_pio2+0x502>
 8010eba:	bf00      	nop
 8010ebc:	f3af 8000 	nop.w
 8010ec0:	00000000 	.word	0x00000000
 8010ec4:	3ff00000 	.word	0x3ff00000
 8010ec8:	3ff00000 	.word	0x3ff00000
 8010ecc:	3fe00000 	.word	0x3fe00000
 8010ed0:	3e700000 	.word	0x3e700000
 8010ed4:	080234b0 	.word	0x080234b0
 8010ed8:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8010eda:	2b03      	cmp	r3, #3
 8010edc:	d1ab      	bne.n	8010e36 <__kernel_rem_pio2+0x54e>
 8010ede:	2c00      	cmp	r4, #0
 8010ee0:	f000 80fd 	beq.w	80110de <__kernel_rem_pio2+0x7f6>
 8010ee4:	eb08 05c4 	add.w	r5, r8, r4, lsl #3
 8010ee8:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 8010eec:	e9d5 6700 	ldrd	r6, r7, [r5]
 8010ef0:	e9cd a505 	strd	sl, r5, [sp, #20]
 8010ef4:	9500      	str	r5, [sp, #0]
 8010ef6:	46a9      	mov	r9, r5
 8010ef8:	9402      	str	r4, [sp, #8]
 8010efa:	e979 4502 	ldrd	r4, r5, [r9, #-8]!
 8010efe:	4630      	mov	r0, r6
 8010f00:	4639      	mov	r1, r7
 8010f02:	4622      	mov	r2, r4
 8010f04:	462b      	mov	r3, r5
 8010f06:	f7ef f9c9 	bl	800029c <__adddf3>
 8010f0a:	46b2      	mov	sl, r6
 8010f0c:	46bb      	mov	fp, r7
 8010f0e:	4606      	mov	r6, r0
 8010f10:	460f      	mov	r7, r1
 8010f12:	4632      	mov	r2, r6
 8010f14:	463b      	mov	r3, r7
 8010f16:	4620      	mov	r0, r4
 8010f18:	4629      	mov	r1, r5
 8010f1a:	f7ef f9bd 	bl	8000298 <__aeabi_dsub>
 8010f1e:	4652      	mov	r2, sl
 8010f20:	465b      	mov	r3, fp
 8010f22:	f7ef f9bb 	bl	800029c <__adddf3>
 8010f26:	45c1      	cmp	r9, r8
 8010f28:	e9c9 0102 	strd	r0, r1, [r9, #8]
 8010f2c:	e9c9 6700 	strd	r6, r7, [r9]
 8010f30:	d1e3      	bne.n	8010efa <__kernel_rem_pio2+0x612>
 8010f32:	9c02      	ldr	r4, [sp, #8]
 8010f34:	2c01      	cmp	r4, #1
 8010f36:	e9dd a505 	ldrd	sl, r5, [sp, #20]
 8010f3a:	f000 80d0 	beq.w	80110de <__kernel_rem_pio2+0x7f6>
 8010f3e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010f42:	9e00      	ldr	r6, [sp, #0]
 8010f44:	f108 0b08 	add.w	fp, r8, #8
 8010f48:	4647      	mov	r7, r8
 8010f4a:	e976 8902 	ldrd	r8, r9, [r6, #-8]!
 8010f4e:	4620      	mov	r0, r4
 8010f50:	4629      	mov	r1, r5
 8010f52:	4642      	mov	r2, r8
 8010f54:	464b      	mov	r3, r9
 8010f56:	e9cd 4500 	strd	r4, r5, [sp]
 8010f5a:	f7ef f99f 	bl	800029c <__adddf3>
 8010f5e:	4604      	mov	r4, r0
 8010f60:	460d      	mov	r5, r1
 8010f62:	4622      	mov	r2, r4
 8010f64:	462b      	mov	r3, r5
 8010f66:	4640      	mov	r0, r8
 8010f68:	4649      	mov	r1, r9
 8010f6a:	f7ef f995 	bl	8000298 <__aeabi_dsub>
 8010f6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f72:	f7ef f993 	bl	800029c <__adddf3>
 8010f76:	45b3      	cmp	fp, r6
 8010f78:	e9c6 0102 	strd	r0, r1, [r6, #8]
 8010f7c:	e9c6 4500 	strd	r4, r5, [r6]
 8010f80:	d1e3      	bne.n	8010f4a <__kernel_rem_pio2+0x662>
 8010f82:	f10a 0408 	add.w	r4, sl, #8
 8010f86:	46b8      	mov	r8, r7
 8010f88:	443c      	add	r4, r7
 8010f8a:	f107 0510 	add.w	r5, r7, #16
 8010f8e:	2000      	movs	r0, #0
 8010f90:	2100      	movs	r1, #0
 8010f92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010f96:	f7ef f981 	bl	800029c <__adddf3>
 8010f9a:	42a5      	cmp	r5, r4
 8010f9c:	d1f9      	bne.n	8010f92 <__kernel_rem_pio2+0x6aa>
 8010f9e:	9b03      	ldr	r3, [sp, #12]
 8010fa0:	e9d8 6700 	ldrd	r6, r7, [r8]
 8010fa4:	e9d8 4502 	ldrd	r4, r5, [r8, #8]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d147      	bne.n	801103c <__kernel_rem_pio2+0x754>
 8010fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fae:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010fb2:	e9c3 6700 	strd	r6, r7, [r3]
 8010fb6:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	f003 0007 	and.w	r0, r3, #7
 8010fc0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc8:	4270      	negs	r0, r6
 8010fca:	ec49 8b10 	vmov	d0, r8, r9
 8010fce:	e9cd 5a03 	strd	r5, sl, [sp, #12]
 8010fd2:	f000 f8a1 	bl	8011118 <scalbn>
 8010fd6:	ec55 4b10 	vmov	r4, r5, d0
 8010fda:	4b4b      	ldr	r3, [pc, #300]	@ (8011108 <__kernel_rem_pio2+0x820>)
 8010fdc:	2200      	movs	r2, #0
 8010fde:	4620      	mov	r0, r4
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	f7ef fd97 	bl	8000b14 <__aeabi_dcmpge>
 8010fe6:	b1f8      	cbz	r0, 8011028 <__kernel_rem_pio2+0x740>
 8010fe8:	4b48      	ldr	r3, [pc, #288]	@ (801110c <__kernel_rem_pio2+0x824>)
 8010fea:	2200      	movs	r2, #0
 8010fec:	4620      	mov	r0, r4
 8010fee:	4629      	mov	r1, r5
 8010ff0:	f7ef fb0a 	bl	8000608 <__aeabi_dmul>
 8010ff4:	f7ef fdb8 	bl	8000b68 <__aeabi_d2iz>
 8010ff8:	4607      	mov	r7, r0
 8010ffa:	f7ef fa9b 	bl	8000534 <__aeabi_i2d>
 8010ffe:	4b42      	ldr	r3, [pc, #264]	@ (8011108 <__kernel_rem_pio2+0x820>)
 8011000:	2200      	movs	r2, #0
 8011002:	f7ef fb01 	bl	8000608 <__aeabi_dmul>
 8011006:	4602      	mov	r2, r0
 8011008:	460b      	mov	r3, r1
 801100a:	4620      	mov	r0, r4
 801100c:	4629      	mov	r1, r5
 801100e:	f7ef f943 	bl	8000298 <__aeabi_dsub>
 8011012:	f7ef fda9 	bl	8000b68 <__aeabi_d2iz>
 8011016:	9b00      	ldr	r3, [sp, #0]
 8011018:	aa0c      	add	r2, sp, #48	@ 0x30
 801101a:	1c5c      	adds	r4, r3, #1
 801101c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8011020:	3618      	adds	r6, #24
 8011022:	f842 7024 	str.w	r7, [r2, r4, lsl #2]
 8011026:	e67c      	b.n	8010d22 <__kernel_rem_pio2+0x43a>
 8011028:	4620      	mov	r0, r4
 801102a:	4629      	mov	r1, r5
 801102c:	f7ef fd9c 	bl	8000b68 <__aeabi_d2iz>
 8011030:	9b00      	ldr	r3, [sp, #0]
 8011032:	aa0c      	add	r2, sp, #48	@ 0x30
 8011034:	461c      	mov	r4, r3
 8011036:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 801103a:	e672      	b.n	8010d22 <__kernel_rem_pio2+0x43a>
 801103c:	4632      	mov	r2, r6
 801103e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011040:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011044:	e9c6 2300 	strd	r2, r3, [r6]
 8011048:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 801104c:	e9c6 4302 	strd	r4, r3, [r6, #8]
 8011050:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011054:	e9c6 0304 	strd	r0, r3, [r6, #16]
 8011058:	9b04      	ldr	r3, [sp, #16]
 801105a:	f003 0007 	and.w	r0, r3, #7
 801105e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011068:	e9c3 6700 	strd	r6, r7, [r3]
 801106c:	b16c      	cbz	r4, 801108a <__kernel_rem_pio2+0x7a2>
 801106e:	ae4a      	add	r6, sp, #296	@ 0x128
 8011070:	2501      	movs	r5, #1
 8011072:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011076:	3501      	adds	r5, #1
 8011078:	f7ef f910 	bl	800029c <__adddf3>
 801107c:	42ac      	cmp	r4, r5
 801107e:	daf8      	bge.n	8011072 <__kernel_rem_pio2+0x78a>
 8011080:	9b03      	ldr	r3, [sp, #12]
 8011082:	b113      	cbz	r3, 801108a <__kernel_rem_pio2+0x7a2>
 8011084:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011088:	4619      	mov	r1, r3
 801108a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801108c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011090:	9b04      	ldr	r3, [sp, #16]
 8011092:	f003 0007 	and.w	r0, r3, #7
 8011096:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80110a2:	4619      	mov	r1, r3
 80110a4:	e6c4      	b.n	8010e30 <__kernel_rem_pio2+0x548>
 80110a6:	2d02      	cmp	r5, #2
 80110a8:	f47f ad2e 	bne.w	8010b08 <__kernel_rem_pio2+0x220>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	2000      	movs	r0, #0
 80110b2:	4917      	ldr	r1, [pc, #92]	@ (8011110 <__kernel_rem_pio2+0x828>)
 80110b4:	f7ef f8f0 	bl	8000298 <__aeabi_dsub>
 80110b8:	4680      	mov	r8, r0
 80110ba:	4689      	mov	r9, r1
 80110bc:	e524      	b.n	8010b08 <__kernel_rem_pio2+0x220>
 80110be:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80110c0:	2b02      	cmp	r3, #2
 80110c2:	dc06      	bgt.n	80110d2 <__kernel_rem_pio2+0x7ea>
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	dc0d      	bgt.n	80110e4 <__kernel_rem_pio2+0x7fc>
 80110c8:	f47f aeb5 	bne.w	8010e36 <__kernel_rem_pio2+0x54e>
 80110cc:	2000      	movs	r0, #0
 80110ce:	2100      	movs	r1, #0
 80110d0:	e6aa      	b.n	8010e28 <__kernel_rem_pio2+0x540>
 80110d2:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80110d4:	2b03      	cmp	r3, #3
 80110d6:	f47f aeae 	bne.w	8010e36 <__kernel_rem_pio2+0x54e>
 80110da:	f50d 7890 	add.w	r8, sp, #288	@ 0x120
 80110de:	2000      	movs	r0, #0
 80110e0:	2100      	movs	r1, #0
 80110e2:	e75c      	b.n	8010f9e <__kernel_rem_pio2+0x6b6>
 80110e4:	9b03      	ldr	r3, [sp, #12]
 80110e6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80110ea:	b133      	cbz	r3, 80110fa <__kernel_rem_pio2+0x812>
 80110ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80110ee:	2200      	movs	r2, #0
 80110f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110f4:	e9c4 2300 	strd	r2, r3, [r4]
 80110f8:	e7c4      	b.n	8011084 <__kernel_rem_pio2+0x79c>
 80110fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80110fc:	2200      	movs	r2, #0
 80110fe:	2300      	movs	r3, #0
 8011100:	e9c4 2300 	strd	r2, r3, [r4]
 8011104:	e7c1      	b.n	801108a <__kernel_rem_pio2+0x7a2>
 8011106:	bf00      	nop
 8011108:	41700000 	.word	0x41700000
 801110c:	3e700000 	.word	0x3e700000
 8011110:	3ff00000 	.word	0x3ff00000
 8011114:	00000000 	.word	0x00000000

08011118 <scalbn>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	ec55 4b10 	vmov	r4, r5, d0
 801111e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011122:	4606      	mov	r6, r0
 8011124:	462b      	mov	r3, r5
 8011126:	bb72      	cbnz	r2, 8011186 <scalbn+0x6e>
 8011128:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801112c:	4323      	orrs	r3, r4
 801112e:	d029      	beq.n	8011184 <scalbn+0x6c>
 8011130:	4b3b      	ldr	r3, [pc, #236]	@ (8011220 <scalbn+0x108>)
 8011132:	4620      	mov	r0, r4
 8011134:	4629      	mov	r1, r5
 8011136:	2200      	movs	r2, #0
 8011138:	f7ef fa66 	bl	8000608 <__aeabi_dmul>
 801113c:	4b39      	ldr	r3, [pc, #228]	@ (8011224 <scalbn+0x10c>)
 801113e:	429e      	cmp	r6, r3
 8011140:	4604      	mov	r4, r0
 8011142:	460d      	mov	r5, r1
 8011144:	db52      	blt.n	80111ec <scalbn+0xd4>
 8011146:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801114a:	460b      	mov	r3, r1
 801114c:	3a36      	subs	r2, #54	@ 0x36
 801114e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011152:	428e      	cmp	r6, r1
 8011154:	dc23      	bgt.n	801119e <scalbn+0x86>
 8011156:	4416      	add	r6, r2
 8011158:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 801115c:	4296      	cmp	r6, r2
 801115e:	dc1e      	bgt.n	801119e <scalbn+0x86>
 8011160:	2e00      	cmp	r6, #0
 8011162:	dc34      	bgt.n	80111ce <scalbn+0xb6>
 8011164:	f116 0f35 	cmn.w	r6, #53	@ 0x35
 8011168:	db38      	blt.n	80111dc <scalbn+0xc4>
 801116a:	f36f 531e 	bfc	r3, #20, #11
 801116e:	3636      	adds	r6, #54	@ 0x36
 8011170:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8011174:	4620      	mov	r0, r4
 8011176:	4b2c      	ldr	r3, [pc, #176]	@ (8011228 <scalbn+0x110>)
 8011178:	4629      	mov	r1, r5
 801117a:	2200      	movs	r2, #0
 801117c:	f7ef fa44 	bl	8000608 <__aeabi_dmul>
 8011180:	ec41 0b10 	vmov	d0, r0, r1
 8011184:	bd70      	pop	{r4, r5, r6, pc}
 8011186:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 801118a:	428a      	cmp	r2, r1
 801118c:	d1df      	bne.n	801114e <scalbn+0x36>
 801118e:	4622      	mov	r2, r4
 8011190:	4620      	mov	r0, r4
 8011192:	4629      	mov	r1, r5
 8011194:	f7ef f882 	bl	800029c <__adddf3>
 8011198:	ec41 0b10 	vmov	d0, r0, r1
 801119c:	bd70      	pop	{r4, r5, r6, pc}
 801119e:	2d00      	cmp	r5, #0
 80111a0:	a117      	add	r1, pc, #92	@ (adr r1, 8011200 <scalbn+0xe8>)
 80111a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111a6:	db07      	blt.n	80111b8 <scalbn+0xa0>
 80111a8:	a315      	add	r3, pc, #84	@ (adr r3, 8011200 <scalbn+0xe8>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	f7ef fa2b 	bl	8000608 <__aeabi_dmul>
 80111b2:	ec41 0b10 	vmov	d0, r0, r1
 80111b6:	bd70      	pop	{r4, r5, r6, pc}
 80111b8:	a113      	add	r1, pc, #76	@ (adr r1, 8011208 <scalbn+0xf0>)
 80111ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111be:	a310      	add	r3, pc, #64	@ (adr r3, 8011200 <scalbn+0xe8>)
 80111c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c4:	f7ef fa20 	bl	8000608 <__aeabi_dmul>
 80111c8:	ec41 0b10 	vmov	d0, r0, r1
 80111cc:	e7f3      	b.n	80111b6 <scalbn+0x9e>
 80111ce:	f36f 531e 	bfc	r3, #20, #11
 80111d2:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80111d6:	ec45 4b10 	vmov	d0, r4, r5
 80111da:	bd70      	pop	{r4, r5, r6, pc}
 80111dc:	2d00      	cmp	r5, #0
 80111de:	a10c      	add	r1, pc, #48	@ (adr r1, 8011210 <scalbn+0xf8>)
 80111e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111e4:	da02      	bge.n	80111ec <scalbn+0xd4>
 80111e6:	a10c      	add	r1, pc, #48	@ (adr r1, 8011218 <scalbn+0x100>)
 80111e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ec:	a308      	add	r3, pc, #32	@ (adr r3, 8011210 <scalbn+0xf8>)
 80111ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f2:	f7ef fa09 	bl	8000608 <__aeabi_dmul>
 80111f6:	ec41 0b10 	vmov	d0, r0, r1
 80111fa:	bd70      	pop	{r4, r5, r6, pc}
 80111fc:	f3af 8000 	nop.w
 8011200:	8800759c 	.word	0x8800759c
 8011204:	7e37e43c 	.word	0x7e37e43c
 8011208:	8800759c 	.word	0x8800759c
 801120c:	fe37e43c 	.word	0xfe37e43c
 8011210:	c2f8f359 	.word	0xc2f8f359
 8011214:	01a56e1f 	.word	0x01a56e1f
 8011218:	c2f8f359 	.word	0xc2f8f359
 801121c:	81a56e1f 	.word	0x81a56e1f
 8011220:	43500000 	.word	0x43500000
 8011224:	ffff3cb0 	.word	0xffff3cb0
 8011228:	3c900000 	.word	0x3c900000
 801122c:	00000000 	.word	0x00000000

08011230 <floor>:
 8011230:	ec51 0b10 	vmov	r0, r1, d0
 8011234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801123c:	f2a3 35ff 	subw	r5, r3, #1023	@ 0x3ff
 8011240:	2d13      	cmp	r5, #19
 8011242:	460c      	mov	r4, r1
 8011244:	4606      	mov	r6, r0
 8011246:	dc32      	bgt.n	80112ae <floor+0x7e>
 8011248:	2d00      	cmp	r5, #0
 801124a:	db20      	blt.n	801128e <floor+0x5e>
 801124c:	4b38      	ldr	r3, [pc, #224]	@ (8011330 <floor+0x100>)
 801124e:	fa43 f805 	asr.w	r8, r3, r5
 8011252:	ea01 0308 	and.w	r3, r1, r8
 8011256:	4303      	orrs	r3, r0
 8011258:	460f      	mov	r7, r1
 801125a:	d02d      	beq.n	80112b8 <floor+0x88>
 801125c:	a332      	add	r3, pc, #200	@ (adr r3, 8011328 <floor+0xf8>)
 801125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011262:	f7ef f81b 	bl	800029c <__adddf3>
 8011266:	2200      	movs	r2, #0
 8011268:	2300      	movs	r3, #0
 801126a:	f7ef fc5d 	bl	8000b28 <__aeabi_dcmpgt>
 801126e:	b140      	cbz	r0, 8011282 <floor+0x52>
 8011270:	2c00      	cmp	r4, #0
 8011272:	da03      	bge.n	801127c <floor+0x4c>
 8011274:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011278:	412b      	asrs	r3, r5
 801127a:	441f      	add	r7, r3
 801127c:	ea27 0408 	bic.w	r4, r7, r8
 8011280:	2600      	movs	r6, #0
 8011282:	4623      	mov	r3, r4
 8011284:	4632      	mov	r2, r6
 8011286:	ec43 2b10 	vmov	d0, r2, r3
 801128a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801128e:	a326      	add	r3, pc, #152	@ (adr r3, 8011328 <floor+0xf8>)
 8011290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011294:	f7ef f802 	bl	800029c <__adddf3>
 8011298:	2200      	movs	r2, #0
 801129a:	2300      	movs	r3, #0
 801129c:	f7ef fc44 	bl	8000b28 <__aeabi_dcmpgt>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d0ee      	beq.n	8011282 <floor+0x52>
 80112a4:	2c00      	cmp	r4, #0
 80112a6:	db2a      	blt.n	80112fe <floor+0xce>
 80112a8:	2600      	movs	r6, #0
 80112aa:	4634      	mov	r4, r6
 80112ac:	e7e9      	b.n	8011282 <floor+0x52>
 80112ae:	2d33      	cmp	r5, #51	@ 0x33
 80112b0:	dd06      	ble.n	80112c0 <floor+0x90>
 80112b2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80112b6:	d01b      	beq.n	80112f0 <floor+0xc0>
 80112b8:	ec41 0b10 	vmov	d0, r0, r1
 80112bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c0:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80112c4:	f04f 37ff 	mov.w	r7, #4294967295
 80112c8:	40df      	lsrs	r7, r3
 80112ca:	4207      	tst	r7, r0
 80112cc:	d0f4      	beq.n	80112b8 <floor+0x88>
 80112ce:	a316      	add	r3, pc, #88	@ (adr r3, 8011328 <floor+0xf8>)
 80112d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d4:	f7ee ffe2 	bl	800029c <__adddf3>
 80112d8:	2200      	movs	r2, #0
 80112da:	2300      	movs	r3, #0
 80112dc:	f7ef fc24 	bl	8000b28 <__aeabi_dcmpgt>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d0ce      	beq.n	8011282 <floor+0x52>
 80112e4:	2c00      	cmp	r4, #0
 80112e6:	4633      	mov	r3, r6
 80112e8:	db10      	blt.n	801130c <floor+0xdc>
 80112ea:	ea23 0607 	bic.w	r6, r3, r7
 80112ee:	e7c8      	b.n	8011282 <floor+0x52>
 80112f0:	4602      	mov	r2, r0
 80112f2:	460b      	mov	r3, r1
 80112f4:	f7ee ffd2 	bl	800029c <__adddf3>
 80112f8:	ec41 0b10 	vmov	d0, r0, r1
 80112fc:	e7de      	b.n	80112bc <floor+0x8c>
 80112fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011302:	4326      	orrs	r6, r4
 8011304:	d10d      	bne.n	8011322 <floor+0xf2>
 8011306:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801130a:	e7ba      	b.n	8011282 <floor+0x52>
 801130c:	2d14      	cmp	r5, #20
 801130e:	d006      	beq.n	801131e <floor+0xee>
 8011310:	f1c5 0534 	rsb	r5, r5, #52	@ 0x34
 8011314:	2201      	movs	r2, #1
 8011316:	40aa      	lsls	r2, r5
 8011318:	4413      	add	r3, r2
 801131a:	42b3      	cmp	r3, r6
 801131c:	d2e5      	bcs.n	80112ea <floor+0xba>
 801131e:	3401      	adds	r4, #1
 8011320:	e7e3      	b.n	80112ea <floor+0xba>
 8011322:	4c04      	ldr	r4, [pc, #16]	@ (8011334 <floor+0x104>)
 8011324:	2600      	movs	r6, #0
 8011326:	e7ac      	b.n	8011282 <floor+0x52>
 8011328:	8800759c 	.word	0x8800759c
 801132c:	7e37e43c 	.word	0x7e37e43c
 8011330:	000fffff 	.word	0x000fffff
 8011334:	bff00000 	.word	0xbff00000

08011338 <__aeabi_d2lz>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	2200      	movs	r2, #0
 801133c:	2300      	movs	r3, #0
 801133e:	4604      	mov	r4, r0
 8011340:	460d      	mov	r5, r1
 8011342:	f7ef fbd3 	bl	8000aec <__aeabi_dcmplt>
 8011346:	b928      	cbnz	r0, 8011354 <__aeabi_d2lz+0x1c>
 8011348:	4620      	mov	r0, r4
 801134a:	4629      	mov	r1, r5
 801134c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011350:	f000 b80a 	b.w	8011368 <__aeabi_d2ulz>
 8011354:	4620      	mov	r0, r4
 8011356:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 801135a:	f000 f805 	bl	8011368 <__aeabi_d2ulz>
 801135e:	4240      	negs	r0, r0
 8011360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8011364:	bd38      	pop	{r3, r4, r5, pc}
 8011366:	bf00      	nop

08011368 <__aeabi_d2ulz>:
 8011368:	b5d0      	push	{r4, r6, r7, lr}
 801136a:	4b0c      	ldr	r3, [pc, #48]	@ (801139c <__aeabi_d2ulz+0x34>)
 801136c:	2200      	movs	r2, #0
 801136e:	4606      	mov	r6, r0
 8011370:	460f      	mov	r7, r1
 8011372:	f7ef f949 	bl	8000608 <__aeabi_dmul>
 8011376:	f7ef fc1f 	bl	8000bb8 <__aeabi_d2uiz>
 801137a:	4604      	mov	r4, r0
 801137c:	f7ef f8ca 	bl	8000514 <__aeabi_ui2d>
 8011380:	4b07      	ldr	r3, [pc, #28]	@ (80113a0 <__aeabi_d2ulz+0x38>)
 8011382:	2200      	movs	r2, #0
 8011384:	f7ef f940 	bl	8000608 <__aeabi_dmul>
 8011388:	4602      	mov	r2, r0
 801138a:	460b      	mov	r3, r1
 801138c:	4630      	mov	r0, r6
 801138e:	4639      	mov	r1, r7
 8011390:	f7ee ff82 	bl	8000298 <__aeabi_dsub>
 8011394:	f7ef fc10 	bl	8000bb8 <__aeabi_d2uiz>
 8011398:	4621      	mov	r1, r4
 801139a:	bdd0      	pop	{r4, r6, r7, pc}
 801139c:	3df00000 	.word	0x3df00000
 80113a0:	41f00000 	.word	0x41f00000

080113a4 <__udivmoddi4>:
 80113a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113a8:	9d08      	ldr	r5, [sp, #32]
 80113aa:	460e      	mov	r6, r1
 80113ac:	4604      	mov	r4, r0
 80113ae:	460f      	mov	r7, r1
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d14a      	bne.n	801144a <__udivmoddi4+0xa6>
 80113b4:	4694      	mov	ip, r2
 80113b6:	458c      	cmp	ip, r1
 80113b8:	fab2 f282 	clz	r2, r2
 80113bc:	d960      	bls.n	8011480 <__udivmoddi4+0xdc>
 80113be:	b142      	cbz	r2, 80113d2 <__udivmoddi4+0x2e>
 80113c0:	f1c2 0320 	rsb	r3, r2, #32
 80113c4:	4097      	lsls	r7, r2
 80113c6:	fa20 f303 	lsr.w	r3, r0, r3
 80113ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80113ce:	431f      	orrs	r7, r3
 80113d0:	4094      	lsls	r4, r2
 80113d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80113d6:	fa1f f68c 	uxth.w	r6, ip
 80113da:	fbb7 f1fe 	udiv	r1, r7, lr
 80113de:	0c23      	lsrs	r3, r4, #16
 80113e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80113e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80113e8:	fb01 f006 	mul.w	r0, r1, r6
 80113ec:	4298      	cmp	r0, r3
 80113ee:	d90a      	bls.n	8011406 <__udivmoddi4+0x62>
 80113f0:	eb1c 0303 	adds.w	r3, ip, r3
 80113f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80113f8:	f080 8115 	bcs.w	8011626 <__udivmoddi4+0x282>
 80113fc:	4298      	cmp	r0, r3
 80113fe:	f240 8112 	bls.w	8011626 <__udivmoddi4+0x282>
 8011402:	3902      	subs	r1, #2
 8011404:	4463      	add	r3, ip
 8011406:	1a1b      	subs	r3, r3, r0
 8011408:	b2a4      	uxth	r4, r4
 801140a:	fbb3 f0fe 	udiv	r0, r3, lr
 801140e:	fb0e 3310 	mls	r3, lr, r0, r3
 8011412:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011416:	fb00 f606 	mul.w	r6, r0, r6
 801141a:	42a6      	cmp	r6, r4
 801141c:	d90a      	bls.n	8011434 <__udivmoddi4+0x90>
 801141e:	eb1c 0404 	adds.w	r4, ip, r4
 8011422:	f100 33ff 	add.w	r3, r0, #4294967295
 8011426:	f080 8100 	bcs.w	801162a <__udivmoddi4+0x286>
 801142a:	42a6      	cmp	r6, r4
 801142c:	f240 80fd 	bls.w	801162a <__udivmoddi4+0x286>
 8011430:	4464      	add	r4, ip
 8011432:	3802      	subs	r0, #2
 8011434:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8011438:	1ba4      	subs	r4, r4, r6
 801143a:	2100      	movs	r1, #0
 801143c:	b11d      	cbz	r5, 8011446 <__udivmoddi4+0xa2>
 801143e:	40d4      	lsrs	r4, r2
 8011440:	2300      	movs	r3, #0
 8011442:	e9c5 4300 	strd	r4, r3, [r5]
 8011446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801144a:	428b      	cmp	r3, r1
 801144c:	d905      	bls.n	801145a <__udivmoddi4+0xb6>
 801144e:	b10d      	cbz	r5, 8011454 <__udivmoddi4+0xb0>
 8011450:	e9c5 0100 	strd	r0, r1, [r5]
 8011454:	2100      	movs	r1, #0
 8011456:	4608      	mov	r0, r1
 8011458:	e7f5      	b.n	8011446 <__udivmoddi4+0xa2>
 801145a:	fab3 f183 	clz	r1, r3
 801145e:	2900      	cmp	r1, #0
 8011460:	d146      	bne.n	80114f0 <__udivmoddi4+0x14c>
 8011462:	42b3      	cmp	r3, r6
 8011464:	d302      	bcc.n	801146c <__udivmoddi4+0xc8>
 8011466:	4282      	cmp	r2, r0
 8011468:	f200 80f5 	bhi.w	8011656 <__udivmoddi4+0x2b2>
 801146c:	1a84      	subs	r4, r0, r2
 801146e:	eb66 0203 	sbc.w	r2, r6, r3
 8011472:	2001      	movs	r0, #1
 8011474:	4617      	mov	r7, r2
 8011476:	2d00      	cmp	r5, #0
 8011478:	d0e5      	beq.n	8011446 <__udivmoddi4+0xa2>
 801147a:	e9c5 4700 	strd	r4, r7, [r5]
 801147e:	e7e2      	b.n	8011446 <__udivmoddi4+0xa2>
 8011480:	2a00      	cmp	r2, #0
 8011482:	f040 8093 	bne.w	80115ac <__udivmoddi4+0x208>
 8011486:	eba1 030c 	sub.w	r3, r1, ip
 801148a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801148e:	fa1f fe8c 	uxth.w	lr, ip
 8011492:	2101      	movs	r1, #1
 8011494:	fbb3 f6f7 	udiv	r6, r3, r7
 8011498:	fb07 3016 	mls	r0, r7, r6, r3
 801149c:	0c23      	lsrs	r3, r4, #16
 801149e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80114a2:	fb0e f006 	mul.w	r0, lr, r6
 80114a6:	4298      	cmp	r0, r3
 80114a8:	d908      	bls.n	80114bc <__udivmoddi4+0x118>
 80114aa:	eb1c 0303 	adds.w	r3, ip, r3
 80114ae:	f106 38ff 	add.w	r8, r6, #4294967295
 80114b2:	d202      	bcs.n	80114ba <__udivmoddi4+0x116>
 80114b4:	4298      	cmp	r0, r3
 80114b6:	f200 80d0 	bhi.w	801165a <__udivmoddi4+0x2b6>
 80114ba:	4646      	mov	r6, r8
 80114bc:	1a1b      	subs	r3, r3, r0
 80114be:	b2a4      	uxth	r4, r4
 80114c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80114c4:	fb07 3310 	mls	r3, r7, r0, r3
 80114c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80114cc:	fb0e fe00 	mul.w	lr, lr, r0
 80114d0:	45a6      	cmp	lr, r4
 80114d2:	d908      	bls.n	80114e6 <__udivmoddi4+0x142>
 80114d4:	eb1c 0404 	adds.w	r4, ip, r4
 80114d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80114dc:	d202      	bcs.n	80114e4 <__udivmoddi4+0x140>
 80114de:	45a6      	cmp	lr, r4
 80114e0:	f200 80b6 	bhi.w	8011650 <__udivmoddi4+0x2ac>
 80114e4:	4618      	mov	r0, r3
 80114e6:	eba4 040e 	sub.w	r4, r4, lr
 80114ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80114ee:	e7a5      	b.n	801143c <__udivmoddi4+0x98>
 80114f0:	f1c1 0720 	rsb	r7, r1, #32
 80114f4:	408b      	lsls	r3, r1
 80114f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80114fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80114fe:	fa06 fe01 	lsl.w	lr, r6, r1
 8011502:	fa20 f407 	lsr.w	r4, r0, r7
 8011506:	fa26 f307 	lsr.w	r3, r6, r7
 801150a:	ea44 040e 	orr.w	r4, r4, lr
 801150e:	fa00 f801 	lsl.w	r8, r0, r1
 8011512:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8011516:	ea4f 4914 	mov.w	r9, r4, lsr #16
 801151a:	fbb3 fef0 	udiv	lr, r3, r0
 801151e:	fa1f f68c 	uxth.w	r6, ip
 8011522:	fb00 331e 	mls	r3, r0, lr, r3
 8011526:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 801152a:	fb0e f906 	mul.w	r9, lr, r6
 801152e:	4599      	cmp	r9, r3
 8011530:	fa02 f201 	lsl.w	r2, r2, r1
 8011534:	d90b      	bls.n	801154e <__udivmoddi4+0x1aa>
 8011536:	eb1c 0303 	adds.w	r3, ip, r3
 801153a:	f10e 3aff 	add.w	sl, lr, #4294967295
 801153e:	f080 8085 	bcs.w	801164c <__udivmoddi4+0x2a8>
 8011542:	4599      	cmp	r9, r3
 8011544:	f240 8082 	bls.w	801164c <__udivmoddi4+0x2a8>
 8011548:	f1ae 0e02 	sub.w	lr, lr, #2
 801154c:	4463      	add	r3, ip
 801154e:	eba3 0909 	sub.w	r9, r3, r9
 8011552:	b2a4      	uxth	r4, r4
 8011554:	fbb9 f3f0 	udiv	r3, r9, r0
 8011558:	fb00 9913 	mls	r9, r0, r3, r9
 801155c:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8011560:	fb03 f606 	mul.w	r6, r3, r6
 8011564:	42a6      	cmp	r6, r4
 8011566:	d908      	bls.n	801157a <__udivmoddi4+0x1d6>
 8011568:	eb1c 0404 	adds.w	r4, ip, r4
 801156c:	f103 30ff 	add.w	r0, r3, #4294967295
 8011570:	d268      	bcs.n	8011644 <__udivmoddi4+0x2a0>
 8011572:	42a6      	cmp	r6, r4
 8011574:	d966      	bls.n	8011644 <__udivmoddi4+0x2a0>
 8011576:	3b02      	subs	r3, #2
 8011578:	4464      	add	r4, ip
 801157a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 801157e:	1ba4      	subs	r4, r4, r6
 8011580:	fba0 e602 	umull	lr, r6, r0, r2
 8011584:	42b4      	cmp	r4, r6
 8011586:	4673      	mov	r3, lr
 8011588:	46b1      	mov	r9, r6
 801158a:	d352      	bcc.n	8011632 <__udivmoddi4+0x28e>
 801158c:	d04f      	beq.n	801162e <__udivmoddi4+0x28a>
 801158e:	b15d      	cbz	r5, 80115a8 <__udivmoddi4+0x204>
 8011590:	ebb8 0203 	subs.w	r2, r8, r3
 8011594:	eb64 0409 	sbc.w	r4, r4, r9
 8011598:	fa04 f707 	lsl.w	r7, r4, r7
 801159c:	fa22 f301 	lsr.w	r3, r2, r1
 80115a0:	431f      	orrs	r7, r3
 80115a2:	40cc      	lsrs	r4, r1
 80115a4:	e9c5 7400 	strd	r7, r4, [r5]
 80115a8:	2100      	movs	r1, #0
 80115aa:	e74c      	b.n	8011446 <__udivmoddi4+0xa2>
 80115ac:	f1c2 0120 	rsb	r1, r2, #32
 80115b0:	fa20 f301 	lsr.w	r3, r0, r1
 80115b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80115b8:	fa26 f101 	lsr.w	r1, r6, r1
 80115bc:	4096      	lsls	r6, r2
 80115be:	4333      	orrs	r3, r6
 80115c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80115c4:	fa1f fe8c 	uxth.w	lr, ip
 80115c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80115cc:	fb07 1610 	mls	r6, r7, r0, r1
 80115d0:	0c19      	lsrs	r1, r3, #16
 80115d2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 80115d6:	fb00 f60e 	mul.w	r6, r0, lr
 80115da:	428e      	cmp	r6, r1
 80115dc:	fa04 f402 	lsl.w	r4, r4, r2
 80115e0:	d908      	bls.n	80115f4 <__udivmoddi4+0x250>
 80115e2:	eb1c 0101 	adds.w	r1, ip, r1
 80115e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80115ea:	d22d      	bcs.n	8011648 <__udivmoddi4+0x2a4>
 80115ec:	428e      	cmp	r6, r1
 80115ee:	d92b      	bls.n	8011648 <__udivmoddi4+0x2a4>
 80115f0:	3802      	subs	r0, #2
 80115f2:	4461      	add	r1, ip
 80115f4:	1b89      	subs	r1, r1, r6
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80115fc:	fb07 1116 	mls	r1, r7, r6, r1
 8011600:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011604:	fb06 f10e 	mul.w	r1, r6, lr
 8011608:	4299      	cmp	r1, r3
 801160a:	d908      	bls.n	801161e <__udivmoddi4+0x27a>
 801160c:	eb1c 0303 	adds.w	r3, ip, r3
 8011610:	f106 38ff 	add.w	r8, r6, #4294967295
 8011614:	d214      	bcs.n	8011640 <__udivmoddi4+0x29c>
 8011616:	4299      	cmp	r1, r3
 8011618:	d912      	bls.n	8011640 <__udivmoddi4+0x29c>
 801161a:	3e02      	subs	r6, #2
 801161c:	4463      	add	r3, ip
 801161e:	1a5b      	subs	r3, r3, r1
 8011620:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8011624:	e736      	b.n	8011494 <__udivmoddi4+0xf0>
 8011626:	4639      	mov	r1, r7
 8011628:	e6ed      	b.n	8011406 <__udivmoddi4+0x62>
 801162a:	4618      	mov	r0, r3
 801162c:	e702      	b.n	8011434 <__udivmoddi4+0x90>
 801162e:	45f0      	cmp	r8, lr
 8011630:	d2ad      	bcs.n	801158e <__udivmoddi4+0x1ea>
 8011632:	ebbe 0302 	subs.w	r3, lr, r2
 8011636:	eb66 060c 	sbc.w	r6, r6, ip
 801163a:	3801      	subs	r0, #1
 801163c:	46b1      	mov	r9, r6
 801163e:	e7a6      	b.n	801158e <__udivmoddi4+0x1ea>
 8011640:	4646      	mov	r6, r8
 8011642:	e7ec      	b.n	801161e <__udivmoddi4+0x27a>
 8011644:	4603      	mov	r3, r0
 8011646:	e798      	b.n	801157a <__udivmoddi4+0x1d6>
 8011648:	4640      	mov	r0, r8
 801164a:	e7d3      	b.n	80115f4 <__udivmoddi4+0x250>
 801164c:	46d6      	mov	lr, sl
 801164e:	e77e      	b.n	801154e <__udivmoddi4+0x1aa>
 8011650:	4464      	add	r4, ip
 8011652:	3802      	subs	r0, #2
 8011654:	e747      	b.n	80114e6 <__udivmoddi4+0x142>
 8011656:	4608      	mov	r0, r1
 8011658:	e70d      	b.n	8011476 <__udivmoddi4+0xd2>
 801165a:	3e02      	subs	r6, #2
 801165c:	4463      	add	r3, ip
 801165e:	e72d      	b.n	80114bc <__udivmoddi4+0x118>

08011660 <_init>:
 8011660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011662:	bf00      	nop
 8011664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011666:	bc08      	pop	{r3}
 8011668:	469e      	mov	lr, r3
 801166a:	4770      	bx	lr

0801166c <_fini>:
 801166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166e:	bf00      	nop
 8011670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011672:	bc08      	pop	{r3}
 8011674:	469e      	mov	lr, r3
 8011676:	4770      	bx	lr
