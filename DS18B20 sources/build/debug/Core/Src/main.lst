ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB221:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "ds18b20.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** float DS18_GET();
  30:Core/Src/main.c **** void DS18_INIT();
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** UART_HandleTypeDef huart1;
  46:Core/Src/main.c **** UART_HandleTypeDef huart2;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  48:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_tx;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** DS18B20 temperatureSensor;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** float temp;
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** static void MX_GPIO_Init(void);
  59:Core/Src/main.c **** static void MX_DMA_Init(void);
  60:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  61:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  62:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE END PFP */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  67:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  68:Core/Src/main.c **** uint8_t rx_buff[10];
  69:Core/Src/main.c **** /* USER CODE END 0 */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /**
  72:Core/Src/main.c ****   * @brief  The application entry point.
  73:Core/Src/main.c ****   * @retval int
  74:Core/Src/main.c ****   */
  75:Core/Src/main.c **** int main(void)
  76:Core/Src/main.c **** {
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE END 1 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  85:Core/Src/main.c ****   HAL_Init();
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE END Init */
  90:Core/Src/main.c **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 3


  91:Core/Src/main.c ****   /* Configure the system clock */
  92:Core/Src/main.c ****   SystemClock_Config();
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END SysInit */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Initialize all configured peripherals */
  99:Core/Src/main.c ****   MX_GPIO_Init();
 100:Core/Src/main.c ****   MX_DMA_Init();
 101:Core/Src/main.c ****   MX_USART1_UART_Init();
 102:Core/Src/main.c ****   MX_USART2_UART_Init();
 103:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 104:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart2, rx_buff, 10);
 105:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 106:Core/Src/main.c ****   DS18_INIT();
 107:Core/Src/main.c ****   /* USER CODE END 2 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* Infinite loop */
 110:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 111:Core/Src/main.c ****   while (1)
 112:Core/Src/main.c ****   {
 113:Core/Src/main.c **** 	temp = DS18_GET();
 114:Core/Src/main.c **** 	HAL_Delay(100);
 115:Core/Src/main.c ****     /* USER CODE END WHILE */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 118:Core/Src/main.c ****   }
 119:Core/Src/main.c ****   /* USER CODE END 3 */
 120:Core/Src/main.c **** }
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /**
 123:Core/Src/main.c ****   * @brief System Clock Configuration
 124:Core/Src/main.c ****   * @retval None
 125:Core/Src/main.c ****   */
 126:Core/Src/main.c **** void SystemClock_Config(void)
 127:Core/Src/main.c **** {
 128:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 129:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 132:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 133:Core/Src/main.c ****   */
 134:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 135:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 136:Core/Src/main.c ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 137:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 138:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 139:Core/Src/main.c ****   {
 140:Core/Src/main.c ****     Error_Handler();
 141:Core/Src/main.c ****   }
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 144:Core/Src/main.c ****   */
 145:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 146:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 147:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 4


 148:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 149:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 150:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 153:Core/Src/main.c ****   {
 154:Core/Src/main.c ****     Error_Handler();
 155:Core/Src/main.c ****   }
 156:Core/Src/main.c **** }
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** /**
 159:Core/Src/main.c ****   * @brief USART1 Initialization Function
 160:Core/Src/main.c ****   * @param None
 161:Core/Src/main.c ****   * @retval None
 162:Core/Src/main.c ****   */
 163:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 164:Core/Src/main.c **** {
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 173:Core/Src/main.c ****   huart1.Instance = USART1;
 174:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 175:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 176:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 177:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 178:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 179:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 180:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 181:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 182:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 183:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 184:Core/Src/main.c ****   if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     Error_Handler();
 187:Core/Src/main.c ****   }
 188:Core/Src/main.c ****   if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 189:Core/Src/main.c ****   {
 190:Core/Src/main.c ****     Error_Handler();
 191:Core/Src/main.c ****   }
 192:Core/Src/main.c ****   if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 193:Core/Src/main.c ****   {
 194:Core/Src/main.c ****     Error_Handler();
 195:Core/Src/main.c ****   }
 196:Core/Src/main.c ****   if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 197:Core/Src/main.c ****   {
 198:Core/Src/main.c ****     Error_Handler();
 199:Core/Src/main.c ****   }
 200:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** }
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 5


 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** /**
 207:Core/Src/main.c ****   * @brief USART2 Initialization Function
 208:Core/Src/main.c ****   * @param None
 209:Core/Src/main.c ****   * @retval None
 210:Core/Src/main.c ****   */
 211:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 212:Core/Src/main.c **** {
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 221:Core/Src/main.c ****   huart2.Instance = USART2;
 222:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 223:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 224:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 225:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 226:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 227:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 228:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 229:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 230:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 231:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 232:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 233:Core/Src/main.c ****   {
 234:Core/Src/main.c ****     Error_Handler();
 235:Core/Src/main.c ****   }
 236:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c **** }
 241:Core/Src/main.c **** 
 242:Core/Src/main.c **** /**
 243:Core/Src/main.c ****   * Enable DMA controller clock
 244:Core/Src/main.c ****   */
 245:Core/Src/main.c **** static void MX_DMA_Init(void)
 246:Core/Src/main.c **** {
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* DMA controller clock enable */
 249:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* DMA interrupt init */
 252:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 253:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 254:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 255:Core/Src/main.c ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 256:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 257:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 258:Core/Src/main.c **** 
 259:Core/Src/main.c **** }
 260:Core/Src/main.c **** 
 261:Core/Src/main.c **** /**
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 6


 262:Core/Src/main.c ****   * @brief GPIO Initialization Function
 263:Core/Src/main.c ****   * @param None
 264:Core/Src/main.c ****   * @retval None
 265:Core/Src/main.c ****   */
 266:Core/Src/main.c **** static void MX_GPIO_Init(void)
 267:Core/Src/main.c **** {
  26              		.loc 1 267 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 87B0     		sub	sp, sp, #28
  36              		.cfi_def_cfa_offset 40
 268:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  37              		.loc 1 268 3 view .LVU1
  38              		.loc 1 268 20 is_stmt 0 view .LVU2
  39 0004 1422     		movs	r2, #20
  40 0006 0021     		movs	r1, #0
  41 0008 01A8     		add	r0, sp, #4
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
 269:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 270:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 273:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  44              		.loc 1 273 3 is_stmt 1 view .LVU3
  45              	.LBB4:
  46              		.loc 1 273 3 view .LVU4
  47              		.loc 1 273 3 view .LVU5
  48 000e 0E4B     		ldr	r3, .L2
  49 0010 5A6B     		ldr	r2, [r3, #52]
  50 0012 0124     		movs	r4, #1
  51 0014 2243     		orrs	r2, r4
  52 0016 5A63     		str	r2, [r3, #52]
  53              		.loc 1 273 3 view .LVU6
  54 0018 5B6B     		ldr	r3, [r3, #52]
  55 001a 2340     		ands	r3, r4
  56 001c 0093     		str	r3, [sp]
  57              		.loc 1 273 3 view .LVU7
  58 001e 009B     		ldr	r3, [sp]
  59              	.LBE4:
  60              		.loc 1 273 3 view .LVU8
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 276:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  61              		.loc 1 276 3 view .LVU9
  62 0020 A025     		movs	r5, #160
  63 0022 ED05     		lsls	r5, r5, #23
  64 0024 0022     		movs	r2, #0
  65 0026 1021     		movs	r1, #16
  66 0028 2800     		movs	r0, r5
  67 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 7


  68              	.LVL1:
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /*Configure GPIO pin : LED_Pin */
 279:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin;
  69              		.loc 1 279 3 view .LVU10
  70              		.loc 1 279 23 is_stmt 0 view .LVU11
  71 002e 1023     		movs	r3, #16
  72 0030 0193     		str	r3, [sp, #4]
 280:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  73              		.loc 1 280 3 is_stmt 1 view .LVU12
  74              		.loc 1 280 24 is_stmt 0 view .LVU13
  75 0032 0294     		str	r4, [sp, #8]
 281:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  76              		.loc 1 281 3 is_stmt 1 view .LVU14
  77              		.loc 1 281 24 is_stmt 0 view .LVU15
  78 0034 0023     		movs	r3, #0
  79 0036 0393     		str	r3, [sp, #12]
 282:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 282 3 is_stmt 1 view .LVU16
  81              		.loc 1 282 25 is_stmt 0 view .LVU17
  82 0038 0493     		str	r3, [sp, #16]
 283:Core/Src/main.c ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
  83              		.loc 1 283 3 is_stmt 1 view .LVU18
  84 003a 01A9     		add	r1, sp, #4
  85 003c 2800     		movs	r0, r5
  86 003e FFF7FEFF 		bl	HAL_GPIO_Init
  87              	.LVL2:
 284:Core/Src/main.c **** 
 285:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 286:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 287:Core/Src/main.c **** }
  88              		.loc 1 287 1 is_stmt 0 view .LVU19
  89 0042 07B0     		add	sp, sp, #28
  90              		@ sp needed
  91 0044 30BD     		pop	{r4, r5, pc}
  92              	.L3:
  93 0046 C046     		.align	2
  94              	.L2:
  95 0048 00100240 		.word	1073876992
  96              		.cfi_endproc
  97              	.LFE221:
  99              		.section	.text.MX_DMA_Init,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.code	16
 103              		.thumb_func
 105              	MX_DMA_Init:
 106              	.LFB220:
 246:Core/Src/main.c **** 
 107              		.loc 1 246 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111 0000 00B5     		push	{lr}
 112              		.cfi_def_cfa_offset 4
 113              		.cfi_offset 14, -4
 114 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 8


 115              		.cfi_def_cfa_offset 16
 249:Core/Src/main.c **** 
 116              		.loc 1 249 3 view .LVU21
 117              	.LBB5:
 249:Core/Src/main.c **** 
 118              		.loc 1 249 3 view .LVU22
 249:Core/Src/main.c **** 
 119              		.loc 1 249 3 view .LVU23
 120 0004 0D4A     		ldr	r2, .L5
 121 0006 916B     		ldr	r1, [r2, #56]
 122 0008 0123     		movs	r3, #1
 123 000a 1943     		orrs	r1, r3
 124 000c 9163     		str	r1, [r2, #56]
 249:Core/Src/main.c **** 
 125              		.loc 1 249 3 view .LVU24
 126 000e 926B     		ldr	r2, [r2, #56]
 127 0010 1340     		ands	r3, r2
 128 0012 0193     		str	r3, [sp, #4]
 249:Core/Src/main.c **** 
 129              		.loc 1 249 3 view .LVU25
 130 0014 019B     		ldr	r3, [sp, #4]
 131              	.LBE5:
 249:Core/Src/main.c **** 
 132              		.loc 1 249 3 view .LVU26
 253:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 133              		.loc 1 253 3 view .LVU27
 134 0016 0022     		movs	r2, #0
 135 0018 0021     		movs	r1, #0
 136 001a 0920     		movs	r0, #9
 137 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 138              	.LVL3:
 254:Core/Src/main.c ****   /* DMA1_Channel2_3_IRQn interrupt configuration */
 139              		.loc 1 254 3 view .LVU28
 140 0020 0920     		movs	r0, #9
 141 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 142              	.LVL4:
 256:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 143              		.loc 1 256 3 view .LVU29
 144 0026 0022     		movs	r2, #0
 145 0028 0021     		movs	r1, #0
 146 002a 0A20     		movs	r0, #10
 147 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 148              	.LVL5:
 257:Core/Src/main.c **** 
 149              		.loc 1 257 3 view .LVU30
 150 0030 0A20     		movs	r0, #10
 151 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 152              	.LVL6:
 259:Core/Src/main.c **** 
 153              		.loc 1 259 1 is_stmt 0 view .LVU31
 154 0036 03B0     		add	sp, sp, #12
 155              		@ sp needed
 156 0038 00BD     		pop	{pc}
 157              	.L6:
 158 003a C046     		.align	2
 159              	.L5:
 160 003c 00100240 		.word	1073876992
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 9


 161              		.cfi_endproc
 162              	.LFE220:
 164              		.section	.text.DS18_INIT,"ax",%progbits
 165              		.align	1
 166              		.global	DS18_INIT
 167              		.syntax unified
 168              		.code	16
 169              		.thumb_func
 171              	DS18_INIT:
 172              	.LFB222:
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 290:Core/Src/main.c **** void DS18_INIT(){
 173              		.loc 1 290 17 is_stmt 1 view -0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 8
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177 0000 30B5     		push	{r4, r5, lr}
 178              		.cfi_def_cfa_offset 12
 179              		.cfi_offset 4, -12
 180              		.cfi_offset 5, -8
 181              		.cfi_offset 14, -4
 182 0002 83B0     		sub	sp, sp, #12
 183              		.cfi_def_cfa_offset 24
 291:Core/Src/main.c ****   DS18B20_Init(&temperatureSensor, &huart1);
 184              		.loc 1 291 3 view .LVU33
 185 0004 1049     		ldr	r1, .L8
 186 0006 114C     		ldr	r4, .L8+4
 187 0008 2000     		movs	r0, r4
 188 000a FFF7FEFF 		bl	DS18B20_Init
 189              	.LVL7:
 292:Core/Src/main.c ****   DS18B20_InitializationCommand(&temperatureSensor);
 190              		.loc 1 292 3 view .LVU34
 191 000e 2000     		movs	r0, r4
 192 0010 FFF7FEFF 		bl	DS18B20_InitializationCommand
 193              	.LVL8:
 293:Core/Src/main.c ****   DS18B20_ReadRom(&temperatureSensor);
 194              		.loc 1 293 3 view .LVU35
 195 0014 2000     		movs	r0, r4
 196 0016 FFF7FEFF 		bl	DS18B20_ReadRom
 197              	.LVL9:
 294:Core/Src/main.c ****   DS18B20_ReadScratchpad(&temperatureSensor);
 198              		.loc 1 294 3 view .LVU36
 199 001a 2000     		movs	r0, r4
 200 001c FFF7FEFF 		bl	DS18B20_ReadScratchpad
 201              	.LVL10:
 295:Core/Src/main.c ****   uint8_t settings[3];
 202              		.loc 1 295 3 view .LVU37
 296:Core/Src/main.c ****   settings[0] = temperatureSensor.temperatureLimitHigh;
 203              		.loc 1 296 3 view .LVU38
 204              		.loc 1 296 34 is_stmt 0 view .LVU39
 205 0020 E37B     		ldrb	r3, [r4, #15]
 206              		.loc 1 296 15 view .LVU40
 207 0022 01AD     		add	r5, sp, #4
 208 0024 2B70     		strb	r3, [r5]
 297:Core/Src/main.c ****   settings[1] = temperatureSensor.temperatureLimitLow;
 209              		.loc 1 297 3 is_stmt 1 view .LVU41
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 10


 210              		.loc 1 297 34 is_stmt 0 view .LVU42
 211 0026 A37B     		ldrb	r3, [r4, #14]
 212              		.loc 1 297 15 view .LVU43
 213 0028 6B70     		strb	r3, [r5, #1]
 298:Core/Src/main.c ****   settings[2] = DS18B20_12_BITS_CONFIG;
 214              		.loc 1 298 3 is_stmt 1 view .LVU44
 215              		.loc 1 298 15 is_stmt 0 view .LVU45
 216 002a 7F23     		movs	r3, #127
 217 002c AB70     		strb	r3, [r5, #2]
 299:Core/Src/main.c ****   DS18B20_InitializationCommand(&temperatureSensor);
 218              		.loc 1 299 3 is_stmt 1 view .LVU46
 219 002e 2000     		movs	r0, r4
 220 0030 FFF7FEFF 		bl	DS18B20_InitializationCommand
 221              	.LVL11:
 300:Core/Src/main.c ****   DS18B20_SkipRom(&temperatureSensor);
 222              		.loc 1 300 3 view .LVU47
 223 0034 2000     		movs	r0, r4
 224 0036 FFF7FEFF 		bl	DS18B20_SkipRom
 225              	.LVL12:
 301:Core/Src/main.c ****   DS18B20_WriteScratchpad(&temperatureSensor, settings);
 226              		.loc 1 301 3 view .LVU48
 227 003a 2900     		movs	r1, r5
 228 003c 2000     		movs	r0, r4
 229 003e FFF7FEFF 		bl	DS18B20_WriteScratchpad
 230              	.LVL13:
 302:Core/Src/main.c **** }
 231              		.loc 1 302 1 is_stmt 0 view .LVU49
 232 0042 03B0     		add	sp, sp, #12
 233              		@ sp needed
 234 0044 30BD     		pop	{r4, r5, pc}
 235              	.L9:
 236 0046 C046     		.align	2
 237              	.L8:
 238 0048 00000000 		.word	huart1
 239 004c 00000000 		.word	temperatureSensor
 240              		.cfi_endproc
 241              	.LFE222:
 243              		.section	.text.DS18_GET,"ax",%progbits
 244              		.align	1
 245              		.global	DS18_GET
 246              		.syntax unified
 247              		.code	16
 248              		.thumb_func
 250              	DS18_GET:
 251              	.LFB223:
 303:Core/Src/main.c **** 
 304:Core/Src/main.c **** float DS18_GET(){
 252              		.loc 1 304 17 is_stmt 1 view -0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256 0000 10B5     		push	{r4, lr}
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 4, -8
 259              		.cfi_offset 14, -4
 305:Core/Src/main.c **** 	DS18B20_InitializationCommand(&temperatureSensor);
 260              		.loc 1 305 2 view .LVU51
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 11


 261 0002 0B4C     		ldr	r4, .L11
 262 0004 2000     		movs	r0, r4
 263 0006 FFF7FEFF 		bl	DS18B20_InitializationCommand
 264              	.LVL14:
 306:Core/Src/main.c **** 	DS18B20_SkipRom(&temperatureSensor);
 265              		.loc 1 306 2 view .LVU52
 266 000a 2000     		movs	r0, r4
 267 000c FFF7FEFF 		bl	DS18B20_SkipRom
 268              	.LVL15:
 307:Core/Src/main.c **** 	DS18B20_ConvertT(&temperatureSensor, DS18B20_DATA);
 269              		.loc 1 307 2 view .LVU53
 270 0010 0121     		movs	r1, #1
 271 0012 2000     		movs	r0, r4
 272 0014 FFF7FEFF 		bl	DS18B20_ConvertT
 273              	.LVL16:
 308:Core/Src/main.c **** 	DS18B20_InitializationCommand(&temperatureSensor);
 274              		.loc 1 308 2 view .LVU54
 275 0018 2000     		movs	r0, r4
 276 001a FFF7FEFF 		bl	DS18B20_InitializationCommand
 277              	.LVL17:
 309:Core/Src/main.c **** 	DS18B20_SkipRom(&temperatureSensor);
 278              		.loc 1 309 2 view .LVU55
 279 001e 2000     		movs	r0, r4
 280 0020 FFF7FEFF 		bl	DS18B20_SkipRom
 281              	.LVL18:
 310:Core/Src/main.c **** 	DS18B20_ReadScratchpad(&temperatureSensor);
 282              		.loc 1 310 2 view .LVU56
 283 0024 2000     		movs	r0, r4
 284 0026 FFF7FEFF 		bl	DS18B20_ReadScratchpad
 285              	.LVL19:
 311:Core/Src/main.c **** 	return temperatureSensor.temperature;
 286              		.loc 1 311 2 view .LVU57
 287              		.loc 1 311 26 is_stmt 0 discriminator 1 view .LVU58
 288 002a 6069     		ldr	r0, [r4, #20]
 312:Core/Src/main.c **** }
 289              		.loc 1 312 1 view .LVU59
 290              		@ sp needed
 291 002c 10BD     		pop	{r4, pc}
 292              	.L12:
 293 002e C046     		.align	2
 294              	.L11:
 295 0030 00000000 		.word	temperatureSensor
 296              		.cfi_endproc
 297              	.LFE223:
 299              		.global	__aeabi_fmul
 300              		.global	__aeabi_f2iz
 301              		.section	.rodata.HAL_UART_RxCpltCallback.str1.4,"aMS",%progbits,1
 302              		.align	2
 303              	.LC5:
 304 0000 54542D33 		.ascii	"TT-30X50Y\260\000"
 304      30583530 
 304      59B000
 305 000b 00       		.align	2
 306              	.LC7:
 307 000c 23232323 		.ascii	"##########\000"
 307      23232323 
 307      232300
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 12


 308              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 309              		.align	1
 310              		.global	HAL_UART_RxCpltCallback
 311              		.syntax unified
 312              		.code	16
 313              		.thumb_func
 315              	HAL_UART_RxCpltCallback:
 316              	.LVL20:
 317              	.LFB224:
 313:Core/Src/main.c **** 
 314:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 318              		.loc 1 314 56 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 16
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		.loc 1 314 56 is_stmt 0 view .LVU61
 323 0000 10B5     		push	{r4, lr}
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 4, -8
 326              		.cfi_offset 14, -4
 327 0002 84B0     		sub	sp, sp, #16
 328              		.cfi_def_cfa_offset 24
 315:Core/Src/main.c **** 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 329              		.loc 1 315 2 is_stmt 1 view .LVU62
 330 0004 A020     		movs	r0, #160
 331              	.LVL21:
 332              		.loc 1 315 2 is_stmt 0 view .LVU63
 333 0006 1021     		movs	r1, #16
 334 0008 C005     		lsls	r0, r0, #23
 335 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 336              	.LVL22:
 316:Core/Src/main.c **** 	HAL_UART_Receive_DMA(&huart2, rx_buff, 10);
 337              		.loc 1 316 2 is_stmt 1 view .LVU64
 338 000e 1A4C     		ldr	r4, .L18
 339 0010 1A48     		ldr	r0, .L18+4
 340 0012 0A22     		movs	r2, #10
 341 0014 2100     		movs	r1, r4
 342 0016 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 343              	.LVL23:
 317:Core/Src/main.c **** 	if (rx_buff[0] == 84){
 344              		.loc 1 317 2 view .LVU65
 345              		.loc 1 317 13 is_stmt 0 view .LVU66
 346 001a 2378     		ldrb	r3, [r4]
 347              		.loc 1 317 5 view .LVU67
 348 001c 542B     		cmp	r3, #84
 349 001e 03D0     		beq	.L16
 318:Core/Src/main.c ****     // TT-30X50Y*
 319:Core/Src/main.c **** 		uint8_t tx_buff[10] = {84, 84, 45, 51, 48, 88, 53, 48, 89, 176};
 320:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 321:Core/Src/main.c **** 	}else if (rx_buff[0] == 71){
 350              		.loc 1 321 8 is_stmt 1 view .LVU68
 351              		.loc 1 321 11 is_stmt 0 view .LVU69
 352 0020 472B     		cmp	r3, #71
 353 0022 0DD0     		beq	.L17
 354              	.L13:
 322:Core/Src/main.c **** 		uint8_t tx_buff[10] = {35, 35, 35, 35, 35, 35, 35, 35, 35, 35};
 323:Core/Src/main.c ****     int16_t val = roundf(temp * 10);
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 13


 324:Core/Src/main.c **** 		itoa(val, tx_buff, 10);
 325:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 326:Core/Src/main.c **** 	}
 327:Core/Src/main.c **** }
 355              		.loc 1 327 1 view .LVU70
 356 0024 04B0     		add	sp, sp, #16
 357              		@ sp needed
 358 0026 10BD     		pop	{r4, pc}
 359              	.L16:
 360              	.LBB6:
 319:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 361              		.loc 1 319 3 is_stmt 1 view .LVU71
 319:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 362              		.loc 1 319 11 is_stmt 0 view .LVU72
 363 0028 01A9     		add	r1, sp, #4
 364 002a 154B     		ldr	r3, .L18+8
 365 002c 0A00     		movs	r2, r1
 366 002e 11CB     		ldmia	r3!, {r0, r4}
 367 0030 11C2     		stmia	r2!, {r0, r4}
 368 0032 1B88     		ldrh	r3, [r3]
 369 0034 1380     		strh	r3, [r2]
 320:Core/Src/main.c **** 	}else if (rx_buff[0] == 71){
 370              		.loc 1 320 3 is_stmt 1 view .LVU73
 371 0036 1148     		ldr	r0, .L18+4
 372 0038 0A22     		movs	r2, #10
 373 003a FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 374              	.LVL24:
 375              	.LBE6:
 376 003e F1E7     		b	.L13
 377              	.L17:
 378              	.LBB7:
 322:Core/Src/main.c **** 		uint8_t tx_buff[10] = {35, 35, 35, 35, 35, 35, 35, 35, 35, 35};
 379              		.loc 1 322 3 view .LVU74
 322:Core/Src/main.c **** 		uint8_t tx_buff[10] = {35, 35, 35, 35, 35, 35, 35, 35, 35, 35};
 380              		.loc 1 322 11 is_stmt 0 view .LVU75
 381 0040 01AC     		add	r4, sp, #4
 382 0042 104B     		ldr	r3, .L18+12
 383 0044 2200     		movs	r2, r4
 384 0046 03CB     		ldmia	r3!, {r0, r1}
 385 0048 03C2     		stmia	r2!, {r0, r1}
 386 004a 1B88     		ldrh	r3, [r3]
 387 004c 1380     		strh	r3, [r2]
 323:Core/Src/main.c **** 		itoa(val, tx_buff, 10);
 388              		.loc 1 323 5 is_stmt 1 view .LVU76
 323:Core/Src/main.c **** 		itoa(val, tx_buff, 10);
 389              		.loc 1 323 19 is_stmt 0 view .LVU77
 390 004e 0E4B     		ldr	r3, .L18+16
 391 0050 0E49     		ldr	r1, .L18+20
 392 0052 1868     		ldr	r0, [r3]
 393 0054 FFF7FEFF 		bl	__aeabi_fmul
 394              	.LVL25:
 395 0058 FFF7FEFF 		bl	roundf
 396              	.LVL26:
 323:Core/Src/main.c **** 		itoa(val, tx_buff, 10);
 397              		.loc 1 323 13 discriminator 1 view .LVU78
 398 005c FFF7FEFF 		bl	__aeabi_f2iz
 399              	.LVL27:
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 14


 400 0060 00B2     		sxth	r0, r0
 401              	.LVL28:
 324:Core/Src/main.c **** 		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 402              		.loc 1 324 3 is_stmt 1 view .LVU79
 403 0062 0A22     		movs	r2, #10
 404 0064 2100     		movs	r1, r4
 405 0066 FFF7FEFF 		bl	itoa
 406              	.LVL29:
 325:Core/Src/main.c **** 	}
 407              		.loc 1 325 3 view .LVU80
 408 006a 0448     		ldr	r0, .L18+4
 409 006c 0A22     		movs	r2, #10
 410 006e 2100     		movs	r1, r4
 411 0070 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 412              	.LVL30:
 413              	.LBE7:
 414              		.loc 1 327 1 is_stmt 0 view .LVU81
 415 0074 D6E7     		b	.L13
 416              	.L19:
 417 0076 C046     		.align	2
 418              	.L18:
 419 0078 00000000 		.word	rx_buff
 420 007c 00000000 		.word	huart2
 421 0080 00000000 		.word	.LC5
 422 0084 0C000000 		.word	.LC7
 423 0088 00000000 		.word	temp
 424 008c 00002041 		.word	1092616192
 425              		.cfi_endproc
 426              	.LFE224:
 428              		.section	.text.Error_Handler,"ax",%progbits
 429              		.align	1
 430              		.global	Error_Handler
 431              		.syntax unified
 432              		.code	16
 433              		.thumb_func
 435              	Error_Handler:
 436              	.LFB225:
 328:Core/Src/main.c **** /* USER CODE END 4 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c **** /**
 331:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 332:Core/Src/main.c ****   * @retval None
 333:Core/Src/main.c ****   */
 334:Core/Src/main.c **** void Error_Handler(void)
 335:Core/Src/main.c **** {
 437              		.loc 1 335 1 is_stmt 1 view -0
 438              		.cfi_startproc
 439              		@ Volatile: function does not return.
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              		@ link register save eliminated.
 336:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 337:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 338:Core/Src/main.c ****   __disable_irq();
 443              		.loc 1 338 3 view .LVU83
 444              	.LBB8:
 445              	.LBI8:
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 15


 446              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 16


  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 17


 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 18


 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 19


 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 20


 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 21


 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 22


 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 23


 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 24


 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 25


 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 26


 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 27


 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 28


 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 29


 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 30


 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 31


 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 447              		.loc 2 960 27 view .LVU84
 448              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 449              		.loc 2 962 3 view .LVU85
 450              		.syntax divided
 451              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 452 0000 72B6     		cpsid i
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 32


 453              	@ 0 "" 2
 454              		.thumb
 455              		.syntax unified
 456              	.L21:
 457              	.LBE9:
 458              	.LBE8:
 339:Core/Src/main.c ****   while (1)
 459              		.loc 1 339 3 view .LVU86
 340:Core/Src/main.c ****   {
 341:Core/Src/main.c ****   }
 460              		.loc 1 341 3 view .LVU87
 339:Core/Src/main.c ****   while (1)
 461              		.loc 1 339 9 view .LVU88
 462 0002 FEE7     		b	.L21
 463              		.cfi_endproc
 464              	.LFE225:
 466              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 467              		.align	1
 468              		.syntax unified
 469              		.code	16
 470              		.thumb_func
 472              	MX_USART1_UART_Init:
 473              	.LFB218:
 164:Core/Src/main.c **** 
 474              		.loc 1 164 1 view -0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478 0000 10B5     		push	{r4, lr}
 479              		.cfi_def_cfa_offset 8
 480              		.cfi_offset 4, -8
 481              		.cfi_offset 14, -4
 173:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 482              		.loc 1 173 3 view .LVU90
 173:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 483              		.loc 1 173 19 is_stmt 0 view .LVU91
 484 0002 1748     		ldr	r0, .L31
 485 0004 174B     		ldr	r3, .L31+4
 486 0006 0360     		str	r3, [r0]
 174:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 487              		.loc 1 174 3 is_stmt 1 view .LVU92
 174:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 488              		.loc 1 174 24 is_stmt 0 view .LVU93
 489 0008 E123     		movs	r3, #225
 490 000a 5B02     		lsls	r3, r3, #9
 491 000c 4360     		str	r3, [r0, #4]
 175:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 492              		.loc 1 175 3 is_stmt 1 view .LVU94
 175:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 493              		.loc 1 175 26 is_stmt 0 view .LVU95
 494 000e 0023     		movs	r3, #0
 495 0010 8360     		str	r3, [r0, #8]
 176:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 496              		.loc 1 176 3 is_stmt 1 view .LVU96
 176:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 497              		.loc 1 176 24 is_stmt 0 view .LVU97
 498 0012 C360     		str	r3, [r0, #12]
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 33


 177:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 499              		.loc 1 177 3 is_stmt 1 view .LVU98
 177:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 500              		.loc 1 177 22 is_stmt 0 view .LVU99
 501 0014 0361     		str	r3, [r0, #16]
 178:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 502              		.loc 1 178 3 is_stmt 1 view .LVU100
 178:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 503              		.loc 1 178 20 is_stmt 0 view .LVU101
 504 0016 0C22     		movs	r2, #12
 505 0018 4261     		str	r2, [r0, #20]
 179:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 506              		.loc 1 179 3 is_stmt 1 view .LVU102
 179:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 507              		.loc 1 179 25 is_stmt 0 view .LVU103
 508 001a 8361     		str	r3, [r0, #24]
 180:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 509              		.loc 1 180 3 is_stmt 1 view .LVU104
 180:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 510              		.loc 1 180 28 is_stmt 0 view .LVU105
 511 001c C361     		str	r3, [r0, #28]
 181:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 512              		.loc 1 181 3 is_stmt 1 view .LVU106
 181:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 513              		.loc 1 181 30 is_stmt 0 view .LVU107
 514 001e 0362     		str	r3, [r0, #32]
 182:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 515              		.loc 1 182 3 is_stmt 1 view .LVU108
 182:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 516              		.loc 1 182 30 is_stmt 0 view .LVU109
 517 0020 4362     		str	r3, [r0, #36]
 183:Core/Src/main.c ****   if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 518              		.loc 1 183 3 is_stmt 1 view .LVU110
 183:Core/Src/main.c ****   if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 519              		.loc 1 183 38 is_stmt 0 view .LVU111
 520 0022 8362     		str	r3, [r0, #40]
 184:Core/Src/main.c ****   {
 521              		.loc 1 184 3 is_stmt 1 view .LVU112
 184:Core/Src/main.c ****   {
 522              		.loc 1 184 7 is_stmt 0 view .LVU113
 523 0024 FFF7FEFF 		bl	HAL_HalfDuplex_Init
 524              	.LVL31:
 184:Core/Src/main.c ****   {
 525              		.loc 1 184 6 discriminator 1 view .LVU114
 526 0028 0028     		cmp	r0, #0
 527 002a 11D1     		bne	.L27
 188:Core/Src/main.c ****   {
 528              		.loc 1 188 3 is_stmt 1 view .LVU115
 188:Core/Src/main.c ****   {
 529              		.loc 1 188 7 is_stmt 0 view .LVU116
 530 002c 0C48     		ldr	r0, .L31
 531 002e 0021     		movs	r1, #0
 532 0030 FFF7FEFF 		bl	HAL_UARTEx_SetTxFifoThreshold
 533              	.LVL32:
 188:Core/Src/main.c ****   {
 534              		.loc 1 188 6 discriminator 1 view .LVU117
 535 0034 0028     		cmp	r0, #0
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 34


 536 0036 0DD1     		bne	.L28
 192:Core/Src/main.c ****   {
 537              		.loc 1 192 3 is_stmt 1 view .LVU118
 192:Core/Src/main.c ****   {
 538              		.loc 1 192 7 is_stmt 0 view .LVU119
 539 0038 0948     		ldr	r0, .L31
 540 003a 0021     		movs	r1, #0
 541 003c FFF7FEFF 		bl	HAL_UARTEx_SetRxFifoThreshold
 542              	.LVL33:
 192:Core/Src/main.c ****   {
 543              		.loc 1 192 6 discriminator 1 view .LVU120
 544 0040 0028     		cmp	r0, #0
 545 0042 09D1     		bne	.L29
 196:Core/Src/main.c ****   {
 546              		.loc 1 196 3 is_stmt 1 view .LVU121
 196:Core/Src/main.c ****   {
 547              		.loc 1 196 7 is_stmt 0 view .LVU122
 548 0044 0648     		ldr	r0, .L31
 549 0046 FFF7FEFF 		bl	HAL_UARTEx_DisableFifoMode
 550              	.LVL34:
 196:Core/Src/main.c ****   {
 551              		.loc 1 196 6 discriminator 1 view .LVU123
 552 004a 0028     		cmp	r0, #0
 553 004c 06D1     		bne	.L30
 204:Core/Src/main.c **** 
 554              		.loc 1 204 1 view .LVU124
 555              		@ sp needed
 556 004e 10BD     		pop	{r4, pc}
 557              	.L27:
 186:Core/Src/main.c ****   }
 558              		.loc 1 186 5 is_stmt 1 view .LVU125
 559 0050 FFF7FEFF 		bl	Error_Handler
 560              	.LVL35:
 561              	.L28:
 190:Core/Src/main.c ****   }
 562              		.loc 1 190 5 view .LVU126
 563 0054 FFF7FEFF 		bl	Error_Handler
 564              	.LVL36:
 565              	.L29:
 194:Core/Src/main.c ****   }
 566              		.loc 1 194 5 view .LVU127
 567 0058 FFF7FEFF 		bl	Error_Handler
 568              	.LVL37:
 569              	.L30:
 198:Core/Src/main.c ****   }
 570              		.loc 1 198 5 view .LVU128
 571 005c FFF7FEFF 		bl	Error_Handler
 572              	.LVL38:
 573              	.L32:
 574              		.align	2
 575              	.L31:
 576 0060 00000000 		.word	huart1
 577 0064 00380140 		.word	1073821696
 578              		.cfi_endproc
 579              	.LFE218:
 581              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 582              		.align	1
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 35


 583              		.syntax unified
 584              		.code	16
 585              		.thumb_func
 587              	MX_USART2_UART_Init:
 588              	.LFB219:
 212:Core/Src/main.c **** 
 589              		.loc 1 212 1 view -0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593 0000 10B5     		push	{r4, lr}
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 4, -8
 596              		.cfi_offset 14, -4
 221:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 597              		.loc 1 221 3 view .LVU130
 221:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 598              		.loc 1 221 19 is_stmt 0 view .LVU131
 599 0002 0C48     		ldr	r0, .L36
 600 0004 0C4B     		ldr	r3, .L36+4
 601 0006 0360     		str	r3, [r0]
 222:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 602              		.loc 1 222 3 is_stmt 1 view .LVU132
 222:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 603              		.loc 1 222 24 is_stmt 0 view .LVU133
 604 0008 E123     		movs	r3, #225
 605 000a 5B02     		lsls	r3, r3, #9
 606 000c 4360     		str	r3, [r0, #4]
 223:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 607              		.loc 1 223 3 is_stmt 1 view .LVU134
 223:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 608              		.loc 1 223 26 is_stmt 0 view .LVU135
 609 000e 0023     		movs	r3, #0
 610 0010 8360     		str	r3, [r0, #8]
 224:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 611              		.loc 1 224 3 is_stmt 1 view .LVU136
 224:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 612              		.loc 1 224 24 is_stmt 0 view .LVU137
 613 0012 C360     		str	r3, [r0, #12]
 225:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 614              		.loc 1 225 3 is_stmt 1 view .LVU138
 225:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 615              		.loc 1 225 22 is_stmt 0 view .LVU139
 616 0014 0361     		str	r3, [r0, #16]
 226:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 617              		.loc 1 226 3 is_stmt 1 view .LVU140
 226:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 618              		.loc 1 226 20 is_stmt 0 view .LVU141
 619 0016 0C22     		movs	r2, #12
 620 0018 4261     		str	r2, [r0, #20]
 227:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 621              		.loc 1 227 3 is_stmt 1 view .LVU142
 227:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 622              		.loc 1 227 25 is_stmt 0 view .LVU143
 623 001a 8361     		str	r3, [r0, #24]
 228:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 624              		.loc 1 228 3 is_stmt 1 view .LVU144
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 36


 228:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 625              		.loc 1 228 28 is_stmt 0 view .LVU145
 626 001c C361     		str	r3, [r0, #28]
 229:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 627              		.loc 1 229 3 is_stmt 1 view .LVU146
 229:Core/Src/main.c ****   huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 628              		.loc 1 229 30 is_stmt 0 view .LVU147
 629 001e 0362     		str	r3, [r0, #32]
 230:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 630              		.loc 1 230 3 is_stmt 1 view .LVU148
 230:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 631              		.loc 1 230 30 is_stmt 0 view .LVU149
 632 0020 4362     		str	r3, [r0, #36]
 231:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 633              		.loc 1 231 3 is_stmt 1 view .LVU150
 231:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 634              		.loc 1 231 38 is_stmt 0 view .LVU151
 635 0022 8362     		str	r3, [r0, #40]
 232:Core/Src/main.c ****   {
 636              		.loc 1 232 3 is_stmt 1 view .LVU152
 232:Core/Src/main.c ****   {
 637              		.loc 1 232 7 is_stmt 0 view .LVU153
 638 0024 FFF7FEFF 		bl	HAL_UART_Init
 639              	.LVL39:
 232:Core/Src/main.c ****   {
 640              		.loc 1 232 6 discriminator 1 view .LVU154
 641 0028 0028     		cmp	r0, #0
 642 002a 00D1     		bne	.L35
 240:Core/Src/main.c **** 
 643              		.loc 1 240 1 view .LVU155
 644              		@ sp needed
 645 002c 10BD     		pop	{r4, pc}
 646              	.L35:
 234:Core/Src/main.c ****   }
 647              		.loc 1 234 5 is_stmt 1 view .LVU156
 648 002e FFF7FEFF 		bl	Error_Handler
 649              	.LVL40:
 650              	.L37:
 651 0032 C046     		.align	2
 652              	.L36:
 653 0034 00000000 		.word	huart2
 654 0038 00440040 		.word	1073759232
 655              		.cfi_endproc
 656              	.LFE219:
 658              		.section	.text.SystemClock_Config,"ax",%progbits
 659              		.align	1
 660              		.global	SystemClock_Config
 661              		.syntax unified
 662              		.code	16
 663              		.thumb_func
 665              	SystemClock_Config:
 666              	.LFB217:
 127:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 667              		.loc 1 127 1 view -0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 48
 670              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 37


 671 0000 00B5     		push	{lr}
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 14, -4
 674 0002 8DB0     		sub	sp, sp, #52
 675              		.cfi_def_cfa_offset 56
 128:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 676              		.loc 1 128 3 view .LVU158
 128:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 677              		.loc 1 128 22 is_stmt 0 view .LVU159
 678 0004 1C22     		movs	r2, #28
 679 0006 0021     		movs	r1, #0
 680 0008 05A8     		add	r0, sp, #20
 681 000a FFF7FEFF 		bl	memset
 682              	.LVL41:
 129:Core/Src/main.c **** 
 683              		.loc 1 129 3 is_stmt 1 view .LVU160
 129:Core/Src/main.c **** 
 684              		.loc 1 129 22 is_stmt 0 view .LVU161
 685 000e 1422     		movs	r2, #20
 686 0010 0021     		movs	r1, #0
 687 0012 6846     		mov	r0, sp
 688 0014 FFF7FEFF 		bl	memset
 689              	.LVL42:
 134:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 690              		.loc 1 134 3 is_stmt 1 view .LVU162
 134:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 691              		.loc 1 134 36 is_stmt 0 view .LVU163
 692 0018 0223     		movs	r3, #2
 693 001a 0593     		str	r3, [sp, #20]
 135:Core/Src/main.c ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 694              		.loc 1 135 3 is_stmt 1 view .LVU164
 135:Core/Src/main.c ****   RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 695              		.loc 1 135 30 is_stmt 0 view .LVU165
 696 001c FE33     		adds	r3, r3, #254
 697 001e 0893     		str	r3, [sp, #32]
 136:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 698              		.loc 1 136 3 is_stmt 1 view .LVU166
 137:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 699              		.loc 1 137 3 view .LVU167
 137:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 700              		.loc 1 137 41 is_stmt 0 view .LVU168
 701 0020 C03B     		subs	r3, r3, #192
 702 0022 0A93     		str	r3, [sp, #40]
 138:Core/Src/main.c ****   {
 703              		.loc 1 138 3 is_stmt 1 view .LVU169
 138:Core/Src/main.c ****   {
 704              		.loc 1 138 7 is_stmt 0 view .LVU170
 705 0024 05A8     		add	r0, sp, #20
 706 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 707              	.LVL43:
 138:Core/Src/main.c ****   {
 708              		.loc 1 138 6 discriminator 1 view .LVU171
 709 002a 0028     		cmp	r0, #0
 710 002c 0ED1     		bne	.L41
 145:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 711              		.loc 1 145 3 is_stmt 1 view .LVU172
 145:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 38


 712              		.loc 1 145 31 is_stmt 0 view .LVU173
 713 002e 0723     		movs	r3, #7
 714 0030 0093     		str	r3, [sp]
 147:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 715              		.loc 1 147 3 is_stmt 1 view .LVU174
 147:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 716              		.loc 1 147 34 is_stmt 0 view .LVU175
 717 0032 0023     		movs	r3, #0
 718 0034 0193     		str	r3, [sp, #4]
 148:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 719              		.loc 1 148 3 is_stmt 1 view .LVU176
 148:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 720              		.loc 1 148 35 is_stmt 0 view .LVU177
 721 0036 0293     		str	r3, [sp, #8]
 149:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 722              		.loc 1 149 3 is_stmt 1 view .LVU178
 149:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 723              		.loc 1 149 35 is_stmt 0 view .LVU179
 724 0038 0393     		str	r3, [sp, #12]
 150:Core/Src/main.c **** 
 725              		.loc 1 150 3 is_stmt 1 view .LVU180
 150:Core/Src/main.c **** 
 726              		.loc 1 150 36 is_stmt 0 view .LVU181
 727 003a 0493     		str	r3, [sp, #16]
 152:Core/Src/main.c ****   {
 728              		.loc 1 152 3 is_stmt 1 view .LVU182
 152:Core/Src/main.c ****   {
 729              		.loc 1 152 7 is_stmt 0 view .LVU183
 730 003c 0121     		movs	r1, #1
 731 003e 6846     		mov	r0, sp
 732 0040 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 733              	.LVL44:
 152:Core/Src/main.c ****   {
 734              		.loc 1 152 6 discriminator 1 view .LVU184
 735 0044 0028     		cmp	r0, #0
 736 0046 03D1     		bne	.L42
 156:Core/Src/main.c **** 
 737              		.loc 1 156 1 view .LVU185
 738 0048 0DB0     		add	sp, sp, #52
 739              		@ sp needed
 740 004a 00BD     		pop	{pc}
 741              	.L41:
 140:Core/Src/main.c ****   }
 742              		.loc 1 140 5 is_stmt 1 view .LVU186
 743 004c FFF7FEFF 		bl	Error_Handler
 744              	.LVL45:
 745              	.L42:
 154:Core/Src/main.c ****   }
 746              		.loc 1 154 5 view .LVU187
 747 0050 FFF7FEFF 		bl	Error_Handler
 748              	.LVL46:
 749              		.cfi_endproc
 750              	.LFE217:
 752              		.section	.text.main,"ax",%progbits
 753              		.align	1
 754              		.global	main
 755              		.syntax unified
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 39


 756              		.code	16
 757              		.thumb_func
 759              	main:
 760              	.LFB216:
  76:Core/Src/main.c **** 
 761              		.loc 1 76 1 view -0
 762              		.cfi_startproc
 763              		@ Volatile: function does not return.
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766 0000 10B5     		push	{r4, lr}
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 4, -8
 769              		.cfi_offset 14, -4
  85:Core/Src/main.c **** 
 770              		.loc 1 85 3 view .LVU189
 771 0002 FFF7FEFF 		bl	HAL_Init
 772              	.LVL47:
  92:Core/Src/main.c **** 
 773              		.loc 1 92 3 view .LVU190
 774 0006 FFF7FEFF 		bl	SystemClock_Config
 775              	.LVL48:
  99:Core/Src/main.c ****   MX_DMA_Init();
 776              		.loc 1 99 3 view .LVU191
 777 000a FFF7FEFF 		bl	MX_GPIO_Init
 778              	.LVL49:
 100:Core/Src/main.c ****   MX_USART1_UART_Init();
 779              		.loc 1 100 3 view .LVU192
 780 000e FFF7FEFF 		bl	MX_DMA_Init
 781              	.LVL50:
 101:Core/Src/main.c ****   MX_USART2_UART_Init();
 782              		.loc 1 101 3 view .LVU193
 783 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 784              	.LVL51:
 102:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 785              		.loc 1 102 3 view .LVU194
 786 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 787              	.LVL52:
 104:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 788              		.loc 1 104 3 view .LVU195
 789 001a 0A49     		ldr	r1, .L45
 790 001c 0A48     		ldr	r0, .L45+4
 791 001e 0A22     		movs	r2, #10
 792 0020 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 793              	.LVL53:
 105:Core/Src/main.c ****   DS18_INIT();
 794              		.loc 1 105 3 view .LVU196
 795 0024 A020     		movs	r0, #160
 796 0026 0122     		movs	r2, #1
 797 0028 1021     		movs	r1, #16
 798 002a C005     		lsls	r0, r0, #23
 799 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
 800              	.LVL54:
 106:Core/Src/main.c ****   /* USER CODE END 2 */
 801              		.loc 1 106 3 view .LVU197
 802 0030 FFF7FEFF 		bl	DS18_INIT
 803              	.LVL55:
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 40


 804              	.L44:
 111:Core/Src/main.c ****   {
 805              		.loc 1 111 3 view .LVU198
 113:Core/Src/main.c **** 	HAL_Delay(100);
 806              		.loc 1 113 2 view .LVU199
 113:Core/Src/main.c **** 	HAL_Delay(100);
 807              		.loc 1 113 9 is_stmt 0 view .LVU200
 808 0034 FFF7FEFF 		bl	DS18_GET
 809              	.LVL56:
 113:Core/Src/main.c **** 	HAL_Delay(100);
 810              		.loc 1 113 7 discriminator 1 view .LVU201
 811 0038 044B     		ldr	r3, .L45+8
 812 003a 1860     		str	r0, [r3]
 114:Core/Src/main.c ****     /* USER CODE END WHILE */
 813              		.loc 1 114 2 is_stmt 1 discriminator 1 view .LVU202
 814 003c 6420     		movs	r0, #100
 815 003e FFF7FEFF 		bl	HAL_Delay
 816              	.LVL57:
 111:Core/Src/main.c ****   {
 817              		.loc 1 111 9 view .LVU203
 818 0042 F7E7     		b	.L44
 819              	.L46:
 820              		.align	2
 821              	.L45:
 822 0044 00000000 		.word	rx_buff
 823 0048 00000000 		.word	huart2
 824 004c 00000000 		.word	temp
 825              		.cfi_endproc
 826              	.LFE216:
 828              		.global	rx_buff
 829              		.section	.bss.rx_buff,"aw",%nobits
 830              		.align	2
 833              	rx_buff:
 834 0000 00000000 		.space	10
 834      00000000 
 834      0000
 835              		.global	temp
 836              		.section	.bss.temp,"aw",%nobits
 837              		.align	2
 840              	temp:
 841 0000 00000000 		.space	4
 842              		.global	temperatureSensor
 843              		.section	.bss.temperatureSensor,"aw",%nobits
 844              		.align	2
 847              	temperatureSensor:
 848 0000 00000000 		.space	24
 848      00000000 
 848      00000000 
 848      00000000 
 848      00000000 
 849              		.global	hdma_usart2_tx
 850              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 851              		.align	2
 854              	hdma_usart2_tx:
 855 0000 00000000 		.space	92
 855      00000000 
 855      00000000 
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 41


 855      00000000 
 855      00000000 
 856              		.global	hdma_usart2_rx
 857              		.section	.bss.hdma_usart2_rx,"aw",%nobits
 858              		.align	2
 861              	hdma_usart2_rx:
 862 0000 00000000 		.space	92
 862      00000000 
 862      00000000 
 862      00000000 
 862      00000000 
 863              		.global	huart2
 864              		.section	.bss.huart2,"aw",%nobits
 865              		.align	2
 868              	huart2:
 869 0000 00000000 		.space	148
 869      00000000 
 869      00000000 
 869      00000000 
 869      00000000 
 870              		.global	huart1
 871              		.section	.bss.huart1,"aw",%nobits
 872              		.align	2
 875              	huart1:
 876 0000 00000000 		.space	148
 876      00000000 
 876      00000000 
 876      00000000 
 876      00000000 
 877              		.text
 878              	.Letext0:
 879              		.file 3 "Drivers/CMSIS/Device/ST/STM32C0xx/Include/stm32c031xx.h"
 880              		.file 4 "C:/Users/kroko/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 881              		.file 5 "C:/Users/kroko/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 882              		.file 6 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_def.h"
 883              		.file 7 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_rcc.h"
 884              		.file 8 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_gpio.h"
 885              		.file 9 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_dma.h"
 886              		.file 10 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_uart.h"
 887              		.file 11 "Core/Inc/ds18b20.h"
 888              		.file 12 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_uart_ex.h"
 889              		.file 13 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal_cortex.h"
 890              		.file 14 "Drivers/STM32C0xx_HAL_Driver/Inc/stm32c0xx_hal.h"
 891              		.file 15 "<built-in>"
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:19     .text.MX_GPIO_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:95     .text.MX_GPIO_Init:00000048 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:100    .text.MX_DMA_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:105    .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:160    .text.MX_DMA_Init:0000003c $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:165    .text.DS18_INIT:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:171    .text.DS18_INIT:00000000 DS18_INIT
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:238    .text.DS18_INIT:00000048 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:875    .bss.huart1:00000000 huart1
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:847    .bss.temperatureSensor:00000000 temperatureSensor
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:244    .text.DS18_GET:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:250    .text.DS18_GET:00000000 DS18_GET
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:295    .text.DS18_GET:00000030 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:302    .rodata.HAL_UART_RxCpltCallback.str1.4:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:309    .text.HAL_UART_RxCpltCallback:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:315    .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:419    .text.HAL_UART_RxCpltCallback:00000078 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:833    .bss.rx_buff:00000000 rx_buff
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:868    .bss.huart2:00000000 huart2
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:840    .bss.temp:00000000 temp
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:429    .text.Error_Handler:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:435    .text.Error_Handler:00000000 Error_Handler
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:467    .text.MX_USART1_UART_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:472    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:576    .text.MX_USART1_UART_Init:00000060 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:582    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:587    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:653    .text.MX_USART2_UART_Init:00000034 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:659    .text.SystemClock_Config:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:665    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:753    .text.main:00000000 $t
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:759    .text.main:00000000 main
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:822    .text.main:00000044 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:830    .bss.rx_buff:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:837    .bss.temp:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:844    .bss.temperatureSensor:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:854    .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:851    .bss.hdma_usart2_tx:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:861    .bss.hdma_usart2_rx:00000000 hdma_usart2_rx
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:858    .bss.hdma_usart2_rx:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:865    .bss.huart2:00000000 $d
C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s:872    .bss.huart1:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
DS18B20_Init
DS18B20_InitializationCommand
DS18B20_ReadRom
DS18B20_ReadScratchpad
DS18B20_SkipRom
ARM GAS  C:\Users\kroko\AppData\Local\Temp\ccXw3QhF.s 			page 43


DS18B20_WriteScratchpad
DS18B20_ConvertT
__aeabi_fmul
__aeabi_f2iz
HAL_GPIO_TogglePin
HAL_UART_Receive_DMA
HAL_UART_Transmit_DMA
roundf
itoa
HAL_HalfDuplex_Init
HAL_UARTEx_SetTxFifoThreshold
HAL_UARTEx_SetRxFifoThreshold
HAL_UARTEx_DisableFifoMode
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
