
garage_master_ds18b20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004ec4  08004ec4  00005ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f8c  08004f8c  00006020  2**0
                  CONTENTS
  4 .ARM          00000008  08004f8c  08004f8c  00005f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f94  08004f94  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f94  08004f94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f98  08004f98  00005f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004f9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000020  08004fbc  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004fbc  00006248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3c1  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002017  00000000  00000000  00012409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  00014420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000694  00000000  00000000  00014cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a8e  00000000  00000000  00015344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b783  00000000  00000000  00027dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000729ad  00000000  00000000  00033555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea0  00000000  00000000  000a5f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000a7de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004eac 	.word	0x08004eac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08004eac 	.word	0x08004eac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 fa58 	bl	8000908 <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 fa53 	bl	8000908 <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__aeabi_fmul>:
 80005cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ce:	464f      	mov	r7, r9
 80005d0:	4646      	mov	r6, r8
 80005d2:	46d6      	mov	lr, sl
 80005d4:	0243      	lsls	r3, r0, #9
 80005d6:	0a5b      	lsrs	r3, r3, #9
 80005d8:	0045      	lsls	r5, r0, #1
 80005da:	b5c0      	push	{r6, r7, lr}
 80005dc:	4699      	mov	r9, r3
 80005de:	1c0f      	adds	r7, r1, #0
 80005e0:	0e2d      	lsrs	r5, r5, #24
 80005e2:	0fc6      	lsrs	r6, r0, #31
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_fmul+0x1e>
 80005e8:	e088      	b.n	80006fc <__aeabi_fmul+0x130>
 80005ea:	2dff      	cmp	r5, #255	@ 0xff
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fmul+0x24>
 80005ee:	e08d      	b.n	800070c <__aeabi_fmul+0x140>
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	04d2      	lsls	r2, r2, #19
 80005f6:	431a      	orrs	r2, r3
 80005f8:	2300      	movs	r3, #0
 80005fa:	4691      	mov	r9, r2
 80005fc:	4698      	mov	r8, r3
 80005fe:	469a      	mov	sl, r3
 8000600:	3d7f      	subs	r5, #127	@ 0x7f
 8000602:	027c      	lsls	r4, r7, #9
 8000604:	007b      	lsls	r3, r7, #1
 8000606:	0a64      	lsrs	r4, r4, #9
 8000608:	0e1b      	lsrs	r3, r3, #24
 800060a:	0fff      	lsrs	r7, r7, #31
 800060c:	2b00      	cmp	r3, #0
 800060e:	d068      	beq.n	80006e2 <__aeabi_fmul+0x116>
 8000610:	2bff      	cmp	r3, #255	@ 0xff
 8000612:	d021      	beq.n	8000658 <__aeabi_fmul+0x8c>
 8000614:	2280      	movs	r2, #128	@ 0x80
 8000616:	00e4      	lsls	r4, r4, #3
 8000618:	04d2      	lsls	r2, r2, #19
 800061a:	4314      	orrs	r4, r2
 800061c:	4642      	mov	r2, r8
 800061e:	3b7f      	subs	r3, #127	@ 0x7f
 8000620:	195b      	adds	r3, r3, r5
 8000622:	2100      	movs	r1, #0
 8000624:	1c5d      	adds	r5, r3, #1
 8000626:	2a0a      	cmp	r2, #10
 8000628:	dc2e      	bgt.n	8000688 <__aeabi_fmul+0xbc>
 800062a:	407e      	eors	r6, r7
 800062c:	4642      	mov	r2, r8
 800062e:	2a02      	cmp	r2, #2
 8000630:	dc23      	bgt.n	800067a <__aeabi_fmul+0xae>
 8000632:	3a01      	subs	r2, #1
 8000634:	2a01      	cmp	r2, #1
 8000636:	d900      	bls.n	800063a <__aeabi_fmul+0x6e>
 8000638:	e0bd      	b.n	80007b6 <__aeabi_fmul+0x1ea>
 800063a:	2902      	cmp	r1, #2
 800063c:	d06e      	beq.n	800071c <__aeabi_fmul+0x150>
 800063e:	2901      	cmp	r1, #1
 8000640:	d12c      	bne.n	800069c <__aeabi_fmul+0xd0>
 8000642:	2000      	movs	r0, #0
 8000644:	2200      	movs	r2, #0
 8000646:	05c0      	lsls	r0, r0, #23
 8000648:	07f6      	lsls	r6, r6, #31
 800064a:	4310      	orrs	r0, r2
 800064c:	4330      	orrs	r0, r6
 800064e:	bce0      	pop	{r5, r6, r7}
 8000650:	46ba      	mov	sl, r7
 8000652:	46b1      	mov	r9, r6
 8000654:	46a8      	mov	r8, r5
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	002b      	movs	r3, r5
 800065a:	33ff      	adds	r3, #255	@ 0xff
 800065c:	2c00      	cmp	r4, #0
 800065e:	d065      	beq.n	800072c <__aeabi_fmul+0x160>
 8000660:	2203      	movs	r2, #3
 8000662:	4641      	mov	r1, r8
 8000664:	4311      	orrs	r1, r2
 8000666:	0032      	movs	r2, r6
 8000668:	3501      	adds	r5, #1
 800066a:	4688      	mov	r8, r1
 800066c:	407a      	eors	r2, r7
 800066e:	35ff      	adds	r5, #255	@ 0xff
 8000670:	290a      	cmp	r1, #10
 8000672:	dd00      	ble.n	8000676 <__aeabi_fmul+0xaa>
 8000674:	e0d8      	b.n	8000828 <__aeabi_fmul+0x25c>
 8000676:	0016      	movs	r6, r2
 8000678:	2103      	movs	r1, #3
 800067a:	4640      	mov	r0, r8
 800067c:	2201      	movs	r2, #1
 800067e:	4082      	lsls	r2, r0
 8000680:	20a6      	movs	r0, #166	@ 0xa6
 8000682:	00c0      	lsls	r0, r0, #3
 8000684:	4202      	tst	r2, r0
 8000686:	d020      	beq.n	80006ca <__aeabi_fmul+0xfe>
 8000688:	4653      	mov	r3, sl
 800068a:	2b02      	cmp	r3, #2
 800068c:	d046      	beq.n	800071c <__aeabi_fmul+0x150>
 800068e:	2b03      	cmp	r3, #3
 8000690:	d100      	bne.n	8000694 <__aeabi_fmul+0xc8>
 8000692:	e0bb      	b.n	800080c <__aeabi_fmul+0x240>
 8000694:	4651      	mov	r1, sl
 8000696:	464c      	mov	r4, r9
 8000698:	2901      	cmp	r1, #1
 800069a:	d0d2      	beq.n	8000642 <__aeabi_fmul+0x76>
 800069c:	002b      	movs	r3, r5
 800069e:	337f      	adds	r3, #127	@ 0x7f
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	dd70      	ble.n	8000786 <__aeabi_fmul+0x1ba>
 80006a4:	0762      	lsls	r2, r4, #29
 80006a6:	d004      	beq.n	80006b2 <__aeabi_fmul+0xe6>
 80006a8:	220f      	movs	r2, #15
 80006aa:	4022      	ands	r2, r4
 80006ac:	2a04      	cmp	r2, #4
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fmul+0xe6>
 80006b0:	3404      	adds	r4, #4
 80006b2:	0122      	lsls	r2, r4, #4
 80006b4:	d503      	bpl.n	80006be <__aeabi_fmul+0xf2>
 80006b6:	4b63      	ldr	r3, [pc, #396]	@ (8000844 <__aeabi_fmul+0x278>)
 80006b8:	401c      	ands	r4, r3
 80006ba:	002b      	movs	r3, r5
 80006bc:	3380      	adds	r3, #128	@ 0x80
 80006be:	2bfe      	cmp	r3, #254	@ 0xfe
 80006c0:	dc2c      	bgt.n	800071c <__aeabi_fmul+0x150>
 80006c2:	01a2      	lsls	r2, r4, #6
 80006c4:	0a52      	lsrs	r2, r2, #9
 80006c6:	b2d8      	uxtb	r0, r3
 80006c8:	e7bd      	b.n	8000646 <__aeabi_fmul+0x7a>
 80006ca:	2090      	movs	r0, #144	@ 0x90
 80006cc:	0080      	lsls	r0, r0, #2
 80006ce:	4202      	tst	r2, r0
 80006d0:	d127      	bne.n	8000722 <__aeabi_fmul+0x156>
 80006d2:	38b9      	subs	r0, #185	@ 0xb9
 80006d4:	38ff      	subs	r0, #255	@ 0xff
 80006d6:	4210      	tst	r0, r2
 80006d8:	d06d      	beq.n	80007b6 <__aeabi_fmul+0x1ea>
 80006da:	003e      	movs	r6, r7
 80006dc:	46a1      	mov	r9, r4
 80006de:	468a      	mov	sl, r1
 80006e0:	e7d2      	b.n	8000688 <__aeabi_fmul+0xbc>
 80006e2:	2c00      	cmp	r4, #0
 80006e4:	d141      	bne.n	800076a <__aeabi_fmul+0x19e>
 80006e6:	2301      	movs	r3, #1
 80006e8:	4642      	mov	r2, r8
 80006ea:	431a      	orrs	r2, r3
 80006ec:	4690      	mov	r8, r2
 80006ee:	002b      	movs	r3, r5
 80006f0:	4642      	mov	r2, r8
 80006f2:	2101      	movs	r1, #1
 80006f4:	1c5d      	adds	r5, r3, #1
 80006f6:	2a0a      	cmp	r2, #10
 80006f8:	dd97      	ble.n	800062a <__aeabi_fmul+0x5e>
 80006fa:	e7c5      	b.n	8000688 <__aeabi_fmul+0xbc>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d126      	bne.n	800074e <__aeabi_fmul+0x182>
 8000700:	2304      	movs	r3, #4
 8000702:	4698      	mov	r8, r3
 8000704:	3b03      	subs	r3, #3
 8000706:	2500      	movs	r5, #0
 8000708:	469a      	mov	sl, r3
 800070a:	e77a      	b.n	8000602 <__aeabi_fmul+0x36>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d118      	bne.n	8000742 <__aeabi_fmul+0x176>
 8000710:	2308      	movs	r3, #8
 8000712:	4698      	mov	r8, r3
 8000714:	3b06      	subs	r3, #6
 8000716:	25ff      	movs	r5, #255	@ 0xff
 8000718:	469a      	mov	sl, r3
 800071a:	e772      	b.n	8000602 <__aeabi_fmul+0x36>
 800071c:	20ff      	movs	r0, #255	@ 0xff
 800071e:	2200      	movs	r2, #0
 8000720:	e791      	b.n	8000646 <__aeabi_fmul+0x7a>
 8000722:	2280      	movs	r2, #128	@ 0x80
 8000724:	2600      	movs	r6, #0
 8000726:	20ff      	movs	r0, #255	@ 0xff
 8000728:	03d2      	lsls	r2, r2, #15
 800072a:	e78c      	b.n	8000646 <__aeabi_fmul+0x7a>
 800072c:	4641      	mov	r1, r8
 800072e:	2202      	movs	r2, #2
 8000730:	3501      	adds	r5, #1
 8000732:	4311      	orrs	r1, r2
 8000734:	4688      	mov	r8, r1
 8000736:	35ff      	adds	r5, #255	@ 0xff
 8000738:	290a      	cmp	r1, #10
 800073a:	dca5      	bgt.n	8000688 <__aeabi_fmul+0xbc>
 800073c:	2102      	movs	r1, #2
 800073e:	407e      	eors	r6, r7
 8000740:	e774      	b.n	800062c <__aeabi_fmul+0x60>
 8000742:	230c      	movs	r3, #12
 8000744:	4698      	mov	r8, r3
 8000746:	3b09      	subs	r3, #9
 8000748:	25ff      	movs	r5, #255	@ 0xff
 800074a:	469a      	mov	sl, r3
 800074c:	e759      	b.n	8000602 <__aeabi_fmul+0x36>
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f8bc 	bl	80008cc <__clzsi2>
 8000754:	464a      	mov	r2, r9
 8000756:	1f43      	subs	r3, r0, #5
 8000758:	2576      	movs	r5, #118	@ 0x76
 800075a:	409a      	lsls	r2, r3
 800075c:	2300      	movs	r3, #0
 800075e:	426d      	negs	r5, r5
 8000760:	4691      	mov	r9, r2
 8000762:	4698      	mov	r8, r3
 8000764:	469a      	mov	sl, r3
 8000766:	1a2d      	subs	r5, r5, r0
 8000768:	e74b      	b.n	8000602 <__aeabi_fmul+0x36>
 800076a:	0020      	movs	r0, r4
 800076c:	f000 f8ae 	bl	80008cc <__clzsi2>
 8000770:	4642      	mov	r2, r8
 8000772:	1f43      	subs	r3, r0, #5
 8000774:	409c      	lsls	r4, r3
 8000776:	1a2b      	subs	r3, r5, r0
 8000778:	3b76      	subs	r3, #118	@ 0x76
 800077a:	2100      	movs	r1, #0
 800077c:	1c5d      	adds	r5, r3, #1
 800077e:	2a0a      	cmp	r2, #10
 8000780:	dc00      	bgt.n	8000784 <__aeabi_fmul+0x1b8>
 8000782:	e752      	b.n	800062a <__aeabi_fmul+0x5e>
 8000784:	e780      	b.n	8000688 <__aeabi_fmul+0xbc>
 8000786:	2201      	movs	r2, #1
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	2b1b      	cmp	r3, #27
 800078c:	dd00      	ble.n	8000790 <__aeabi_fmul+0x1c4>
 800078e:	e758      	b.n	8000642 <__aeabi_fmul+0x76>
 8000790:	359e      	adds	r5, #158	@ 0x9e
 8000792:	0022      	movs	r2, r4
 8000794:	40ac      	lsls	r4, r5
 8000796:	40da      	lsrs	r2, r3
 8000798:	1e63      	subs	r3, r4, #1
 800079a:	419c      	sbcs	r4, r3
 800079c:	4322      	orrs	r2, r4
 800079e:	0753      	lsls	r3, r2, #29
 80007a0:	d004      	beq.n	80007ac <__aeabi_fmul+0x1e0>
 80007a2:	230f      	movs	r3, #15
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d000      	beq.n	80007ac <__aeabi_fmul+0x1e0>
 80007aa:	3204      	adds	r2, #4
 80007ac:	0153      	lsls	r3, r2, #5
 80007ae:	d537      	bpl.n	8000820 <__aeabi_fmul+0x254>
 80007b0:	2001      	movs	r0, #1
 80007b2:	2200      	movs	r2, #0
 80007b4:	e747      	b.n	8000646 <__aeabi_fmul+0x7a>
 80007b6:	0c21      	lsrs	r1, r4, #16
 80007b8:	464a      	mov	r2, r9
 80007ba:	0424      	lsls	r4, r4, #16
 80007bc:	0c24      	lsrs	r4, r4, #16
 80007be:	0027      	movs	r7, r4
 80007c0:	0c10      	lsrs	r0, r2, #16
 80007c2:	0412      	lsls	r2, r2, #16
 80007c4:	0c12      	lsrs	r2, r2, #16
 80007c6:	4344      	muls	r4, r0
 80007c8:	4357      	muls	r7, r2
 80007ca:	4348      	muls	r0, r1
 80007cc:	4351      	muls	r1, r2
 80007ce:	0c3a      	lsrs	r2, r7, #16
 80007d0:	1909      	adds	r1, r1, r4
 80007d2:	1852      	adds	r2, r2, r1
 80007d4:	4294      	cmp	r4, r2
 80007d6:	d903      	bls.n	80007e0 <__aeabi_fmul+0x214>
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	0249      	lsls	r1, r1, #9
 80007dc:	468c      	mov	ip, r1
 80007de:	4460      	add	r0, ip
 80007e0:	043f      	lsls	r7, r7, #16
 80007e2:	0411      	lsls	r1, r2, #16
 80007e4:	0c3f      	lsrs	r7, r7, #16
 80007e6:	19c9      	adds	r1, r1, r7
 80007e8:	018c      	lsls	r4, r1, #6
 80007ea:	1e67      	subs	r7, r4, #1
 80007ec:	41bc      	sbcs	r4, r7
 80007ee:	0c12      	lsrs	r2, r2, #16
 80007f0:	0e89      	lsrs	r1, r1, #26
 80007f2:	1812      	adds	r2, r2, r0
 80007f4:	430c      	orrs	r4, r1
 80007f6:	0192      	lsls	r2, r2, #6
 80007f8:	4314      	orrs	r4, r2
 80007fa:	0112      	lsls	r2, r2, #4
 80007fc:	d50e      	bpl.n	800081c <__aeabi_fmul+0x250>
 80007fe:	2301      	movs	r3, #1
 8000800:	0862      	lsrs	r2, r4, #1
 8000802:	401c      	ands	r4, r3
 8000804:	4314      	orrs	r4, r2
 8000806:	e749      	b.n	800069c <__aeabi_fmul+0xd0>
 8000808:	003e      	movs	r6, r7
 800080a:	46a1      	mov	r9, r4
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	464b      	mov	r3, r9
 8000810:	03d2      	lsls	r2, r2, #15
 8000812:	431a      	orrs	r2, r3
 8000814:	0252      	lsls	r2, r2, #9
 8000816:	20ff      	movs	r0, #255	@ 0xff
 8000818:	0a52      	lsrs	r2, r2, #9
 800081a:	e714      	b.n	8000646 <__aeabi_fmul+0x7a>
 800081c:	001d      	movs	r5, r3
 800081e:	e73d      	b.n	800069c <__aeabi_fmul+0xd0>
 8000820:	0192      	lsls	r2, r2, #6
 8000822:	2000      	movs	r0, #0
 8000824:	0a52      	lsrs	r2, r2, #9
 8000826:	e70e      	b.n	8000646 <__aeabi_fmul+0x7a>
 8000828:	290f      	cmp	r1, #15
 800082a:	d1ed      	bne.n	8000808 <__aeabi_fmul+0x23c>
 800082c:	2280      	movs	r2, #128	@ 0x80
 800082e:	464b      	mov	r3, r9
 8000830:	03d2      	lsls	r2, r2, #15
 8000832:	4213      	tst	r3, r2
 8000834:	d0ea      	beq.n	800080c <__aeabi_fmul+0x240>
 8000836:	4214      	tst	r4, r2
 8000838:	d1e8      	bne.n	800080c <__aeabi_fmul+0x240>
 800083a:	003e      	movs	r6, r7
 800083c:	20ff      	movs	r0, #255	@ 0xff
 800083e:	4322      	orrs	r2, r4
 8000840:	e701      	b.n	8000646 <__aeabi_fmul+0x7a>
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	f7ffffff 	.word	0xf7ffffff

08000848 <__aeabi_ui2f>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	1e04      	subs	r4, r0, #0
 800084c:	d00e      	beq.n	800086c <__aeabi_ui2f+0x24>
 800084e:	f000 f83d 	bl	80008cc <__clzsi2>
 8000852:	239e      	movs	r3, #158	@ 0x9e
 8000854:	0001      	movs	r1, r0
 8000856:	1a1b      	subs	r3, r3, r0
 8000858:	2b96      	cmp	r3, #150	@ 0x96
 800085a:	dc0c      	bgt.n	8000876 <__aeabi_ui2f+0x2e>
 800085c:	2808      	cmp	r0, #8
 800085e:	d02f      	beq.n	80008c0 <__aeabi_ui2f+0x78>
 8000860:	3908      	subs	r1, #8
 8000862:	408c      	lsls	r4, r1
 8000864:	0264      	lsls	r4, r4, #9
 8000866:	0a64      	lsrs	r4, r4, #9
 8000868:	b2d8      	uxtb	r0, r3
 800086a:	e001      	b.n	8000870 <__aeabi_ui2f+0x28>
 800086c:	2000      	movs	r0, #0
 800086e:	2400      	movs	r4, #0
 8000870:	05c0      	lsls	r0, r0, #23
 8000872:	4320      	orrs	r0, r4
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	2b99      	cmp	r3, #153	@ 0x99
 8000878:	dc16      	bgt.n	80008a8 <__aeabi_ui2f+0x60>
 800087a:	1f42      	subs	r2, r0, #5
 800087c:	2805      	cmp	r0, #5
 800087e:	d000      	beq.n	8000882 <__aeabi_ui2f+0x3a>
 8000880:	4094      	lsls	r4, r2
 8000882:	0022      	movs	r2, r4
 8000884:	4810      	ldr	r0, [pc, #64]	@ (80008c8 <__aeabi_ui2f+0x80>)
 8000886:	4002      	ands	r2, r0
 8000888:	0765      	lsls	r5, r4, #29
 800088a:	d009      	beq.n	80008a0 <__aeabi_ui2f+0x58>
 800088c:	250f      	movs	r5, #15
 800088e:	402c      	ands	r4, r5
 8000890:	2c04      	cmp	r4, #4
 8000892:	d005      	beq.n	80008a0 <__aeabi_ui2f+0x58>
 8000894:	3204      	adds	r2, #4
 8000896:	0154      	lsls	r4, r2, #5
 8000898:	d502      	bpl.n	80008a0 <__aeabi_ui2f+0x58>
 800089a:	239f      	movs	r3, #159	@ 0x9f
 800089c:	4002      	ands	r2, r0
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	0192      	lsls	r2, r2, #6
 80008a2:	0a54      	lsrs	r4, r2, #9
 80008a4:	b2d8      	uxtb	r0, r3
 80008a6:	e7e3      	b.n	8000870 <__aeabi_ui2f+0x28>
 80008a8:	0002      	movs	r2, r0
 80008aa:	0020      	movs	r0, r4
 80008ac:	321b      	adds	r2, #27
 80008ae:	4090      	lsls	r0, r2
 80008b0:	0002      	movs	r2, r0
 80008b2:	1e50      	subs	r0, r2, #1
 80008b4:	4182      	sbcs	r2, r0
 80008b6:	2005      	movs	r0, #5
 80008b8:	1a40      	subs	r0, r0, r1
 80008ba:	40c4      	lsrs	r4, r0
 80008bc:	4314      	orrs	r4, r2
 80008be:	e7e0      	b.n	8000882 <__aeabi_ui2f+0x3a>
 80008c0:	0264      	lsls	r4, r4, #9
 80008c2:	2096      	movs	r0, #150	@ 0x96
 80008c4:	0a64      	lsrs	r4, r4, #9
 80008c6:	e7d3      	b.n	8000870 <__aeabi_ui2f+0x28>
 80008c8:	fbffffff 	.word	0xfbffffff

080008cc <__clzsi2>:
 80008cc:	211c      	movs	r1, #28
 80008ce:	2301      	movs	r3, #1
 80008d0:	041b      	lsls	r3, r3, #16
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d301      	bcc.n	80008da <__clzsi2+0xe>
 80008d6:	0c00      	lsrs	r0, r0, #16
 80008d8:	3910      	subs	r1, #16
 80008da:	0a1b      	lsrs	r3, r3, #8
 80008dc:	4298      	cmp	r0, r3
 80008de:	d301      	bcc.n	80008e4 <__clzsi2+0x18>
 80008e0:	0a00      	lsrs	r0, r0, #8
 80008e2:	3908      	subs	r1, #8
 80008e4:	091b      	lsrs	r3, r3, #4
 80008e6:	4298      	cmp	r0, r3
 80008e8:	d301      	bcc.n	80008ee <__clzsi2+0x22>
 80008ea:	0900      	lsrs	r0, r0, #4
 80008ec:	3904      	subs	r1, #4
 80008ee:	a202      	add	r2, pc, #8	@ (adr r2, 80008f8 <__clzsi2+0x2c>)
 80008f0:	5c10      	ldrb	r0, [r2, r0]
 80008f2:	1840      	adds	r0, r0, r1
 80008f4:	4770      	bx	lr
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	02020304 	.word	0x02020304
 80008fc:	01010101 	.word	0x01010101
	...

08000908 <__clzdi2>:
 8000908:	b510      	push	{r4, lr}
 800090a:	2900      	cmp	r1, #0
 800090c:	d103      	bne.n	8000916 <__clzdi2+0xe>
 800090e:	f7ff ffdd 	bl	80008cc <__clzsi2>
 8000912:	3020      	adds	r0, #32
 8000914:	e002      	b.n	800091c <__clzdi2+0x14>
 8000916:	0008      	movs	r0, r1
 8000918:	f7ff ffd8 	bl	80008cc <__clzsi2>
 800091c:	bd10      	pop	{r4, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)

08000920 <CalculateChecksum>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static uint8_t CalculateChecksum(uint8_t *data, uint8_t length)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	000a      	movs	r2, r1
 800092a:	1cfb      	adds	r3, r7, #3
 800092c:	701a      	strb	r2, [r3, #0]
  uint8_t checksum = 0;
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]

  while (length--)
 8000936:	e039      	b.n	80009ac <CalculateChecksum+0x8c>
  {
    uint8_t currentByte = *data++;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	220e      	movs	r2, #14
 8000940:	18ba      	adds	r2, r7, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	7013      	strb	r3, [r2, #0]

    for (uint8_t i = 8; i; i--)
 8000946:	230d      	movs	r3, #13
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	2208      	movs	r2, #8
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e028      	b.n	80009a2 <CalculateChecksum+0x82>
    {
      uint8_t temp = (checksum ^ currentByte) & 0x01;
 8000950:	200f      	movs	r0, #15
 8000952:	183a      	adds	r2, r7, r0
 8000954:	230e      	movs	r3, #14
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4053      	eors	r3, r2
 800095e:	b2da      	uxtb	r2, r3
 8000960:	240c      	movs	r4, #12
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2101      	movs	r1, #1
 8000966:	400a      	ands	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
      checksum >>= 1;
 800096a:	183b      	adds	r3, r7, r0
 800096c:	183a      	adds	r2, r7, r0
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	0852      	lsrs	r2, r2, #1
 8000972:	701a      	strb	r2, [r3, #0]

      if (temp)
 8000974:	193b      	adds	r3, r7, r4
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <CalculateChecksum+0x6a>
      {
        checksum ^= 0x8C;
 800097c:	183b      	adds	r3, r7, r0
 800097e:	183a      	adds	r2, r7, r0
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	2174      	movs	r1, #116	@ 0x74
 8000984:	4249      	negs	r1, r1
 8000986:	404a      	eors	r2, r1
 8000988:	701a      	strb	r2, [r3, #0]
      }

      currentByte >>= 1;
 800098a:	220e      	movs	r2, #14
 800098c:	18bb      	adds	r3, r7, r2
 800098e:	18ba      	adds	r2, r7, r2
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	0852      	lsrs	r2, r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 8; i; i--)
 8000996:	210d      	movs	r1, #13
 8000998:	187b      	adds	r3, r7, r1
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	187b      	adds	r3, r7, r1
 800099e:	3a01      	subs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	230d      	movs	r3, #13
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1d1      	bne.n	8000950 <CalculateChecksum+0x30>
  while (length--)
 80009ac:	1cfb      	adds	r3, r7, #3
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	1cfa      	adds	r2, r7, #3
 80009b2:	1e59      	subs	r1, r3, #1
 80009b4:	7011      	strb	r1, [r2, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1be      	bne.n	8000938 <CalculateChecksum+0x18>
    }
  }

  return checksum;
 80009ba:	230f      	movs	r3, #15
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	781b      	ldrb	r3, [r3, #0]
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b005      	add	sp, #20
 80009c6:	bd90      	pop	{r4, r7, pc}

080009c8 <ExecuteCommand>:



/*----------------------------------------------------------------------------*/
static DS18B20_Status ExecuteCommand(DS18B20 *sensor, DS18B20_Command command, uint8_t *data)
{
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	2308      	movs	r3, #8
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	6019      	str	r1, [r3, #0]
 80009d6:	607a      	str	r2, [r7, #4]
  if (sensor->isConnected == 0)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <ExecuteCommand+0x1c>
  {
    return DS18B20_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e061      	b.n	8000aa8 <ExecuteCommand+0xe0>
  }

  OneWire_ProcessByte(sensor->uart, command.code);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	2408      	movs	r4, #8
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0019      	movs	r1, r3
 80009f0:	0010      	movs	r0, r2
 80009f2:	f000 ff11 	bl	8001818 <OneWire_ProcessByte>

  if (command.rxBytesNum != 0)
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d036      	beq.n	8000a6c <ExecuteCommand+0xa4>
  {
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 80009fe:	2317      	movs	r3, #23
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	e010      	b.n	8000a2a <ExecuteCommand+0x62>
    {
      data[i] = OneWire_ProcessByte(sensor->uart, 0xFF);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6858      	ldr	r0, [r3, #4]
 8000a0c:	2517      	movs	r5, #23
 8000a0e:	197b      	adds	r3, r7, r5
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	18d4      	adds	r4, r2, r3
 8000a16:	21ff      	movs	r1, #255	@ 0xff
 8000a18:	f000 fefe 	bl	8001818 <OneWire_ProcessByte>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < command.rxBytesNum; i++)
 8000a20:	197b      	adds	r3, r7, r5
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	3201      	adds	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	2508      	movs	r5, #8
 8000a2c:	197b      	adds	r3, r7, r5
 8000a2e:	785b      	ldrb	r3, [r3, #1]
 8000a30:	2217      	movs	r2, #23
 8000a32:	18ba      	adds	r2, r7, r2
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d3e6      	bcc.n	8000a08 <ExecuteCommand+0x40>
    }

    uint8_t checkSum = CalculateChecksum(data, command.rxBytesNum - 1);
 8000a3a:	197b      	adds	r3, r7, r5
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	2615      	movs	r6, #21
 8000a44:	19bc      	adds	r4, r7, r6
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff ff68 	bl	8000920 <CalculateChecksum>
 8000a50:	0003      	movs	r3, r0
 8000a52:	7023      	strb	r3, [r4, #0]
    if (checkSum != data[command.rxBytesNum - 1])
 8000a54:	197b      	adds	r3, r7, r5
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	19ba      	adds	r2, r7, r6
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d01e      	beq.n	8000aa6 <ExecuteCommand+0xde>
    {
      return DS18B20_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e01d      	b.n	8000aa8 <ExecuteCommand+0xe0>
    }
  }
  else
  {
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8000a6c:	2316      	movs	r3, #22
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e00f      	b.n	8000a96 <ExecuteCommand+0xce>
    {
      OneWire_ProcessByte(sensor->uart, data[i]);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6858      	ldr	r0, [r3, #4]
 8000a7a:	2416      	movs	r4, #22
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	18d3      	adds	r3, r2, r3
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	0019      	movs	r1, r3
 8000a88:	f000 fec6 	bl	8001818 <OneWire_ProcessByte>
    for (uint8_t i = 0; i < command.txBytesNum; i++)
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	3201      	adds	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	2308      	movs	r3, #8
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	2216      	movs	r2, #22
 8000a9e:	18ba      	adds	r2, r7, r2
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3e7      	bcc.n	8000a76 <ExecuteCommand+0xae>
    }
  }

  return DS18B20_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b007      	add	sp, #28
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ab0 <WaitForConversionFinished>:



/*----------------------------------------------------------------------------*/
static void WaitForConversionFinished(DS18B20 *sensor)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint8_t data = OneWire_ProcessBit(sensor->uart, 1);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	220f      	movs	r2, #15
 8000abe:	18bc      	adds	r4, r7, r2
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 fe7e 	bl	80017c4 <OneWire_ProcessBit>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	7023      	strb	r3, [r4, #0]
  while(data != 0xFF)
 8000acc:	e009      	b.n	8000ae2 <WaitForConversionFinished+0x32>
  {
    data = OneWire_ProcessBit(sensor->uart, 1);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	220f      	movs	r2, #15
 8000ad4:	18bc      	adds	r4, r7, r2
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fe73 	bl	80017c4 <OneWire_ProcessBit>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	7023      	strb	r3, [r4, #0]
  while(data != 0xFF)
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2bff      	cmp	r3, #255	@ 0xff
 8000aea:	d1f0      	bne.n	8000ace <WaitForConversionFinished+0x1e>
  }
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b005      	add	sp, #20
 8000af4:	bd90      	pop	{r4, r7, pc}
	...

08000af8 <DS18B20_ConvertT>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ConvertT(DS18B20 *sensor, DS18B20_WaitCondition waitCondition)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	000a      	movs	r2, r1
 8000b02:	1cfb      	adds	r3, r7, #3
 8000b04:	701a      	strb	r2, [r3, #0]
  DS18B20_Status result;
  uint8_t rxDummyData;

  result = ExecuteCommand(sensor, convertT, &rxDummyData);
 8000b06:	230b      	movs	r3, #11
 8000b08:	18fc      	adds	r4, r7, r3
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	18fa      	adds	r2, r7, r3
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <DS18B20_ConvertT+0x8c>)
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	6819      	ldr	r1, [r3, #0]
 8000b14:	f7ff ff58 	bl	80009c8 <ExecuteCommand>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	7023      	strb	r3, [r4, #0]

  if (waitCondition == DS18B20_DATA)
 8000b1c:	1cfb      	adds	r3, r7, #3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d103      	bne.n	8000b2c <DS18B20_ConvertT+0x34>
  {
    WaitForConversionFinished(sensor);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ffc2 	bl	8000ab0 <WaitForConversionFinished>
  }

  if (waitCondition == DS18B20_DELAY)
 8000b2c:	1cfb      	adds	r3, r7, #3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d120      	bne.n	8000b76 <DS18B20_ConvertT+0x7e>
  {
    uint32_t delayValueMs = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]

    switch (sensor->configRegister)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7c1b      	ldrb	r3, [r3, #16]
 8000b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b3e:	d012      	beq.n	8000b66 <DS18B20_ConvertT+0x6e>
 8000b40:	dc14      	bgt.n	8000b6c <DS18B20_ConvertT+0x74>
 8000b42:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b44:	d00b      	beq.n	8000b5e <DS18B20_ConvertT+0x66>
 8000b46:	dc11      	bgt.n	8000b6c <DS18B20_ConvertT+0x74>
 8000b48:	2b1f      	cmp	r3, #31
 8000b4a:	d002      	beq.n	8000b52 <DS18B20_ConvertT+0x5a>
 8000b4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b4e:	d003      	beq.n	8000b58 <DS18B20_ConvertT+0x60>
      case DS18B20_12_BITS_CONFIG:
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
        break;

      default:
        break;
 8000b50:	e00c      	b.n	8000b6c <DS18B20_ConvertT+0x74>
        delayValueMs = DS18B20_9_BITS_DELAY_MS;
 8000b52:	235e      	movs	r3, #94	@ 0x5e
 8000b54:	60fb      	str	r3, [r7, #12]
        break;
 8000b56:	e00a      	b.n	8000b6e <DS18B20_ConvertT+0x76>
        delayValueMs = DS18B20_10_BITS_DELAY_MS;
 8000b58:	23bc      	movs	r3, #188	@ 0xbc
 8000b5a:	60fb      	str	r3, [r7, #12]
        break;
 8000b5c:	e007      	b.n	8000b6e <DS18B20_ConvertT+0x76>
        delayValueMs = DS18B20_11_BITS_DELAY_MS;
 8000b5e:	2378      	movs	r3, #120	@ 0x78
 8000b60:	33ff      	adds	r3, #255	@ 0xff
 8000b62:	60fb      	str	r3, [r7, #12]
        break;
 8000b64:	e003      	b.n	8000b6e <DS18B20_ConvertT+0x76>
        delayValueMs = DS18B20_12_BITS_DELAY_MS;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <DS18B20_ConvertT+0x90>)
 8000b68:	60fb      	str	r3, [r7, #12]
        break;
 8000b6a:	e000      	b.n	8000b6e <DS18B20_ConvertT+0x76>
        break;
 8000b6c:	46c0      	nop			@ (mov r8, r8)
    }

    HAL_Delay(delayValueMs);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 f8f3 	bl	8001d5c <HAL_Delay>
  }

  return result;
 8000b76:	230b      	movs	r3, #11
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b005      	add	sp, #20
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	20000010 	.word	0x20000010
 8000b88:	000002ee 	.word	0x000002ee

08000b8c <DS18B20_ReadScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadScratchpad(DS18B20 *sensor)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_SCRATCHPAD_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readScratchpad, rxData);
 8000b94:	2515      	movs	r5, #21
 8000b96:	197c      	adds	r4, r7, r5
 8000b98:	2308      	movs	r3, #8
 8000b9a:	18fa      	adds	r2, r7, r3
 8000b9c:	4b46      	ldr	r3, [pc, #280]	@ (8000cb8 <DS18B20_ReadScratchpad+0x12c>)
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	6819      	ldr	r1, [r3, #0]
 8000ba2:	f7ff ff11 	bl	80009c8 <ExecuteCommand>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	7023      	strb	r3, [r4, #0]

  if (result != DS18B20_OK)
 8000baa:	197b      	adds	r3, r7, r5
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <DS18B20_ReadScratchpad+0x2c>
  {
    return result;
 8000bb2:	197b      	adds	r3, r7, r5
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	e07b      	b.n	8000cb0 <DS18B20_ReadScratchpad+0x124>
  }

  sensor->temperatureLimitHigh = rxData[DS18B20_SCRATCHPAD_T_LIMIT_H_BYTE_IDX];
 8000bb8:	2108      	movs	r1, #8
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	789a      	ldrb	r2, [r3, #2]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = rxData[DS18B20_SCRATCHPAD_T_LIMIT_L_BYTE_IDX];
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	78da      	ldrb	r2, [r3, #3]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = rxData[DS18B20_SCRATCHPAD_CONFIG_BYTE_IDX];
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	791a      	ldrb	r2, [r3, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	741a      	strb	r2, [r3, #16]

  uint16_t tRegValue = (rxData[DS18B20_SCRATCHPAD_T_MSB_BYTE_IDX] << 8) | rxData[DS18B20_SCRATCHPAD_T_LSB_BYTE_IDX];
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	2116      	movs	r1, #22
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	801a      	strh	r2, [r3, #0]
  uint16_t sign = tRegValue & DS18B20_SIGN_MASK;
 8000bea:	2012      	movs	r0, #18
 8000bec:	183b      	adds	r3, r7, r0
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	8812      	ldrh	r2, [r2, #0]
 8000bf2:	0ad2      	lsrs	r2, r2, #11
 8000bf4:	02d2      	lsls	r2, r2, #11
 8000bf6:	801a      	strh	r2, [r3, #0]

  if (sign != 0)
 8000bf8:	183b      	adds	r3, r7, r0
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <DS18B20_ReadScratchpad+0x7e>
  {
    tRegValue = (0xFFFF - tRegValue + 1);
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	187a      	adds	r2, r7, r1
 8000c04:	8812      	ldrh	r2, [r2, #0]
 8000c06:	4252      	negs	r2, r2
 8000c08:	801a      	strh	r2, [r3, #0]
  }

  switch (sensor->configRegister)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7c1b      	ldrb	r3, [r3, #16]
 8000c0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c10:	d021      	beq.n	8000c56 <DS18B20_ReadScratchpad+0xca>
 8000c12:	dc28      	bgt.n	8000c66 <DS18B20_ReadScratchpad+0xda>
 8000c14:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c16:	d016      	beq.n	8000c46 <DS18B20_ReadScratchpad+0xba>
 8000c18:	dc25      	bgt.n	8000c66 <DS18B20_ReadScratchpad+0xda>
 8000c1a:	2b1f      	cmp	r3, #31
 8000c1c:	d002      	beq.n	8000c24 <DS18B20_ReadScratchpad+0x98>
 8000c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c20:	d009      	beq.n	8000c36 <DS18B20_ReadScratchpad+0xaa>
 8000c22:	e020      	b.n	8000c66 <DS18B20_ReadScratchpad+0xda>
  {
    case DS18B20_9_BITS_CONFIG:
      tRegValue &= DS18B20_9_BITS_DATA_MASK;
 8000c24:	2216      	movs	r2, #22
 8000c26:	18bb      	adds	r3, r7, r2
 8000c28:	18ba      	adds	r2, r7, r2
 8000c2a:	8811      	ldrh	r1, [r2, #0]
 8000c2c:	22ff      	movs	r2, #255	@ 0xff
 8000c2e:	00d2      	lsls	r2, r2, #3
 8000c30:	400a      	ands	r2, r1
 8000c32:	801a      	strh	r2, [r3, #0]
      break;
 8000c34:	e01f      	b.n	8000c76 <DS18B20_ReadScratchpad+0xea>

    case DS18B20_10_BITS_CONFIG:
      tRegValue &= DS18B20_10_BITS_DATA_MASK;
 8000c36:	2216      	movs	r2, #22
 8000c38:	18bb      	adds	r3, r7, r2
 8000c3a:	18ba      	adds	r2, r7, r2
 8000c3c:	8812      	ldrh	r2, [r2, #0]
 8000c3e:	491f      	ldr	r1, [pc, #124]	@ (8000cbc <DS18B20_ReadScratchpad+0x130>)
 8000c40:	400a      	ands	r2, r1
 8000c42:	801a      	strh	r2, [r3, #0]
      break;
 8000c44:	e017      	b.n	8000c76 <DS18B20_ReadScratchpad+0xea>

    case DS18B20_11_BITS_CONFIG:
      tRegValue &= DS18B20_11_BITS_DATA_MASK;
 8000c46:	2216      	movs	r2, #22
 8000c48:	18bb      	adds	r3, r7, r2
 8000c4a:	18ba      	adds	r2, r7, r2
 8000c4c:	8812      	ldrh	r2, [r2, #0]
 8000c4e:	491c      	ldr	r1, [pc, #112]	@ (8000cc0 <DS18B20_ReadScratchpad+0x134>)
 8000c50:	400a      	ands	r2, r1
 8000c52:	801a      	strh	r2, [r3, #0]
      break;
 8000c54:	e00f      	b.n	8000c76 <DS18B20_ReadScratchpad+0xea>

    case DS18B20_12_BITS_CONFIG:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8000c56:	2216      	movs	r2, #22
 8000c58:	18bb      	adds	r3, r7, r2
 8000c5a:	18ba      	adds	r2, r7, r2
 8000c5c:	8812      	ldrh	r2, [r2, #0]
 8000c5e:	0552      	lsls	r2, r2, #21
 8000c60:	0d52      	lsrs	r2, r2, #21
 8000c62:	801a      	strh	r2, [r3, #0]
      break;
 8000c64:	e007      	b.n	8000c76 <DS18B20_ReadScratchpad+0xea>

    default:
      tRegValue &= DS18B20_12_BITS_DATA_MASK;
 8000c66:	2216      	movs	r2, #22
 8000c68:	18bb      	adds	r3, r7, r2
 8000c6a:	18ba      	adds	r2, r7, r2
 8000c6c:	8812      	ldrh	r2, [r2, #0]
 8000c6e:	0552      	lsls	r2, r2, #21
 8000c70:	0d52      	lsrs	r2, r2, #21
 8000c72:	801a      	strh	r2, [r3, #0]
      break;
 8000c74:	46c0      	nop			@ (mov r8, r8)
  }

  sensor->temperature = (float)tRegValue * DS18B20_T_STEP;
 8000c76:	2316      	movs	r3, #22
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff fde3 	bl	8000848 <__aeabi_ui2f>
 8000c82:	1c03      	adds	r3, r0, #0
 8000c84:	21f6      	movs	r1, #246	@ 0xf6
 8000c86:	0589      	lsls	r1, r1, #22
 8000c88:	1c18      	adds	r0, r3, #0
 8000c8a:	f7ff fc9f 	bl	80005cc <__aeabi_fmul>
 8000c8e:	1c03      	adds	r3, r0, #0
 8000c90:	1c1a      	adds	r2, r3, #0
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	615a      	str	r2, [r3, #20]

  if (sign != 0)
 8000c96:	2312      	movs	r3, #18
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <DS18B20_ReadScratchpad+0x122>
  {
    sensor->temperature *= (-1);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	2280      	movs	r2, #128	@ 0x80
 8000ca6:	0612      	lsls	r2, r2, #24
 8000ca8:	405a      	eors	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	615a      	str	r2, [r3, #20]
  }

  return DS18B20_OK;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b006      	add	sp, #24
 8000cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	000007fc 	.word	0x000007fc
 8000cc0:	000007fe 	.word	0x000007fe

08000cc4 <DS18B20_WriteScratchpad>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_WriteScratchpad(DS18B20 *sensor, uint8_t *data)
{
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  DS18B20_Status result;

  result = ExecuteCommand(sensor, writeScratchpad, data);
 8000cce:	250f      	movs	r5, #15
 8000cd0:	197c      	adds	r4, r7, r5
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <DS18B20_WriteScratchpad+0x54>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	6819      	ldr	r1, [r3, #0]
 8000cda:	f7ff fe75 	bl	80009c8 <ExecuteCommand>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	7023      	strb	r3, [r4, #0]

  if (result != DS18B20_OK)
 8000ce2:	197b      	adds	r3, r7, r5
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <DS18B20_WriteScratchpad+0x2c>
  {
    return result;
 8000cea:	197b      	adds	r3, r7, r5
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	e00e      	b.n	8000d0e <DS18B20_WriteScratchpad+0x4a>
  }

  sensor->temperatureLimitHigh = data[0];
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	73da      	strb	r2, [r3, #15]
  sensor->temperatureLimitLow = data[1];
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	785a      	ldrb	r2, [r3, #1]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	739a      	strb	r2, [r3, #14]
  sensor->configRegister = data[2];
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	789a      	ldrb	r2, [r3, #2]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	741a      	strb	r2, [r3, #16]

  return result;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	781b      	ldrb	r3, [r3, #0]
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b004      	add	sp, #16
 8000d14:	bdb0      	pop	{r4, r5, r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	2000000c 	.word	0x2000000c

08000d1c <DS18B20_InitializationCommand>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_InitializationCommand(DS18B20 *sensor)
{
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if (sensor->isInitialized == 0)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <DS18B20_InitializationCommand+0x14>
  {
    return DS18B20_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e015      	b.n	8000d5c <DS18B20_InitializationCommand+0x40>
  }

  ONEWIRE_Status status = OneWire_Reset(sensor->uart);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	250f      	movs	r5, #15
 8000d36:	197c      	adds	r4, r7, r5
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 fdc2 	bl	80018c2 <OneWire_Reset>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	7023      	strb	r3, [r4, #0]

  if (status == ONEWIRE_OK)
 8000d42:	197b      	adds	r3, r7, r5
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d104      	bne.n	8000d54 <DS18B20_InitializationCommand+0x38>
  {
    sensor->isConnected = 1;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	705a      	strb	r2, [r3, #1]
    return DS18B20_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e003      	b.n	8000d5c <DS18B20_InitializationCommand+0x40>
  }
  else
  {
    sensor->isConnected = 0;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	705a      	strb	r2, [r3, #1]
    return DS18B20_ERROR;
 8000d5a:	2301      	movs	r3, #1
  }
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b004      	add	sp, #16
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}

08000d64 <DS18B20_ReadRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_ReadRom(DS18B20 *sensor)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxData[DS18B20_READ_ROM_RX_BYTES_NUM];
  result = ExecuteCommand(sensor, readRom, rxData);
 8000d6c:	2516      	movs	r5, #22
 8000d6e:	197c      	adds	r4, r7, r5
 8000d70:	230c      	movs	r3, #12
 8000d72:	18fa      	adds	r2, r7, r3
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <DS18B20_ReadRom+0x70>)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	6819      	ldr	r1, [r3, #0]
 8000d7a:	f7ff fe25 	bl	80009c8 <ExecuteCommand>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	7023      	strb	r3, [r4, #0]

  if (result != DS18B20_OK)
 8000d82:	197b      	adds	r3, r7, r5
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <DS18B20_ReadRom+0x2c>
  {
    return result;
 8000d8a:	197b      	adds	r3, r7, r5
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	e01c      	b.n	8000dca <DS18B20_ReadRom+0x66>
  }

  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8000d90:	2317      	movs	r3, #23
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e011      	b.n	8000dbe <DS18B20_ReadRom+0x5a>
  {
    sensor->serialNumber[i] = rxData[DS18B20_SERIAL_NUMBER_OFFSET_BYTES + i];
 8000d9a:	2017      	movs	r0, #23
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	210c      	movs	r1, #12
 8000da8:	1879      	adds	r1, r7, r1
 8000daa:	5c89      	ldrb	r1, [r1, r2]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	18d3      	adds	r3, r2, r3
 8000db0:	1c0a      	adds	r2, r1, #0
 8000db2:	721a      	strb	r2, [r3, #8]
  for (uint8_t i = 0; i < DS18B20_SERIAL_NUMBER_LEN_BYTES; i++)
 8000db4:	183b      	adds	r3, r7, r0
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	3201      	adds	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	2317      	movs	r3, #23
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d9e8      	bls.n	8000d9a <DS18B20_ReadRom+0x36>
  }

  return DS18B20_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b006      	add	sp, #24
 8000dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <DS18B20_SkipRom>:



/*----------------------------------------------------------------------------*/
DS18B20_Status DS18B20_SkipRom(DS18B20 *sensor)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  DS18B20_Status result;
  uint8_t rxDummyData;
  result = ExecuteCommand(sensor, skipRom, &rxDummyData);
 8000de0:	250f      	movs	r5, #15
 8000de2:	197c      	adds	r4, r7, r5
 8000de4:	230e      	movs	r3, #14
 8000de6:	18fa      	adds	r2, r7, r3
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <DS18B20_SkipRom+0x38>)
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	6819      	ldr	r1, [r3, #0]
 8000dee:	f7ff fdeb 	bl	80009c8 <ExecuteCommand>
 8000df2:	0003      	movs	r3, r0
 8000df4:	7023      	strb	r3, [r4, #0]

  if (result != DS18B20_OK)
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <DS18B20_SkipRom+0x2c>
  {
    return result;
 8000dfe:	197b      	adds	r3, r7, r5
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	e000      	b.n	8000e06 <DS18B20_SkipRom+0x2e>
  }

  return DS18B20_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	20000004 	.word	0x20000004

08000e14 <DS18B20_Init>:



/*----------------------------------------------------------------------------*/
void DS18B20_Init(DS18B20 *sensor, UART_HandleTypeDef *huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  sensor->isConnected = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	705a      	strb	r2, [r3, #1]
  sensor->uart = huart;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	605a      	str	r2, [r3, #4]
  sensor->isInitialized = 1;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 ff11 	bl	8001c62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f820 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f000 f90a 	bl	800105c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e48:	f000 f8e2 	bl	8001010 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e4c:	f000 f85e 	bl	8000f0c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e50:	f000 f8aa 	bl	8000fa8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DS18_INIT();
 8000e54:	f000 f938 	bl	80010c8 <DS18_INIT>
  HAL_UART_Receive_DMA(&huart2, rx_buff, 10);
 8000e58:	4907      	ldr	r1, [pc, #28]	@ (8000e78 <main+0x40>)
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <main+0x44>)
 8000e5c:	220a      	movs	r2, #10
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f002 fc6e 	bl	8003740 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	temp = DS18_GET();
 8000e64:	f000 f966 	bl	8001134 <DS18_GET>
 8000e68:	1c02      	adds	r2, r0, #0
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <main+0x48>)
 8000e6c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000e6e:	2064      	movs	r0, #100	@ 0x64
 8000e70:	f000 ff74 	bl	8001d5c <HAL_Delay>
	temp = DS18_GET();
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	e7f5      	b.n	8000e64 <main+0x2c>
 8000e78:	20000238 	.word	0x20000238
 8000e7c:	200000d0 	.word	0x200000d0
 8000e80:	20000234 	.word	0x20000234

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b08d      	sub	sp, #52	@ 0x34
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	2414      	movs	r4, #20
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	0018      	movs	r0, r3
 8000e90:	231c      	movs	r3, #28
 8000e92:	001a      	movs	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	f003 ffd3 	bl	8004e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	2314      	movs	r3, #20
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f003 ffcc 	bl	8004e40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2202      	movs	r2, #2
 8000eac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	0052      	lsls	r2, r2, #1
 8000eb4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2240      	movs	r2, #64	@ 0x40
 8000ec0:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 fd0b 	bl	80028e0 <HAL_RCC_OscConfig>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000ece:	f000 f997 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 fed7 	bl	8002ca8 <HAL_RCC_ClockConfig>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000efe:	f000 f97f 	bl	8001200 <Error_Handler>
  }
}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b00d      	add	sp, #52	@ 0x34
 8000f08:	bd90      	pop	{r4, r7, pc}
	...

08000f0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f12:	4a24      	ldr	r2, [pc, #144]	@ (8000fa4 <MX_USART1_UART_Init+0x98>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f16:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f18:	22e1      	movs	r2, #225	@ 0xe1
 8000f1a:	0252      	lsls	r2, r2, #9
 8000f1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f002 f978 	bl	800324c <HAL_HalfDuplex_Init>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f60:	f000 f94e 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f003 fe39 	bl	8004be0 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f000 f945 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f003 fe70 	bl	8004c60 <HAL_UARTEx_SetRxFifoThreshold>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f000 f93c 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <MX_USART1_UART_Init+0x94>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f003 fdee 	bl	8004b6c <HAL_UARTEx_DisableFifoMode>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f000 f934 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	2000003c 	.word	0x2000003c
 8000fa4:	40013800 	.word	0x40013800

08000fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <MX_USART2_UART_Init+0x64>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fb4:	22e1      	movs	r2, #225	@ 0xe1
 8000fb6:	0252      	lsls	r2, r2, #9
 8000fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <MX_USART2_UART_Init+0x60>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 f8d4 	bl	80031a0 <HAL_UART_Init>
 8000ff8:	1e03      	subs	r3, r0, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ffc:	f000 f900 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	200000d0 	.word	0x200000d0
 800100c:	40004400 	.word	0x40004400

08001010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <MX_DMA_Init+0x48>)
 8001018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_DMA_Init+0x48>)
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	639a      	str	r2, [r3, #56]	@ 0x38
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <MX_DMA_Init+0x48>)
 8001024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001026:	2201      	movs	r2, #1
 8001028:	4013      	ands	r3, r2
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2009      	movs	r0, #9
 8001034:	f000 ff62 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001038:	2009      	movs	r0, #9
 800103a:	f000 ff74 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	200a      	movs	r0, #10
 8001044:	f000 ff5a 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001048:	200a      	movs	r0, #10
 800104a:	f000 ff6c 	bl	8001f26 <HAL_NVIC_EnableIRQ>

}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	40021000 	.word	0x40021000

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	0018      	movs	r0, r3
 8001066:	2314      	movs	r3, #20
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f003 fee8 	bl	8004e40 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_GPIO_Init+0x68>)
 8001072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_GPIO_Init+0x68>)
 8001076:	2101      	movs	r1, #1
 8001078:	430a      	orrs	r2, r1
 800107a:	635a      	str	r2, [r3, #52]	@ 0x34
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_GPIO_Init+0x68>)
 800107e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001088:	23a0      	movs	r3, #160	@ 0xa0
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	0018      	movs	r0, r3
 8001092:	f001 fc07 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2210      	movs	r2, #16
 800109a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2201      	movs	r2, #1
 80010a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010ae:	1d3a      	adds	r2, r7, #4
 80010b0:	23a0      	movs	r3, #160	@ 0xa0
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f001 fa82 	bl	80025c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b006      	add	sp, #24
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000

080010c8 <DS18_INIT>:

/* USER CODE BEGIN 4 */
void DS18_INIT(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  DS18B20_Init(&temperatureSensor, &huart1);
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <DS18_INIT+0x64>)
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <DS18_INIT+0x68>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fe9d 	bl	8000e14 <DS18B20_Init>
  DS18B20_InitializationCommand(&temperatureSensor);
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <DS18_INIT+0x68>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff fe1d 	bl	8000d1c <DS18B20_InitializationCommand>
  DS18B20_ReadRom(&temperatureSensor);
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <DS18_INIT+0x68>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff fe3d 	bl	8000d64 <DS18B20_ReadRom>
  DS18B20_ReadScratchpad(&temperatureSensor);
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <DS18_INIT+0x68>)
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff fd4d 	bl	8000b8c <DS18B20_ReadScratchpad>
  uint8_t settings[3];
  settings[0] = temperatureSensor.temperatureLimitHigh;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <DS18_INIT+0x68>)
 80010f4:	7bda      	ldrb	r2, [r3, #15]
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	701a      	strb	r2, [r3, #0]
  settings[1] = temperatureSensor.temperatureLimitLow;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <DS18_INIT+0x68>)
 80010fc:	7b9a      	ldrb	r2, [r3, #14]
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	705a      	strb	r2, [r3, #1]
  settings[2] = DS18B20_12_BITS_CONFIG;
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	227f      	movs	r2, #127	@ 0x7f
 8001106:	709a      	strb	r2, [r3, #2]
  DS18B20_InitializationCommand(&temperatureSensor);
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <DS18_INIT+0x68>)
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff fe06 	bl	8000d1c <DS18B20_InitializationCommand>
  DS18B20_SkipRom(&temperatureSensor);
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <DS18_INIT+0x68>)
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff fe60 	bl	8000dd8 <DS18B20_SkipRom>
  DS18B20_WriteScratchpad(&temperatureSensor, settings);
 8001118:	1d3a      	adds	r2, r7, #4
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <DS18_INIT+0x68>)
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff fdd0 	bl	8000cc4 <DS18B20_WriteScratchpad>
}
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b002      	add	sp, #8
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2000003c 	.word	0x2000003c
 8001130:	2000021c 	.word	0x2000021c

08001134 <DS18_GET>:

float DS18_GET(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	DS18B20_InitializationCommand(&temperatureSensor);
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <DS18_GET+0x40>)
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff fdee 	bl	8000d1c <DS18B20_InitializationCommand>
	DS18B20_SkipRom(&temperatureSensor);
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <DS18_GET+0x40>)
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fe48 	bl	8000dd8 <DS18B20_SkipRom>
	DS18B20_ConvertT(&temperatureSensor, DS18B20_DATA);
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <DS18_GET+0x40>)
 800114a:	2101      	movs	r1, #1
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff fcd3 	bl	8000af8 <DS18B20_ConvertT>
	DS18B20_InitializationCommand(&temperatureSensor);
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <DS18_GET+0x40>)
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff fde1 	bl	8000d1c <DS18B20_InitializationCommand>
	DS18B20_SkipRom(&temperatureSensor);
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <DS18_GET+0x40>)
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fe3b 	bl	8000dd8 <DS18B20_SkipRom>
	DS18B20_ReadScratchpad(&temperatureSensor);
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <DS18_GET+0x40>)
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff fd11 	bl	8000b8c <DS18B20_ReadScratchpad>
	return temperatureSensor.temperature;
 800116a:	4b02      	ldr	r3, [pc, #8]	@ (8001174 <DS18_GET+0x40>)
 800116c:	695b      	ldr	r3, [r3, #20]
}
 800116e:	1c18      	adds	r0, r3, #0
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000021c 	.word	0x2000021c

08001178 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart2, rx_buff, 10);
 8001180:	491b      	ldr	r1, [pc, #108]	@ (80011f0 <HAL_UART_RxCpltCallback+0x78>)
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <HAL_UART_RxCpltCallback+0x7c>)
 8001184:	220a      	movs	r2, #10
 8001186:	0018      	movs	r0, r3
 8001188:	f002 fada 	bl	8003740 <HAL_UART_Receive_DMA>
	if (rx_buff[0] == 84){
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <HAL_UART_RxCpltCallback+0x78>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b54      	cmp	r3, #84	@ 0x54
 8001192:	d10d      	bne.n	80011b0 <HAL_UART_RxCpltCallback+0x38>
		uint8_t tx_buff[10] = {76, 66, 50, 88, 49, 48, 48, 89, 37, 37};
 8001194:	2414      	movs	r4, #20
 8001196:	193b      	adds	r3, r7, r4
 8001198:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <HAL_UART_RxCpltCallback+0x80>)
 800119a:	ca03      	ldmia	r2!, {r0, r1}
 800119c:	c303      	stmia	r3!, {r0, r1}
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 80011a2:	1939      	adds	r1, r7, r4
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <HAL_UART_RxCpltCallback+0x7c>)
 80011a6:	220a      	movs	r2, #10
 80011a8:	0018      	movs	r0, r3
 80011aa:	f002 fa37 	bl	800361c <HAL_UART_Transmit_DMA>
		uint8_t tx_buff[10] = {35, 35, 35, 35, 35, 35, 35, 35, 35, 35};
		uint16_t val = 57;
		itoa(val, tx_buff, 10);
		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
	}
}
 80011ae:	e01b      	b.n	80011e8 <HAL_UART_RxCpltCallback+0x70>
	}else if (rx_buff[0] == 71){
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <HAL_UART_RxCpltCallback+0x78>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b47      	cmp	r3, #71	@ 0x47
 80011b6:	d117      	bne.n	80011e8 <HAL_UART_RxCpltCallback+0x70>
		uint8_t tx_buff[10] = {35, 35, 35, 35, 35, 35, 35, 35, 35, 35};
 80011b8:	2408      	movs	r4, #8
 80011ba:	193b      	adds	r3, r7, r4
 80011bc:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <HAL_UART_RxCpltCallback+0x84>)
 80011be:	ca03      	ldmia	r2!, {r0, r1}
 80011c0:	c303      	stmia	r3!, {r0, r1}
 80011c2:	8812      	ldrh	r2, [r2, #0]
 80011c4:	801a      	strh	r2, [r3, #0]
		uint16_t val = 57;
 80011c6:	211e      	movs	r1, #30
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	2239      	movs	r2, #57	@ 0x39
 80011cc:	801a      	strh	r2, [r3, #0]
		itoa(val, tx_buff, 10);
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	1939      	adds	r1, r7, r4
 80011d4:	220a      	movs	r2, #10
 80011d6:	0018      	movs	r0, r3
 80011d8:	f003 fdfa 	bl	8004dd0 <itoa>
		HAL_UART_Transmit_DMA(&huart2, &tx_buff, 10);
 80011dc:	1939      	adds	r1, r7, r4
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_UART_RxCpltCallback+0x7c>)
 80011e0:	220a      	movs	r2, #10
 80011e2:	0018      	movs	r0, r3
 80011e4:	f002 fa1a 	bl	800361c <HAL_UART_Transmit_DMA>
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b009      	add	sp, #36	@ 0x24
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	20000238 	.word	0x20000238
 80011f4:	200000d0 	.word	0x200000d0
 80011f8:	08004ec4 	.word	0x08004ec4
 80011fc:	08004ed0 	.word	0x08004ed0

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	e7fd      	b.n	8001208 <Error_Handler+0x8>

0800120c <SetBaudrate>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
static void SetBaudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	46c6      	mov	lr, r8
 8001210:	b500      	push	{lr}
 8001212:	b0ba      	sub	sp, #232	@ 0xe8
 8001214:	af00      	add	r7, sp, #0
 8001216:	22d4      	movs	r2, #212	@ 0xd4
 8001218:	2308      	movs	r3, #8
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	19db      	adds	r3, r3, r7
 800121e:	6018      	str	r0, [r3, #0]
 8001220:	20d0      	movs	r0, #208	@ 0xd0
 8001222:	2308      	movs	r3, #8
 8001224:	18c3      	adds	r3, r0, r3
 8001226:	19db      	adds	r3, r3, r7
 8001228:	6019      	str	r1, [r3, #0]
  uint32_t pclk = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	26dc      	movs	r6, #220	@ 0xdc
 800122e:	2108      	movs	r1, #8
 8001230:	1871      	adds	r1, r6, r1
 8001232:	19c9      	adds	r1, r1, r7
 8001234:	600b      	str	r3, [r1, #0]
  huart->Init.BaudRate = baudrate;
 8001236:	0011      	movs	r1, r2
 8001238:	2308      	movs	r3, #8
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	19db      	adds	r3, r3, r7
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2308      	movs	r3, #8
 8001242:	18c3      	adds	r3, r0, r3
 8001244:	19db      	adds	r3, r3, r7
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6053      	str	r3, [r2, #4]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#else
    if (huart->Instance == USART1)
 800124a:	2308      	movs	r3, #8
 800124c:	18cb      	adds	r3, r1, r3
 800124e:	19db      	adds	r3, r3, r7
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4bb0      	ldr	r3, [pc, #704]	@ (8001518 <SetBaudrate+0x30c>)
 8001256:	429a      	cmp	r2, r3
 8001258:	d107      	bne.n	800126a <SetBaudrate+0x5e>
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800125a:	f001 fe9d 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 800125e:	0003      	movs	r3, r0
 8001260:	2208      	movs	r2, #8
 8001262:	18b2      	adds	r2, r6, r2
 8001264:	19d2      	adds	r2, r2, r7
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e007      	b.n	800127a <SetBaudrate+0x6e>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800126a:	f001 fe95 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 800126e:	0003      	movs	r3, r0
 8001270:	22dc      	movs	r2, #220	@ 0xdc
 8001272:	2108      	movs	r1, #8
 8001274:	1852      	adds	r2, r2, r1
 8001276:	19d2      	adds	r2, r2, r7
 8001278:	6013      	str	r3, [r2, #0]
    }

//  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800127a:	23d4      	movs	r3, #212	@ 0xd4
 800127c:	2208      	movs	r2, #8
 800127e:	189b      	adds	r3, r3, r2
 8001280:	19da      	adds	r2, r3, r7
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	69da      	ldr	r2, [r3, #28]
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	429a      	cmp	r2, r3
 800128c:	d000      	beq.n	8001290 <SetBaudrate+0x84>
 800128e:	e145      	b.n	800151c <SetBaudrate+0x310>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001290:	22dc      	movs	r2, #220	@ 0xdc
 8001292:	2308      	movs	r3, #8
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	19d9      	adds	r1, r3, r7
 8001298:	680b      	ldr	r3, [r1, #0]
 800129a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800129c:	2300      	movs	r3, #0
 800129e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012a0:	6dbd      	ldr	r5, [r7, #88]	@ 0x58
 80012a2:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 80012a4:	002a      	movs	r2, r5
 80012a6:	0033      	movs	r3, r6
 80012a8:	0f91      	lsrs	r1, r2, #30
 80012aa:	468c      	mov	ip, r1
 80012ac:	0098      	lsls	r0, r3, #2
 80012ae:	24b4      	movs	r4, #180	@ 0xb4
 80012b0:	2108      	movs	r1, #8
 80012b2:	1861      	adds	r1, r4, r1
 80012b4:	19c9      	adds	r1, r1, r7
 80012b6:	6008      	str	r0, [r1, #0]
 80012b8:	2108      	movs	r1, #8
 80012ba:	1861      	adds	r1, r4, r1
 80012bc:	19c8      	adds	r0, r1, r7
 80012be:	6800      	ldr	r0, [r0, #0]
 80012c0:	4661      	mov	r1, ip
 80012c2:	4308      	orrs	r0, r1
 80012c4:	2108      	movs	r1, #8
 80012c6:	1861      	adds	r1, r4, r1
 80012c8:	19c9      	adds	r1, r1, r7
 80012ca:	6008      	str	r0, [r1, #0]
 80012cc:	0093      	lsls	r3, r2, #2
 80012ce:	21b0      	movs	r1, #176	@ 0xb0
 80012d0:	2208      	movs	r2, #8
 80012d2:	188a      	adds	r2, r1, r2
 80012d4:	19d0      	adds	r0, r2, r7
 80012d6:	6003      	str	r3, [r0, #0]
 80012d8:	2308      	movs	r3, #8
 80012da:	18cb      	adds	r3, r1, r3
 80012dc:	19d9      	adds	r1, r3, r7
 80012de:	680b      	ldr	r3, [r1, #0]
 80012e0:	684c      	ldr	r4, [r1, #4]
 80012e2:	195b      	adds	r3, r3, r5
 80012e4:	4174      	adcs	r4, r6
 80012e6:	001a      	movs	r2, r3
 80012e8:	0023      	movs	r3, r4
 80012ea:	0f91      	lsrs	r1, r2, #30
 80012ec:	0098      	lsls	r0, r3, #2
 80012ee:	24ac      	movs	r4, #172	@ 0xac
 80012f0:	2508      	movs	r5, #8
 80012f2:	1965      	adds	r5, r4, r5
 80012f4:	19ee      	adds	r6, r5, r7
 80012f6:	6030      	str	r0, [r6, #0]
 80012f8:	2008      	movs	r0, #8
 80012fa:	1820      	adds	r0, r4, r0
 80012fc:	19c0      	adds	r0, r0, r7
 80012fe:	6800      	ldr	r0, [r0, #0]
 8001300:	4308      	orrs	r0, r1
 8001302:	2108      	movs	r1, #8
 8001304:	1861      	adds	r1, r4, r1
 8001306:	19c9      	adds	r1, r1, r7
 8001308:	6008      	str	r0, [r1, #0]
 800130a:	0091      	lsls	r1, r2, #2
 800130c:	20a8      	movs	r0, #168	@ 0xa8
 800130e:	2408      	movs	r4, #8
 8001310:	1904      	adds	r4, r0, r4
 8001312:	19e4      	adds	r4, r4, r7
 8001314:	6021      	str	r1, [r4, #0]
 8001316:	2108      	movs	r1, #8
 8001318:	1841      	adds	r1, r0, r1
 800131a:	19c9      	adds	r1, r1, r7
 800131c:	6808      	ldr	r0, [r1, #0]
 800131e:	6849      	ldr	r1, [r1, #4]
 8001320:	1880      	adds	r0, r0, r2
 8001322:	4159      	adcs	r1, r3
 8001324:	25d4      	movs	r5, #212	@ 0xd4
 8001326:	2308      	movs	r3, #8
 8001328:	18eb      	adds	r3, r5, r3
 800132a:	19dc      	adds	r4, r3, r7
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	653b      	str	r3, [r7, #80]	@ 0x50
 8001332:	2300      	movs	r3, #0
 8001334:	657b      	str	r3, [r7, #84]	@ 0x54
 8001336:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800133a:	1892      	adds	r2, r2, r2
 800133c:	415b      	adcs	r3, r3
 800133e:	f7ff f859 	bl	80003f4 <__aeabi_uldivmod>
 8001342:	0002      	movs	r2, r0
 8001344:	000b      	movs	r3, r1
 8001346:	0013      	movs	r3, r2
 8001348:	2164      	movs	r1, #100	@ 0x64
 800134a:	0018      	movs	r0, r3
 800134c:	f7fe fedc 	bl	8000108 <__udivsi3>
 8001350:	0003      	movs	r3, r0
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4698      	mov	r8, r3
 8001356:	23dc      	movs	r3, #220	@ 0xdc
 8001358:	2208      	movs	r2, #8
 800135a:	189b      	adds	r3, r3, r2
 800135c:	19da      	adds	r2, r3, r7
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001362:	2300      	movs	r3, #0
 8001364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001366:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 8001368:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
 800136a:	002a      	movs	r2, r5
 800136c:	0033      	movs	r3, r6
 800136e:	0f91      	lsrs	r1, r2, #30
 8001370:	468c      	mov	ip, r1
 8001372:	0098      	lsls	r0, r3, #2
 8001374:	21a4      	movs	r1, #164	@ 0xa4
 8001376:	2408      	movs	r4, #8
 8001378:	1909      	adds	r1, r1, r4
 800137a:	19c9      	adds	r1, r1, r7
 800137c:	6008      	str	r0, [r1, #0]
 800137e:	20a4      	movs	r0, #164	@ 0xa4
 8001380:	2108      	movs	r1, #8
 8001382:	1841      	adds	r1, r0, r1
 8001384:	19c9      	adds	r1, r1, r7
 8001386:	6808      	ldr	r0, [r1, #0]
 8001388:	4661      	mov	r1, ip
 800138a:	4308      	orrs	r0, r1
 800138c:	21a4      	movs	r1, #164	@ 0xa4
 800138e:	2408      	movs	r4, #8
 8001390:	1909      	adds	r1, r1, r4
 8001392:	19c9      	adds	r1, r1, r7
 8001394:	6008      	str	r0, [r1, #0]
 8001396:	0093      	lsls	r3, r2, #2
 8001398:	22a0      	movs	r2, #160	@ 0xa0
 800139a:	2108      	movs	r1, #8
 800139c:	1851      	adds	r1, r2, r1
 800139e:	19c9      	adds	r1, r1, r7
 80013a0:	600b      	str	r3, [r1, #0]
 80013a2:	2308      	movs	r3, #8
 80013a4:	18d3      	adds	r3, r2, r3
 80013a6:	19da      	adds	r2, r3, r7
 80013a8:	6853      	ldr	r3, [r2, #4]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	1952      	adds	r2, r2, r5
 80013ae:	4173      	adcs	r3, r6
 80013b0:	0f91      	lsrs	r1, r2, #30
 80013b2:	0098      	lsls	r0, r3, #2
 80013b4:	269c      	movs	r6, #156	@ 0x9c
 80013b6:	2408      	movs	r4, #8
 80013b8:	1934      	adds	r4, r6, r4
 80013ba:	19e5      	adds	r5, r4, r7
 80013bc:	6028      	str	r0, [r5, #0]
 80013be:	2008      	movs	r0, #8
 80013c0:	1830      	adds	r0, r6, r0
 80013c2:	19c0      	adds	r0, r0, r7
 80013c4:	6800      	ldr	r0, [r0, #0]
 80013c6:	4308      	orrs	r0, r1
 80013c8:	2108      	movs	r1, #8
 80013ca:	1871      	adds	r1, r6, r1
 80013cc:	19c9      	adds	r1, r1, r7
 80013ce:	6008      	str	r0, [r1, #0]
 80013d0:	0091      	lsls	r1, r2, #2
 80013d2:	2098      	movs	r0, #152	@ 0x98
 80013d4:	2408      	movs	r4, #8
 80013d6:	1904      	adds	r4, r0, r4
 80013d8:	19e6      	adds	r6, r4, r7
 80013da:	6031      	str	r1, [r6, #0]
 80013dc:	2108      	movs	r1, #8
 80013de:	1841      	adds	r1, r0, r1
 80013e0:	19c9      	adds	r1, r1, r7
 80013e2:	6808      	ldr	r0, [r1, #0]
 80013e4:	6849      	ldr	r1, [r1, #4]
 80013e6:	1880      	adds	r0, r0, r2
 80013e8:	4159      	adcs	r1, r3
 80013ea:	25d4      	movs	r5, #212	@ 0xd4
 80013ec:	2308      	movs	r3, #8
 80013ee:	18eb      	adds	r3, r5, r3
 80013f0:	19da      	adds	r2, r3, r7
 80013f2:	6813      	ldr	r3, [r2, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80013f8:	2300      	movs	r3, #0
 80013fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80013fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001400:	1892      	adds	r2, r2, r2
 8001402:	415b      	adcs	r3, r3
 8001404:	f7fe fff6 	bl	80003f4 <__aeabi_uldivmod>
 8001408:	0002      	movs	r2, r0
 800140a:	000b      	movs	r3, r1
 800140c:	0013      	movs	r3, r2
 800140e:	2164      	movs	r1, #100	@ 0x64
 8001410:	0018      	movs	r0, r3
 8001412:	f7fe feff 	bl	8000214 <__aeabi_uidivmod>
 8001416:	000b      	movs	r3, r1
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	3332      	adds	r3, #50	@ 0x32
 800141c:	2164      	movs	r1, #100	@ 0x64
 800141e:	0018      	movs	r0, r3
 8001420:	f7fe fe72 	bl	8000108 <__udivsi3>
 8001424:	0003      	movs	r3, r0
 8001426:	005a      	lsls	r2, r3, #1
 8001428:	23f8      	movs	r3, #248	@ 0xf8
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4013      	ands	r3, r2
 800142e:	4498      	add	r8, r3
 8001430:	23dc      	movs	r3, #220	@ 0xdc
 8001432:	2208      	movs	r2, #8
 8001434:	189b      	adds	r3, r3, r2
 8001436:	19db      	adds	r3, r3, r7
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800143c:	2300      	movs	r3, #0
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001440:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8001442:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 8001444:	002a      	movs	r2, r5
 8001446:	0033      	movs	r3, r6
 8001448:	0f91      	lsrs	r1, r2, #30
 800144a:	468c      	mov	ip, r1
 800144c:	0098      	lsls	r0, r3, #2
 800144e:	2194      	movs	r1, #148	@ 0x94
 8001450:	2408      	movs	r4, #8
 8001452:	1909      	adds	r1, r1, r4
 8001454:	19c9      	adds	r1, r1, r7
 8001456:	6008      	str	r0, [r1, #0]
 8001458:	2094      	movs	r0, #148	@ 0x94
 800145a:	2108      	movs	r1, #8
 800145c:	1841      	adds	r1, r0, r1
 800145e:	19c9      	adds	r1, r1, r7
 8001460:	6808      	ldr	r0, [r1, #0]
 8001462:	4661      	mov	r1, ip
 8001464:	4308      	orrs	r0, r1
 8001466:	2194      	movs	r1, #148	@ 0x94
 8001468:	2408      	movs	r4, #8
 800146a:	1909      	adds	r1, r1, r4
 800146c:	19c9      	adds	r1, r1, r7
 800146e:	6008      	str	r0, [r1, #0]
 8001470:	0093      	lsls	r3, r2, #2
 8001472:	2290      	movs	r2, #144	@ 0x90
 8001474:	2108      	movs	r1, #8
 8001476:	1851      	adds	r1, r2, r1
 8001478:	19c9      	adds	r1, r1, r7
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	2308      	movs	r3, #8
 800147e:	18d3      	adds	r3, r2, r3
 8001480:	19db      	adds	r3, r3, r7
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	1952      	adds	r2, r2, r5
 8001488:	4173      	adcs	r3, r6
 800148a:	0f91      	lsrs	r1, r2, #30
 800148c:	0098      	lsls	r0, r3, #2
 800148e:	268c      	movs	r6, #140	@ 0x8c
 8001490:	2408      	movs	r4, #8
 8001492:	1934      	adds	r4, r6, r4
 8001494:	19e5      	adds	r5, r4, r7
 8001496:	6028      	str	r0, [r5, #0]
 8001498:	2008      	movs	r0, #8
 800149a:	1830      	adds	r0, r6, r0
 800149c:	19c0      	adds	r0, r0, r7
 800149e:	6800      	ldr	r0, [r0, #0]
 80014a0:	4308      	orrs	r0, r1
 80014a2:	2108      	movs	r1, #8
 80014a4:	1871      	adds	r1, r6, r1
 80014a6:	19c9      	adds	r1, r1, r7
 80014a8:	6008      	str	r0, [r1, #0]
 80014aa:	0091      	lsls	r1, r2, #2
 80014ac:	2088      	movs	r0, #136	@ 0x88
 80014ae:	2408      	movs	r4, #8
 80014b0:	1904      	adds	r4, r0, r4
 80014b2:	19e6      	adds	r6, r4, r7
 80014b4:	6031      	str	r1, [r6, #0]
 80014b6:	2108      	movs	r1, #8
 80014b8:	1841      	adds	r1, r0, r1
 80014ba:	19c9      	adds	r1, r1, r7
 80014bc:	6808      	ldr	r0, [r1, #0]
 80014be:	6849      	ldr	r1, [r1, #4]
 80014c0:	1880      	adds	r0, r0, r2
 80014c2:	4159      	adcs	r1, r3
 80014c4:	25d4      	movs	r5, #212	@ 0xd4
 80014c6:	2308      	movs	r3, #8
 80014c8:	18eb      	adds	r3, r5, r3
 80014ca:	19db      	adds	r3, r3, r7
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80014d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014da:	1892      	adds	r2, r2, r2
 80014dc:	415b      	adcs	r3, r3
 80014de:	f7fe ff89 	bl	80003f4 <__aeabi_uldivmod>
 80014e2:	0002      	movs	r2, r0
 80014e4:	000b      	movs	r3, r1
 80014e6:	0013      	movs	r3, r2
 80014e8:	2164      	movs	r1, #100	@ 0x64
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7fe fe92 	bl	8000214 <__aeabi_uidivmod>
 80014f0:	000b      	movs	r3, r1
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	3332      	adds	r3, #50	@ 0x32
 80014f6:	2164      	movs	r1, #100	@ 0x64
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7fe fe05 	bl	8000108 <__udivsi3>
 80014fe:	0003      	movs	r3, r0
 8001500:	001a      	movs	r2, r3
 8001502:	2307      	movs	r3, #7
 8001504:	401a      	ands	r2, r3
 8001506:	2308      	movs	r3, #8
 8001508:	18eb      	adds	r3, r5, r3
 800150a:	19db      	adds	r3, r3, r7
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4442      	add	r2, r8
 8001512:	60da      	str	r2, [r3, #12]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001514:	e150      	b.n	80017b8 <SetBaudrate+0x5ac>
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	40013800 	.word	0x40013800
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800151c:	26dc      	movs	r6, #220	@ 0xdc
 800151e:	2308      	movs	r3, #8
 8001520:	18f3      	adds	r3, r6, r3
 8001522:	19db      	adds	r3, r3, r7
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	663b      	str	r3, [r7, #96]	@ 0x60
 8001528:	2300      	movs	r3, #0
 800152a:	667b      	str	r3, [r7, #100]	@ 0x64
 800152c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800152e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001530:	0f91      	lsrs	r1, r2, #30
 8001532:	009d      	lsls	r5, r3, #2
 8001534:	430d      	orrs	r5, r1
 8001536:	0094      	lsls	r4, r2, #2
 8001538:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800153a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800153c:	1912      	adds	r2, r2, r4
 800153e:	416b      	adcs	r3, r5
 8001540:	0f91      	lsrs	r1, r2, #30
 8001542:	0098      	lsls	r0, r3, #2
 8001544:	2484      	movs	r4, #132	@ 0x84
 8001546:	2508      	movs	r5, #8
 8001548:	1965      	adds	r5, r4, r5
 800154a:	19ed      	adds	r5, r5, r7
 800154c:	6028      	str	r0, [r5, #0]
 800154e:	2008      	movs	r0, #8
 8001550:	1820      	adds	r0, r4, r0
 8001552:	19c0      	adds	r0, r0, r7
 8001554:	6800      	ldr	r0, [r0, #0]
 8001556:	4308      	orrs	r0, r1
 8001558:	2108      	movs	r1, #8
 800155a:	1861      	adds	r1, r4, r1
 800155c:	19c9      	adds	r1, r1, r7
 800155e:	6008      	str	r0, [r1, #0]
 8001560:	0091      	lsls	r1, r2, #2
 8001562:	2080      	movs	r0, #128	@ 0x80
 8001564:	2408      	movs	r4, #8
 8001566:	1904      	adds	r4, r0, r4
 8001568:	19e4      	adds	r4, r4, r7
 800156a:	6021      	str	r1, [r4, #0]
 800156c:	2108      	movs	r1, #8
 800156e:	1841      	adds	r1, r0, r1
 8001570:	19c9      	adds	r1, r1, r7
 8001572:	6808      	ldr	r0, [r1, #0]
 8001574:	6849      	ldr	r1, [r1, #4]
 8001576:	1880      	adds	r0, r0, r2
 8001578:	4159      	adcs	r1, r3
 800157a:	6038      	str	r0, [r7, #0]
 800157c:	6079      	str	r1, [r7, #4]
 800157e:	23d4      	movs	r3, #212	@ 0xd4
 8001580:	2208      	movs	r2, #8
 8001582:	189b      	adds	r3, r3, r2
 8001584:	19da      	adds	r2, r3, r7
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001590:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8001592:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001594:	0023      	movs	r3, r4
 8001596:	0f9b      	lsrs	r3, r3, #30
 8001598:	002a      	movs	r2, r5
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	21cc      	movs	r1, #204	@ 0xcc
 800159e:	2008      	movs	r0, #8
 80015a0:	1808      	adds	r0, r1, r0
 80015a2:	19c0      	adds	r0, r0, r7
 80015a4:	6002      	str	r2, [r0, #0]
 80015a6:	000a      	movs	r2, r1
 80015a8:	0010      	movs	r0, r2
 80015aa:	2108      	movs	r1, #8
 80015ac:	1852      	adds	r2, r2, r1
 80015ae:	19d1      	adds	r1, r2, r7
 80015b0:	680a      	ldr	r2, [r1, #0]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	0003      	movs	r3, r0
 80015b6:	2108      	movs	r1, #8
 80015b8:	185b      	adds	r3, r3, r1
 80015ba:	19d9      	adds	r1, r3, r7
 80015bc:	600a      	str	r2, [r1, #0]
 80015be:	0023      	movs	r3, r4
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	22c8      	movs	r2, #200	@ 0xc8
 80015c4:	2108      	movs	r1, #8
 80015c6:	1851      	adds	r1, r2, r1
 80015c8:	19c9      	adds	r1, r1, r7
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	2308      	movs	r3, #8
 80015ce:	18d3      	adds	r3, r2, r3
 80015d0:	19da      	adds	r2, r3, r7
 80015d2:	6853      	ldr	r3, [r2, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	f7fe ff0b 	bl	80003f4 <__aeabi_uldivmod>
 80015de:	0002      	movs	r2, r0
 80015e0:	000b      	movs	r3, r1
 80015e2:	0013      	movs	r3, r2
 80015e4:	2164      	movs	r1, #100	@ 0x64
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7fe fd8e 	bl	8000108 <__udivsi3>
 80015ec:	0003      	movs	r3, r0
 80015ee:	011c      	lsls	r4, r3, #4
 80015f0:	2308      	movs	r3, #8
 80015f2:	18f3      	adds	r3, r6, r3
 80015f4:	19da      	adds	r2, r3, r7
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80015fe:	6a3d      	ldr	r5, [r7, #32]
 8001600:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8001602:	002a      	movs	r2, r5
 8001604:	0033      	movs	r3, r6
 8001606:	0f91      	lsrs	r1, r2, #30
 8001608:	468c      	mov	ip, r1
 800160a:	0098      	lsls	r0, r3, #2
 800160c:	2184      	movs	r1, #132	@ 0x84
 800160e:	1879      	adds	r1, r7, r1
 8001610:	6008      	str	r0, [r1, #0]
 8001612:	2084      	movs	r0, #132	@ 0x84
 8001614:	1838      	adds	r0, r7, r0
 8001616:	6800      	ldr	r0, [r0, #0]
 8001618:	4661      	mov	r1, ip
 800161a:	4308      	orrs	r0, r1
 800161c:	2184      	movs	r1, #132	@ 0x84
 800161e:	1879      	adds	r1, r7, r1
 8001620:	6008      	str	r0, [r1, #0]
 8001622:	0093      	lsls	r3, r2, #2
 8001624:	2280      	movs	r2, #128	@ 0x80
 8001626:	18ba      	adds	r2, r7, r2
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	1952      	adds	r2, r2, r5
 8001634:	4173      	adcs	r3, r6
 8001636:	0f91      	lsrs	r1, r2, #30
 8001638:	0098      	lsls	r0, r3, #2
 800163a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800163c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800163e:	4308      	orrs	r0, r1
 8001640:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8001642:	0091      	lsls	r1, r2, #2
 8001644:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001646:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001648:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800164a:	1880      	adds	r0, r0, r2
 800164c:	4159      	adcs	r1, r3
 800164e:	6038      	str	r0, [r7, #0]
 8001650:	6079      	str	r1, [r7, #4]
 8001652:	23d4      	movs	r3, #212	@ 0xd4
 8001654:	2208      	movs	r2, #8
 8001656:	189b      	adds	r3, r3, r2
 8001658:	19da      	adds	r2, r3, r7
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69bd      	ldr	r5, [r7, #24]
 8001666:	69fe      	ldr	r6, [r7, #28]
 8001668:	002b      	movs	r3, r5
 800166a:	0f9b      	lsrs	r3, r3, #30
 800166c:	0032      	movs	r2, r6
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	21c4      	movs	r1, #196	@ 0xc4
 8001672:	2008      	movs	r0, #8
 8001674:	1808      	adds	r0, r1, r0
 8001676:	19c0      	adds	r0, r0, r7
 8001678:	6002      	str	r2, [r0, #0]
 800167a:	000a      	movs	r2, r1
 800167c:	0010      	movs	r0, r2
 800167e:	2108      	movs	r1, #8
 8001680:	1852      	adds	r2, r2, r1
 8001682:	19d1      	adds	r1, r2, r7
 8001684:	680a      	ldr	r2, [r1, #0]
 8001686:	431a      	orrs	r2, r3
 8001688:	0003      	movs	r3, r0
 800168a:	2108      	movs	r1, #8
 800168c:	185b      	adds	r3, r3, r1
 800168e:	19d9      	adds	r1, r3, r7
 8001690:	600a      	str	r2, [r1, #0]
 8001692:	002b      	movs	r3, r5
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	22c0      	movs	r2, #192	@ 0xc0
 8001698:	2108      	movs	r1, #8
 800169a:	1851      	adds	r1, r2, r1
 800169c:	19c9      	adds	r1, r1, r7
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	2308      	movs	r3, #8
 80016a2:	18d3      	adds	r3, r2, r3
 80016a4:	19da      	adds	r2, r3, r7
 80016a6:	6853      	ldr	r3, [r2, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	f7fe fea1 	bl	80003f4 <__aeabi_uldivmod>
 80016b2:	0002      	movs	r2, r0
 80016b4:	000b      	movs	r3, r1
 80016b6:	0013      	movs	r3, r2
 80016b8:	2164      	movs	r1, #100	@ 0x64
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7fe fdaa 	bl	8000214 <__aeabi_uidivmod>
 80016c0:	000b      	movs	r3, r1
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	3332      	adds	r3, #50	@ 0x32
 80016c6:	2164      	movs	r1, #100	@ 0x64
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7fe fd1d 	bl	8000108 <__udivsi3>
 80016ce:	0003      	movs	r3, r0
 80016d0:	001a      	movs	r2, r3
 80016d2:	23f0      	movs	r3, #240	@ 0xf0
 80016d4:	4013      	ands	r3, r2
 80016d6:	18e4      	adds	r4, r4, r3
 80016d8:	26dc      	movs	r6, #220	@ 0xdc
 80016da:	2308      	movs	r3, #8
 80016dc:	18f3      	adds	r3, r6, r3
 80016de:	19da      	adds	r2, r3, r7
 80016e0:	6813      	ldr	r3, [r2, #0]
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	693d      	ldr	r5, [r7, #16]
 80016ea:	697e      	ldr	r6, [r7, #20]
 80016ec:	002a      	movs	r2, r5
 80016ee:	0033      	movs	r3, r6
 80016f0:	0f91      	lsrs	r1, r2, #30
 80016f2:	0098      	lsls	r0, r3, #2
 80016f4:	6778      	str	r0, [r7, #116]	@ 0x74
 80016f6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80016f8:	4308      	orrs	r0, r1
 80016fa:	6778      	str	r0, [r7, #116]	@ 0x74
 80016fc:	0093      	lsls	r3, r2, #2
 80016fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001700:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001704:	1952      	adds	r2, r2, r5
 8001706:	4173      	adcs	r3, r6
 8001708:	0f91      	lsrs	r1, r2, #30
 800170a:	0098      	lsls	r0, r3, #2
 800170c:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800170e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001710:	4308      	orrs	r0, r1
 8001712:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8001714:	0091      	lsls	r1, r2, #2
 8001716:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001718:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800171a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800171c:	1880      	adds	r0, r0, r2
 800171e:	4159      	adcs	r1, r3
 8001720:	6038      	str	r0, [r7, #0]
 8001722:	6079      	str	r1, [r7, #4]
 8001724:	23d4      	movs	r3, #212	@ 0xd4
 8001726:	2208      	movs	r2, #8
 8001728:	189b      	adds	r3, r3, r2
 800172a:	19da      	adds	r2, r3, r7
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68bd      	ldr	r5, [r7, #8]
 8001738:	68fe      	ldr	r6, [r7, #12]
 800173a:	002b      	movs	r3, r5
 800173c:	0f9b      	lsrs	r3, r3, #30
 800173e:	0032      	movs	r2, r6
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	21bc      	movs	r1, #188	@ 0xbc
 8001744:	2008      	movs	r0, #8
 8001746:	1808      	adds	r0, r1, r0
 8001748:	19c0      	adds	r0, r0, r7
 800174a:	6002      	str	r2, [r0, #0]
 800174c:	000a      	movs	r2, r1
 800174e:	0010      	movs	r0, r2
 8001750:	2108      	movs	r1, #8
 8001752:	1852      	adds	r2, r2, r1
 8001754:	19d1      	adds	r1, r2, r7
 8001756:	680a      	ldr	r2, [r1, #0]
 8001758:	431a      	orrs	r2, r3
 800175a:	0003      	movs	r3, r0
 800175c:	2108      	movs	r1, #8
 800175e:	185b      	adds	r3, r3, r1
 8001760:	19d9      	adds	r1, r3, r7
 8001762:	600a      	str	r2, [r1, #0]
 8001764:	002b      	movs	r3, r5
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	22b8      	movs	r2, #184	@ 0xb8
 800176a:	2108      	movs	r1, #8
 800176c:	1851      	adds	r1, r2, r1
 800176e:	19c9      	adds	r1, r1, r7
 8001770:	600b      	str	r3, [r1, #0]
 8001772:	2308      	movs	r3, #8
 8001774:	18d3      	adds	r3, r2, r3
 8001776:	19da      	adds	r2, r3, r7
 8001778:	6853      	ldr	r3, [r2, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f7fe fe38 	bl	80003f4 <__aeabi_uldivmod>
 8001784:	0002      	movs	r2, r0
 8001786:	000b      	movs	r3, r1
 8001788:	0013      	movs	r3, r2
 800178a:	2164      	movs	r1, #100	@ 0x64
 800178c:	0018      	movs	r0, r3
 800178e:	f7fe fd41 	bl	8000214 <__aeabi_uidivmod>
 8001792:	000b      	movs	r3, r1
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	3332      	adds	r3, #50	@ 0x32
 8001798:	2164      	movs	r1, #100	@ 0x64
 800179a:	0018      	movs	r0, r3
 800179c:	f7fe fcb4 	bl	8000108 <__udivsi3>
 80017a0:	0003      	movs	r3, r0
 80017a2:	001a      	movs	r2, r3
 80017a4:	230f      	movs	r3, #15
 80017a6:	401a      	ands	r2, r3
 80017a8:	23d4      	movs	r3, #212	@ 0xd4
 80017aa:	2108      	movs	r1, #8
 80017ac:	185b      	adds	r3, r3, r1
 80017ae:	19db      	adds	r3, r3, r7
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	18a2      	adds	r2, r4, r2
 80017b6:	60da      	str	r2, [r3, #12]
}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b03a      	add	sp, #232	@ 0xe8
 80017be:	bc80      	pop	{r7}
 80017c0:	46b8      	mov	r8, r7
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017c4 <OneWire_ProcessBit>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessBit(UART_HandleTypeDef *huart, uint8_t bit)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	000a      	movs	r2, r1
 80017ce:	1cfb      	adds	r3, r7, #3
 80017d0:	701a      	strb	r2, [r3, #0]
  uint8_t txData = 0xFF;
 80017d2:	210f      	movs	r1, #15
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	22ff      	movs	r2, #255	@ 0xff
 80017d8:	701a      	strb	r2, [r3, #0]
  uint8_t rxData = 0x00;
 80017da:	230e      	movs	r3, #14
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]

  if (bit == 0)
 80017e2:	1cfb      	adds	r3, r7, #3
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <OneWire_ProcessBit+0x2c>
  {
    txData = 0x00;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Transmit(huart, &txData, 1, ONEWIRE_UART_TIMEOUT);
 80017f0:	230f      	movs	r3, #15
 80017f2:	18f9      	adds	r1, r7, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	230a      	movs	r3, #10
 80017f8:	2201      	movs	r2, #1
 80017fa:	f001 fd85 	bl	8003308 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxData, 1, ONEWIRE_UART_TIMEOUT);
 80017fe:	240e      	movs	r4, #14
 8001800:	1939      	adds	r1, r7, r4
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	230a      	movs	r3, #10
 8001806:	2201      	movs	r2, #1
 8001808:	f001 fe22 	bl	8003450 <HAL_UART_Receive>

  return rxData;
 800180c:	193b      	adds	r3, r7, r4
 800180e:	781b      	ldrb	r3, [r3, #0]
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b005      	add	sp, #20
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <OneWire_ProcessByte>:



/*----------------------------------------------------------------------------*/
uint8_t OneWire_ProcessByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	000a      	movs	r2, r1
 8001822:	1cfb      	adds	r3, r7, #3
 8001824:	701a      	strb	r2, [r3, #0]
  uint8_t rxByte = 0x00;
 8001826:	230f      	movs	r3, #15
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 800182e:	230e      	movs	r3, #14
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e038      	b.n	80018aa <OneWire_ProcessByte+0x92>
  {
    uint8_t txBit = (byte >> i) & 0x01;
 8001838:	1cfb      	adds	r3, r7, #3
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	230e      	movs	r3, #14
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	411a      	asrs	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	b2da      	uxtb	r2, r3
 8001848:	200c      	movs	r0, #12
 800184a:	183b      	adds	r3, r7, r0
 800184c:	2101      	movs	r1, #1
 800184e:	400a      	ands	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
    uint8_t rxBit = 0;
 8001852:	250d      	movs	r5, #13
 8001854:	197b      	adds	r3, r7, r5
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]

    uint8_t tempRxData = OneWire_ProcessBit(huart, txBit);
 800185a:	260b      	movs	r6, #11
 800185c:	19bc      	adds	r4, r7, r6
 800185e:	183b      	adds	r3, r7, r0
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0011      	movs	r1, r2
 8001866:	0018      	movs	r0, r3
 8001868:	f7ff ffac 	bl	80017c4 <OneWire_ProcessBit>
 800186c:	0003      	movs	r3, r0
 800186e:	7023      	strb	r3, [r4, #0]

    if (tempRxData == 0xFF)
 8001870:	19bb      	adds	r3, r7, r6
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2bff      	cmp	r3, #255	@ 0xff
 8001876:	d102      	bne.n	800187e <OneWire_ProcessByte+0x66>
    {
      rxBit = 1;
 8001878:	197b      	adds	r3, r7, r5
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
    }

    rxByte |= (rxBit << i);
 800187e:	230d      	movs	r3, #13
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	210e      	movs	r1, #14
 8001886:	187b      	adds	r3, r7, r1
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	b25a      	sxtb	r2, r3
 8001890:	200f      	movs	r0, #15
 8001892:	183b      	adds	r3, r7, r0
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b25b      	sxtb	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	b25a      	sxtb	r2, r3
 800189c:	183b      	adds	r3, r7, r0
 800189e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < ONEWIRE_BITS_NUM; i++)
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	3201      	adds	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	230e      	movs	r3, #14
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b07      	cmp	r3, #7
 80018b2:	d9c1      	bls.n	8001838 <OneWire_ProcessByte+0x20>
  }

  return rxByte;
 80018b4:	230f      	movs	r3, #15
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	781b      	ldrb	r3, [r3, #0]
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b005      	add	sp, #20
 80018c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018c2 <OneWire_Reset>:



/*----------------------------------------------------------------------------*/
ONEWIRE_Status OneWire_Reset(UART_HandleTypeDef *huart)
{
 80018c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  ONEWIRE_Status status = ONEWIRE_OK;
 80018ca:	260f      	movs	r6, #15
 80018cc:	19bb      	adds	r3, r7, r6
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
  uint8_t txByte = ONEWIRE_RESET_BYTE;
 80018d2:	240e      	movs	r4, #14
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	22f0      	movs	r2, #240	@ 0xf0
 80018d8:	701a      	strb	r2, [r3, #0]
  uint8_t rxByte = 0x00;
 80018da:	250d      	movs	r5, #13
 80018dc:	197b      	adds	r3, r7, r5
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]

  SetBaudrate(huart, ONEWIRE_RESET_BAUDRATE);
 80018e2:	2396      	movs	r3, #150	@ 0x96
 80018e4:	019a      	lsls	r2, r3, #6
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff fc8e 	bl	800120c <SetBaudrate>

  HAL_UART_Transmit(huart, &txByte, 1, ONEWIRE_UART_TIMEOUT);
 80018f0:	1939      	adds	r1, r7, r4
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	230a      	movs	r3, #10
 80018f6:	2201      	movs	r2, #1
 80018f8:	f001 fd06 	bl	8003308 <HAL_UART_Transmit>
  HAL_UART_Receive(huart, &rxByte, 1, ONEWIRE_UART_TIMEOUT);
 80018fc:	1979      	adds	r1, r7, r5
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	230a      	movs	r3, #10
 8001902:	2201      	movs	r2, #1
 8001904:	f001 fda4 	bl	8003450 <HAL_UART_Receive>

  SetBaudrate(huart, ONEWIRE_BAUDRATE);
 8001908:	23e1      	movs	r3, #225	@ 0xe1
 800190a:	025a      	lsls	r2, r3, #9
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff fc7b 	bl	800120c <SetBaudrate>

  if (rxByte == txByte)
 8001916:	197b      	adds	r3, r7, r5
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	193b      	adds	r3, r7, r4
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d102      	bne.n	8001928 <OneWire_Reset+0x66>
  {
    status = ONEWIRE_ERROR;
 8001922:	19bb      	adds	r3, r7, r6
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001928:	230f      	movs	r3, #15
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	781b      	ldrb	r3, [r3, #0]
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b005      	add	sp, #20
 8001934:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <HAL_MspInit+0x44>)
 8001940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_MspInit+0x44>)
 8001944:	2101      	movs	r1, #1
 8001946:	430a      	orrs	r2, r1
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <HAL_MspInit+0x44>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_MspInit+0x44>)
 8001958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_MspInit+0x44>)
 800195c:	2180      	movs	r1, #128	@ 0x80
 800195e:	0549      	lsls	r1, r1, #21
 8001960:	430a      	orrs	r2, r1
 8001962:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_MspInit+0x44>)
 8001966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	055b      	lsls	r3, r3, #21
 800196c:	4013      	ands	r3, r2
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b002      	add	sp, #8
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b093      	sub	sp, #76	@ 0x4c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	2334      	movs	r3, #52	@ 0x34
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	0018      	movs	r0, r3
 800198e:	2314      	movs	r3, #20
 8001990:	001a      	movs	r2, r3
 8001992:	2100      	movs	r1, #0
 8001994:	f003 fa54 	bl	8004e40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	2418      	movs	r4, #24
 800199a:	193b      	adds	r3, r7, r4
 800199c:	0018      	movs	r0, r3
 800199e:	231c      	movs	r3, #28
 80019a0:	001a      	movs	r2, r3
 80019a2:	2100      	movs	r1, #0
 80019a4:	f003 fa4c 	bl	8004e40 <memset>
  if(huart->Instance==USART1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001b60 <HAL_UART_MspInit+0x1e0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d13f      	bne.n	8001a32 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	0018      	movs	r0, r3
 80019c2:	f001 fb01 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d001      	beq.n	80019ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019ca:	f7ff fc19 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ce:	4b65      	ldr	r3, [pc, #404]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 80019d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019d2:	4b64      	ldr	r3, [pc, #400]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	01c9      	lsls	r1, r1, #7
 80019d8:	430a      	orrs	r2, r1
 80019da:	641a      	str	r2, [r3, #64]	@ 0x40
 80019dc:	4b61      	ldr	r3, [pc, #388]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 80019de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 80019ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 80019f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a02:	2134      	movs	r1, #52	@ 0x34
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2212      	movs	r2, #18
 8001a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2201      	movs	r2, #1
 8001a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2204      	movs	r2, #4
 8001a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	187a      	adds	r2, r7, r1
 8001a24:	23a0      	movs	r3, #160	@ 0xa0
 8001a26:	05db      	lsls	r3, r3, #23
 8001a28:	0011      	movs	r1, r2
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fdc8 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a30:	e091      	b.n	8001b56 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a4c      	ldr	r2, [pc, #304]	@ (8001b68 <HAL_UART_MspInit+0x1e8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d000      	beq.n	8001a3e <HAL_UART_MspInit+0xbe>
 8001a3c:	e08b      	b.n	8001b56 <HAL_UART_MspInit+0x1d6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3e:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 8001a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a42:	4b48      	ldr	r3, [pc, #288]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	0289      	lsls	r1, r1, #10
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a4c:	4b45      	ldr	r3, [pc, #276]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 8001a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b42      	ldr	r3, [pc, #264]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 8001a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a5e:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a66:	4b3f      	ldr	r3, [pc, #252]	@ (8001b64 <HAL_UART_MspInit+0x1e4>)
 8001a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a72:	2134      	movs	r1, #52	@ 0x34
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2201      	movs	r2, #1
 8001a90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	187a      	adds	r2, r7, r1
 8001a94:	23a0      	movs	r3, #160	@ 0xa0
 8001a96:	05db      	lsls	r3, r3, #23
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 fd90 	bl	80025c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001aa0:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001aa2:	4a33      	ldr	r2, [pc, #204]	@ (8001b70 <HAL_UART_MspInit+0x1f0>)
 8001aa4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001aa6:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001aa8:	2234      	movs	r2, #52	@ 0x34
 8001aaa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001aba:	2280      	movs	r2, #128	@ 0x80
 8001abc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001abe:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001aca:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 fa41 	bl	8001f60 <HAL_DMA_Init>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8001ae2:	f7ff fb8d 	bl	8001200 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001aec:	505a      	str	r2, [r3, r1]
 8001aee:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <HAL_UART_MspInit+0x1ec>)
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001af6:	4a20      	ldr	r2, [pc, #128]	@ (8001b78 <HAL_UART_MspInit+0x1f8>)
 8001af8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001afc:	2235      	movs	r2, #53	@ 0x35
 8001afe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b02:	2210      	movs	r2, #16
 8001b04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 fa17 	bl	8001f60 <HAL_DMA_Init>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8001b36:	f7ff fb63 	bl	8001200 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b3e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <HAL_UART_MspInit+0x1f4>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f000 f9d6 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b50:	201c      	movs	r0, #28
 8001b52:	f000 f9e8 	bl	8001f26 <HAL_NVIC_EnableIRQ>
}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b013      	add	sp, #76	@ 0x4c
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	20000164 	.word	0x20000164
 8001b70:	40020008 	.word	0x40020008
 8001b74:	200001c0 	.word	0x200001c0
 8001b78:	4002001c 	.word	0x4002001c

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b80:	46c0      	nop			@ (mov r8, r8)
 8001b82:	e7fd      	b.n	8001b80 <NMI_Handler+0x4>

08001b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	e7fd      	b.n	8001b88 <HardFault_Handler+0x4>

08001b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f8be 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <DMA1_Channel1_IRQHandler+0x14>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 fbc0 	bl	800233c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	20000164 	.word	0x20000164

08001bc8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <DMA1_Channel2_3_IRQHandler+0x14>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 fbb4 	bl	800233c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	200001c0 	.word	0x200001c0

08001be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <USART2_IRQHandler+0x14>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f001 fe02 	bl	80037f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	200000d0 	.word	0x200000d0

08001bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bfc:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <SystemInit+0x14>)
 8001bfe:	2280      	movs	r2, #128	@ 0x80
 8001c00:	0512      	lsls	r2, r2, #20
 8001c02:	609a      	str	r2, [r3, #8]
#endif
}
 8001c04:	46c0      	nop			@ (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c10:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c14:	f7ff fff0 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c1a:	e003      	b.n	8001c24 <LoopCopyDataInit>

08001c1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001c1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c22:	3104      	adds	r1, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c24:	480a      	ldr	r0, [pc, #40]	@ (8001c50 <LoopForever+0xa>)
  ldr r3, =_edata
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <LoopForever+0xe>)
  adds r2, r0, r1
 8001c28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c2c:	d3f6      	bcc.n	8001c1c <CopyDataInit>
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <LoopForever+0x12>)
  b LoopFillZerobss
 8001c30:	e002      	b.n	8001c38 <LoopFillZerobss>

08001c32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  str  r3, [r2]
 8001c34:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c36:	3204      	adds	r2, #4

08001c38 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <LoopForever+0x16>)
  cmp r2, r3
 8001c3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c3c:	d3f9      	bcc.n	8001c32 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001c3e:	f003 f907 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c42:	f7ff f8f9 	bl	8000e38 <main>

08001c46 <LoopForever>:

LoopForever:
    b LoopForever
 8001c46:	e7fe      	b.n	8001c46 <LoopForever>
  ldr   r0, =_estack
 8001c48:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001c4c:	08004f9c 	.word	0x08004f9c
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c54:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 8001c58:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8001c5c:	20000248 	.word	0x20000248

08001c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_IRQHandler>

08001c62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6e:	2003      	movs	r0, #3
 8001c70:	f000 f80e 	bl	8001c90 <HAL_InitTick>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001c78:	1dfb      	adds	r3, r7, #7
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e001      	b.n	8001c84 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c80:	f7ff fe5a 	bl	8001938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	781b      	ldrb	r3, [r3, #0]
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c98:	230f      	movs	r3, #15
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <HAL_InitTick+0x88>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d02b      	beq.n	8001d00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <HAL_InitTick+0x8c>)
 8001caa:	681c      	ldr	r4, [r3, #0]
 8001cac:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <HAL_InitTick+0x88>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	23fa      	movs	r3, #250	@ 0xfa
 8001cb4:	0098      	lsls	r0, r3, #2
 8001cb6:	f7fe fa27 	bl	8000108 <__udivsi3>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	f7fe fa22 	bl	8000108 <__udivsi3>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f93d 	bl	8001f46 <HAL_SYSTICK_Config>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d112      	bne.n	8001cf6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d80a      	bhi.n	8001cec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	425b      	negs	r3, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 f90c 	bl	8001efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d20 <HAL_InitTick+0x90>)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e00d      	b.n	8001d08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001cec:	230f      	movs	r3, #15
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e008      	b.n	8001d08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e003      	b.n	8001d08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d00:	230f      	movs	r3, #15
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d08:	230f      	movs	r3, #15
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b005      	add	sp, #20
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	2000001c 	.word	0x2000001c
 8001d1c:	20000014 	.word	0x20000014
 8001d20:	20000018 	.word	0x20000018

08001d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_IncTick+0x1c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	18d2      	adds	r2, r2, r3
 8001d34:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <HAL_IncTick+0x20>)
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	46c0      	nop			@ (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	2000001c 	.word	0x2000001c
 8001d44:	20000244 	.word	0x20000244

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b02      	ldr	r3, [pc, #8]	@ (8001d58 <HAL_GetTick+0x10>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	20000244 	.word	0x20000244

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3301      	adds	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	f7ff ffe0 	bl	8001d48 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b004      	add	sp, #16
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	2000001c 	.word	0x2000001c

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	0002      	movs	r2, r0
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001db6:	d809      	bhi.n	8001dcc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <__NVIC_EnableIRQ+0x30>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4091      	lsls	r1, r2
 8001dc8:	000a      	movs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001dcc:	46c0      	nop			@ (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	0002      	movs	r2, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dec:	d828      	bhi.n	8001e40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dee:	4a2f      	ldr	r2, [pc, #188]	@ (8001eac <__NVIC_SetPriority+0xd4>)
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	33c0      	adds	r3, #192	@ 0xc0
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	589b      	ldr	r3, [r3, r2]
 8001dfe:	1dfa      	adds	r2, r7, #7
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	0011      	movs	r1, r2
 8001e04:	2203      	movs	r2, #3
 8001e06:	400a      	ands	r2, r1
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	21ff      	movs	r1, #255	@ 0xff
 8001e0c:	4091      	lsls	r1, r2
 8001e0e:	000a      	movs	r2, r1
 8001e10:	43d2      	mvns	r2, r2
 8001e12:	401a      	ands	r2, r3
 8001e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	22ff      	movs	r2, #255	@ 0xff
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	2303      	movs	r3, #3
 8001e26:	4003      	ands	r3, r0
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2c:	481f      	ldr	r0, [pc, #124]	@ (8001eac <__NVIC_SetPriority+0xd4>)
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	430a      	orrs	r2, r1
 8001e38:	33c0      	adds	r3, #192	@ 0xc0
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3e:	e031      	b.n	8001ea4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e40:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <__NVIC_SetPriority+0xd8>)
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	0019      	movs	r1, r3
 8001e48:	230f      	movs	r3, #15
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3306      	adds	r3, #6
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	18d3      	adds	r3, r2, r3
 8001e56:	3304      	adds	r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1dfa      	adds	r2, r7, #7
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	0011      	movs	r1, r2
 8001e60:	2203      	movs	r2, #3
 8001e62:	400a      	ands	r2, r1
 8001e64:	00d2      	lsls	r2, r2, #3
 8001e66:	21ff      	movs	r1, #255	@ 0xff
 8001e68:	4091      	lsls	r1, r2
 8001e6a:	000a      	movs	r2, r1
 8001e6c:	43d2      	mvns	r2, r2
 8001e6e:	401a      	ands	r2, r3
 8001e70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	22ff      	movs	r2, #255	@ 0xff
 8001e78:	401a      	ands	r2, r3
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	2303      	movs	r3, #3
 8001e82:	4003      	ands	r3, r0
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e88:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <__NVIC_SetPriority+0xd8>)
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	001c      	movs	r4, r3
 8001e90:	230f      	movs	r3, #15
 8001e92:	4023      	ands	r3, r4
 8001e94:	3b08      	subs	r3, #8
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	3306      	adds	r3, #6
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	18c3      	adds	r3, r0, r3
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	46c0      	nop			@ (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b003      	add	sp, #12
 8001eaa:	bd90      	pop	{r4, r7, pc}
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	045b      	lsls	r3, r3, #17
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d301      	bcc.n	8001ecc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e010      	b.n	8001eee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <SysTick_Config+0x44>)
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	3a01      	subs	r2, #1
 8001ed2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	2103      	movs	r1, #3
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff ff7c 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <SysTick_Config+0x44>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <SysTick_Config+0x44>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	210f      	movs	r1, #15
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	1c02      	adds	r2, r0, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ffaf 	bl	8001eb4 <SysTick_Config>
 8001f56:	0003      	movs	r3, r0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e077      	b.n	8002062 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	@ (800206c <HAL_DMA_Init+0x10c>)
 8001f78:	4694      	mov	ip, r2
 8001f7a:	4463      	add	r3, ip
 8001f7c:	2114      	movs	r1, #20
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7fe f8c2 	bl	8000108 <__udivsi3>
 8001f84:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001f86:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2225      	movs	r2, #37	@ 0x25
 8001f90:	2102      	movs	r1, #2
 8001f92:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4934      	ldr	r1, [pc, #208]	@ (8002070 <HAL_DMA_Init+0x110>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fa9f 	bl	8002520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	01db      	lsls	r3, r3, #7
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d102      	bne.n	8001ff4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	21ff      	movs	r1, #255	@ 0xff
 8001ffe:	400a      	ands	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800200a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d011      	beq.n	8002038 <HAL_DMA_Init+0xd8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d80d      	bhi.n	8002038 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 faaa 	bl	8002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e008      	b.n	800204a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2225      	movs	r2, #37	@ 0x25
 8002054:	2101      	movs	r1, #1
 8002056:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	@ 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	bffdfff8 	.word	0xbffdfff8
 8002070:	ffff800f 	.word	0xffff800f

08002074 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002082:	2317      	movs	r3, #23
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2224      	movs	r2, #36	@ 0x24
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_DMA_Start_IT+0x24>
 8002094:	2302      	movs	r3, #2
 8002096:	e070      	b.n	800217a <HAL_DMA_Start_IT+0x106>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2224      	movs	r2, #36	@ 0x24
 800209c:	2101      	movs	r1, #1
 800209e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2225      	movs	r2, #37	@ 0x25
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d157      	bne.n	800215c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2225      	movs	r2, #37	@ 0x25
 80020b0:	2102      	movs	r1, #2
 80020b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	438a      	bics	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f9e5 	bl	80024a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	210e      	movs	r1, #14
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00f      	b.n	8002110 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2104      	movs	r1, #4
 80020fc:	438a      	bics	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	210a      	movs	r1, #10
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	4013      	ands	r3, r2
 800211c:	d008      	beq.n	8002130 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	0049      	lsls	r1, r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	0049      	lsls	r1, r1, #1
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e007      	b.n	800216c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2224      	movs	r2, #36	@ 0x24
 8002160:	2100      	movs	r1, #0
 8002162:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002164:	2317      	movs	r3, #23
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2202      	movs	r2, #2
 800216a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]

  return status;
 8002174:	2317      	movs	r3, #23
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	781b      	ldrb	r3, [r3, #0]
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b006      	add	sp, #24
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e050      	b.n	8002238 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2225      	movs	r2, #37	@ 0x25
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d008      	beq.n	80021b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2204      	movs	r2, #4
 80021a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	@ 0x24
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e041      	b.n	8002238 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	210e      	movs	r1, #14
 80021c0:	438a      	bics	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	491c      	ldr	r1, [pc, #112]	@ (8002240 <HAL_DMA_Abort+0xbc>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80021e4:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <HAL_DMA_Abort+0xc0>)
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	221c      	movs	r2, #28
 80021ee:	4013      	ands	r3, r2
 80021f0:	2201      	movs	r2, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <HAL_DMA_Abort+0xc0>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002202:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00c      	beq.n	8002226 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002216:	490a      	ldr	r1, [pc, #40]	@ (8002240 <HAL_DMA_Abort+0xbc>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002224:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2225      	movs	r2, #37	@ 0x25
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2224      	movs	r2, #36	@ 0x24
 8002232:	2100      	movs	r1, #0
 8002234:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}
 8002240:	fffffeff 	.word	0xfffffeff
 8002244:	40020000 	.word	0x40020000

08002248 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	230f      	movs	r3, #15
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2224      	movs	r2, #36	@ 0x24
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	@ 0x24
 8002264:	5c9b      	ldrb	r3, [r3, r2]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_DMA_Abort_IT+0x26>
 800226a:	2302      	movs	r3, #2
 800226c:	e05e      	b.n	800232c <HAL_DMA_Abort_IT+0xe4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2224      	movs	r2, #36	@ 0x24
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2225      	movs	r2, #37	@ 0x25
 800227a:	5c9b      	ldrb	r3, [r3, r2]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d007      	beq.n	8002292 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2204      	movs	r2, #4
 8002286:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002288:	230f      	movs	r3, #15
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e049      	b.n	8002326 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	210e      	movs	r1, #14
 800229e:	438a      	bics	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	438a      	bics	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022bc:	491d      	ldr	r1, [pc, #116]	@ (8002334 <HAL_DMA_Abort_IT+0xec>)
 80022be:	400a      	ands	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <HAL_DMA_Abort_IT+0xf0>)
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	221c      	movs	r2, #28
 80022cc:	4013      	ands	r3, r2
 80022ce:	2201      	movs	r2, #1
 80022d0:	409a      	lsls	r2, r3
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_DMA_Abort_IT+0xf0>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f4:	490f      	ldr	r1, [pc, #60]	@ (8002334 <HAL_DMA_Abort_IT+0xec>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002302:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2225      	movs	r2, #37	@ 0x25
 8002308:	2101      	movs	r1, #1
 800230a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2224      	movs	r2, #36	@ 0x24
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	0010      	movs	r0, r2
 8002324:	4798      	blx	r3
    }
  }
  return status;
 8002326:	230f      	movs	r3, #15
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}
 8002334:	fffffeff 	.word	0xfffffeff
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002344:	4b55      	ldr	r3, [pc, #340]	@ (800249c <HAL_DMA_IRQHandler+0x160>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	221c      	movs	r2, #28
 8002358:	4013      	ands	r3, r2
 800235a:	2204      	movs	r2, #4
 800235c:	409a      	lsls	r2, r3
 800235e:	0013      	movs	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x7a>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2204      	movs	r2, #4
 800236a:	4013      	ands	r3, r2
 800236c:	d023      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	4013      	ands	r3, r2
 8002378:	d107      	bne.n	800238a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2104      	movs	r1, #4
 8002386:	438a      	bics	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800238a:	4b44      	ldr	r3, [pc, #272]	@ (800249c <HAL_DMA_IRQHandler+0x160>)
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	221c      	movs	r2, #28
 8002394:	4013      	ands	r3, r2
 8002396:	2204      	movs	r2, #4
 8002398:	409a      	lsls	r2, r3
 800239a:	4b40      	ldr	r3, [pc, #256]	@ (800249c <HAL_DMA_IRQHandler+0x160>)
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d100      	bne.n	80023aa <HAL_DMA_IRQHandler+0x6e>
 80023a8:	e073      	b.n	8002492 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	0010      	movs	r0, r2
 80023b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023b4:	e06d      	b.n	8002492 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	221c      	movs	r2, #28
 80023bc:	4013      	ands	r3, r2
 80023be:	2202      	movs	r2, #2
 80023c0:	409a      	lsls	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	d02e      	beq.n	8002428 <HAL_DMA_IRQHandler+0xec>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d02a      	beq.n	8002428 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2220      	movs	r2, #32
 80023da:	4013      	ands	r3, r2
 80023dc:	d10b      	bne.n	80023f6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	210a      	movs	r1, #10
 80023ea:	438a      	bics	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2225      	movs	r2, #37	@ 0x25
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80023f6:	4b29      	ldr	r3, [pc, #164]	@ (800249c <HAL_DMA_IRQHandler+0x160>)
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	221c      	movs	r2, #28
 8002400:	4013      	ands	r3, r2
 8002402:	2202      	movs	r2, #2
 8002404:	409a      	lsls	r2, r3
 8002406:	4b25      	ldr	r3, [pc, #148]	@ (800249c <HAL_DMA_IRQHandler+0x160>)
 8002408:	430a      	orrs	r2, r1
 800240a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2224      	movs	r2, #36	@ 0x24
 8002410:	2100      	movs	r1, #0
 8002412:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03a      	beq.n	8002492 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	0010      	movs	r0, r2
 8002424:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002426:	e034      	b.n	8002492 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	221c      	movs	r2, #28
 800242e:	4013      	ands	r3, r2
 8002430:	2208      	movs	r2, #8
 8002432:	409a      	lsls	r2, r3
 8002434:	0013      	movs	r3, r2
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	d02b      	beq.n	8002494 <HAL_DMA_IRQHandler+0x158>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2208      	movs	r2, #8
 8002440:	4013      	ands	r3, r2
 8002442:	d027      	beq.n	8002494 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	210e      	movs	r1, #14
 8002450:	438a      	bics	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002454:	4b11      	ldr	r3, [pc, #68]	@ (800249c <HAL_DMA_IRQHandler+0x160>)
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	221c      	movs	r2, #28
 800245e:	4013      	ands	r3, r2
 8002460:	2201      	movs	r2, #1
 8002462:	409a      	lsls	r2, r3
 8002464:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <HAL_DMA_IRQHandler+0x160>)
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2225      	movs	r2, #37	@ 0x25
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	@ 0x24
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	0010      	movs	r0, r2
 8002490:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46c0      	nop			@ (mov r8, r8)
}
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020000 	.word	0x40020000

080024a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80024c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <DMA_SetConfig+0x7c>)
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	221c      	movs	r2, #28
 80024d4:	4013      	ands	r3, r2
 80024d6:	2201      	movs	r2, #1
 80024d8:	409a      	lsls	r2, r3
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <DMA_SetConfig+0x7c>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d108      	bne.n	8002502 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002500:	e007      	b.n	8002512 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	60da      	str	r2, [r3, #12]
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	40020000 	.word	0x40020000

08002520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	001a      	movs	r2, r3
 800252e:	23ff      	movs	r3, #255	@ 0xff
 8002530:	4013      	ands	r3, r2
 8002532:	3b08      	subs	r3, #8
 8002534:	2114      	movs	r1, #20
 8002536:	0018      	movs	r0, r3
 8002538:	f7fd fde6 	bl	8000108 <__udivsi3>
 800253c:	0003      	movs	r3, r0
 800253e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002548:	4694      	mov	ip, r2
 800254a:	4463      	add	r3, ip
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	001a      	movs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002558:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	221c      	movs	r2, #28
 800255e:	4013      	ands	r3, r2
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b004      	add	sp, #16
 800256e:	bd80      	pop	{r7, pc}
 8002570:	10008200 	.word	0x10008200
 8002574:	40020880 	.word	0x40020880

08002578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	22ff      	movs	r2, #255	@ 0xff
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	001a      	movs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	4013      	ands	r3, r2
 80025a8:	2201      	movs	r2, #1
 80025aa:	409a      	lsls	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b004      	add	sp, #16
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	1000823f 	.word	0x1000823f
 80025bc:	40020940 	.word	0x40020940

080025c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025ce:	e153      	b.n	8002878 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4091      	lsls	r1, r2
 80025da:	000a      	movs	r2, r1
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d100      	bne.n	80025e8 <HAL_GPIO_Init+0x28>
 80025e6:	e144      	b.n	8002872 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x38>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b12      	cmp	r3, #18
 80025f6:	d125      	bne.n	8002644 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	58d3      	ldr	r3, [r2, r3]
 8002604:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2207      	movs	r2, #7
 800260a:	4013      	ands	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	220f      	movs	r2, #15
 8002610:	409a      	lsls	r2, r3
 8002612:	0013      	movs	r3, r2
 8002614:	43da      	mvns	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	4013      	ands	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	220f      	movs	r2, #15
 8002622:	401a      	ands	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2107      	movs	r1, #7
 8002628:	400b      	ands	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	6979      	ldr	r1, [r7, #20]
 8002642:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	409a      	lsls	r2, r3
 8002652:	0013      	movs	r3, r2
 8002654:	43da      	mvns	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2203      	movs	r2, #3
 8002662:	401a      	ands	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	409a      	lsls	r2, r3
 800266a:	0013      	movs	r3, r2
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d00b      	beq.n	8002698 <HAL_GPIO_Init+0xd8>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d007      	beq.n	8002698 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800268c:	2b11      	cmp	r3, #17
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b12      	cmp	r3, #18
 8002696:	d130      	bne.n	80026fa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	409a      	lsls	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	43da      	mvns	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	4013      	ands	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	0013      	movs	r3, r2
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ce:	2201      	movs	r2, #1
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	409a      	lsls	r2, r3
 80026d4:	0013      	movs	r3, r2
 80026d6:	43da      	mvns	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	4013      	ands	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	2201      	movs	r2, #1
 80026e6:	401a      	ands	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	409a      	lsls	r2, r3
 80026ec:	0013      	movs	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d017      	beq.n	8002732 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	43da      	mvns	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	4013      	ands	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	055b      	lsls	r3, r3, #21
 800273a:	4013      	ands	r3, r2
 800273c:	d100      	bne.n	8002740 <HAL_GPIO_Init+0x180>
 800273e:	e098      	b.n	8002872 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002740:	4a53      	ldr	r2, [pc, #332]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3318      	adds	r3, #24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	589b      	ldr	r3, [r3, r2]
 800274c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2203      	movs	r2, #3
 8002752:	4013      	ands	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	220f      	movs	r2, #15
 8002758:	409a      	lsls	r2, r3
 800275a:	0013      	movs	r3, r2
 800275c:	43da      	mvns	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	23a0      	movs	r3, #160	@ 0xa0
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	429a      	cmp	r2, r3
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x1e2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a48      	ldr	r2, [pc, #288]	@ (8002894 <HAL_GPIO_Init+0x2d4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x1de>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a47      	ldr	r2, [pc, #284]	@ (8002898 <HAL_GPIO_Init+0x2d8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x1da>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a46      	ldr	r2, [pc, #280]	@ (800289c <HAL_GPIO_Init+0x2dc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x1d6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a45      	ldr	r2, [pc, #276]	@ (80028a0 <HAL_GPIO_Init+0x2e0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x1d2>
 800278e:	2305      	movs	r3, #5
 8002790:	e008      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 8002792:	2306      	movs	r3, #6
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 8002796:	2303      	movs	r3, #3
 8002798:	e004      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 800279a:	2302      	movs	r3, #2
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x1e4>
 80027a2:	2300      	movs	r3, #0
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	2103      	movs	r1, #3
 80027a8:	400a      	ands	r2, r1
 80027aa:	00d2      	lsls	r2, r2, #3
 80027ac:	4093      	lsls	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80027b4:	4936      	ldr	r1, [pc, #216]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3318      	adds	r3, #24
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80027c2:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	58d3      	ldr	r3, [r2, r3]
 80027c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43da      	mvns	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4013      	ands	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	4013      	ands	r3, r2
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80027e8:	4929      	ldr	r1, [pc, #164]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027ea:	2280      	movs	r2, #128	@ 0x80
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80027f0:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 80027f2:	2384      	movs	r3, #132	@ 0x84
 80027f4:	58d3      	ldr	r3, [r2, r3]
 80027f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	43da      	mvns	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4013      	ands	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	4013      	ands	r3, r2
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002816:	491e      	ldr	r1, [pc, #120]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002818:	2284      	movs	r2, #132	@ 0x84
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800281e:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43da      	mvns	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4013      	ands	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	035b      	lsls	r3, r3, #13
 8002836:	4013      	ands	r3, r2
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43da      	mvns	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	039b      	lsls	r3, r3, #14
 8002860:	4013      	ands	r3, r2
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800286c:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HAL_GPIO_Init+0x2d0>)
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	3301      	adds	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	40da      	lsrs	r2, r3
 8002880:	1e13      	subs	r3, r2, #0
 8002882:	d000      	beq.n	8002886 <HAL_GPIO_Init+0x2c6>
 8002884:	e6a4      	b.n	80025d0 <HAL_GPIO_Init+0x10>
  }
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	46c0      	nop			@ (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b006      	add	sp, #24
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021800 	.word	0x40021800
 8002894:	50000400 	.word	0x50000400
 8002898:	50000800 	.word	0x50000800
 800289c:	50000c00 	.word	0x50000c00
 80028a0:	50001400 	.word	0x50001400

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	0008      	movs	r0, r1
 80028ae:	0011      	movs	r1, r2
 80028b0:	1cbb      	adds	r3, r7, #2
 80028b2:	1c02      	adds	r2, r0, #0
 80028b4:	801a      	strh	r2, [r3, #0]
 80028b6:	1c7b      	adds	r3, r7, #1
 80028b8:	1c0a      	adds	r2, r1, #0
 80028ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028bc:	1c7b      	adds	r3, r7, #1
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028c4:	1cbb      	adds	r3, r7, #2
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028cc:	e003      	b.n	80028d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ce:	1cbb      	adds	r3, r7, #2
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1d0      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	d100      	bne.n	80028fe <HAL_RCC_OscConfig+0x1e>
 80028fc:	e069      	b.n	80029d2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fe:	4bc8      	ldr	r3, [pc, #800]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2238      	movs	r2, #56	@ 0x38
 8002904:	4013      	ands	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b08      	cmp	r3, #8
 800290c:	d105      	bne.n	800291a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d15d      	bne.n	80029d2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1bc      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	2380      	movs	r3, #128	@ 0x80
 8002920:	025b      	lsls	r3, r3, #9
 8002922:	429a      	cmp	r2, r3
 8002924:	d107      	bne.n	8002936 <HAL_RCC_OscConfig+0x56>
 8002926:	4bbe      	ldr	r3, [pc, #760]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4bbd      	ldr	r3, [pc, #756]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 800292c:	2180      	movs	r1, #128	@ 0x80
 800292e:	0249      	lsls	r1, r1, #9
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e020      	b.n	8002978 <HAL_RCC_OscConfig+0x98>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	23a0      	movs	r3, #160	@ 0xa0
 800293c:	02db      	lsls	r3, r3, #11
 800293e:	429a      	cmp	r2, r3
 8002940:	d10e      	bne.n	8002960 <HAL_RCC_OscConfig+0x80>
 8002942:	4bb7      	ldr	r3, [pc, #732]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4bb6      	ldr	r3, [pc, #728]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002948:	2180      	movs	r1, #128	@ 0x80
 800294a:	02c9      	lsls	r1, r1, #11
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	4bb3      	ldr	r3, [pc, #716]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4bb2      	ldr	r3, [pc, #712]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002956:	2180      	movs	r1, #128	@ 0x80
 8002958:	0249      	lsls	r1, r1, #9
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0x98>
 8002960:	4baf      	ldr	r3, [pc, #700]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4bae      	ldr	r3, [pc, #696]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002966:	49af      	ldr	r1, [pc, #700]	@ (8002c24 <HAL_RCC_OscConfig+0x344>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4bac      	ldr	r3, [pc, #688]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4bab      	ldr	r3, [pc, #684]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002972:	49ad      	ldr	r1, [pc, #692]	@ (8002c28 <HAL_RCC_OscConfig+0x348>)
 8002974:	400a      	ands	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d014      	beq.n	80029aa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff f9e2 	bl	8001d48 <HAL_GetTick>
 8002984:	0003      	movs	r3, r0
 8002986:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800298a:	f7ff f9dd 	bl	8001d48 <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	@ 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e17b      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800299c:	4ba0      	ldr	r3, [pc, #640]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	029b      	lsls	r3, r3, #10
 80029a4:	4013      	ands	r3, r2
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0xaa>
 80029a8:	e013      	b.n	80029d2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7ff f9cd 	bl	8001d48 <HAL_GetTick>
 80029ae:	0003      	movs	r3, r0
 80029b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80029b4:	f7ff f9c8 	bl	8001d48 <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e166      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029c6:	4b96      	ldr	r3, [pc, #600]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	@ 0x80
 80029cc:	029b      	lsls	r3, r3, #10
 80029ce:	4013      	ands	r3, r2
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2202      	movs	r2, #2
 80029d8:	4013      	ands	r3, r2
 80029da:	d100      	bne.n	80029de <HAL_RCC_OscConfig+0xfe>
 80029dc:	e086      	b.n	8002aec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4b90      	ldr	r3, [pc, #576]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2238      	movs	r2, #56	@ 0x38
 80029e4:	4013      	ands	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d12f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e14c      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b89      	ldr	r3, [pc, #548]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a8b      	ldr	r2, [pc, #556]	@ (8002c2c <HAL_RCC_OscConfig+0x34c>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	021a      	lsls	r2, r3, #8
 8002a0a:	4b85      	ldr	r3, [pc, #532]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d112      	bne.n	8002a3c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a16:	4b82      	ldr	r3, [pc, #520]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a85      	ldr	r2, [pc, #532]	@ (8002c30 <HAL_RCC_OscConfig+0x350>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	4b7e      	ldr	r3, [pc, #504]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0adb      	lsrs	r3, r3, #11
 8002a30:	2207      	movs	r2, #7
 8002a32:	4013      	ands	r3, r2
 8002a34:	4a7f      	ldr	r2, [pc, #508]	@ (8002c34 <HAL_RCC_OscConfig+0x354>)
 8002a36:	40da      	lsrs	r2, r3
 8002a38:	4b7f      	ldr	r3, [pc, #508]	@ (8002c38 <HAL_RCC_OscConfig+0x358>)
 8002a3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a3c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c3c <HAL_RCC_OscConfig+0x35c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7ff f925 	bl	8001c90 <HAL_InitTick>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d050      	beq.n	8002aec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e122      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d030      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a56:	4b72      	ldr	r3, [pc, #456]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a75      	ldr	r2, [pc, #468]	@ (8002c30 <HAL_RCC_OscConfig+0x350>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	4b6e      	ldr	r3, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a70:	2180      	movs	r1, #128	@ 0x80
 8002a72:	0049      	lsls	r1, r1, #1
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff f966 	bl	8001d48 <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002a82:	f7ff f961 	bl	8001d48 <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0ff      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a94:	4b62      	ldr	r3, [pc, #392]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a61      	ldr	r2, [pc, #388]	@ (8002c2c <HAL_RCC_OscConfig+0x34c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	e019      	b.n	8002aec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002ab8:	4b59      	ldr	r3, [pc, #356]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b58      	ldr	r3, [pc, #352]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002abe:	4960      	ldr	r1, [pc, #384]	@ (8002c40 <HAL_RCC_OscConfig+0x360>)
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f940 	bl	8001d48 <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002ace:	f7ff f93b 	bl	8001d48 <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0d9      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2208      	movs	r2, #8
 8002af2:	4013      	ands	r3, r2
 8002af4:	d042      	beq.n	8002b7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002af6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2238      	movs	r2, #56	@ 0x38
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b18      	cmp	r3, #24
 8002b00:	d105      	bne.n	8002b0e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d138      	bne.n	8002b7c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0c2      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d019      	beq.n	8002b4a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b16:	4b42      	ldr	r3, [pc, #264]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002b18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b1a:	4b41      	ldr	r3, [pc, #260]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7ff f911 	bl	8001d48 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002b2c:	f7ff f90c 	bl	8001d48 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0aa      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b3e:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d0f1      	beq.n	8002b2c <HAL_RCC_OscConfig+0x24c>
 8002b48:	e018      	b.n	8002b7c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b4a:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002b4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b4e:	4b34      	ldr	r3, [pc, #208]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	438a      	bics	r2, r1
 8002b54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7ff f8f7 	bl	8001d48 <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002b60:	f7ff f8f2 	bl	8001d48 <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e090      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002b72:	4b2b      	ldr	r3, [pc, #172]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d1f1      	bne.n	8002b60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2204      	movs	r2, #4
 8002b82:	4013      	ands	r3, r2
 8002b84:	d100      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2a8>
 8002b86:	e084      	b.n	8002c92 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b88:	230f      	movs	r3, #15
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002b90:	4b23      	ldr	r3, [pc, #140]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2238      	movs	r2, #56	@ 0x38
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d000      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2c6>
 8002ba4:	e075      	b.n	8002c92 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e074      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x2e0>
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bbe:	e01c      	b.n	8002bfa <HAL_RCC_OscConfig+0x31a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d10c      	bne.n	8002be2 <HAL_RCC_OscConfig+0x302>
 8002bc8:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bcc:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bce:	2104      	movs	r1, #4
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bd8:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002be0:	e00b      	b.n	8002bfa <HAL_RCC_OscConfig+0x31a>
 8002be2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002be4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	438a      	bics	r2, r1
 8002bec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bee:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <HAL_RCC_OscConfig+0x340>)
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d028      	beq.n	8002c54 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7ff f8a1 	bl	8001d48 <HAL_GetTick>
 8002c06:	0003      	movs	r3, r0
 8002c08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7ff f89c 	bl	8001d48 <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <HAL_RCC_OscConfig+0x364>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d915      	bls.n	8002c48 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e039      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
 8002c20:	40021000 	.word	0x40021000
 8002c24:	fffeffff 	.word	0xfffeffff
 8002c28:	fffbffff 	.word	0xfffbffff
 8002c2c:	ffff80ff 	.word	0xffff80ff
 8002c30:	ffffc7ff 	.word	0xffffc7ff
 8002c34:	02dc6c00 	.word	0x02dc6c00
 8002c38:	20000014 	.word	0x20000014
 8002c3c:	20000018 	.word	0x20000018
 8002c40:	fffffeff 	.word	0xfffffeff
 8002c44:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c48:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <HAL_RCC_OscConfig+0x3bc>)
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d0dc      	beq.n	8002c0c <HAL_RCC_OscConfig+0x32c>
 8002c52:	e013      	b.n	8002c7c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff f878 	bl	8001d48 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7ff f873 	bl	8001d48 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca0 <HAL_RCC_OscConfig+0x3c0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e010      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_RCC_OscConfig+0x3bc>)
 8002c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c86:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_OscConfig+0x3bc>)
 8002c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c8a:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <HAL_RCC_OscConfig+0x3bc>)
 8002c8c:	4905      	ldr	r1, [pc, #20]	@ (8002ca4 <HAL_RCC_OscConfig+0x3c4>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	00001388 	.word	0x00001388
 8002ca4:	efffffff 	.word	0xefffffff

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0e9      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b76      	ldr	r3, [pc, #472]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d91e      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b73      	ldr	r3, [pc, #460]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	4b70      	ldr	r3, [pc, #448]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cdc:	f7ff f834 	bl	8001d48 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ce4:	e009      	b.n	8002cfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce6:	f7ff f82f 	bl	8001d48 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e9c <HAL_RCC_ClockConfig+0x1f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0ca      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cfa:	4b67      	ldr	r3, [pc, #412]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2207      	movs	r2, #7
 8002d00:	4013      	ands	r3, r2
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d017      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2204      	movs	r2, #4
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d1c:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a60      	ldr	r2, [pc, #384]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8002d22:	401a      	ands	r2, r3
 8002d24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d26:	21b0      	movs	r1, #176	@ 0xb0
 8002d28:	0109      	lsls	r1, r1, #4
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	4a5d      	ldr	r2, [pc, #372]	@ (8002ea8 <HAL_RCC_ClockConfig+0x200>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d055      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002d4c:	4b54      	ldr	r3, [pc, #336]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	221c      	movs	r2, #28
 8002d52:	4393      	bics	r3, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d68:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	4013      	ands	r3, r2
 8002d72:	d11f      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e08b      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d80:	4b47      	ldr	r3, [pc, #284]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d113      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e07f      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002d98:	4b41      	ldr	r3, [pc, #260]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d108      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e074      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002da6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	2202      	movs	r2, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e06d      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002db4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2207      	movs	r2, #7
 8002dba:	4393      	bics	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc8:	f7fe ffbe 	bl	8001d48 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd0:	e009      	b.n	8002de6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd2:	f7fe ffb9 	bl	8001d48 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8002e9c <HAL_RCC_ClockConfig+0x1f4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e054      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2238      	movs	r2, #56	@ 0x38
 8002dec:	401a      	ands	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1ec      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df8:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	4013      	ands	r3, r2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d21e      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e06:	4b24      	ldr	r3, [pc, #144]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	0019      	movs	r1, r3
 8002e10:	4b21      	ldr	r3, [pc, #132]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e18:	f7fe ff96 	bl	8001d48 <HAL_GetTick>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e20:	e009      	b.n	8002e36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e22:	f7fe ff91 	bl	8001d48 <HAL_GetTick>
 8002e26:	0002      	movs	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002e9c <HAL_RCC_ClockConfig+0x1f4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e02c      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e36:	4b18      	ldr	r3, [pc, #96]	@ (8002e98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <HAL_RCC_ClockConfig+0x204>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e62:	f000 f82b 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e66:	0001      	movs	r1, r0
 8002e68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	220f      	movs	r2, #15
 8002e70:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e72:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <HAL_RCC_ClockConfig+0x208>)
 8002e74:	0092      	lsls	r2, r2, #2
 8002e76:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e78:	221f      	movs	r2, #31
 8002e7a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002e7c:	000a      	movs	r2, r1
 8002e7e:	40da      	lsrs	r2, r3
 8002e80:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <HAL_RCC_ClockConfig+0x20c>)
 8002e82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e84:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb8 <HAL_RCC_ClockConfig+0x210>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7fe ff01 	bl	8001c90 <HAL_InitTick>
 8002e8e:	0003      	movs	r3, r0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b004      	add	sp, #16
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	00001388 	.word	0x00001388
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	ffff84ff 	.word	0xffff84ff
 8002ea8:	fffff0ff 	.word	0xfffff0ff
 8002eac:	ffff8fff 	.word	0xffff8fff
 8002eb0:	08004edc 	.word	0x08004edc
 8002eb4:	20000014 	.word	0x20000014
 8002eb8:	20000018 	.word	0x20000018

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002ec2:	4b23      	ldr	r3, [pc, #140]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	089b      	lsrs	r3, r3, #2
 8002ec8:	2207      	movs	r2, #7
 8002eca:	4013      	ands	r3, r2
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2238      	movs	r2, #56	@ 0x38
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d10f      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002eda:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	0adb      	lsrs	r3, r3, #11
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	0013      	movs	r3, r2
 8002eea:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4819      	ldr	r0, [pc, #100]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ef0:	f7fd f90a 	bl	8000108 <__udivsi3>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e01e      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002efa:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2238      	movs	r2, #56	@ 0x38
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d102      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f06:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e015      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f0c:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2238      	movs	r2, #56	@ 0x38
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d103      	bne.n	8002f20 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2238      	movs	r2, #56	@ 0x38
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b18      	cmp	r3, #24
 8002f2a:	d103      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f2c:	23fa      	movs	r3, #250	@ 0xfa
 8002f2e:	01db      	lsls	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e001      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7fd f8e4 	bl	8000108 <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002f44:	68fb      	ldr	r3, [r7, #12]
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	40021000 	.word	0x40021000
 8002f54:	02dc6c00 	.word	0x02dc6c00
 8002f58:	007a1200 	.word	0x007a1200

08002f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002f60:	f7ff ffac 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002f64:	0001      	movs	r1, r0
 8002f66:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x30>)
 8002f68:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002f70:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x34>)
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002f76:	221f      	movs	r2, #31
 8002f78:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002f7a:	000a      	movs	r2, r1
 8002f7c:	40da      	lsrs	r2, r3
 8002f7e:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <HAL_RCC_GetHCLKFreq+0x38>)
 8002f80:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002f82:	4b04      	ldr	r3, [pc, #16]	@ (8002f94 <HAL_RCC_GetHCLKFreq+0x38>)
 8002f84:	681b      	ldr	r3, [r3, #0]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08004edc 	.word	0x08004edc
 8002f94:	20000014 	.word	0x20000014

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fa0:	0001      	movs	r1, r0
 8002fa2:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0b1b      	lsrs	r3, r3, #12
 8002fa8:	2207      	movs	r2, #7
 8002faa:	401a      	ands	r2, r3
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	58d3      	ldr	r3, [r2, r3]
 8002fb2:	221f      	movs	r2, #31
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	40d9      	lsrs	r1, r3
 8002fb8:	000b      	movs	r3, r1
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08004f1c 	.word	0x08004f1c

08002fc8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fd0:	2313      	movs	r3, #19
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd8:	2312      	movs	r3, #18
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2240      	movs	r2, #64	@ 0x40
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d100      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002fea:	e079      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fec:	2011      	movs	r0, #17
 8002fee:	183b      	adds	r3, r7, r0
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff4:	4b63      	ldr	r3, [pc, #396]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	055b      	lsls	r3, r3, #21
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d110      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b60      	ldr	r3, [pc, #384]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003004:	4b5f      	ldr	r3, [pc, #380]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003006:	2180      	movs	r1, #128	@ 0x80
 8003008:	0549      	lsls	r1, r1, #21
 800300a:	430a      	orrs	r2, r1
 800300c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800300e:	4b5d      	ldr	r3, [pc, #372]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003012:	2380      	movs	r3, #128	@ 0x80
 8003014:	055b      	lsls	r3, r3, #21
 8003016:	4013      	ands	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301c:	183b      	adds	r3, r7, r0
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003022:	4b58      	ldr	r3, [pc, #352]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003026:	23c0      	movs	r3, #192	@ 0xc0
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4013      	ands	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	429a      	cmp	r2, r3
 800303c:	d014      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800303e:	4b51      	ldr	r3, [pc, #324]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	4a51      	ldr	r2, [pc, #324]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003044:	4013      	ands	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003048:	4b4e      	ldr	r3, [pc, #312]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800304a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800304c:	4b4d      	ldr	r3, [pc, #308]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800304e:	2180      	movs	r1, #128	@ 0x80
 8003050:	0249      	lsls	r1, r1, #9
 8003052:	430a      	orrs	r2, r1
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003056:	4b4b      	ldr	r3, [pc, #300]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800305a:	4b4a      	ldr	r3, [pc, #296]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800305c:	494b      	ldr	r1, [pc, #300]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800305e:	400a      	ands	r2, r1
 8003060:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003062:	4b48      	ldr	r3, [pc, #288]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2201      	movs	r2, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d016      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fe6a 	bl	8001d48 <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003078:	e00c      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe fe65 	bl	8001d48 <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	4a42      	ldr	r2, [pc, #264]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d904      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800308a:	2313      	movs	r3, #19
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2203      	movs	r2, #3
 8003090:	701a      	strb	r2, [r3, #0]
          break;
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003094:	4b3b      	ldr	r3, [pc, #236]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d0ed      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800309e:	2313      	movs	r3, #19
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	4a36      	ldr	r2, [pc, #216]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	4b33      	ldr	r3, [pc, #204]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030bc:	e005      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030be:	2312      	movs	r3, #18
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2213      	movs	r2, #19
 80030c4:	18ba      	adds	r2, r7, r2
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ca:	2311      	movs	r3, #17
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d105      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030da:	492e      	ldr	r1, [pc, #184]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030dc:	400a      	ands	r2, r1
 80030de:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	4013      	ands	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ea:	4b26      	ldr	r3, [pc, #152]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	2203      	movs	r2, #3
 80030f0:	4393      	bics	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	4b22      	ldr	r3, [pc, #136]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030fa:	430a      	orrs	r2, r1
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d009      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003108:	4b1e      	ldr	r3, [pc, #120]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	4a22      	ldr	r2, [pc, #136]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	4013      	ands	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	4b1b      	ldr	r3, [pc, #108]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003118:	430a      	orrs	r2, r1
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2220      	movs	r2, #32
 8003122:	4013      	ands	r3, r2
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003126:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	0899      	lsrs	r1, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003134:	430a      	orrs	r2, r1
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2204      	movs	r2, #4
 800313e:	4013      	ands	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	4a15      	ldr	r2, [pc, #84]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003148:	4013      	ands	r3, r2
 800314a:	0019      	movs	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003152:	430a      	orrs	r2, r1
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2280      	movs	r2, #128	@ 0x80
 800315c:	4013      	ands	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003160:	4b08      	ldr	r3, [pc, #32]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	22e0      	movs	r2, #224	@ 0xe0
 8003166:	4393      	bics	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003174:	2312      	movs	r3, #18
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	781b      	ldrb	r3, [r3, #0]
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b006      	add	sp, #24
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	40021000 	.word	0x40021000
 8003188:	fffffcff 	.word	0xfffffcff
 800318c:	fffeffff 	.word	0xfffeffff
 8003190:	00001388 	.word	0x00001388
 8003194:	efffffff 	.word	0xefffffff
 8003198:	ffffcfff 	.word	0xffffcfff
 800319c:	ffff3fff 	.word	0xffff3fff

080031a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e046      	b.n	8003240 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2288      	movs	r2, #136	@ 0x88
 80031b6:	589b      	ldr	r3, [r3, r2]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2284      	movs	r2, #132	@ 0x84
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7fe fbda 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2288      	movs	r2, #136	@ 0x88
 80031d0:	2124      	movs	r1, #36	@ 0x24
 80031d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 ffee 	bl	80041d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 fe6c 	bl	8003ed4 <UART_SetConfig>
 80031fc:	0003      	movs	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e01c      	b.n	8003240 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	490d      	ldr	r1, [pc, #52]	@ (8003248 <HAL_UART_Init+0xa8>)
 8003212:	400a      	ands	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	212a      	movs	r1, #42	@ 0x2a
 8003222:	438a      	bics	r2, r1
 8003224:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f001 f87d 	bl	8004338 <UART_CheckIdleState>
 800323e:	0003      	movs	r3, r0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	ffffb7ff 	.word	0xffffb7ff

0800324c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e04e      	b.n	80032fc <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2288      	movs	r2, #136	@ 0x88
 8003262:	589b      	ldr	r3, [r3, r2]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2284      	movs	r2, #132	@ 0x84
 800326c:	2100      	movs	r1, #0
 800326e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f7fe fb84 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2288      	movs	r2, #136	@ 0x88
 800327c:	2124      	movs	r1, #36	@ 0x24
 800327e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	438a      	bics	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	0018      	movs	r0, r3
 800329c:	f000 ff98 	bl	80041d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f000 fe16 	bl	8003ed4 <UART_SetConfig>
 80032a8:	0003      	movs	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e024      	b.n	80032fc <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4911      	ldr	r1, [pc, #68]	@ (8003304 <HAL_HalfDuplex_Init+0xb8>)
 80032be:	400a      	ands	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2122      	movs	r1, #34	@ 0x22
 80032ce:	438a      	bics	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2108      	movs	r1, #8
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f001 f81f 	bl	8004338 <UART_CheckIdleState>
 80032fa:	0003      	movs	r3, r0
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	ffffb7ff 	.word	0xffffb7ff

08003308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2288      	movs	r2, #136	@ 0x88
 800331c:	589b      	ldr	r3, [r3, r2]
 800331e:	2b20      	cmp	r3, #32
 8003320:	d000      	beq.n	8003324 <HAL_UART_Transmit+0x1c>
 8003322:	e090      	b.n	8003446 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_UART_Transmit+0x2a>
 800332a:	1dbb      	adds	r3, r7, #6
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e088      	b.n	8003448 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	015b      	lsls	r3, r3, #5
 800333e:	429a      	cmp	r2, r3
 8003340:	d109      	bne.n	8003356 <HAL_UART_Transmit+0x4e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d105      	bne.n	8003356 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	d001      	beq.n	8003356 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e078      	b.n	8003448 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2290      	movs	r2, #144	@ 0x90
 800335a:	2100      	movs	r1, #0
 800335c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2288      	movs	r2, #136	@ 0x88
 8003362:	2121      	movs	r1, #33	@ 0x21
 8003364:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003366:	f7fe fcef 	bl	8001d48 <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1dba      	adds	r2, r7, #6
 8003372:	2154      	movs	r1, #84	@ 0x54
 8003374:	8812      	ldrh	r2, [r2, #0]
 8003376:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1dba      	adds	r2, r7, #6
 800337c:	2156      	movs	r1, #86	@ 0x56
 800337e:	8812      	ldrh	r2, [r2, #0]
 8003380:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	015b      	lsls	r3, r3, #5
 800338a:	429a      	cmp	r2, r3
 800338c:	d108      	bne.n	80033a0 <HAL_UART_Transmit+0x98>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	e003      	b.n	80033a8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a8:	e030      	b.n	800340c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	0013      	movs	r3, r2
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	@ 0x80
 80033b8:	f001 f868 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d005      	beq.n	80033cc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2288      	movs	r2, #136	@ 0x88
 80033c4:	2120      	movs	r1, #32
 80033c6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e03d      	b.n	8003448 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	001a      	movs	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	05d2      	lsls	r2, r2, #23
 80033de:	0dd2      	lsrs	r2, r2, #23
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3302      	adds	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	e007      	b.n	80033fa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2256      	movs	r2, #86	@ 0x56
 80033fe:	5a9b      	ldrh	r3, [r3, r2]
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b299      	uxth	r1, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2256      	movs	r2, #86	@ 0x56
 800340a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2256      	movs	r2, #86	@ 0x56
 8003410:	5a9b      	ldrh	r3, [r3, r2]
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1c8      	bne.n	80033aa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	0013      	movs	r3, r2
 8003422:	2200      	movs	r2, #0
 8003424:	2140      	movs	r1, #64	@ 0x40
 8003426:	f001 f831 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 800342a:	1e03      	subs	r3, r0, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2288      	movs	r2, #136	@ 0x88
 8003432:	2120      	movs	r1, #32
 8003434:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e006      	b.n	8003448 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2288      	movs	r2, #136	@ 0x88
 800343e:	2120      	movs	r1, #32
 8003440:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003446:	2302      	movs	r3, #2
  }
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b008      	add	sp, #32
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	1dbb      	adds	r3, r7, #6
 800345e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	228c      	movs	r2, #140	@ 0x8c
 8003464:	589b      	ldr	r3, [r3, r2]
 8003466:	2b20      	cmp	r3, #32
 8003468:	d000      	beq.n	800346c <HAL_UART_Receive+0x1c>
 800346a:	e0d0      	b.n	800360e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_Receive+0x2a>
 8003472:	1dbb      	adds	r3, r7, #6
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0c8      	b.n	8003610 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	015b      	lsls	r3, r3, #5
 8003486:	429a      	cmp	r2, r3
 8003488:	d109      	bne.n	800349e <HAL_UART_Receive+0x4e>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	d001      	beq.n	800349e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0b8      	b.n	8003610 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2290      	movs	r2, #144	@ 0x90
 80034a2:	2100      	movs	r1, #0
 80034a4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	228c      	movs	r2, #140	@ 0x8c
 80034aa:	2122      	movs	r1, #34	@ 0x22
 80034ac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034b4:	f7fe fc48 	bl	8001d48 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1dba      	adds	r2, r7, #6
 80034c0:	215c      	movs	r1, #92	@ 0x5c
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1dba      	adds	r2, r7, #6
 80034ca:	215e      	movs	r1, #94	@ 0x5e
 80034cc:	8812      	ldrh	r2, [r2, #0]
 80034ce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	015b      	lsls	r3, r3, #5
 80034d8:	429a      	cmp	r2, r3
 80034da:	d10d      	bne.n	80034f8 <HAL_UART_Receive+0xa8>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_UART_Receive+0x9e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2260      	movs	r2, #96	@ 0x60
 80034e8:	494b      	ldr	r1, [pc, #300]	@ (8003618 <HAL_UART_Receive+0x1c8>)
 80034ea:	5299      	strh	r1, [r3, r2]
 80034ec:	e02e      	b.n	800354c <HAL_UART_Receive+0xfc>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2260      	movs	r2, #96	@ 0x60
 80034f2:	21ff      	movs	r1, #255	@ 0xff
 80034f4:	5299      	strh	r1, [r3, r2]
 80034f6:	e029      	b.n	800354c <HAL_UART_Receive+0xfc>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <HAL_UART_Receive+0xcc>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <HAL_UART_Receive+0xc2>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2260      	movs	r2, #96	@ 0x60
 800350c:	21ff      	movs	r1, #255	@ 0xff
 800350e:	5299      	strh	r1, [r3, r2]
 8003510:	e01c      	b.n	800354c <HAL_UART_Receive+0xfc>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2260      	movs	r2, #96	@ 0x60
 8003516:	217f      	movs	r1, #127	@ 0x7f
 8003518:	5299      	strh	r1, [r3, r2]
 800351a:	e017      	b.n	800354c <HAL_UART_Receive+0xfc>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	055b      	lsls	r3, r3, #21
 8003524:	429a      	cmp	r2, r3
 8003526:	d10d      	bne.n	8003544 <HAL_UART_Receive+0xf4>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_UART_Receive+0xea>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2260      	movs	r2, #96	@ 0x60
 8003534:	217f      	movs	r1, #127	@ 0x7f
 8003536:	5299      	strh	r1, [r3, r2]
 8003538:	e008      	b.n	800354c <HAL_UART_Receive+0xfc>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2260      	movs	r2, #96	@ 0x60
 800353e:	213f      	movs	r1, #63	@ 0x3f
 8003540:	5299      	strh	r1, [r3, r2]
 8003542:	e003      	b.n	800354c <HAL_UART_Receive+0xfc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2260      	movs	r2, #96	@ 0x60
 8003548:	2100      	movs	r1, #0
 800354a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800354c:	2312      	movs	r3, #18
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	2160      	movs	r1, #96	@ 0x60
 8003554:	5a52      	ldrh	r2, [r2, r1]
 8003556:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	2380      	movs	r3, #128	@ 0x80
 800355e:	015b      	lsls	r3, r3, #5
 8003560:	429a      	cmp	r2, r3
 8003562:	d108      	bne.n	8003576 <HAL_UART_Receive+0x126>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d104      	bne.n	8003576 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	e003      	b.n	800357e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800357e:	e03a      	b.n	80035f6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	0013      	movs	r3, r2
 800358a:	2200      	movs	r2, #0
 800358c:	2120      	movs	r1, #32
 800358e:	f000 ff7d 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d005      	beq.n	80035a2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	228c      	movs	r2, #140	@ 0x8c
 800359a:	2120      	movs	r1, #32
 800359c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e036      	b.n	8003610 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10e      	bne.n	80035c6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2212      	movs	r2, #18
 80035b2:	18ba      	adds	r2, r7, r2
 80035b4:	8812      	ldrh	r2, [r2, #0]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	3302      	adds	r3, #2
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e00e      	b.n	80035e4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2212      	movs	r2, #18
 80035d0:	18ba      	adds	r2, r7, r2
 80035d2:	8812      	ldrh	r2, [r2, #0]
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	4013      	ands	r3, r2
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3301      	adds	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	225e      	movs	r2, #94	@ 0x5e
 80035e8:	5a9b      	ldrh	r3, [r3, r2]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b299      	uxth	r1, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	225e      	movs	r2, #94	@ 0x5e
 80035f4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	225e      	movs	r2, #94	@ 0x5e
 80035fa:	5a9b      	ldrh	r3, [r3, r2]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1be      	bne.n	8003580 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	228c      	movs	r2, #140	@ 0x8c
 8003606:	2120      	movs	r1, #32
 8003608:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b008      	add	sp, #32
 8003616:	bd80      	pop	{r7, pc}
 8003618:	000001ff 	.word	0x000001ff

0800361c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	1dbb      	adds	r3, r7, #6
 8003628:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2288      	movs	r2, #136	@ 0x88
 800362e:	589b      	ldr	r3, [r3, r2]
 8003630:	2b20      	cmp	r3, #32
 8003632:	d000      	beq.n	8003636 <HAL_UART_Transmit_DMA+0x1a>
 8003634:	e079      	b.n	800372a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_UART_Transmit_DMA+0x28>
 800363c:	1dbb      	adds	r3, r7, #6
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e071      	b.n	800372c <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	2380      	movs	r3, #128	@ 0x80
 800364e:	015b      	lsls	r3, r3, #5
 8003650:	429a      	cmp	r2, r3
 8003652:	d109      	bne.n	8003668 <HAL_UART_Transmit_DMA+0x4c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2201      	movs	r2, #1
 8003660:	4013      	ands	r3, r2
 8003662:	d001      	beq.n	8003668 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e061      	b.n	800372c <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1dba      	adds	r2, r7, #6
 8003672:	2154      	movs	r1, #84	@ 0x54
 8003674:	8812      	ldrh	r2, [r2, #0]
 8003676:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1dba      	adds	r2, r7, #6
 800367c:	2156      	movs	r1, #86	@ 0x56
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2290      	movs	r2, #144	@ 0x90
 8003686:	2100      	movs	r1, #0
 8003688:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2288      	movs	r2, #136	@ 0x88
 800368e:	2121      	movs	r1, #33	@ 0x21
 8003690:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d028      	beq.n	80036ec <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800369e:	4a25      	ldr	r2, [pc, #148]	@ (8003734 <HAL_UART_Transmit_DMA+0x118>)
 80036a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a6:	4a24      	ldr	r2, [pc, #144]	@ (8003738 <HAL_UART_Transmit_DMA+0x11c>)
 80036a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ae:	4a23      	ldr	r2, [pc, #140]	@ (800373c <HAL_UART_Transmit_DMA+0x120>)
 80036b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b6:	2200      	movs	r2, #0
 80036b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c2:	0019      	movs	r1, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3328      	adds	r3, #40	@ 0x28
 80036ca:	001a      	movs	r2, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	f7fe fcd0 	bl	8002074 <HAL_DMA_Start_IT>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d009      	beq.n	80036ec <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2290      	movs	r2, #144	@ 0x90
 80036dc:	2110      	movs	r1, #16
 80036de:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2288      	movs	r2, #136	@ 0x88
 80036e4:	2120      	movs	r1, #32
 80036e6:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e01f      	b.n	800372c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2240      	movs	r2, #64	@ 0x40
 80036f2:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036f4:	f3ef 8310 	mrs	r3, PRIMASK
 80036f8:	613b      	str	r3, [r7, #16]
  return(result);
 80036fa:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	2301      	movs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2180      	movs	r1, #128	@ 0x80
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b008      	add	sp, #32
 8003732:	bd80      	pop	{r7, pc}
 8003734:	08004805 	.word	0x08004805
 8003738:	0800489d 	.word	0x0800489d
 800373c:	08004a2f 	.word	0x08004a2f

08003740 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	1dbb      	adds	r3, r7, #6
 800374c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	228c      	movs	r2, #140	@ 0x8c
 8003752:	589b      	ldr	r3, [r3, r2]
 8003754:	2b20      	cmp	r3, #32
 8003756:	d145      	bne.n	80037e4 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_UART_Receive_DMA+0x26>
 800375e:	1dbb      	adds	r3, r7, #6
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e03d      	b.n	80037e6 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	015b      	lsls	r3, r3, #5
 8003772:	429a      	cmp	r2, r3
 8003774:	d109      	bne.n	800378a <HAL_UART_Receive_DMA+0x4a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2201      	movs	r2, #1
 8003782:	4013      	ands	r3, r2
 8003784:	d001      	beq.n	800378a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e02d      	b.n	80037e6 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	4013      	ands	r3, r2
 800379c:	d019      	beq.n	80037d2 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800379e:	f3ef 8310 	mrs	r3, PRIMASK
 80037a2:	613b      	str	r3, [r7, #16]
  return(result);
 80037a4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	2301      	movs	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f383 8810 	msr	PRIMASK, r3
}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2180      	movs	r1, #128	@ 0x80
 80037c0:	04c9      	lsls	r1, r1, #19
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f383 8810 	msr	PRIMASK, r3
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037d2:	1dbb      	adds	r3, r7, #6
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 fec6 	bl	800456c <UART_Start_Receive_DMA>
 80037e0:	0003      	movs	r3, r0
 80037e2:	e000      	b.n	80037e6 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
  }
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b008      	add	sp, #32
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b0aa      	sub	sp, #168	@ 0xa8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	22a4      	movs	r2, #164	@ 0xa4
 8003800:	18b9      	adds	r1, r7, r2
 8003802:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	20a0      	movs	r0, #160	@ 0xa0
 800380c:	1839      	adds	r1, r7, r0
 800380e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	249c      	movs	r4, #156	@ 0x9c
 8003818:	1939      	adds	r1, r7, r4
 800381a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800381c:	0011      	movs	r1, r2
 800381e:	18bb      	adds	r3, r7, r2
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4aa2      	ldr	r2, [pc, #648]	@ (8003aac <HAL_UART_IRQHandler+0x2bc>)
 8003824:	4013      	ands	r3, r2
 8003826:	2298      	movs	r2, #152	@ 0x98
 8003828:	18bd      	adds	r5, r7, r2
 800382a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800382c:	18bb      	adds	r3, r7, r2
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11a      	bne.n	800386a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003834:	187b      	adds	r3, r7, r1
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2220      	movs	r2, #32
 800383a:	4013      	ands	r3, r2
 800383c:	d015      	beq.n	800386a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800383e:	183b      	adds	r3, r7, r0
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2220      	movs	r2, #32
 8003844:	4013      	ands	r3, r2
 8003846:	d105      	bne.n	8003854 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003848:	193b      	adds	r3, r7, r4
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	055b      	lsls	r3, r3, #21
 8003850:	4013      	ands	r3, r2
 8003852:	d00a      	beq.n	800386a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003858:	2b00      	cmp	r3, #0
 800385a:	d100      	bne.n	800385e <HAL_UART_IRQHandler+0x6e>
 800385c:	e2fb      	b.n	8003e56 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	0010      	movs	r0, r2
 8003866:	4798      	blx	r3
      }
      return;
 8003868:	e2f5      	b.n	8003e56 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800386a:	2398      	movs	r3, #152	@ 0x98
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d100      	bne.n	8003876 <HAL_UART_IRQHandler+0x86>
 8003874:	e122      	b.n	8003abc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003876:	239c      	movs	r3, #156	@ 0x9c
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a8c      	ldr	r2, [pc, #560]	@ (8003ab0 <HAL_UART_IRQHandler+0x2c0>)
 800387e:	4013      	ands	r3, r2
 8003880:	d106      	bne.n	8003890 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003882:	23a0      	movs	r3, #160	@ 0xa0
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a8a      	ldr	r2, [pc, #552]	@ (8003ab4 <HAL_UART_IRQHandler+0x2c4>)
 800388a:	4013      	ands	r3, r2
 800388c:	d100      	bne.n	8003890 <HAL_UART_IRQHandler+0xa0>
 800388e:	e115      	b.n	8003abc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003890:	23a4      	movs	r3, #164	@ 0xa4
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2201      	movs	r2, #1
 8003898:	4013      	ands	r3, r2
 800389a:	d012      	beq.n	80038c2 <HAL_UART_IRQHandler+0xd2>
 800389c:	23a0      	movs	r3, #160	@ 0xa0
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	2380      	movs	r3, #128	@ 0x80
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4013      	ands	r3, r2
 80038a8:	d00b      	beq.n	80038c2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2290      	movs	r2, #144	@ 0x90
 80038b6:	589b      	ldr	r3, [r3, r2]
 80038b8:	2201      	movs	r2, #1
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2190      	movs	r1, #144	@ 0x90
 80038c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038c2:	23a4      	movs	r3, #164	@ 0xa4
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2202      	movs	r2, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	d011      	beq.n	80038f2 <HAL_UART_IRQHandler+0x102>
 80038ce:	239c      	movs	r3, #156	@ 0x9c
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2202      	movs	r2, #2
 80038e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2290      	movs	r2, #144	@ 0x90
 80038e6:	589b      	ldr	r3, [r3, r2]
 80038e8:	2204      	movs	r2, #4
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2190      	movs	r1, #144	@ 0x90
 80038f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038f2:	23a4      	movs	r3, #164	@ 0xa4
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2204      	movs	r2, #4
 80038fa:	4013      	ands	r3, r2
 80038fc:	d011      	beq.n	8003922 <HAL_UART_IRQHandler+0x132>
 80038fe:	239c      	movs	r3, #156	@ 0x9c
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	d00b      	beq.n	8003922 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2204      	movs	r2, #4
 8003910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2290      	movs	r2, #144	@ 0x90
 8003916:	589b      	ldr	r3, [r3, r2]
 8003918:	2202      	movs	r2, #2
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2190      	movs	r1, #144	@ 0x90
 8003920:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003922:	23a4      	movs	r3, #164	@ 0xa4
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	4013      	ands	r3, r2
 800392c:	d017      	beq.n	800395e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800392e:	23a0      	movs	r3, #160	@ 0xa0
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2220      	movs	r2, #32
 8003936:	4013      	ands	r3, r2
 8003938:	d105      	bne.n	8003946 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800393a:	239c      	movs	r3, #156	@ 0x9c
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab0 <HAL_UART_IRQHandler+0x2c0>)
 8003942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003944:	d00b      	beq.n	800395e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2208      	movs	r2, #8
 800394c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2290      	movs	r2, #144	@ 0x90
 8003952:	589b      	ldr	r3, [r3, r2]
 8003954:	2208      	movs	r2, #8
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2190      	movs	r1, #144	@ 0x90
 800395c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800395e:	23a4      	movs	r3, #164	@ 0xa4
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4013      	ands	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_UART_IRQHandler+0x1a4>
 800396c:	23a0      	movs	r3, #160	@ 0xa0
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	2380      	movs	r3, #128	@ 0x80
 8003974:	04db      	lsls	r3, r3, #19
 8003976:	4013      	ands	r3, r2
 8003978:	d00c      	beq.n	8003994 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2280      	movs	r2, #128	@ 0x80
 8003980:	0112      	lsls	r2, r2, #4
 8003982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2290      	movs	r2, #144	@ 0x90
 8003988:	589b      	ldr	r3, [r3, r2]
 800398a:	2220      	movs	r2, #32
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2190      	movs	r1, #144	@ 0x90
 8003992:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2290      	movs	r2, #144	@ 0x90
 8003998:	589b      	ldr	r3, [r3, r2]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d100      	bne.n	80039a0 <HAL_UART_IRQHandler+0x1b0>
 800399e:	e25c      	b.n	8003e5a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039a0:	23a4      	movs	r3, #164	@ 0xa4
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2220      	movs	r2, #32
 80039a8:	4013      	ands	r3, r2
 80039aa:	d015      	beq.n	80039d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039ac:	23a0      	movs	r3, #160	@ 0xa0
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2220      	movs	r2, #32
 80039b4:	4013      	ands	r3, r2
 80039b6:	d106      	bne.n	80039c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039b8:	239c      	movs	r3, #156	@ 0x9c
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	2380      	movs	r3, #128	@ 0x80
 80039c0:	055b      	lsls	r3, r3, #21
 80039c2:	4013      	ands	r3, r2
 80039c4:	d008      	beq.n	80039d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	0010      	movs	r0, r2
 80039d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2290      	movs	r2, #144	@ 0x90
 80039dc:	589b      	ldr	r3, [r3, r2]
 80039de:	2194      	movs	r1, #148	@ 0x94
 80039e0:	187a      	adds	r2, r7, r1
 80039e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2240      	movs	r2, #64	@ 0x40
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b40      	cmp	r3, #64	@ 0x40
 80039f0:	d004      	beq.n	80039fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2228      	movs	r2, #40	@ 0x28
 80039f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fa:	d04c      	beq.n	8003a96 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	0018      	movs	r0, r3
 8003a00:	f000 fe9a 	bl	8004738 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2240      	movs	r2, #64	@ 0x40
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	d13c      	bne.n	8003a8c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a12:	f3ef 8310 	mrs	r3, PRIMASK
 8003a16:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003a18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	2090      	movs	r0, #144	@ 0x90
 8003a1c:	183a      	adds	r2, r7, r0
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	2301      	movs	r3, #1
 8003a22:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2140      	movs	r1, #64	@ 0x40
 8003a38:	438a      	bics	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	183b      	adds	r3, r7, r0
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2280      	movs	r2, #128	@ 0x80
 8003a4e:	589b      	ldr	r3, [r3, r2]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d016      	beq.n	8003a82 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2280      	movs	r2, #128	@ 0x80
 8003a58:	589b      	ldr	r3, [r3, r2]
 8003a5a:	4a17      	ldr	r2, [pc, #92]	@ (8003ab8 <HAL_UART_IRQHandler+0x2c8>)
 8003a5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2280      	movs	r2, #128	@ 0x80
 8003a62:	589b      	ldr	r3, [r3, r2]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7fe fbef 	bl	8002248 <HAL_DMA_Abort_IT>
 8003a6a:	1e03      	subs	r3, r0, #0
 8003a6c:	d01c      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2280      	movs	r2, #128	@ 0x80
 8003a72:	589b      	ldr	r3, [r3, r2]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	2180      	movs	r1, #128	@ 0x80
 8003a7a:	5852      	ldr	r2, [r2, r1]
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e012      	b.n	8003aa8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 fa11 	bl	8003eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8a:	e00d      	b.n	8003aa8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 fa0c 	bl	8003eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e008      	b.n	8003aa8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 fa07 	bl	8003eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2290      	movs	r2, #144	@ 0x90
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003aa6:	e1d8      	b.n	8003e5a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	46c0      	nop			@ (mov r8, r8)
    return;
 8003aaa:	e1d6      	b.n	8003e5a <HAL_UART_IRQHandler+0x66a>
 8003aac:	0000080f 	.word	0x0000080f
 8003ab0:	10000001 	.word	0x10000001
 8003ab4:	04000120 	.word	0x04000120
 8003ab8:	08004ab5 	.word	0x08004ab5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d000      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x2d6>
 8003ac4:	e15d      	b.n	8003d82 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ac6:	23a4      	movs	r3, #164	@ 0xa4
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2210      	movs	r2, #16
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d100      	bne.n	8003ad4 <HAL_UART_IRQHandler+0x2e4>
 8003ad2:	e156      	b.n	8003d82 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ad4:	23a0      	movs	r3, #160	@ 0xa0
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2210      	movs	r2, #16
 8003adc:	4013      	ands	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x2f2>
 8003ae0:	e14f      	b.n	8003d82 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2240      	movs	r2, #64	@ 0x40
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b40      	cmp	r3, #64	@ 0x40
 8003af6:	d000      	beq.n	8003afa <HAL_UART_IRQHandler+0x30a>
 8003af8:	e0c3      	b.n	8003c82 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2280      	movs	r2, #128	@ 0x80
 8003afe:	589b      	ldr	r3, [r3, r2]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	217e      	movs	r1, #126	@ 0x7e
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d100      	bne.n	8003b14 <HAL_UART_IRQHandler+0x324>
 8003b12:	e097      	b.n	8003c44 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	225c      	movs	r2, #92	@ 0x5c
 8003b18:	5a9b      	ldrh	r3, [r3, r2]
 8003b1a:	187a      	adds	r2, r7, r1
 8003b1c:	8812      	ldrh	r2, [r2, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d300      	bcc.n	8003b24 <HAL_UART_IRQHandler+0x334>
 8003b22:	e08f      	b.n	8003c44 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	187a      	adds	r2, r7, r1
 8003b28:	215e      	movs	r1, #94	@ 0x5e
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	589b      	ldr	r3, [r3, r2]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d170      	bne.n	8003c20 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b48:	2301      	movs	r3, #1
 8003b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4e:	f383 8810 	msr	PRIMASK, r3
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	49c4      	ldr	r1, [pc, #784]	@ (8003e70 <HAL_UART_IRQHandler+0x680>)
 8003b60:	400a      	ands	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6a:	f383 8810 	msr	PRIMASK, r3
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b70:	f3ef 8310 	mrs	r3, PRIMASK
 8003b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b80:	f383 8810 	msr	PRIMASK, r3
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	438a      	bics	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b98:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003baa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bac:	2301      	movs	r3, #1
 8003bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb2:	f383 8810 	msr	PRIMASK, r3
}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2140      	movs	r1, #64	@ 0x40
 8003bc4:	438a      	bics	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bce:	f383 8810 	msr	PRIMASK, r3
}
 8003bd2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	228c      	movs	r2, #140	@ 0x8c
 8003bd8:	2120      	movs	r1, #32
 8003bda:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003be2:	f3ef 8310 	mrs	r3, PRIMASK
 8003be6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bec:	2301      	movs	r3, #1
 8003bee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bf2:	f383 8810 	msr	PRIMASK, r3
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2110      	movs	r1, #16
 8003c04:	438a      	bics	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2280      	movs	r2, #128	@ 0x80
 8003c18:	589b      	ldr	r3, [r3, r2]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7fe fab2 	bl	8002184 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	225c      	movs	r2, #92	@ 0x5c
 8003c2a:	5a9a      	ldrh	r2, [r3, r2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	215e      	movs	r1, #94	@ 0x5e
 8003c30:	5a5b      	ldrh	r3, [r3, r1]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 f93d 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003c42:	e10c      	b.n	8003e5e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	225c      	movs	r2, #92	@ 0x5c
 8003c48:	5a9b      	ldrh	r3, [r3, r2]
 8003c4a:	227e      	movs	r2, #126	@ 0x7e
 8003c4c:	18ba      	adds	r2, r7, r2
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d000      	beq.n	8003c56 <HAL_UART_IRQHandler+0x466>
 8003c54:	e103      	b.n	8003e5e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2280      	movs	r2, #128	@ 0x80
 8003c5a:	589b      	ldr	r3, [r3, r2]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2220      	movs	r2, #32
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d000      	beq.n	8003c6a <HAL_UART_IRQHandler+0x47a>
 8003c68:	e0f9      	b.n	8003e5e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	225c      	movs	r2, #92	@ 0x5c
 8003c74:	5a9a      	ldrh	r2, [r3, r2]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0011      	movs	r1, r2
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 f91e 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
      return;
 8003c80:	e0ed      	b.n	8003e5e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	225c      	movs	r2, #92	@ 0x5c
 8003c86:	5a99      	ldrh	r1, [r3, r2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	225e      	movs	r2, #94	@ 0x5e
 8003c8c:	5a9b      	ldrh	r3, [r3, r2]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	208e      	movs	r0, #142	@ 0x8e
 8003c92:	183b      	adds	r3, r7, r0
 8003c94:	1a8a      	subs	r2, r1, r2
 8003c96:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	225e      	movs	r2, #94	@ 0x5e
 8003c9c:	5a9b      	ldrh	r3, [r3, r2]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d100      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x4b6>
 8003ca4:	e0dd      	b.n	8003e62 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8003ca6:	183b      	adds	r3, r7, r0
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d100      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x4c0>
 8003cae:	e0d8      	b.n	8003e62 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cb8:	2488      	movs	r4, #136	@ 0x88
 8003cba:	193a      	adds	r2, r7, r4
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f383 8810 	msr	PRIMASK, r3
}
 8003cc8:	46c0      	nop			@ (mov r8, r8)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4967      	ldr	r1, [pc, #412]	@ (8003e74 <HAL_UART_IRQHandler+0x684>)
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cec:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cf0:	2484      	movs	r4, #132	@ 0x84
 8003cf2:	193a      	adds	r2, r7, r4
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	495a      	ldr	r1, [pc, #360]	@ (8003e78 <HAL_UART_IRQHandler+0x688>)
 8003d0e:	400a      	ands	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	193b      	adds	r3, r7, r4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f383 8810 	msr	PRIMASK, r3
}
 8003d1e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	228c      	movs	r2, #140	@ 0x8c
 8003d24:	2120      	movs	r1, #32
 8003d26:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d34:	f3ef 8310 	mrs	r3, PRIMASK
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d3c:	2480      	movs	r4, #128	@ 0x80
 8003d3e:	193a      	adds	r2, r7, r4
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	2301      	movs	r3, #1
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	f383 8810 	msr	PRIMASK, r3
}
 8003d4c:	46c0      	nop			@ (mov r8, r8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2110      	movs	r1, #16
 8003d5a:	438a      	bics	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	193b      	adds	r3, r7, r4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d72:	183b      	adds	r3, r7, r0
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f000 f89e 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d80:	e06f      	b.n	8003e62 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d82:	23a4      	movs	r3, #164	@ 0xa4
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	2380      	movs	r3, #128	@ 0x80
 8003d8a:	035b      	lsls	r3, r3, #13
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d010      	beq.n	8003db2 <HAL_UART_IRQHandler+0x5c2>
 8003d90:	239c      	movs	r3, #156	@ 0x9c
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	2380      	movs	r3, #128	@ 0x80
 8003d98:	03db      	lsls	r3, r3, #15
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	0352      	lsls	r2, r2, #13
 8003da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 fec5 	bl	8004b3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003db0:	e05a      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003db2:	23a4      	movs	r3, #164	@ 0xa4
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2280      	movs	r2, #128	@ 0x80
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d016      	beq.n	8003dec <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003dbe:	23a0      	movs	r3, #160	@ 0xa0
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2280      	movs	r2, #128	@ 0x80
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d106      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003dca:	239c      	movs	r3, #156	@ 0x9c
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d042      	beq.n	8003e66 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	0010      	movs	r0, r2
 8003de8:	4798      	blx	r3
    }
    return;
 8003dea:	e03c      	b.n	8003e66 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dec:	23a4      	movs	r3, #164	@ 0xa4
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2240      	movs	r2, #64	@ 0x40
 8003df4:	4013      	ands	r3, r2
 8003df6:	d00a      	beq.n	8003e0e <HAL_UART_IRQHandler+0x61e>
 8003df8:	23a0      	movs	r3, #160	@ 0xa0
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2240      	movs	r2, #64	@ 0x40
 8003e00:	4013      	ands	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 fe6b 	bl	8004ae2 <UART_EndTransmit_IT>
    return;
 8003e0c:	e02c      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e0e:	23a4      	movs	r3, #164	@ 0xa4
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	@ 0x80
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <HAL_UART_IRQHandler+0x644>
 8003e1c:	23a0      	movs	r3, #160	@ 0xa0
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	05db      	lsls	r3, r3, #23
 8003e26:	4013      	ands	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 fe94 	bl	8004b5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e32:	e019      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e34:	23a4      	movs	r3, #164	@ 0xa4
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	2380      	movs	r3, #128	@ 0x80
 8003e3c:	045b      	lsls	r3, r3, #17
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d012      	beq.n	8003e68 <HAL_UART_IRQHandler+0x678>
 8003e42:	23a0      	movs	r3, #160	@ 0xa0
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da0d      	bge.n	8003e68 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f000 fe7b 	bl	8004b4a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e54:	e008      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
      return;
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	e006      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
    return;
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	e004      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
      return;
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	e002      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
      return;
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	e000      	b.n	8003e68 <HAL_UART_IRQHandler+0x678>
    return;
 8003e66:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b02a      	add	sp, #168	@ 0xa8
 8003e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	fffffeff 	.word	0xfffffeff
 8003e74:	fffffedf 	.word	0xfffffedf
 8003e78:	effffffe 	.word	0xeffffffe

08003e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003e94:	46c0      	nop			@ (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003eb4:	46c0      	nop			@ (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	000a      	movs	r2, r1
 8003ec6:	1cbb      	adds	r3, r7, #2
 8003ec8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003edc:	231e      	movs	r3, #30
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4aab      	ldr	r2, [pc, #684]	@ (80041b0 <UART_SetConfig+0x2dc>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4aa6      	ldr	r2, [pc, #664]	@ (80041b4 <UART_SetConfig+0x2e0>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a9d      	ldr	r2, [pc, #628]	@ (80041b8 <UART_SetConfig+0x2e4>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f56:	220f      	movs	r2, #15
 8003f58:	4393      	bics	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a93      	ldr	r2, [pc, #588]	@ (80041bc <UART_SetConfig+0x2e8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d127      	bne.n	8003fc2 <UART_SetConfig+0xee>
 8003f72:	4b93      	ldr	r3, [pc, #588]	@ (80041c0 <UART_SetConfig+0x2ec>)
 8003f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f76:	2203      	movs	r2, #3
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d017      	beq.n	8003fae <UART_SetConfig+0xda>
 8003f7e:	d81b      	bhi.n	8003fb8 <UART_SetConfig+0xe4>
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d00a      	beq.n	8003f9a <UART_SetConfig+0xc6>
 8003f84:	d818      	bhi.n	8003fb8 <UART_SetConfig+0xe4>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <UART_SetConfig+0xbc>
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d00a      	beq.n	8003fa4 <UART_SetConfig+0xd0>
 8003f8e:	e013      	b.n	8003fb8 <UART_SetConfig+0xe4>
 8003f90:	231f      	movs	r3, #31
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	2200      	movs	r2, #0
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e021      	b.n	8003fde <UART_SetConfig+0x10a>
 8003f9a:	231f      	movs	r3, #31
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e01c      	b.n	8003fde <UART_SetConfig+0x10a>
 8003fa4:	231f      	movs	r3, #31
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	2204      	movs	r2, #4
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e017      	b.n	8003fde <UART_SetConfig+0x10a>
 8003fae:	231f      	movs	r3, #31
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e012      	b.n	8003fde <UART_SetConfig+0x10a>
 8003fb8:	231f      	movs	r3, #31
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	e00d      	b.n	8003fde <UART_SetConfig+0x10a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a7f      	ldr	r2, [pc, #508]	@ (80041c4 <UART_SetConfig+0x2f0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d104      	bne.n	8003fd6 <UART_SetConfig+0x102>
 8003fcc:	231f      	movs	r3, #31
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e003      	b.n	8003fde <UART_SetConfig+0x10a>
 8003fd6:	231f      	movs	r3, #31
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	2210      	movs	r2, #16
 8003fdc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d000      	beq.n	8003fec <UART_SetConfig+0x118>
 8003fea:	e06f      	b.n	80040cc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003fec:	231f      	movs	r3, #31
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d01f      	beq.n	8004036 <UART_SetConfig+0x162>
 8003ff6:	dc22      	bgt.n	800403e <UART_SetConfig+0x16a>
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d017      	beq.n	800402c <UART_SetConfig+0x158>
 8003ffc:	dc1f      	bgt.n	800403e <UART_SetConfig+0x16a>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <UART_SetConfig+0x134>
 8004002:	2b02      	cmp	r3, #2
 8004004:	d005      	beq.n	8004012 <UART_SetConfig+0x13e>
 8004006:	e01a      	b.n	800403e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe ffc6 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 800400c:	0003      	movs	r3, r0
 800400e:	61bb      	str	r3, [r7, #24]
        break;
 8004010:	e01c      	b.n	800404c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004012:	4b6b      	ldr	r3, [pc, #428]	@ (80041c0 <UART_SetConfig+0x2ec>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2207      	movs	r2, #7
 800401a:	4013      	ands	r3, r2
 800401c:	3301      	adds	r3, #1
 800401e:	0019      	movs	r1, r3
 8004020:	4869      	ldr	r0, [pc, #420]	@ (80041c8 <UART_SetConfig+0x2f4>)
 8004022:	f7fc f871 	bl	8000108 <__udivsi3>
 8004026:	0003      	movs	r3, r0
 8004028:	61bb      	str	r3, [r7, #24]
        break;
 800402a:	e00f      	b.n	800404c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402c:	f7fe ff46 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8004030:	0003      	movs	r3, r0
 8004032:	61bb      	str	r3, [r7, #24]
        break;
 8004034:	e00a      	b.n	800404c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	2380      	movs	r3, #128	@ 0x80
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	61bb      	str	r3, [r7, #24]
        break;
 800403c:	e006      	b.n	800404c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004042:	231e      	movs	r3, #30
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
        break;
 800404a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d100      	bne.n	8004054 <UART_SetConfig+0x180>
 8004052:	e097      	b.n	8004184 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004058:	4b5c      	ldr	r3, [pc, #368]	@ (80041cc <UART_SetConfig+0x2f8>)
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	5ad3      	ldrh	r3, [r2, r3]
 800405e:	0019      	movs	r1, r3
 8004060:	69b8      	ldr	r0, [r7, #24]
 8004062:	f7fc f851 	bl	8000108 <__udivsi3>
 8004066:	0003      	movs	r3, r0
 8004068:	005a      	lsls	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	18d2      	adds	r2, r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	0019      	movs	r1, r3
 8004078:	0010      	movs	r0, r2
 800407a:	f7fc f845 	bl	8000108 <__udivsi3>
 800407e:	0003      	movs	r3, r0
 8004080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	d91c      	bls.n	80040c2 <UART_SetConfig+0x1ee>
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	2380      	movs	r3, #128	@ 0x80
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	429a      	cmp	r2, r3
 8004090:	d217      	bcs.n	80040c2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	b29a      	uxth	r2, r3
 8004096:	200e      	movs	r0, #14
 8004098:	183b      	adds	r3, r7, r0
 800409a:	210f      	movs	r1, #15
 800409c:	438a      	bics	r2, r1
 800409e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2207      	movs	r2, #7
 80040a8:	4013      	ands	r3, r2
 80040aa:	b299      	uxth	r1, r3
 80040ac:	183b      	adds	r3, r7, r0
 80040ae:	183a      	adds	r2, r7, r0
 80040b0:	8812      	ldrh	r2, [r2, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	183a      	adds	r2, r7, r0
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	e060      	b.n	8004184 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80040c2:	231e      	movs	r3, #30
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e05b      	b.n	8004184 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040cc:	231f      	movs	r3, #31
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d01f      	beq.n	8004116 <UART_SetConfig+0x242>
 80040d6:	dc22      	bgt.n	800411e <UART_SetConfig+0x24a>
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d017      	beq.n	800410c <UART_SetConfig+0x238>
 80040dc:	dc1f      	bgt.n	800411e <UART_SetConfig+0x24a>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <UART_SetConfig+0x214>
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d005      	beq.n	80040f2 <UART_SetConfig+0x21e>
 80040e6:	e01a      	b.n	800411e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e8:	f7fe ff56 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 80040ec:	0003      	movs	r3, r0
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e01c      	b.n	800412c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80040f2:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <UART_SetConfig+0x2ec>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2207      	movs	r2, #7
 80040fa:	4013      	ands	r3, r2
 80040fc:	3301      	adds	r3, #1
 80040fe:	0019      	movs	r1, r3
 8004100:	4831      	ldr	r0, [pc, #196]	@ (80041c8 <UART_SetConfig+0x2f4>)
 8004102:	f7fc f801 	bl	8000108 <__udivsi3>
 8004106:	0003      	movs	r3, r0
 8004108:	61bb      	str	r3, [r7, #24]
        break;
 800410a:	e00f      	b.n	800412c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410c:	f7fe fed6 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8004110:	0003      	movs	r3, r0
 8004112:	61bb      	str	r3, [r7, #24]
        break;
 8004114:	e00a      	b.n	800412c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	2380      	movs	r3, #128	@ 0x80
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	61bb      	str	r3, [r7, #24]
        break;
 800411c:	e006      	b.n	800412c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004122:	231e      	movs	r3, #30
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
        break;
 800412a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d028      	beq.n	8004184 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004136:	4b25      	ldr	r3, [pc, #148]	@ (80041cc <UART_SetConfig+0x2f8>)
 8004138:	0052      	lsls	r2, r2, #1
 800413a:	5ad3      	ldrh	r3, [r2, r3]
 800413c:	0019      	movs	r1, r3
 800413e:	69b8      	ldr	r0, [r7, #24]
 8004140:	f7fb ffe2 	bl	8000108 <__udivsi3>
 8004144:	0003      	movs	r3, r0
 8004146:	001a      	movs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	18d2      	adds	r2, r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0019      	movs	r1, r3
 8004156:	0010      	movs	r0, r2
 8004158:	f7fb ffd6 	bl	8000108 <__udivsi3>
 800415c:	0003      	movs	r3, r0
 800415e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	d90a      	bls.n	800417c <UART_SetConfig+0x2a8>
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	2380      	movs	r3, #128	@ 0x80
 800416a:	025b      	lsls	r3, r3, #9
 800416c:	429a      	cmp	r2, r3
 800416e:	d205      	bcs.n	800417c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	b29a      	uxth	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	e003      	b.n	8004184 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800417c:	231e      	movs	r3, #30
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	226a      	movs	r2, #106	@ 0x6a
 8004188:	2101      	movs	r1, #1
 800418a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2268      	movs	r2, #104	@ 0x68
 8004190:	2101      	movs	r1, #1
 8004192:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80041a0:	231e      	movs	r3, #30
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	781b      	ldrb	r3, [r3, #0]
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b008      	add	sp, #32
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	cfff69f3 	.word	0xcfff69f3
 80041b4:	ffffcfff 	.word	0xffffcfff
 80041b8:	11fff4ff 	.word	0x11fff4ff
 80041bc:	40013800 	.word	0x40013800
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40004400 	.word	0x40004400
 80041c8:	02dc6c00 	.word	0x02dc6c00
 80041cc:	08004f3c 	.word	0x08004f3c

080041d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	2208      	movs	r2, #8
 80041de:	4013      	ands	r3, r2
 80041e0:	d00b      	beq.n	80041fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004314 <UART_AdvFeatureConfig+0x144>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	2201      	movs	r2, #1
 8004200:	4013      	ands	r3, r2
 8004202:	d00b      	beq.n	800421c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a43      	ldr	r2, [pc, #268]	@ (8004318 <UART_AdvFeatureConfig+0x148>)
 800420c:	4013      	ands	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	2202      	movs	r2, #2
 8004222:	4013      	ands	r3, r2
 8004224:	d00b      	beq.n	800423e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a3b      	ldr	r2, [pc, #236]	@ (800431c <UART_AdvFeatureConfig+0x14c>)
 800422e:	4013      	ands	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004242:	2204      	movs	r2, #4
 8004244:	4013      	ands	r3, r2
 8004246:	d00b      	beq.n	8004260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4a34      	ldr	r2, [pc, #208]	@ (8004320 <UART_AdvFeatureConfig+0x150>)
 8004250:	4013      	ands	r3, r2
 8004252:	0019      	movs	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	2210      	movs	r2, #16
 8004266:	4013      	ands	r3, r2
 8004268:	d00b      	beq.n	8004282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a2c      	ldr	r2, [pc, #176]	@ (8004324 <UART_AdvFeatureConfig+0x154>)
 8004272:	4013      	ands	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	2220      	movs	r2, #32
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4a25      	ldr	r2, [pc, #148]	@ (8004328 <UART_AdvFeatureConfig+0x158>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	2240      	movs	r2, #64	@ 0x40
 80042aa:	4013      	ands	r3, r2
 80042ac:	d01d      	beq.n	80042ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <UART_AdvFeatureConfig+0x15c>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	035b      	lsls	r3, r3, #13
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d10b      	bne.n	80042ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4a15      	ldr	r2, [pc, #84]	@ (8004330 <UART_AdvFeatureConfig+0x160>)
 80042da:	4013      	ands	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	2280      	movs	r2, #128	@ 0x80
 80042f0:	4013      	ands	r3, r2
 80042f2:	d00b      	beq.n	800430c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <UART_AdvFeatureConfig+0x164>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }
}
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}
 8004314:	ffff7fff 	.word	0xffff7fff
 8004318:	fffdffff 	.word	0xfffdffff
 800431c:	fffeffff 	.word	0xfffeffff
 8004320:	fffbffff 	.word	0xfffbffff
 8004324:	ffffefff 	.word	0xffffefff
 8004328:	ffffdfff 	.word	0xffffdfff
 800432c:	ffefffff 	.word	0xffefffff
 8004330:	ff9fffff 	.word	0xff9fffff
 8004334:	fff7ffff 	.word	0xfff7ffff

08004338 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b092      	sub	sp, #72	@ 0x48
 800433c:	af02      	add	r7, sp, #8
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2290      	movs	r2, #144	@ 0x90
 8004344:	2100      	movs	r1, #0
 8004346:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004348:	f7fd fcfe 	bl	8001d48 <HAL_GetTick>
 800434c:	0003      	movs	r3, r0
 800434e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2208      	movs	r2, #8
 8004358:	4013      	ands	r3, r2
 800435a:	2b08      	cmp	r3, #8
 800435c:	d12d      	bne.n	80043ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004360:	2280      	movs	r2, #128	@ 0x80
 8004362:	0391      	lsls	r1, r2, #14
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4a47      	ldr	r2, [pc, #284]	@ (8004484 <UART_CheckIdleState+0x14c>)
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	f000 f88e 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d022      	beq.n	80043ba <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800437c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800437e:	2301      	movs	r3, #1
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2180      	movs	r1, #128	@ 0x80
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2288      	movs	r2, #136	@ 0x88
 80043aa:	2120      	movs	r1, #32
 80043ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2284      	movs	r2, #132	@ 0x84
 80043b2:	2100      	movs	r1, #0
 80043b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e060      	b.n	800447c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2204      	movs	r2, #4
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d146      	bne.n	8004456 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ca:	2280      	movs	r2, #128	@ 0x80
 80043cc:	03d1      	lsls	r1, r2, #15
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <UART_CheckIdleState+0x14c>)
 80043d2:	9200      	str	r2, [sp, #0]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f000 f859 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 80043da:	1e03      	subs	r3, r0, #0
 80043dc:	d03b      	beq.n	8004456 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043de:	f3ef 8310 	mrs	r3, PRIMASK
 80043e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80043e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e8:	2301      	movs	r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f383 8810 	msr	PRIMASK, r3
}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4922      	ldr	r1, [pc, #136]	@ (8004488 <UART_CheckIdleState+0x150>)
 8004400:	400a      	ands	r2, r1
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f383 8810 	msr	PRIMASK, r3
}
 800440e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004410:	f3ef 8310 	mrs	r3, PRIMASK
 8004414:	61bb      	str	r3, [r7, #24]
  return(result);
 8004416:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004418:	633b      	str	r3, [r7, #48]	@ 0x30
 800441a:	2301      	movs	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f383 8810 	msr	PRIMASK, r3
}
 8004424:	46c0      	nop			@ (mov r8, r8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2101      	movs	r1, #1
 8004432:	438a      	bics	r2, r1
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f383 8810 	msr	PRIMASK, r3
}
 8004440:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	228c      	movs	r2, #140	@ 0x8c
 8004446:	2120      	movs	r1, #32
 8004448:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2284      	movs	r2, #132	@ 0x84
 800444e:	2100      	movs	r1, #0
 8004450:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e012      	b.n	800447c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2288      	movs	r2, #136	@ 0x88
 800445a:	2120      	movs	r1, #32
 800445c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	228c      	movs	r2, #140	@ 0x8c
 8004462:	2120      	movs	r1, #32
 8004464:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2284      	movs	r2, #132	@ 0x84
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b010      	add	sp, #64	@ 0x40
 8004482:	bd80      	pop	{r7, pc}
 8004484:	01ffffff 	.word	0x01ffffff
 8004488:	fffffedf 	.word	0xfffffedf

0800448c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	e051      	b.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3301      	adds	r3, #1
 80044a2:	d04e      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7fd fc50 	bl	8001d48 <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e051      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2204      	movs	r2, #4
 80044c6:	4013      	ands	r3, r2
 80044c8:	d03b      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb6>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b80      	cmp	r3, #128	@ 0x80
 80044ce:	d038      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb6>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	d035      	beq.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	2208      	movs	r2, #8
 80044de:	4013      	ands	r3, r2
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d111      	bne.n	8004508 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2208      	movs	r2, #8
 80044ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 f922 	bl	8004738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2290      	movs	r2, #144	@ 0x90
 80044f8:	2108      	movs	r1, #8
 80044fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2284      	movs	r2, #132	@ 0x84
 8004500:	2100      	movs	r1, #0
 8004502:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e02c      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	2380      	movs	r3, #128	@ 0x80
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	401a      	ands	r2, r3
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	429a      	cmp	r2, r3
 800451a:	d112      	bne.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	0018      	movs	r0, r3
 800452a:	f000 f905 	bl	8004738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2290      	movs	r2, #144	@ 0x90
 8004532:	2120      	movs	r1, #32
 8004534:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2284      	movs	r2, #132	@ 0x84
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e00f      	b.n	8004562 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	425a      	negs	r2, r3
 8004552:	4153      	adcs	r3, r2
 8004554:	b2db      	uxtb	r3, r3
 8004556:	001a      	movs	r2, r3
 8004558:	1dfb      	adds	r3, r7, #7
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d09e      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b090      	sub	sp, #64	@ 0x40
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	1dbb      	adds	r3, r7, #6
 8004578:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1dba      	adds	r2, r7, #6
 8004584:	215c      	movs	r1, #92	@ 0x5c
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2290      	movs	r2, #144	@ 0x90
 800458e:	2100      	movs	r1, #0
 8004590:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	228c      	movs	r2, #140	@ 0x8c
 8004596:	2122      	movs	r1, #34	@ 0x22
 8004598:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2280      	movs	r2, #128	@ 0x80
 800459e:	589b      	ldr	r3, [r3, r2]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02d      	beq.n	8004600 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2280      	movs	r2, #128	@ 0x80
 80045a8:	589b      	ldr	r3, [r3, r2]
 80045aa:	4a40      	ldr	r2, [pc, #256]	@ (80046ac <UART_Start_Receive_DMA+0x140>)
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2280      	movs	r2, #128	@ 0x80
 80045b2:	589b      	ldr	r3, [r3, r2]
 80045b4:	4a3e      	ldr	r2, [pc, #248]	@ (80046b0 <UART_Start_Receive_DMA+0x144>)
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2280      	movs	r2, #128	@ 0x80
 80045bc:	589b      	ldr	r3, [r3, r2]
 80045be:	4a3d      	ldr	r2, [pc, #244]	@ (80046b4 <UART_Start_Receive_DMA+0x148>)
 80045c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2280      	movs	r2, #128	@ 0x80
 80045c6:	589b      	ldr	r3, [r3, r2]
 80045c8:	2200      	movs	r2, #0
 80045ca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2280      	movs	r2, #128	@ 0x80
 80045d0:	5898      	ldr	r0, [r3, r2]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3324      	adds	r3, #36	@ 0x24
 80045d8:	0019      	movs	r1, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	001a      	movs	r2, r3
 80045e0:	1dbb      	adds	r3, r7, #6
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	f7fd fd46 	bl	8002074 <HAL_DMA_Start_IT>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d009      	beq.n	8004600 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2290      	movs	r2, #144	@ 0x90
 80045f0:	2110      	movs	r1, #16
 80045f2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	228c      	movs	r2, #140	@ 0x8c
 80045f8:	2120      	movs	r1, #32
 80045fa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e050      	b.n	80046a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d019      	beq.n	800463c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004608:	f3ef 8310 	mrs	r3, PRIMASK
 800460c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004612:	2301      	movs	r3, #1
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			@ (mov r8, r8)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2180      	movs	r1, #128	@ 0x80
 800462a:	0049      	lsls	r1, r1, #1
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800463c:	f3ef 8310 	mrs	r3, PRIMASK
 8004640:	613b      	str	r3, [r7, #16]
  return(result);
 8004642:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004646:	2301      	movs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			@ (mov r8, r8)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2101      	movs	r1, #1
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800466e:	f3ef 8310 	mrs	r3, PRIMASK
 8004672:	61fb      	str	r3, [r7, #28]
  return(result);
 8004674:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	637b      	str	r3, [r7, #52]	@ 0x34
 8004678:	2301      	movs	r3, #1
 800467a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2140      	movs	r1, #64	@ 0x40
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b010      	add	sp, #64	@ 0x40
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	080048bd 	.word	0x080048bd
 80046b0:	080049ed 	.word	0x080049ed
 80046b4:	08004a2f 	.word	0x08004a2f

080046b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	@ 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046c0:	f3ef 8310 	mrs	r3, PRIMASK
 80046c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ca:	2301      	movs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f383 8810 	msr	PRIMASK, r3
}
 80046d4:	46c0      	nop			@ (mov r8, r8)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	21c0      	movs	r1, #192	@ 0xc0
 80046e2:	438a      	bics	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	617b      	str	r3, [r7, #20]
  return(result);
 80046f8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80046fa:	623b      	str	r3, [r7, #32]
 80046fc:	2301      	movs	r3, #1
 80046fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f383 8810 	msr	PRIMASK, r3
}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4908      	ldr	r1, [pc, #32]	@ (8004734 <UART_EndTxTransfer+0x7c>)
 8004714:	400a      	ands	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2288      	movs	r2, #136	@ 0x88
 8004728:	2120      	movs	r1, #32
 800472a:	5099      	str	r1, [r3, r2]
}
 800472c:	46c0      	nop			@ (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	b00a      	add	sp, #40	@ 0x28
 8004732:	bd80      	pop	{r7, pc}
 8004734:	ff7fffff 	.word	0xff7fffff

08004738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	@ 0x38
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004740:	f3ef 8310 	mrs	r3, PRIMASK
 8004744:	617b      	str	r3, [r7, #20]
  return(result);
 8004746:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
 800474a:	2301      	movs	r3, #1
 800474c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			@ (mov r8, r8)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4926      	ldr	r1, [pc, #152]	@ (80047fc <UART_EndRxTransfer+0xc4>)
 8004762:	400a      	ands	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004772:	f3ef 8310 	mrs	r3, PRIMASK
 8004776:	623b      	str	r3, [r7, #32]
  return(result);
 8004778:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800477a:	633b      	str	r3, [r7, #48]	@ 0x30
 800477c:	2301      	movs	r3, #1
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	491b      	ldr	r1, [pc, #108]	@ (8004800 <UART_EndRxTransfer+0xc8>)
 8004794:	400a      	ands	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	f383 8810 	msr	PRIMASK, r3
}
 80047a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d118      	bne.n	80047de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047ac:	f3ef 8310 	mrs	r3, PRIMASK
 80047b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80047b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b6:	2301      	movs	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f383 8810 	msr	PRIMASK, r3
}
 80047c0:	46c0      	nop			@ (mov r8, r8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2110      	movs	r1, #16
 80047ce:	438a      	bics	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f383 8810 	msr	PRIMASK, r3
}
 80047dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	228c      	movs	r2, #140	@ 0x8c
 80047e2:	2120      	movs	r1, #32
 80047e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80047f2:	46c0      	nop			@ (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b00e      	add	sp, #56	@ 0x38
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	fffffedf 	.word	0xfffffedf
 8004800:	effffffe 	.word	0xeffffffe

08004804 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08c      	sub	sp, #48	@ 0x30
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2220      	movs	r2, #32
 800481a:	4013      	ands	r3, r2
 800481c:	d135      	bne.n	800488a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800481e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004820:	2256      	movs	r2, #86	@ 0x56
 8004822:	2100      	movs	r1, #0
 8004824:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004826:	f3ef 8310 	mrs	r3, PRIMASK
 800482a:	60fb      	str	r3, [r7, #12]
  return(result);
 800482c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004830:	2301      	movs	r3, #1
 8004832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2180      	movs	r1, #128	@ 0x80
 8004848:	438a      	bics	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f383 8810 	msr	PRIMASK, r3
}
 8004856:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004858:	f3ef 8310 	mrs	r3, PRIMASK
 800485c:	61bb      	str	r3, [r7, #24]
  return(result);
 800485e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
 8004862:	2301      	movs	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			@ (mov r8, r8)
 800486e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2140      	movs	r1, #64	@ 0x40
 800487a:	430a      	orrs	r2, r1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f383 8810 	msr	PRIMASK, r3
}
 8004888:	e004      	b.n	8004894 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800488a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff faf5 	bl	8003e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b00c      	add	sp, #48	@ 0x30
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff faed 	bl	8003e8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b004      	add	sp, #16
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b094      	sub	sp, #80	@ 0x50
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2220      	movs	r2, #32
 80048d2:	4013      	ands	r3, r2
 80048d4:	d16f      	bne.n	80049b6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80048d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d8:	225e      	movs	r2, #94	@ 0x5e
 80048da:	2100      	movs	r1, #0
 80048dc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048de:	f3ef 8310 	mrs	r3, PRIMASK
 80048e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80048e4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e8:	2301      	movs	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	493a      	ldr	r1, [pc, #232]	@ (80049e8 <UART_DMAReceiveCplt+0x12c>)
 8004900:	400a      	ands	r2, r1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004906:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	647b      	str	r3, [r7, #68]	@ 0x44
 800491a:	2301      	movs	r3, #1
 800491c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2101      	movs	r1, #1
 8004932:	438a      	bics	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
 8004936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494a:	643b      	str	r3, [r7, #64]	@ 0x40
 800494c:	2301      	movs	r3, #1
 800494e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2140      	movs	r1, #64	@ 0x40
 8004964:	438a      	bics	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004976:	228c      	movs	r2, #140	@ 0x8c
 8004978:	2120      	movs	r1, #32
 800497a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d118      	bne.n	80049b6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004984:	f3ef 8310 	mrs	r3, PRIMASK
 8004988:	60fb      	str	r3, [r7, #12]
  return(result);
 800498a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800498e:	2301      	movs	r3, #1
 8004990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f383 8810 	msr	PRIMASK, r3
}
 8004998:	46c0      	nop			@ (mov r8, r8)
 800499a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2110      	movs	r1, #16
 80049a6:	438a      	bics	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f383 8810 	msr	PRIMASK, r3
}
 80049b4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b8:	2200      	movs	r2, #0
 80049ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d108      	bne.n	80049d6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c6:	225c      	movs	r2, #92	@ 0x5c
 80049c8:	5a9a      	ldrh	r2, [r3, r2]
 80049ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff fa74 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049d4:	e003      	b.n	80049de <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80049d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d8:	0018      	movs	r0, r3
 80049da:	f7fc fbcd 	bl	8001178 <HAL_UART_RxCpltCallback>
}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b014      	add	sp, #80	@ 0x50
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	fffffeff 	.word	0xfffffeff

080049ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10a      	bne.n	8004a1e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	225c      	movs	r2, #92	@ 0x5c
 8004a0c:	5a9b      	ldrh	r3, [r3, r2]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	0011      	movs	r1, r2
 8004a16:	0018      	movs	r0, r3
 8004a18:	f7ff fa50 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a1c:	e003      	b.n	8004a26 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7ff fa3b 	bl	8003e9c <HAL_UART_RxHalfCpltCallback>
}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b004      	add	sp, #16
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2288      	movs	r2, #136	@ 0x88
 8004a40:	589b      	ldr	r3, [r3, r2]
 8004a42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	228c      	movs	r2, #140	@ 0x8c
 8004a48:	589b      	ldr	r3, [r3, r2]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2280      	movs	r2, #128	@ 0x80
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b80      	cmp	r3, #128	@ 0x80
 8004a58:	d10a      	bne.n	8004a70 <UART_DMAError+0x42>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b21      	cmp	r3, #33	@ 0x21
 8004a5e:	d107      	bne.n	8004a70 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2256      	movs	r2, #86	@ 0x56
 8004a64:	2100      	movs	r1, #0
 8004a66:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7ff fe24 	bl	80046b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2240      	movs	r2, #64	@ 0x40
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d10a      	bne.n	8004a94 <UART_DMAError+0x66>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b22      	cmp	r3, #34	@ 0x22
 8004a82:	d107      	bne.n	8004a94 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	225e      	movs	r2, #94	@ 0x5e
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff fe52 	bl	8004738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2290      	movs	r2, #144	@ 0x90
 8004a98:	589b      	ldr	r3, [r3, r2]
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2190      	movs	r1, #144	@ 0x90
 8004aa2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f7ff fa00 	bl	8003eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aac:	46c0      	nop			@ (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b006      	add	sp, #24
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	225e      	movs	r2, #94	@ 0x5e
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2256      	movs	r2, #86	@ 0x56
 8004ace:	2100      	movs	r1, #0
 8004ad0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7ff f9e9 	bl	8003eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b004      	add	sp, #16
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004aea:	f3ef 8310 	mrs	r3, PRIMASK
 8004aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004af0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	2301      	movs	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f383 8810 	msr	PRIMASK, r3
}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2140      	movs	r1, #64	@ 0x40
 8004b0c:	438a      	bics	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f383 8810 	msr	PRIMASK, r3
}
 8004b1a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2288      	movs	r2, #136	@ 0x88
 8004b20:	2120      	movs	r1, #32
 8004b22:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff f9a5 	bl	8003e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b32:	46c0      	nop			@ (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b006      	add	sp, #24
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b002      	add	sp, #8
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b002      	add	sp, #8
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b002      	add	sp, #8
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2284      	movs	r2, #132	@ 0x84
 8004b78:	5c9b      	ldrb	r3, [r3, r2]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e027      	b.n	8004bd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2284      	movs	r2, #132	@ 0x84
 8004b86:	2101      	movs	r1, #1
 8004b88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2288      	movs	r2, #136	@ 0x88
 8004b8e:	2124      	movs	r1, #36	@ 0x24
 8004b90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	438a      	bics	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a0b      	ldr	r2, [pc, #44]	@ (8004bdc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2288      	movs	r2, #136	@ 0x88
 8004bc4:	2120      	movs	r1, #32
 8004bc6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2284      	movs	r2, #132	@ 0x84
 8004bcc:	2100      	movs	r1, #0
 8004bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b004      	add	sp, #16
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	dfffffff 	.word	0xdfffffff

08004be0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2284      	movs	r2, #132	@ 0x84
 8004bee:	5c9b      	ldrb	r3, [r3, r2]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e02e      	b.n	8004c56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2284      	movs	r2, #132	@ 0x84
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2288      	movs	r2, #136	@ 0x88
 8004c04:	2124      	movs	r1, #36	@ 0x24
 8004c06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	438a      	bics	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	08d9      	lsrs	r1, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 f854 	bl	8004ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2288      	movs	r2, #136	@ 0x88
 8004c48:	2120      	movs	r1, #32
 8004c4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2284      	movs	r2, #132	@ 0x84
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b004      	add	sp, #16
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2284      	movs	r2, #132	@ 0x84
 8004c6e:	5c9b      	ldrb	r3, [r3, r2]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e02f      	b.n	8004cd8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2284      	movs	r2, #132	@ 0x84
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2288      	movs	r2, #136	@ 0x88
 8004c84:	2124      	movs	r1, #36	@ 0x24
 8004c86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8004ce0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 f813 	bl	8004ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2288      	movs	r2, #136	@ 0x88
 8004cca:	2120      	movs	r1, #32
 8004ccc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2284      	movs	r2, #132	@ 0x84
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b004      	add	sp, #16
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	f1ffffff 	.word	0xf1ffffff

08004ce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	226a      	movs	r2, #106	@ 0x6a
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2268      	movs	r2, #104	@ 0x68
 8004d00:	2101      	movs	r1, #1
 8004d02:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d04:	e043      	b.n	8004d8e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d06:	260f      	movs	r6, #15
 8004d08:	19bb      	adds	r3, r7, r6
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d0e:	200e      	movs	r0, #14
 8004d10:	183b      	adds	r3, r7, r0
 8004d12:	2208      	movs	r2, #8
 8004d14:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	0e5b      	lsrs	r3, r3, #25
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	240d      	movs	r4, #13
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	2107      	movs	r1, #7
 8004d26:	400a      	ands	r2, r1
 8004d28:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	0f5b      	lsrs	r3, r3, #29
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	250c      	movs	r5, #12
 8004d36:	197b      	adds	r3, r7, r5
 8004d38:	2107      	movs	r1, #7
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d3e:	183b      	adds	r3, r7, r0
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	197a      	adds	r2, r7, r5
 8004d44:	7812      	ldrb	r2, [r2, #0]
 8004d46:	4914      	ldr	r1, [pc, #80]	@ (8004d98 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d48:	5c8a      	ldrb	r2, [r1, r2]
 8004d4a:	435a      	muls	r2, r3
 8004d4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d4e:	197b      	adds	r3, r7, r5
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <UARTEx_SetNbDataToProcess+0xb8>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d56:	0019      	movs	r1, r3
 8004d58:	f7fb fa60 	bl	800021c <__divsi3>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	b299      	uxth	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	226a      	movs	r2, #106	@ 0x6a
 8004d64:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d66:	19bb      	adds	r3, r7, r6
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	193a      	adds	r2, r7, r4
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	490a      	ldr	r1, [pc, #40]	@ (8004d98 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d70:	5c8a      	ldrb	r2, [r1, r2]
 8004d72:	435a      	muls	r2, r3
 8004d74:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d76:	193b      	adds	r3, r7, r4
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <UARTEx_SetNbDataToProcess+0xb8>)
 8004d7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d7e:	0019      	movs	r1, r3
 8004d80:	f7fb fa4c 	bl	800021c <__divsi3>
 8004d84:	0003      	movs	r3, r0
 8004d86:	b299      	uxth	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2268      	movs	r2, #104	@ 0x68
 8004d8c:	5299      	strh	r1, [r3, r2]
}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b005      	add	sp, #20
 8004d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	08004f54 	.word	0x08004f54
 8004d9c:	08004f5c 	.word	0x08004f5c

08004da0 <__itoa>:
 8004da0:	1e93      	subs	r3, r2, #2
 8004da2:	b510      	push	{r4, lr}
 8004da4:	000c      	movs	r4, r1
 8004da6:	2b22      	cmp	r3, #34	@ 0x22
 8004da8:	d904      	bls.n	8004db4 <__itoa+0x14>
 8004daa:	2300      	movs	r3, #0
 8004dac:	001c      	movs	r4, r3
 8004dae:	700b      	strb	r3, [r1, #0]
 8004db0:	0020      	movs	r0, r4
 8004db2:	bd10      	pop	{r4, pc}
 8004db4:	2a0a      	cmp	r2, #10
 8004db6:	d109      	bne.n	8004dcc <__itoa+0x2c>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	da07      	bge.n	8004dcc <__itoa+0x2c>
 8004dbc:	232d      	movs	r3, #45	@ 0x2d
 8004dbe:	700b      	strb	r3, [r1, #0]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4240      	negs	r0, r0
 8004dc4:	1861      	adds	r1, r4, r1
 8004dc6:	f000 f807 	bl	8004dd8 <__utoa>
 8004dca:	e7f1      	b.n	8004db0 <__itoa+0x10>
 8004dcc:	2100      	movs	r1, #0
 8004dce:	e7f9      	b.n	8004dc4 <__itoa+0x24>

08004dd0 <itoa>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	f7ff ffe5 	bl	8004da0 <__itoa>
 8004dd6:	bd10      	pop	{r4, pc}

08004dd8 <__utoa>:
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	000c      	movs	r4, r1
 8004ddc:	0016      	movs	r6, r2
 8004dde:	b08d      	sub	sp, #52	@ 0x34
 8004de0:	2225      	movs	r2, #37	@ 0x25
 8004de2:	0007      	movs	r7, r0
 8004de4:	4915      	ldr	r1, [pc, #84]	@ (8004e3c <__utoa+0x64>)
 8004de6:	a802      	add	r0, sp, #8
 8004de8:	f000 f856 	bl	8004e98 <memcpy>
 8004dec:	1e62      	subs	r2, r4, #1
 8004dee:	1eb3      	subs	r3, r6, #2
 8004df0:	2500      	movs	r5, #0
 8004df2:	9201      	str	r2, [sp, #4]
 8004df4:	2b22      	cmp	r3, #34	@ 0x22
 8004df6:	d904      	bls.n	8004e02 <__utoa+0x2a>
 8004df8:	7025      	strb	r5, [r4, #0]
 8004dfa:	002c      	movs	r4, r5
 8004dfc:	0020      	movs	r0, r4
 8004dfe:	b00d      	add	sp, #52	@ 0x34
 8004e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e02:	0038      	movs	r0, r7
 8004e04:	0031      	movs	r1, r6
 8004e06:	f7fb fa05 	bl	8000214 <__aeabi_uidivmod>
 8004e0a:	000b      	movs	r3, r1
 8004e0c:	aa02      	add	r2, sp, #8
 8004e0e:	5cd3      	ldrb	r3, [r2, r3]
 8004e10:	9a01      	ldr	r2, [sp, #4]
 8004e12:	0029      	movs	r1, r5
 8004e14:	3501      	adds	r5, #1
 8004e16:	5553      	strb	r3, [r2, r5]
 8004e18:	003b      	movs	r3, r7
 8004e1a:	0007      	movs	r7, r0
 8004e1c:	429e      	cmp	r6, r3
 8004e1e:	d9f0      	bls.n	8004e02 <__utoa+0x2a>
 8004e20:	2300      	movs	r3, #0
 8004e22:	0022      	movs	r2, r4
 8004e24:	5563      	strb	r3, [r4, r5]
 8004e26:	000b      	movs	r3, r1
 8004e28:	1ac8      	subs	r0, r1, r3
 8004e2a:	4283      	cmp	r3, r0
 8004e2c:	dde6      	ble.n	8004dfc <__utoa+0x24>
 8004e2e:	7810      	ldrb	r0, [r2, #0]
 8004e30:	5ce5      	ldrb	r5, [r4, r3]
 8004e32:	7015      	strb	r5, [r2, #0]
 8004e34:	54e0      	strb	r0, [r4, r3]
 8004e36:	3201      	adds	r2, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	e7f5      	b.n	8004e28 <__utoa+0x50>
 8004e3c:	08004f64 	.word	0x08004f64

08004e40 <memset>:
 8004e40:	0003      	movs	r3, r0
 8004e42:	1882      	adds	r2, r0, r2
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	7019      	strb	r1, [r3, #0]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	2600      	movs	r6, #0
 8004e54:	4c0c      	ldr	r4, [pc, #48]	@ (8004e88 <__libc_init_array+0x38>)
 8004e56:	4d0d      	ldr	r5, [pc, #52]	@ (8004e8c <__libc_init_array+0x3c>)
 8004e58:	1b64      	subs	r4, r4, r5
 8004e5a:	10a4      	asrs	r4, r4, #2
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	2600      	movs	r6, #0
 8004e62:	f000 f823 	bl	8004eac <_init>
 8004e66:	4c0a      	ldr	r4, [pc, #40]	@ (8004e90 <__libc_init_array+0x40>)
 8004e68:	4d0a      	ldr	r5, [pc, #40]	@ (8004e94 <__libc_init_array+0x44>)
 8004e6a:	1b64      	subs	r4, r4, r5
 8004e6c:	10a4      	asrs	r4, r4, #2
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	00b3      	lsls	r3, r6, #2
 8004e76:	58eb      	ldr	r3, [r5, r3]
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	00b3      	lsls	r3, r6, #2
 8004e80:	58eb      	ldr	r3, [r5, r3]
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	08004f94 	.word	0x08004f94
 8004e8c:	08004f94 	.word	0x08004f94
 8004e90:	08004f98 	.word	0x08004f98
 8004e94:	08004f94 	.word	0x08004f94

08004e98 <memcpy>:
 8004e98:	2300      	movs	r3, #0
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d100      	bne.n	8004ea2 <memcpy+0xa>
 8004ea0:	bd10      	pop	{r4, pc}
 8004ea2:	5ccc      	ldrb	r4, [r1, r3]
 8004ea4:	54c4      	strb	r4, [r0, r3]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	e7f8      	b.n	8004e9c <memcpy+0x4>
	...

08004eac <_init>:
 8004eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb2:	bc08      	pop	{r3}
 8004eb4:	469e      	mov	lr, r3
 8004eb6:	4770      	bx	lr

08004eb8 <_fini>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ebe:	bc08      	pop	{r3}
 8004ec0:	469e      	mov	lr, r3
 8004ec2:	4770      	bx	lr
